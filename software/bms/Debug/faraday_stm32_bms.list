
faraday_stm32_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800ccb8  0800ccb8  0000dcb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d120  0800d120  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d120  0800d120  0000e120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d128  0800d128  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d128  0800d128  0000e128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d12c  0800d12c  0000e12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d130  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200001d4  0800d304  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800d304  0000f5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001686b  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003590  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00028ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001102  00000000  00000000  0002a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157f8  00000000  00000000  0002b6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afcf  00000000  00000000  00040ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b3cd  00000000  00000000  0005bea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d726e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000602c  00000000  00000000  000d72b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dd2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cc9c 	.word	0x0800cc9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800cc9c 	.word	0x0800cc9c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9cf 	bl	80017e0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f90f 	bl	8001670 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9c1 	bl	80017e0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9b7 	bl	80017e0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f939 	bl	80016f8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f92f 	bl	80016f8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f9c5 	bl	8000840 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f945 	bl	8000750 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f9b7 	bl	8000840 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f9ad 	bl	8000840 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f953 	bl	80007a0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f949 	bl	80007a0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 f972 	bl	80028c0 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 f96d 	bl	80028c0 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__eqsf2>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	0042      	lsls	r2, r0, #1
 8000754:	024e      	lsls	r6, r1, #9
 8000756:	004c      	lsls	r4, r1, #1
 8000758:	0245      	lsls	r5, r0, #9
 800075a:	0a6d      	lsrs	r5, r5, #9
 800075c:	0e12      	lsrs	r2, r2, #24
 800075e:	0fc3      	lsrs	r3, r0, #31
 8000760:	0a76      	lsrs	r6, r6, #9
 8000762:	0e24      	lsrs	r4, r4, #24
 8000764:	0fc9      	lsrs	r1, r1, #31
 8000766:	2aff      	cmp	r2, #255	@ 0xff
 8000768:	d010      	beq.n	800078c <__eqsf2+0x3c>
 800076a:	2cff      	cmp	r4, #255	@ 0xff
 800076c:	d00c      	beq.n	8000788 <__eqsf2+0x38>
 800076e:	2001      	movs	r0, #1
 8000770:	42a2      	cmp	r2, r4
 8000772:	d10a      	bne.n	800078a <__eqsf2+0x3a>
 8000774:	42b5      	cmp	r5, r6
 8000776:	d108      	bne.n	800078a <__eqsf2+0x3a>
 8000778:	428b      	cmp	r3, r1
 800077a:	d00f      	beq.n	800079c <__eqsf2+0x4c>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d104      	bne.n	800078a <__eqsf2+0x3a>
 8000780:	0028      	movs	r0, r5
 8000782:	1e43      	subs	r3, r0, #1
 8000784:	4198      	sbcs	r0, r3
 8000786:	e000      	b.n	800078a <__eqsf2+0x3a>
 8000788:	2001      	movs	r0, #1
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	2001      	movs	r0, #1
 800078e:	2cff      	cmp	r4, #255	@ 0xff
 8000790:	d1fb      	bne.n	800078a <__eqsf2+0x3a>
 8000792:	4335      	orrs	r5, r6
 8000794:	d1f9      	bne.n	800078a <__eqsf2+0x3a>
 8000796:	404b      	eors	r3, r1
 8000798:	0018      	movs	r0, r3
 800079a:	e7f6      	b.n	800078a <__eqsf2+0x3a>
 800079c:	2000      	movs	r0, #0
 800079e:	e7f4      	b.n	800078a <__eqsf2+0x3a>

080007a0 <__gesf2>:
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	0042      	lsls	r2, r0, #1
 80007a4:	0244      	lsls	r4, r0, #9
 80007a6:	024d      	lsls	r5, r1, #9
 80007a8:	0fc3      	lsrs	r3, r0, #31
 80007aa:	0048      	lsls	r0, r1, #1
 80007ac:	0a64      	lsrs	r4, r4, #9
 80007ae:	0e12      	lsrs	r2, r2, #24
 80007b0:	0a6d      	lsrs	r5, r5, #9
 80007b2:	0e00      	lsrs	r0, r0, #24
 80007b4:	0fc9      	lsrs	r1, r1, #31
 80007b6:	2aff      	cmp	r2, #255	@ 0xff
 80007b8:	d019      	beq.n	80007ee <__gesf2+0x4e>
 80007ba:	28ff      	cmp	r0, #255	@ 0xff
 80007bc:	d00b      	beq.n	80007d6 <__gesf2+0x36>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d11e      	bne.n	8000800 <__gesf2+0x60>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d10b      	bne.n	80007de <__gesf2+0x3e>
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d027      	beq.n	800081a <__gesf2+0x7a>
 80007ca:	2c00      	cmp	r4, #0
 80007cc:	d134      	bne.n	8000838 <__gesf2+0x98>
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d02f      	beq.n	8000832 <__gesf2+0x92>
 80007d2:	0008      	movs	r0, r1
 80007d4:	bd30      	pop	{r4, r5, pc}
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d128      	bne.n	800082c <__gesf2+0x8c>
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d101      	bne.n	80007e2 <__gesf2+0x42>
 80007de:	2c00      	cmp	r4, #0
 80007e0:	d0f5      	beq.n	80007ce <__gesf2+0x2e>
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d107      	bne.n	80007f6 <__gesf2+0x56>
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d023      	beq.n	8000832 <__gesf2+0x92>
 80007ea:	0018      	movs	r0, r3
 80007ec:	e7f2      	b.n	80007d4 <__gesf2+0x34>
 80007ee:	2c00      	cmp	r4, #0
 80007f0:	d11c      	bne.n	800082c <__gesf2+0x8c>
 80007f2:	28ff      	cmp	r0, #255	@ 0xff
 80007f4:	d014      	beq.n	8000820 <__gesf2+0x80>
 80007f6:	1e58      	subs	r0, r3, #1
 80007f8:	2302      	movs	r3, #2
 80007fa:	4018      	ands	r0, r3
 80007fc:	3801      	subs	r0, #1
 80007fe:	e7e9      	b.n	80007d4 <__gesf2+0x34>
 8000800:	2800      	cmp	r0, #0
 8000802:	d0f8      	beq.n	80007f6 <__gesf2+0x56>
 8000804:	428b      	cmp	r3, r1
 8000806:	d1f6      	bne.n	80007f6 <__gesf2+0x56>
 8000808:	4282      	cmp	r2, r0
 800080a:	dcf4      	bgt.n	80007f6 <__gesf2+0x56>
 800080c:	dbeb      	blt.n	80007e6 <__gesf2+0x46>
 800080e:	42ac      	cmp	r4, r5
 8000810:	d8f1      	bhi.n	80007f6 <__gesf2+0x56>
 8000812:	2000      	movs	r0, #0
 8000814:	42ac      	cmp	r4, r5
 8000816:	d2dd      	bcs.n	80007d4 <__gesf2+0x34>
 8000818:	e7e5      	b.n	80007e6 <__gesf2+0x46>
 800081a:	2c00      	cmp	r4, #0
 800081c:	d0da      	beq.n	80007d4 <__gesf2+0x34>
 800081e:	e7ea      	b.n	80007f6 <__gesf2+0x56>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d103      	bne.n	800082c <__gesf2+0x8c>
 8000824:	428b      	cmp	r3, r1
 8000826:	d1e6      	bne.n	80007f6 <__gesf2+0x56>
 8000828:	2000      	movs	r0, #0
 800082a:	e7d3      	b.n	80007d4 <__gesf2+0x34>
 800082c:	2002      	movs	r0, #2
 800082e:	4240      	negs	r0, r0
 8000830:	e7d0      	b.n	80007d4 <__gesf2+0x34>
 8000832:	2001      	movs	r0, #1
 8000834:	4240      	negs	r0, r0
 8000836:	e7cd      	b.n	80007d4 <__gesf2+0x34>
 8000838:	428b      	cmp	r3, r1
 800083a:	d0e8      	beq.n	800080e <__gesf2+0x6e>
 800083c:	e7db      	b.n	80007f6 <__gesf2+0x56>
 800083e:	46c0      	nop			@ (mov r8, r8)

08000840 <__lesf2>:
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	0042      	lsls	r2, r0, #1
 8000844:	0244      	lsls	r4, r0, #9
 8000846:	024d      	lsls	r5, r1, #9
 8000848:	0fc3      	lsrs	r3, r0, #31
 800084a:	0048      	lsls	r0, r1, #1
 800084c:	0a64      	lsrs	r4, r4, #9
 800084e:	0e12      	lsrs	r2, r2, #24
 8000850:	0a6d      	lsrs	r5, r5, #9
 8000852:	0e00      	lsrs	r0, r0, #24
 8000854:	0fc9      	lsrs	r1, r1, #31
 8000856:	2aff      	cmp	r2, #255	@ 0xff
 8000858:	d01a      	beq.n	8000890 <__lesf2+0x50>
 800085a:	28ff      	cmp	r0, #255	@ 0xff
 800085c:	d00e      	beq.n	800087c <__lesf2+0x3c>
 800085e:	2a00      	cmp	r2, #0
 8000860:	d11e      	bne.n	80008a0 <__lesf2+0x60>
 8000862:	2800      	cmp	r0, #0
 8000864:	d10e      	bne.n	8000884 <__lesf2+0x44>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d02a      	beq.n	80008c0 <__lesf2+0x80>
 800086a:	2c00      	cmp	r4, #0
 800086c:	d00c      	beq.n	8000888 <__lesf2+0x48>
 800086e:	428b      	cmp	r3, r1
 8000870:	d01d      	beq.n	80008ae <__lesf2+0x6e>
 8000872:	1e58      	subs	r0, r3, #1
 8000874:	2302      	movs	r3, #2
 8000876:	4018      	ands	r0, r3
 8000878:	3801      	subs	r0, #1
 800087a:	e010      	b.n	800089e <__lesf2+0x5e>
 800087c:	2d00      	cmp	r5, #0
 800087e:	d10d      	bne.n	800089c <__lesf2+0x5c>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d120      	bne.n	80008c6 <__lesf2+0x86>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d11e      	bne.n	80008c6 <__lesf2+0x86>
 8000888:	2900      	cmp	r1, #0
 800088a:	d023      	beq.n	80008d4 <__lesf2+0x94>
 800088c:	0008      	movs	r0, r1
 800088e:	e006      	b.n	800089e <__lesf2+0x5e>
 8000890:	2c00      	cmp	r4, #0
 8000892:	d103      	bne.n	800089c <__lesf2+0x5c>
 8000894:	28ff      	cmp	r0, #255	@ 0xff
 8000896:	d1ec      	bne.n	8000872 <__lesf2+0x32>
 8000898:	2d00      	cmp	r5, #0
 800089a:	d017      	beq.n	80008cc <__lesf2+0x8c>
 800089c:	2002      	movs	r0, #2
 800089e:	bd30      	pop	{r4, r5, pc}
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d0e6      	beq.n	8000872 <__lesf2+0x32>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	d1e4      	bne.n	8000872 <__lesf2+0x32>
 80008a8:	4282      	cmp	r2, r0
 80008aa:	dce2      	bgt.n	8000872 <__lesf2+0x32>
 80008ac:	db04      	blt.n	80008b8 <__lesf2+0x78>
 80008ae:	42ac      	cmp	r4, r5
 80008b0:	d8df      	bhi.n	8000872 <__lesf2+0x32>
 80008b2:	2000      	movs	r0, #0
 80008b4:	42ac      	cmp	r4, r5
 80008b6:	d2f2      	bcs.n	800089e <__lesf2+0x5e>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00b      	beq.n	80008d4 <__lesf2+0x94>
 80008bc:	0018      	movs	r0, r3
 80008be:	e7ee      	b.n	800089e <__lesf2+0x5e>
 80008c0:	2c00      	cmp	r4, #0
 80008c2:	d0ec      	beq.n	800089e <__lesf2+0x5e>
 80008c4:	e7d5      	b.n	8000872 <__lesf2+0x32>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d1d3      	bne.n	8000872 <__lesf2+0x32>
 80008ca:	e7f5      	b.n	80008b8 <__lesf2+0x78>
 80008cc:	2000      	movs	r0, #0
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d0e5      	beq.n	800089e <__lesf2+0x5e>
 80008d2:	e7ce      	b.n	8000872 <__lesf2+0x32>
 80008d4:	2001      	movs	r0, #1
 80008d6:	4240      	negs	r0, r0
 80008d8:	e7e1      	b.n	800089e <__lesf2+0x5e>
 80008da:	46c0      	nop			@ (mov r8, r8)

080008dc <__aeabi_i2f>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	2800      	cmp	r0, #0
 80008e0:	d013      	beq.n	800090a <__aeabi_i2f+0x2e>
 80008e2:	17c3      	asrs	r3, r0, #31
 80008e4:	18c5      	adds	r5, r0, r3
 80008e6:	405d      	eors	r5, r3
 80008e8:	0fc4      	lsrs	r4, r0, #31
 80008ea:	0028      	movs	r0, r5
 80008ec:	f001 ffca 	bl	8002884 <__clzsi2>
 80008f0:	239e      	movs	r3, #158	@ 0x9e
 80008f2:	0001      	movs	r1, r0
 80008f4:	1a1b      	subs	r3, r3, r0
 80008f6:	2b96      	cmp	r3, #150	@ 0x96
 80008f8:	dc0f      	bgt.n	800091a <__aeabi_i2f+0x3e>
 80008fa:	2808      	cmp	r0, #8
 80008fc:	d034      	beq.n	8000968 <__aeabi_i2f+0x8c>
 80008fe:	3908      	subs	r1, #8
 8000900:	408d      	lsls	r5, r1
 8000902:	026d      	lsls	r5, r5, #9
 8000904:	0a6d      	lsrs	r5, r5, #9
 8000906:	b2d8      	uxtb	r0, r3
 8000908:	e002      	b.n	8000910 <__aeabi_i2f+0x34>
 800090a:	2400      	movs	r4, #0
 800090c:	2000      	movs	r0, #0
 800090e:	2500      	movs	r5, #0
 8000910:	05c0      	lsls	r0, r0, #23
 8000912:	4328      	orrs	r0, r5
 8000914:	07e4      	lsls	r4, r4, #31
 8000916:	4320      	orrs	r0, r4
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	2b99      	cmp	r3, #153	@ 0x99
 800091c:	dc16      	bgt.n	800094c <__aeabi_i2f+0x70>
 800091e:	1f42      	subs	r2, r0, #5
 8000920:	2805      	cmp	r0, #5
 8000922:	d000      	beq.n	8000926 <__aeabi_i2f+0x4a>
 8000924:	4095      	lsls	r5, r2
 8000926:	002a      	movs	r2, r5
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <__aeabi_i2f+0x94>)
 800092a:	4002      	ands	r2, r0
 800092c:	076e      	lsls	r6, r5, #29
 800092e:	d009      	beq.n	8000944 <__aeabi_i2f+0x68>
 8000930:	260f      	movs	r6, #15
 8000932:	4035      	ands	r5, r6
 8000934:	2d04      	cmp	r5, #4
 8000936:	d005      	beq.n	8000944 <__aeabi_i2f+0x68>
 8000938:	3204      	adds	r2, #4
 800093a:	0155      	lsls	r5, r2, #5
 800093c:	d502      	bpl.n	8000944 <__aeabi_i2f+0x68>
 800093e:	239f      	movs	r3, #159	@ 0x9f
 8000940:	4002      	ands	r2, r0
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	0192      	lsls	r2, r2, #6
 8000946:	0a55      	lsrs	r5, r2, #9
 8000948:	b2d8      	uxtb	r0, r3
 800094a:	e7e1      	b.n	8000910 <__aeabi_i2f+0x34>
 800094c:	2205      	movs	r2, #5
 800094e:	1a12      	subs	r2, r2, r0
 8000950:	0028      	movs	r0, r5
 8000952:	40d0      	lsrs	r0, r2
 8000954:	0002      	movs	r2, r0
 8000956:	0008      	movs	r0, r1
 8000958:	301b      	adds	r0, #27
 800095a:	4085      	lsls	r5, r0
 800095c:	0028      	movs	r0, r5
 800095e:	1e45      	subs	r5, r0, #1
 8000960:	41a8      	sbcs	r0, r5
 8000962:	4302      	orrs	r2, r0
 8000964:	0015      	movs	r5, r2
 8000966:	e7de      	b.n	8000926 <__aeabi_i2f+0x4a>
 8000968:	026d      	lsls	r5, r5, #9
 800096a:	2096      	movs	r0, #150	@ 0x96
 800096c:	0a6d      	lsrs	r5, r5, #9
 800096e:	e7cf      	b.n	8000910 <__aeabi_i2f+0x34>
 8000970:	fbffffff 	.word	0xfbffffff

08000974 <__aeabi_dadd>:
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	4657      	mov	r7, sl
 8000978:	464e      	mov	r6, r9
 800097a:	4645      	mov	r5, r8
 800097c:	46de      	mov	lr, fp
 800097e:	b5e0      	push	{r5, r6, r7, lr}
 8000980:	b083      	sub	sp, #12
 8000982:	9000      	str	r0, [sp, #0]
 8000984:	9101      	str	r1, [sp, #4]
 8000986:	030c      	lsls	r4, r1, #12
 8000988:	004f      	lsls	r7, r1, #1
 800098a:	0fce      	lsrs	r6, r1, #31
 800098c:	0a61      	lsrs	r1, r4, #9
 800098e:	9c00      	ldr	r4, [sp, #0]
 8000990:	031d      	lsls	r5, r3, #12
 8000992:	0f64      	lsrs	r4, r4, #29
 8000994:	430c      	orrs	r4, r1
 8000996:	9900      	ldr	r1, [sp, #0]
 8000998:	9200      	str	r2, [sp, #0]
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	00c8      	lsls	r0, r1, #3
 800099e:	0059      	lsls	r1, r3, #1
 80009a0:	0d4b      	lsrs	r3, r1, #21
 80009a2:	4699      	mov	r9, r3
 80009a4:	9a00      	ldr	r2, [sp, #0]
 80009a6:	9b01      	ldr	r3, [sp, #4]
 80009a8:	0a6d      	lsrs	r5, r5, #9
 80009aa:	0fd9      	lsrs	r1, r3, #31
 80009ac:	0f53      	lsrs	r3, r2, #29
 80009ae:	432b      	orrs	r3, r5
 80009b0:	469a      	mov	sl, r3
 80009b2:	9b00      	ldr	r3, [sp, #0]
 80009b4:	0d7f      	lsrs	r7, r7, #21
 80009b6:	00da      	lsls	r2, r3, #3
 80009b8:	4694      	mov	ip, r2
 80009ba:	464a      	mov	r2, r9
 80009bc:	46b0      	mov	r8, r6
 80009be:	1aba      	subs	r2, r7, r2
 80009c0:	428e      	cmp	r6, r1
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dadd+0x52>
 80009c4:	e0b0      	b.n	8000b28 <__aeabi_dadd+0x1b4>
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	dc00      	bgt.n	80009cc <__aeabi_dadd+0x58>
 80009ca:	e078      	b.n	8000abe <__aeabi_dadd+0x14a>
 80009cc:	4649      	mov	r1, r9
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x60>
 80009d2:	e0e9      	b.n	8000ba8 <__aeabi_dadd+0x234>
 80009d4:	49c9      	ldr	r1, [pc, #804]	@ (8000cfc <__aeabi_dadd+0x388>)
 80009d6:	428f      	cmp	r7, r1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x68>
 80009da:	e195      	b.n	8000d08 <__aeabi_dadd+0x394>
 80009dc:	2501      	movs	r5, #1
 80009de:	2a38      	cmp	r2, #56	@ 0x38
 80009e0:	dc16      	bgt.n	8000a10 <__aeabi_dadd+0x9c>
 80009e2:	2180      	movs	r1, #128	@ 0x80
 80009e4:	4653      	mov	r3, sl
 80009e6:	0409      	lsls	r1, r1, #16
 80009e8:	430b      	orrs	r3, r1
 80009ea:	469a      	mov	sl, r3
 80009ec:	2a1f      	cmp	r2, #31
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_dadd+0x7e>
 80009f0:	e1e7      	b.n	8000dc2 <__aeabi_dadd+0x44e>
 80009f2:	2120      	movs	r1, #32
 80009f4:	4655      	mov	r5, sl
 80009f6:	1a8b      	subs	r3, r1, r2
 80009f8:	4661      	mov	r1, ip
 80009fa:	409d      	lsls	r5, r3
 80009fc:	40d1      	lsrs	r1, r2
 80009fe:	430d      	orrs	r5, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	4099      	lsls	r1, r3
 8000a04:	1e4b      	subs	r3, r1, #1
 8000a06:	4199      	sbcs	r1, r3
 8000a08:	4653      	mov	r3, sl
 8000a0a:	40d3      	lsrs	r3, r2
 8000a0c:	430d      	orrs	r5, r1
 8000a0e:	1ae4      	subs	r4, r4, r3
 8000a10:	1b45      	subs	r5, r0, r5
 8000a12:	42a8      	cmp	r0, r5
 8000a14:	4180      	sbcs	r0, r0
 8000a16:	4240      	negs	r0, r0
 8000a18:	1a24      	subs	r4, r4, r0
 8000a1a:	0223      	lsls	r3, r4, #8
 8000a1c:	d400      	bmi.n	8000a20 <__aeabi_dadd+0xac>
 8000a1e:	e10f      	b.n	8000c40 <__aeabi_dadd+0x2cc>
 8000a20:	0264      	lsls	r4, r4, #9
 8000a22:	0a64      	lsrs	r4, r4, #9
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0xb6>
 8000a28:	e139      	b.n	8000c9e <__aeabi_dadd+0x32a>
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f001 ff2a 	bl	8002884 <__clzsi2>
 8000a30:	0003      	movs	r3, r0
 8000a32:	3b08      	subs	r3, #8
 8000a34:	2120      	movs	r1, #32
 8000a36:	0028      	movs	r0, r5
 8000a38:	1aca      	subs	r2, r1, r3
 8000a3a:	40d0      	lsrs	r0, r2
 8000a3c:	409c      	lsls	r4, r3
 8000a3e:	0002      	movs	r2, r0
 8000a40:	409d      	lsls	r5, r3
 8000a42:	4322      	orrs	r2, r4
 8000a44:	429f      	cmp	r7, r3
 8000a46:	dd00      	ble.n	8000a4a <__aeabi_dadd+0xd6>
 8000a48:	e173      	b.n	8000d32 <__aeabi_dadd+0x3be>
 8000a4a:	1bd8      	subs	r0, r3, r7
 8000a4c:	3001      	adds	r0, #1
 8000a4e:	1a09      	subs	r1, r1, r0
 8000a50:	002c      	movs	r4, r5
 8000a52:	408d      	lsls	r5, r1
 8000a54:	40c4      	lsrs	r4, r0
 8000a56:	1e6b      	subs	r3, r5, #1
 8000a58:	419d      	sbcs	r5, r3
 8000a5a:	0013      	movs	r3, r2
 8000a5c:	40c2      	lsrs	r2, r0
 8000a5e:	408b      	lsls	r3, r1
 8000a60:	4325      	orrs	r5, r4
 8000a62:	2700      	movs	r7, #0
 8000a64:	0014      	movs	r4, r2
 8000a66:	431d      	orrs	r5, r3
 8000a68:	076b      	lsls	r3, r5, #29
 8000a6a:	d009      	beq.n	8000a80 <__aeabi_dadd+0x10c>
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	402b      	ands	r3, r5
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d005      	beq.n	8000a80 <__aeabi_dadd+0x10c>
 8000a74:	1d2b      	adds	r3, r5, #4
 8000a76:	42ab      	cmp	r3, r5
 8000a78:	41ad      	sbcs	r5, r5
 8000a7a:	426d      	negs	r5, r5
 8000a7c:	1964      	adds	r4, r4, r5
 8000a7e:	001d      	movs	r5, r3
 8000a80:	0223      	lsls	r3, r4, #8
 8000a82:	d400      	bmi.n	8000a86 <__aeabi_dadd+0x112>
 8000a84:	e12d      	b.n	8000ce2 <__aeabi_dadd+0x36e>
 8000a86:	4a9d      	ldr	r2, [pc, #628]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000a88:	3701      	adds	r7, #1
 8000a8a:	4297      	cmp	r7, r2
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x11c>
 8000a8e:	e0d3      	b.n	8000c38 <__aeabi_dadd+0x2c4>
 8000a90:	4646      	mov	r6, r8
 8000a92:	499b      	ldr	r1, [pc, #620]	@ (8000d00 <__aeabi_dadd+0x38c>)
 8000a94:	08ed      	lsrs	r5, r5, #3
 8000a96:	4021      	ands	r1, r4
 8000a98:	074a      	lsls	r2, r1, #29
 8000a9a:	432a      	orrs	r2, r5
 8000a9c:	057c      	lsls	r4, r7, #21
 8000a9e:	024d      	lsls	r5, r1, #9
 8000aa0:	0b2d      	lsrs	r5, r5, #12
 8000aa2:	0d64      	lsrs	r4, r4, #21
 8000aa4:	0524      	lsls	r4, r4, #20
 8000aa6:	432c      	orrs	r4, r5
 8000aa8:	07f6      	lsls	r6, r6, #31
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	0010      	movs	r0, r2
 8000aae:	0021      	movs	r1, r4
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ab4:	46bb      	mov	fp, r7
 8000ab6:	46b2      	mov	sl, r6
 8000ab8:	46a9      	mov	r9, r5
 8000aba:	46a0      	mov	r8, r4
 8000abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x150>
 8000ac2:	e084      	b.n	8000bce <__aeabi_dadd+0x25a>
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	1bd2      	subs	r2, r2, r7
 8000ac8:	2f00      	cmp	r7, #0
 8000aca:	d000      	beq.n	8000ace <__aeabi_dadd+0x15a>
 8000acc:	e16d      	b.n	8000daa <__aeabi_dadd+0x436>
 8000ace:	0025      	movs	r5, r4
 8000ad0:	4305      	orrs	r5, r0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x162>
 8000ad4:	e127      	b.n	8000d26 <__aeabi_dadd+0x3b2>
 8000ad6:	1e56      	subs	r6, r2, #1
 8000ad8:	2a01      	cmp	r2, #1
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x16a>
 8000adc:	e23b      	b.n	8000f56 <__aeabi_dadd+0x5e2>
 8000ade:	4d87      	ldr	r5, [pc, #540]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000ae0:	42aa      	cmp	r2, r5
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dadd+0x172>
 8000ae4:	e26a      	b.n	8000fbc <__aeabi_dadd+0x648>
 8000ae6:	2501      	movs	r5, #1
 8000ae8:	2e38      	cmp	r6, #56	@ 0x38
 8000aea:	dc12      	bgt.n	8000b12 <__aeabi_dadd+0x19e>
 8000aec:	0032      	movs	r2, r6
 8000aee:	2a1f      	cmp	r2, #31
 8000af0:	dd00      	ble.n	8000af4 <__aeabi_dadd+0x180>
 8000af2:	e1f8      	b.n	8000ee6 <__aeabi_dadd+0x572>
 8000af4:	2620      	movs	r6, #32
 8000af6:	0025      	movs	r5, r4
 8000af8:	1ab6      	subs	r6, r6, r2
 8000afa:	0007      	movs	r7, r0
 8000afc:	4653      	mov	r3, sl
 8000afe:	40b0      	lsls	r0, r6
 8000b00:	40d4      	lsrs	r4, r2
 8000b02:	40b5      	lsls	r5, r6
 8000b04:	40d7      	lsrs	r7, r2
 8000b06:	1e46      	subs	r6, r0, #1
 8000b08:	41b0      	sbcs	r0, r6
 8000b0a:	1b1b      	subs	r3, r3, r4
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	433d      	orrs	r5, r7
 8000b10:	4305      	orrs	r5, r0
 8000b12:	4662      	mov	r2, ip
 8000b14:	1b55      	subs	r5, r2, r5
 8000b16:	45ac      	cmp	ip, r5
 8000b18:	4192      	sbcs	r2, r2
 8000b1a:	4653      	mov	r3, sl
 8000b1c:	4252      	negs	r2, r2
 8000b1e:	000e      	movs	r6, r1
 8000b20:	464f      	mov	r7, r9
 8000b22:	4688      	mov	r8, r1
 8000b24:	1a9c      	subs	r4, r3, r2
 8000b26:	e778      	b.n	8000a1a <__aeabi_dadd+0xa6>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	dc00      	bgt.n	8000b2e <__aeabi_dadd+0x1ba>
 8000b2c:	e08e      	b.n	8000c4c <__aeabi_dadd+0x2d8>
 8000b2e:	4649      	mov	r1, r9
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d175      	bne.n	8000c20 <__aeabi_dadd+0x2ac>
 8000b34:	4661      	mov	r1, ip
 8000b36:	4653      	mov	r3, sl
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x1ca>
 8000b3c:	e0f6      	b.n	8000d2c <__aeabi_dadd+0x3b8>
 8000b3e:	1e51      	subs	r1, r2, #1
 8000b40:	2a01      	cmp	r2, #1
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x1d2>
 8000b44:	e191      	b.n	8000e6a <__aeabi_dadd+0x4f6>
 8000b46:	4d6d      	ldr	r5, [pc, #436]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000b48:	42aa      	cmp	r2, r5
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x1da>
 8000b4c:	e0dc      	b.n	8000d08 <__aeabi_dadd+0x394>
 8000b4e:	2501      	movs	r5, #1
 8000b50:	2938      	cmp	r1, #56	@ 0x38
 8000b52:	dc14      	bgt.n	8000b7e <__aeabi_dadd+0x20a>
 8000b54:	000a      	movs	r2, r1
 8000b56:	2a1f      	cmp	r2, #31
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_dadd+0x1e8>
 8000b5a:	e1a2      	b.n	8000ea2 <__aeabi_dadd+0x52e>
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	4653      	mov	r3, sl
 8000b60:	1a89      	subs	r1, r1, r2
 8000b62:	408b      	lsls	r3, r1
 8000b64:	001d      	movs	r5, r3
 8000b66:	4663      	mov	r3, ip
 8000b68:	40d3      	lsrs	r3, r2
 8000b6a:	431d      	orrs	r5, r3
 8000b6c:	4663      	mov	r3, ip
 8000b6e:	408b      	lsls	r3, r1
 8000b70:	0019      	movs	r1, r3
 8000b72:	1e4b      	subs	r3, r1, #1
 8000b74:	4199      	sbcs	r1, r3
 8000b76:	4653      	mov	r3, sl
 8000b78:	40d3      	lsrs	r3, r2
 8000b7a:	430d      	orrs	r5, r1
 8000b7c:	18e4      	adds	r4, r4, r3
 8000b7e:	182d      	adds	r5, r5, r0
 8000b80:	4285      	cmp	r5, r0
 8000b82:	4180      	sbcs	r0, r0
 8000b84:	4240      	negs	r0, r0
 8000b86:	1824      	adds	r4, r4, r0
 8000b88:	0223      	lsls	r3, r4, #8
 8000b8a:	d559      	bpl.n	8000c40 <__aeabi_dadd+0x2cc>
 8000b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000b8e:	3701      	adds	r7, #1
 8000b90:	429f      	cmp	r7, r3
 8000b92:	d051      	beq.n	8000c38 <__aeabi_dadd+0x2c4>
 8000b94:	2101      	movs	r1, #1
 8000b96:	4b5a      	ldr	r3, [pc, #360]	@ (8000d00 <__aeabi_dadd+0x38c>)
 8000b98:	086a      	lsrs	r2, r5, #1
 8000b9a:	401c      	ands	r4, r3
 8000b9c:	4029      	ands	r1, r5
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	07e5      	lsls	r5, r4, #31
 8000ba2:	4315      	orrs	r5, r2
 8000ba4:	0864      	lsrs	r4, r4, #1
 8000ba6:	e75f      	b.n	8000a68 <__aeabi_dadd+0xf4>
 8000ba8:	4661      	mov	r1, ip
 8000baa:	4653      	mov	r3, sl
 8000bac:	4319      	orrs	r1, r3
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x23e>
 8000bb0:	e0bc      	b.n	8000d2c <__aeabi_dadd+0x3b8>
 8000bb2:	1e51      	subs	r1, r2, #1
 8000bb4:	2a01      	cmp	r2, #1
 8000bb6:	d100      	bne.n	8000bba <__aeabi_dadd+0x246>
 8000bb8:	e164      	b.n	8000e84 <__aeabi_dadd+0x510>
 8000bba:	4d50      	ldr	r5, [pc, #320]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000bbc:	42aa      	cmp	r2, r5
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x24e>
 8000bc0:	e16a      	b.n	8000e98 <__aeabi_dadd+0x524>
 8000bc2:	2501      	movs	r5, #1
 8000bc4:	2938      	cmp	r1, #56	@ 0x38
 8000bc6:	dd00      	ble.n	8000bca <__aeabi_dadd+0x256>
 8000bc8:	e722      	b.n	8000a10 <__aeabi_dadd+0x9c>
 8000bca:	000a      	movs	r2, r1
 8000bcc:	e70e      	b.n	80009ec <__aeabi_dadd+0x78>
 8000bce:	4a4d      	ldr	r2, [pc, #308]	@ (8000d04 <__aeabi_dadd+0x390>)
 8000bd0:	1c7d      	adds	r5, r7, #1
 8000bd2:	4215      	tst	r5, r2
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_dadd+0x264>
 8000bd6:	e0d0      	b.n	8000d7a <__aeabi_dadd+0x406>
 8000bd8:	0025      	movs	r5, r4
 8000bda:	4662      	mov	r2, ip
 8000bdc:	4653      	mov	r3, sl
 8000bde:	4305      	orrs	r5, r0
 8000be0:	431a      	orrs	r2, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d000      	beq.n	8000be8 <__aeabi_dadd+0x274>
 8000be6:	e137      	b.n	8000e58 <__aeabi_dadd+0x4e4>
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x27a>
 8000bec:	e1a8      	b.n	8000f40 <__aeabi_dadd+0x5cc>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x280>
 8000bf2:	e16a      	b.n	8000eca <__aeabi_dadd+0x556>
 8000bf4:	4663      	mov	r3, ip
 8000bf6:	1ac5      	subs	r5, r0, r3
 8000bf8:	4653      	mov	r3, sl
 8000bfa:	1ae2      	subs	r2, r4, r3
 8000bfc:	42a8      	cmp	r0, r5
 8000bfe:	419b      	sbcs	r3, r3
 8000c00:	425b      	negs	r3, r3
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	021a      	lsls	r2, r3, #8
 8000c06:	d400      	bmi.n	8000c0a <__aeabi_dadd+0x296>
 8000c08:	e203      	b.n	8001012 <__aeabi_dadd+0x69e>
 8000c0a:	4663      	mov	r3, ip
 8000c0c:	1a1d      	subs	r5, r3, r0
 8000c0e:	45ac      	cmp	ip, r5
 8000c10:	4192      	sbcs	r2, r2
 8000c12:	4653      	mov	r3, sl
 8000c14:	4252      	negs	r2, r2
 8000c16:	1b1c      	subs	r4, r3, r4
 8000c18:	000e      	movs	r6, r1
 8000c1a:	4688      	mov	r8, r1
 8000c1c:	1aa4      	subs	r4, r4, r2
 8000c1e:	e723      	b.n	8000a68 <__aeabi_dadd+0xf4>
 8000c20:	4936      	ldr	r1, [pc, #216]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000c22:	428f      	cmp	r7, r1
 8000c24:	d070      	beq.n	8000d08 <__aeabi_dadd+0x394>
 8000c26:	2501      	movs	r5, #1
 8000c28:	2a38      	cmp	r2, #56	@ 0x38
 8000c2a:	dca8      	bgt.n	8000b7e <__aeabi_dadd+0x20a>
 8000c2c:	2180      	movs	r1, #128	@ 0x80
 8000c2e:	4653      	mov	r3, sl
 8000c30:	0409      	lsls	r1, r1, #16
 8000c32:	430b      	orrs	r3, r1
 8000c34:	469a      	mov	sl, r3
 8000c36:	e78e      	b.n	8000b56 <__aeabi_dadd+0x1e2>
 8000c38:	003c      	movs	r4, r7
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e731      	b.n	8000aa4 <__aeabi_dadd+0x130>
 8000c40:	2307      	movs	r3, #7
 8000c42:	402b      	ands	r3, r5
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x2d6>
 8000c48:	e710      	b.n	8000a6c <__aeabi_dadd+0xf8>
 8000c4a:	e093      	b.n	8000d74 <__aeabi_dadd+0x400>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d074      	beq.n	8000d3a <__aeabi_dadd+0x3c6>
 8000c50:	464a      	mov	r2, r9
 8000c52:	1bd2      	subs	r2, r2, r7
 8000c54:	2f00      	cmp	r7, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x2e6>
 8000c58:	e0c7      	b.n	8000dea <__aeabi_dadd+0x476>
 8000c5a:	4928      	ldr	r1, [pc, #160]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000c5c:	4589      	cmp	r9, r1
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x2ee>
 8000c60:	e185      	b.n	8000f6e <__aeabi_dadd+0x5fa>
 8000c62:	2501      	movs	r5, #1
 8000c64:	2a38      	cmp	r2, #56	@ 0x38
 8000c66:	dc12      	bgt.n	8000c8e <__aeabi_dadd+0x31a>
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	0409      	lsls	r1, r1, #16
 8000c6c:	430c      	orrs	r4, r1
 8000c6e:	2a1f      	cmp	r2, #31
 8000c70:	dd00      	ble.n	8000c74 <__aeabi_dadd+0x300>
 8000c72:	e1ab      	b.n	8000fcc <__aeabi_dadd+0x658>
 8000c74:	2120      	movs	r1, #32
 8000c76:	0025      	movs	r5, r4
 8000c78:	1a89      	subs	r1, r1, r2
 8000c7a:	0007      	movs	r7, r0
 8000c7c:	4088      	lsls	r0, r1
 8000c7e:	408d      	lsls	r5, r1
 8000c80:	40d7      	lsrs	r7, r2
 8000c82:	1e41      	subs	r1, r0, #1
 8000c84:	4188      	sbcs	r0, r1
 8000c86:	40d4      	lsrs	r4, r2
 8000c88:	433d      	orrs	r5, r7
 8000c8a:	4305      	orrs	r5, r0
 8000c8c:	44a2      	add	sl, r4
 8000c8e:	4465      	add	r5, ip
 8000c90:	4565      	cmp	r5, ip
 8000c92:	4192      	sbcs	r2, r2
 8000c94:	4252      	negs	r2, r2
 8000c96:	4452      	add	r2, sl
 8000c98:	0014      	movs	r4, r2
 8000c9a:	464f      	mov	r7, r9
 8000c9c:	e774      	b.n	8000b88 <__aeabi_dadd+0x214>
 8000c9e:	0028      	movs	r0, r5
 8000ca0:	f001 fdf0 	bl	8002884 <__clzsi2>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	2b1f      	cmp	r3, #31
 8000caa:	dc00      	bgt.n	8000cae <__aeabi_dadd+0x33a>
 8000cac:	e6c2      	b.n	8000a34 <__aeabi_dadd+0xc0>
 8000cae:	002a      	movs	r2, r5
 8000cb0:	3808      	subs	r0, #8
 8000cb2:	4082      	lsls	r2, r0
 8000cb4:	429f      	cmp	r7, r3
 8000cb6:	dd00      	ble.n	8000cba <__aeabi_dadd+0x346>
 8000cb8:	e0a9      	b.n	8000e0e <__aeabi_dadd+0x49a>
 8000cba:	1bdb      	subs	r3, r3, r7
 8000cbc:	1c58      	adds	r0, r3, #1
 8000cbe:	281f      	cmp	r0, #31
 8000cc0:	dc00      	bgt.n	8000cc4 <__aeabi_dadd+0x350>
 8000cc2:	e1ac      	b.n	800101e <__aeabi_dadd+0x6aa>
 8000cc4:	0015      	movs	r5, r2
 8000cc6:	3b1f      	subs	r3, #31
 8000cc8:	40dd      	lsrs	r5, r3
 8000cca:	2820      	cmp	r0, #32
 8000ccc:	d005      	beq.n	8000cda <__aeabi_dadd+0x366>
 8000cce:	2340      	movs	r3, #64	@ 0x40
 8000cd0:	1a1b      	subs	r3, r3, r0
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	1e53      	subs	r3, r2, #1
 8000cd6:	419a      	sbcs	r2, r3
 8000cd8:	4315      	orrs	r5, r2
 8000cda:	2307      	movs	r3, #7
 8000cdc:	2700      	movs	r7, #0
 8000cde:	402b      	ands	r3, r5
 8000ce0:	e7b0      	b.n	8000c44 <__aeabi_dadd+0x2d0>
 8000ce2:	08ed      	lsrs	r5, r5, #3
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <__aeabi_dadd+0x388>)
 8000ce6:	0762      	lsls	r2, r4, #29
 8000ce8:	432a      	orrs	r2, r5
 8000cea:	08e4      	lsrs	r4, r4, #3
 8000cec:	429f      	cmp	r7, r3
 8000cee:	d00f      	beq.n	8000d10 <__aeabi_dadd+0x39c>
 8000cf0:	0324      	lsls	r4, r4, #12
 8000cf2:	0b25      	lsrs	r5, r4, #12
 8000cf4:	057c      	lsls	r4, r7, #21
 8000cf6:	0d64      	lsrs	r4, r4, #21
 8000cf8:	e6d4      	b.n	8000aa4 <__aeabi_dadd+0x130>
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	000007ff 	.word	0x000007ff
 8000d00:	ff7fffff 	.word	0xff7fffff
 8000d04:	000007fe 	.word	0x000007fe
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	0762      	lsls	r2, r4, #29
 8000d0c:	4302      	orrs	r2, r0
 8000d0e:	08e4      	lsrs	r4, r4, #3
 8000d10:	0013      	movs	r3, r2
 8000d12:	4323      	orrs	r3, r4
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dadd+0x3a4>
 8000d16:	e186      	b.n	8001026 <__aeabi_dadd+0x6b2>
 8000d18:	2580      	movs	r5, #128	@ 0x80
 8000d1a:	032d      	lsls	r5, r5, #12
 8000d1c:	4325      	orrs	r5, r4
 8000d1e:	032d      	lsls	r5, r5, #12
 8000d20:	4cc3      	ldr	r4, [pc, #780]	@ (8001030 <__aeabi_dadd+0x6bc>)
 8000d22:	0b2d      	lsrs	r5, r5, #12
 8000d24:	e6be      	b.n	8000aa4 <__aeabi_dadd+0x130>
 8000d26:	4660      	mov	r0, ip
 8000d28:	4654      	mov	r4, sl
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	0017      	movs	r7, r2
 8000d2e:	08c5      	lsrs	r5, r0, #3
 8000d30:	e7d8      	b.n	8000ce4 <__aeabi_dadd+0x370>
 8000d32:	4cc0      	ldr	r4, [pc, #768]	@ (8001034 <__aeabi_dadd+0x6c0>)
 8000d34:	1aff      	subs	r7, r7, r3
 8000d36:	4014      	ands	r4, r2
 8000d38:	e696      	b.n	8000a68 <__aeabi_dadd+0xf4>
 8000d3a:	4abf      	ldr	r2, [pc, #764]	@ (8001038 <__aeabi_dadd+0x6c4>)
 8000d3c:	1c79      	adds	r1, r7, #1
 8000d3e:	4211      	tst	r1, r2
 8000d40:	d16b      	bne.n	8000e1a <__aeabi_dadd+0x4a6>
 8000d42:	0022      	movs	r2, r4
 8000d44:	4302      	orrs	r2, r0
 8000d46:	2f00      	cmp	r7, #0
 8000d48:	d000      	beq.n	8000d4c <__aeabi_dadd+0x3d8>
 8000d4a:	e0db      	b.n	8000f04 <__aeabi_dadd+0x590>
 8000d4c:	2a00      	cmp	r2, #0
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_dadd+0x3de>
 8000d50:	e12d      	b.n	8000fae <__aeabi_dadd+0x63a>
 8000d52:	4662      	mov	r2, ip
 8000d54:	4653      	mov	r3, sl
 8000d56:	431a      	orrs	r2, r3
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x3e8>
 8000d5a:	e0b6      	b.n	8000eca <__aeabi_dadd+0x556>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	18c5      	adds	r5, r0, r3
 8000d60:	4285      	cmp	r5, r0
 8000d62:	4180      	sbcs	r0, r0
 8000d64:	4454      	add	r4, sl
 8000d66:	4240      	negs	r0, r0
 8000d68:	1824      	adds	r4, r4, r0
 8000d6a:	0223      	lsls	r3, r4, #8
 8000d6c:	d502      	bpl.n	8000d74 <__aeabi_dadd+0x400>
 8000d6e:	000f      	movs	r7, r1
 8000d70:	4bb0      	ldr	r3, [pc, #704]	@ (8001034 <__aeabi_dadd+0x6c0>)
 8000d72:	401c      	ands	r4, r3
 8000d74:	003a      	movs	r2, r7
 8000d76:	0028      	movs	r0, r5
 8000d78:	e7d8      	b.n	8000d2c <__aeabi_dadd+0x3b8>
 8000d7a:	4662      	mov	r2, ip
 8000d7c:	1a85      	subs	r5, r0, r2
 8000d7e:	42a8      	cmp	r0, r5
 8000d80:	4192      	sbcs	r2, r2
 8000d82:	4653      	mov	r3, sl
 8000d84:	4252      	negs	r2, r2
 8000d86:	4691      	mov	r9, r2
 8000d88:	1ae3      	subs	r3, r4, r3
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	464b      	mov	r3, r9
 8000d8e:	1ad2      	subs	r2, r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	4691      	mov	r9, r2
 8000d94:	021a      	lsls	r2, r3, #8
 8000d96:	d454      	bmi.n	8000e42 <__aeabi_dadd+0x4ce>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	464c      	mov	r4, r9
 8000d9c:	432a      	orrs	r2, r5
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dadd+0x42e>
 8000da0:	e640      	b.n	8000a24 <__aeabi_dadd+0xb0>
 8000da2:	2600      	movs	r6, #0
 8000da4:	2400      	movs	r4, #0
 8000da6:	2500      	movs	r5, #0
 8000da8:	e67c      	b.n	8000aa4 <__aeabi_dadd+0x130>
 8000daa:	4da1      	ldr	r5, [pc, #644]	@ (8001030 <__aeabi_dadd+0x6bc>)
 8000dac:	45a9      	cmp	r9, r5
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x43e>
 8000db0:	e090      	b.n	8000ed4 <__aeabi_dadd+0x560>
 8000db2:	2501      	movs	r5, #1
 8000db4:	2a38      	cmp	r2, #56	@ 0x38
 8000db6:	dd00      	ble.n	8000dba <__aeabi_dadd+0x446>
 8000db8:	e6ab      	b.n	8000b12 <__aeabi_dadd+0x19e>
 8000dba:	2580      	movs	r5, #128	@ 0x80
 8000dbc:	042d      	lsls	r5, r5, #16
 8000dbe:	432c      	orrs	r4, r5
 8000dc0:	e695      	b.n	8000aee <__aeabi_dadd+0x17a>
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	4655      	mov	r5, sl
 8000dc6:	3920      	subs	r1, #32
 8000dc8:	40cd      	lsrs	r5, r1
 8000dca:	46a9      	mov	r9, r5
 8000dcc:	2a20      	cmp	r2, #32
 8000dce:	d006      	beq.n	8000dde <__aeabi_dadd+0x46a>
 8000dd0:	2140      	movs	r1, #64	@ 0x40
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	1a8a      	subs	r2, r1, r2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	4662      	mov	r2, ip
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	4694      	mov	ip, r2
 8000dde:	4665      	mov	r5, ip
 8000de0:	1e6b      	subs	r3, r5, #1
 8000de2:	419d      	sbcs	r5, r3
 8000de4:	464b      	mov	r3, r9
 8000de6:	431d      	orrs	r5, r3
 8000de8:	e612      	b.n	8000a10 <__aeabi_dadd+0x9c>
 8000dea:	0021      	movs	r1, r4
 8000dec:	4301      	orrs	r1, r0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dadd+0x47e>
 8000df0:	e0c4      	b.n	8000f7c <__aeabi_dadd+0x608>
 8000df2:	1e51      	subs	r1, r2, #1
 8000df4:	2a01      	cmp	r2, #1
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dadd+0x486>
 8000df8:	e0fb      	b.n	8000ff2 <__aeabi_dadd+0x67e>
 8000dfa:	4d8d      	ldr	r5, [pc, #564]	@ (8001030 <__aeabi_dadd+0x6bc>)
 8000dfc:	42aa      	cmp	r2, r5
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_dadd+0x48e>
 8000e00:	e0b5      	b.n	8000f6e <__aeabi_dadd+0x5fa>
 8000e02:	2501      	movs	r5, #1
 8000e04:	2938      	cmp	r1, #56	@ 0x38
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dadd+0x496>
 8000e08:	e741      	b.n	8000c8e <__aeabi_dadd+0x31a>
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	e72f      	b.n	8000c6e <__aeabi_dadd+0x2fa>
 8000e0e:	4c89      	ldr	r4, [pc, #548]	@ (8001034 <__aeabi_dadd+0x6c0>)
 8000e10:	1aff      	subs	r7, r7, r3
 8000e12:	4014      	ands	r4, r2
 8000e14:	0762      	lsls	r2, r4, #29
 8000e16:	08e4      	lsrs	r4, r4, #3
 8000e18:	e76a      	b.n	8000cf0 <__aeabi_dadd+0x37c>
 8000e1a:	4a85      	ldr	r2, [pc, #532]	@ (8001030 <__aeabi_dadd+0x6bc>)
 8000e1c:	4291      	cmp	r1, r2
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dadd+0x4ae>
 8000e20:	e0e3      	b.n	8000fea <__aeabi_dadd+0x676>
 8000e22:	4663      	mov	r3, ip
 8000e24:	18c2      	adds	r2, r0, r3
 8000e26:	4282      	cmp	r2, r0
 8000e28:	4180      	sbcs	r0, r0
 8000e2a:	0023      	movs	r3, r4
 8000e2c:	4240      	negs	r0, r0
 8000e2e:	4453      	add	r3, sl
 8000e30:	181b      	adds	r3, r3, r0
 8000e32:	07dd      	lsls	r5, r3, #31
 8000e34:	085c      	lsrs	r4, r3, #1
 8000e36:	2307      	movs	r3, #7
 8000e38:	0852      	lsrs	r2, r2, #1
 8000e3a:	4315      	orrs	r5, r2
 8000e3c:	000f      	movs	r7, r1
 8000e3e:	402b      	ands	r3, r5
 8000e40:	e700      	b.n	8000c44 <__aeabi_dadd+0x2d0>
 8000e42:	4663      	mov	r3, ip
 8000e44:	1a1d      	subs	r5, r3, r0
 8000e46:	45ac      	cmp	ip, r5
 8000e48:	4192      	sbcs	r2, r2
 8000e4a:	4653      	mov	r3, sl
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	1b1c      	subs	r4, r3, r4
 8000e50:	000e      	movs	r6, r1
 8000e52:	4688      	mov	r8, r1
 8000e54:	1aa4      	subs	r4, r4, r2
 8000e56:	e5e5      	b.n	8000a24 <__aeabi_dadd+0xb0>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_dadd+0x4ea>
 8000e5c:	e091      	b.n	8000f82 <__aeabi_dadd+0x60e>
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d138      	bne.n	8000ed4 <__aeabi_dadd+0x560>
 8000e62:	2480      	movs	r4, #128	@ 0x80
 8000e64:	2600      	movs	r6, #0
 8000e66:	0324      	lsls	r4, r4, #12
 8000e68:	e756      	b.n	8000d18 <__aeabi_dadd+0x3a4>
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	18c5      	adds	r5, r0, r3
 8000e6e:	4285      	cmp	r5, r0
 8000e70:	4180      	sbcs	r0, r0
 8000e72:	4454      	add	r4, sl
 8000e74:	4240      	negs	r0, r0
 8000e76:	1824      	adds	r4, r4, r0
 8000e78:	2701      	movs	r7, #1
 8000e7a:	0223      	lsls	r3, r4, #8
 8000e7c:	d400      	bmi.n	8000e80 <__aeabi_dadd+0x50c>
 8000e7e:	e6df      	b.n	8000c40 <__aeabi_dadd+0x2cc>
 8000e80:	2702      	movs	r7, #2
 8000e82:	e687      	b.n	8000b94 <__aeabi_dadd+0x220>
 8000e84:	4663      	mov	r3, ip
 8000e86:	1ac5      	subs	r5, r0, r3
 8000e88:	42a8      	cmp	r0, r5
 8000e8a:	4180      	sbcs	r0, r0
 8000e8c:	4653      	mov	r3, sl
 8000e8e:	4240      	negs	r0, r0
 8000e90:	1ae4      	subs	r4, r4, r3
 8000e92:	2701      	movs	r7, #1
 8000e94:	1a24      	subs	r4, r4, r0
 8000e96:	e5c0      	b.n	8000a1a <__aeabi_dadd+0xa6>
 8000e98:	0762      	lsls	r2, r4, #29
 8000e9a:	08c0      	lsrs	r0, r0, #3
 8000e9c:	4302      	orrs	r2, r0
 8000e9e:	08e4      	lsrs	r4, r4, #3
 8000ea0:	e736      	b.n	8000d10 <__aeabi_dadd+0x39c>
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	4653      	mov	r3, sl
 8000ea6:	3920      	subs	r1, #32
 8000ea8:	40cb      	lsrs	r3, r1
 8000eaa:	4699      	mov	r9, r3
 8000eac:	2a20      	cmp	r2, #32
 8000eae:	d006      	beq.n	8000ebe <__aeabi_dadd+0x54a>
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	4653      	mov	r3, sl
 8000eb4:	1a8a      	subs	r2, r1, r2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	4662      	mov	r2, ip
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	4694      	mov	ip, r2
 8000ebe:	4665      	mov	r5, ip
 8000ec0:	1e6b      	subs	r3, r5, #1
 8000ec2:	419d      	sbcs	r5, r3
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	431d      	orrs	r5, r3
 8000ec8:	e659      	b.n	8000b7e <__aeabi_dadd+0x20a>
 8000eca:	0762      	lsls	r2, r4, #29
 8000ecc:	08c0      	lsrs	r0, r0, #3
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	08e4      	lsrs	r4, r4, #3
 8000ed2:	e70d      	b.n	8000cf0 <__aeabi_dadd+0x37c>
 8000ed4:	4653      	mov	r3, sl
 8000ed6:	075a      	lsls	r2, r3, #29
 8000ed8:	4663      	mov	r3, ip
 8000eda:	08d8      	lsrs	r0, r3, #3
 8000edc:	4653      	mov	r3, sl
 8000ede:	000e      	movs	r6, r1
 8000ee0:	4302      	orrs	r2, r0
 8000ee2:	08dc      	lsrs	r4, r3, #3
 8000ee4:	e714      	b.n	8000d10 <__aeabi_dadd+0x39c>
 8000ee6:	0015      	movs	r5, r2
 8000ee8:	0026      	movs	r6, r4
 8000eea:	3d20      	subs	r5, #32
 8000eec:	40ee      	lsrs	r6, r5
 8000eee:	2a20      	cmp	r2, #32
 8000ef0:	d003      	beq.n	8000efa <__aeabi_dadd+0x586>
 8000ef2:	2540      	movs	r5, #64	@ 0x40
 8000ef4:	1aaa      	subs	r2, r5, r2
 8000ef6:	4094      	lsls	r4, r2
 8000ef8:	4320      	orrs	r0, r4
 8000efa:	1e42      	subs	r2, r0, #1
 8000efc:	4190      	sbcs	r0, r2
 8000efe:	0005      	movs	r5, r0
 8000f00:	4335      	orrs	r5, r6
 8000f02:	e606      	b.n	8000b12 <__aeabi_dadd+0x19e>
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d07c      	beq.n	8001002 <__aeabi_dadd+0x68e>
 8000f08:	4662      	mov	r2, ip
 8000f0a:	4653      	mov	r3, sl
 8000f0c:	08c0      	lsrs	r0, r0, #3
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dadd+0x5a0>
 8000f12:	e6fa      	b.n	8000d0a <__aeabi_dadd+0x396>
 8000f14:	0762      	lsls	r2, r4, #29
 8000f16:	4310      	orrs	r0, r2
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	08e4      	lsrs	r4, r4, #3
 8000f1c:	0312      	lsls	r2, r2, #12
 8000f1e:	4214      	tst	r4, r2
 8000f20:	d008      	beq.n	8000f34 <__aeabi_dadd+0x5c0>
 8000f22:	08d9      	lsrs	r1, r3, #3
 8000f24:	4211      	tst	r1, r2
 8000f26:	d105      	bne.n	8000f34 <__aeabi_dadd+0x5c0>
 8000f28:	4663      	mov	r3, ip
 8000f2a:	08d8      	lsrs	r0, r3, #3
 8000f2c:	4653      	mov	r3, sl
 8000f2e:	000c      	movs	r4, r1
 8000f30:	075b      	lsls	r3, r3, #29
 8000f32:	4318      	orrs	r0, r3
 8000f34:	0f42      	lsrs	r2, r0, #29
 8000f36:	00c0      	lsls	r0, r0, #3
 8000f38:	08c0      	lsrs	r0, r0, #3
 8000f3a:	0752      	lsls	r2, r2, #29
 8000f3c:	4302      	orrs	r2, r0
 8000f3e:	e6e7      	b.n	8000d10 <__aeabi_dadd+0x39c>
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x5d2>
 8000f44:	e72d      	b.n	8000da2 <__aeabi_dadd+0x42e>
 8000f46:	4663      	mov	r3, ip
 8000f48:	08d8      	lsrs	r0, r3, #3
 8000f4a:	4653      	mov	r3, sl
 8000f4c:	075a      	lsls	r2, r3, #29
 8000f4e:	000e      	movs	r6, r1
 8000f50:	4302      	orrs	r2, r0
 8000f52:	08dc      	lsrs	r4, r3, #3
 8000f54:	e6cc      	b.n	8000cf0 <__aeabi_dadd+0x37c>
 8000f56:	4663      	mov	r3, ip
 8000f58:	1a1d      	subs	r5, r3, r0
 8000f5a:	45ac      	cmp	ip, r5
 8000f5c:	4192      	sbcs	r2, r2
 8000f5e:	4653      	mov	r3, sl
 8000f60:	4252      	negs	r2, r2
 8000f62:	1b1c      	subs	r4, r3, r4
 8000f64:	000e      	movs	r6, r1
 8000f66:	4688      	mov	r8, r1
 8000f68:	1aa4      	subs	r4, r4, r2
 8000f6a:	3701      	adds	r7, #1
 8000f6c:	e555      	b.n	8000a1a <__aeabi_dadd+0xa6>
 8000f6e:	4663      	mov	r3, ip
 8000f70:	08d9      	lsrs	r1, r3, #3
 8000f72:	4653      	mov	r3, sl
 8000f74:	075a      	lsls	r2, r3, #29
 8000f76:	430a      	orrs	r2, r1
 8000f78:	08dc      	lsrs	r4, r3, #3
 8000f7a:	e6c9      	b.n	8000d10 <__aeabi_dadd+0x39c>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	4654      	mov	r4, sl
 8000f80:	e6d4      	b.n	8000d2c <__aeabi_dadd+0x3b8>
 8000f82:	08c0      	lsrs	r0, r0, #3
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x616>
 8000f88:	e6bf      	b.n	8000d0a <__aeabi_dadd+0x396>
 8000f8a:	0762      	lsls	r2, r4, #29
 8000f8c:	4310      	orrs	r0, r2
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	08e4      	lsrs	r4, r4, #3
 8000f92:	0312      	lsls	r2, r2, #12
 8000f94:	4214      	tst	r4, r2
 8000f96:	d0cd      	beq.n	8000f34 <__aeabi_dadd+0x5c0>
 8000f98:	08dd      	lsrs	r5, r3, #3
 8000f9a:	4215      	tst	r5, r2
 8000f9c:	d1ca      	bne.n	8000f34 <__aeabi_dadd+0x5c0>
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	08d8      	lsrs	r0, r3, #3
 8000fa2:	4653      	mov	r3, sl
 8000fa4:	075b      	lsls	r3, r3, #29
 8000fa6:	000e      	movs	r6, r1
 8000fa8:	002c      	movs	r4, r5
 8000faa:	4318      	orrs	r0, r3
 8000fac:	e7c2      	b.n	8000f34 <__aeabi_dadd+0x5c0>
 8000fae:	4663      	mov	r3, ip
 8000fb0:	08d9      	lsrs	r1, r3, #3
 8000fb2:	4653      	mov	r3, sl
 8000fb4:	075a      	lsls	r2, r3, #29
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	08dc      	lsrs	r4, r3, #3
 8000fba:	e699      	b.n	8000cf0 <__aeabi_dadd+0x37c>
 8000fbc:	4663      	mov	r3, ip
 8000fbe:	08d8      	lsrs	r0, r3, #3
 8000fc0:	4653      	mov	r3, sl
 8000fc2:	075a      	lsls	r2, r3, #29
 8000fc4:	000e      	movs	r6, r1
 8000fc6:	4302      	orrs	r2, r0
 8000fc8:	08dc      	lsrs	r4, r3, #3
 8000fca:	e6a1      	b.n	8000d10 <__aeabi_dadd+0x39c>
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0027      	movs	r7, r4
 8000fd0:	3920      	subs	r1, #32
 8000fd2:	40cf      	lsrs	r7, r1
 8000fd4:	2a20      	cmp	r2, #32
 8000fd6:	d003      	beq.n	8000fe0 <__aeabi_dadd+0x66c>
 8000fd8:	2140      	movs	r1, #64	@ 0x40
 8000fda:	1a8a      	subs	r2, r1, r2
 8000fdc:	4094      	lsls	r4, r2
 8000fde:	4320      	orrs	r0, r4
 8000fe0:	1e42      	subs	r2, r0, #1
 8000fe2:	4190      	sbcs	r0, r2
 8000fe4:	0005      	movs	r5, r0
 8000fe6:	433d      	orrs	r5, r7
 8000fe8:	e651      	b.n	8000c8e <__aeabi_dadd+0x31a>
 8000fea:	000c      	movs	r4, r1
 8000fec:	2500      	movs	r5, #0
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e558      	b.n	8000aa4 <__aeabi_dadd+0x130>
 8000ff2:	4460      	add	r0, ip
 8000ff4:	4560      	cmp	r0, ip
 8000ff6:	4192      	sbcs	r2, r2
 8000ff8:	4454      	add	r4, sl
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	0005      	movs	r5, r0
 8000ffe:	18a4      	adds	r4, r4, r2
 8001000:	e73a      	b.n	8000e78 <__aeabi_dadd+0x504>
 8001002:	4653      	mov	r3, sl
 8001004:	075a      	lsls	r2, r3, #29
 8001006:	4663      	mov	r3, ip
 8001008:	08d9      	lsrs	r1, r3, #3
 800100a:	4653      	mov	r3, sl
 800100c:	430a      	orrs	r2, r1
 800100e:	08dc      	lsrs	r4, r3, #3
 8001010:	e67e      	b.n	8000d10 <__aeabi_dadd+0x39c>
 8001012:	001a      	movs	r2, r3
 8001014:	001c      	movs	r4, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	d000      	beq.n	800101c <__aeabi_dadd+0x6a8>
 800101a:	e6ab      	b.n	8000d74 <__aeabi_dadd+0x400>
 800101c:	e6c1      	b.n	8000da2 <__aeabi_dadd+0x42e>
 800101e:	2120      	movs	r1, #32
 8001020:	2500      	movs	r5, #0
 8001022:	1a09      	subs	r1, r1, r0
 8001024:	e519      	b.n	8000a5a <__aeabi_dadd+0xe6>
 8001026:	2200      	movs	r2, #0
 8001028:	2500      	movs	r5, #0
 800102a:	4c01      	ldr	r4, [pc, #4]	@ (8001030 <__aeabi_dadd+0x6bc>)
 800102c:	e53a      	b.n	8000aa4 <__aeabi_dadd+0x130>
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	000007ff 	.word	0x000007ff
 8001034:	ff7fffff 	.word	0xff7fffff
 8001038:	000007fe 	.word	0x000007fe

0800103c <__aeabi_ddiv>:
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	46de      	mov	lr, fp
 8001040:	4645      	mov	r5, r8
 8001042:	4657      	mov	r7, sl
 8001044:	464e      	mov	r6, r9
 8001046:	b5e0      	push	{r5, r6, r7, lr}
 8001048:	b087      	sub	sp, #28
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	030b      	lsls	r3, r1, #12
 8001050:	0b1b      	lsrs	r3, r3, #12
 8001052:	469b      	mov	fp, r3
 8001054:	0fca      	lsrs	r2, r1, #31
 8001056:	004b      	lsls	r3, r1, #1
 8001058:	0004      	movs	r4, r0
 800105a:	4680      	mov	r8, r0
 800105c:	0d5b      	lsrs	r3, r3, #21
 800105e:	9202      	str	r2, [sp, #8]
 8001060:	d100      	bne.n	8001064 <__aeabi_ddiv+0x28>
 8001062:	e16a      	b.n	800133a <__aeabi_ddiv+0x2fe>
 8001064:	4ad4      	ldr	r2, [pc, #848]	@ (80013b8 <__aeabi_ddiv+0x37c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x30>
 800106a:	e18c      	b.n	8001386 <__aeabi_ddiv+0x34a>
 800106c:	4659      	mov	r1, fp
 800106e:	0f42      	lsrs	r2, r0, #29
 8001070:	00c9      	lsls	r1, r1, #3
 8001072:	430a      	orrs	r2, r1
 8001074:	2180      	movs	r1, #128	@ 0x80
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	4311      	orrs	r1, r2
 800107a:	00c2      	lsls	r2, r0, #3
 800107c:	4690      	mov	r8, r2
 800107e:	4acf      	ldr	r2, [pc, #828]	@ (80013bc <__aeabi_ddiv+0x380>)
 8001080:	4689      	mov	r9, r1
 8001082:	4692      	mov	sl, r2
 8001084:	449a      	add	sl, r3
 8001086:	2300      	movs	r3, #0
 8001088:	2400      	movs	r4, #0
 800108a:	9303      	str	r3, [sp, #12]
 800108c:	9e00      	ldr	r6, [sp, #0]
 800108e:	9f01      	ldr	r7, [sp, #4]
 8001090:	033b      	lsls	r3, r7, #12
 8001092:	0b1b      	lsrs	r3, r3, #12
 8001094:	469b      	mov	fp, r3
 8001096:	007b      	lsls	r3, r7, #1
 8001098:	0030      	movs	r0, r6
 800109a:	0d5b      	lsrs	r3, r3, #21
 800109c:	0ffd      	lsrs	r5, r7, #31
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_ddiv+0x68>
 80010a2:	e128      	b.n	80012f6 <__aeabi_ddiv+0x2ba>
 80010a4:	4ac4      	ldr	r2, [pc, #784]	@ (80013b8 <__aeabi_ddiv+0x37c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d100      	bne.n	80010ac <__aeabi_ddiv+0x70>
 80010aa:	e177      	b.n	800139c <__aeabi_ddiv+0x360>
 80010ac:	4659      	mov	r1, fp
 80010ae:	0f72      	lsrs	r2, r6, #29
 80010b0:	00c9      	lsls	r1, r1, #3
 80010b2:	430a      	orrs	r2, r1
 80010b4:	2180      	movs	r1, #128	@ 0x80
 80010b6:	0409      	lsls	r1, r1, #16
 80010b8:	4311      	orrs	r1, r2
 80010ba:	468b      	mov	fp, r1
 80010bc:	49bf      	ldr	r1, [pc, #764]	@ (80013bc <__aeabi_ddiv+0x380>)
 80010be:	00f2      	lsls	r2, r6, #3
 80010c0:	468c      	mov	ip, r1
 80010c2:	4651      	mov	r1, sl
 80010c4:	4463      	add	r3, ip
 80010c6:	1acb      	subs	r3, r1, r3
 80010c8:	469a      	mov	sl, r3
 80010ca:	2300      	movs	r3, #0
 80010cc:	9e02      	ldr	r6, [sp, #8]
 80010ce:	406e      	eors	r6, r5
 80010d0:	2c0f      	cmp	r4, #15
 80010d2:	d827      	bhi.n	8001124 <__aeabi_ddiv+0xe8>
 80010d4:	49ba      	ldr	r1, [pc, #744]	@ (80013c0 <__aeabi_ddiv+0x384>)
 80010d6:	00a4      	lsls	r4, r4, #2
 80010d8:	5909      	ldr	r1, [r1, r4]
 80010da:	468f      	mov	pc, r1
 80010dc:	46cb      	mov	fp, r9
 80010de:	4642      	mov	r2, r8
 80010e0:	9e02      	ldr	r6, [sp, #8]
 80010e2:	9b03      	ldr	r3, [sp, #12]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d016      	beq.n	8001116 <__aeabi_ddiv+0xda>
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0xb2>
 80010ec:	e2a6      	b.n	800163c <__aeabi_ddiv+0x600>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d000      	beq.n	80010f4 <__aeabi_ddiv+0xb8>
 80010f2:	e0df      	b.n	80012b4 <__aeabi_ddiv+0x278>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2300      	movs	r3, #0
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	051b      	lsls	r3, r3, #20
 80010fe:	4323      	orrs	r3, r4
 8001100:	07f6      	lsls	r6, r6, #31
 8001102:	4333      	orrs	r3, r6
 8001104:	4640      	mov	r0, r8
 8001106:	0019      	movs	r1, r3
 8001108:	b007      	add	sp, #28
 800110a:	bcf0      	pop	{r4, r5, r6, r7}
 800110c:	46bb      	mov	fp, r7
 800110e:	46b2      	mov	sl, r6
 8001110:	46a9      	mov	r9, r5
 8001112:	46a0      	mov	r8, r4
 8001114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001116:	2200      	movs	r2, #0
 8001118:	2400      	movs	r4, #0
 800111a:	4690      	mov	r8, r2
 800111c:	4ba6      	ldr	r3, [pc, #664]	@ (80013b8 <__aeabi_ddiv+0x37c>)
 800111e:	e7ed      	b.n	80010fc <__aeabi_ddiv+0xc0>
 8001120:	002e      	movs	r6, r5
 8001122:	e7df      	b.n	80010e4 <__aeabi_ddiv+0xa8>
 8001124:	45cb      	cmp	fp, r9
 8001126:	d200      	bcs.n	800112a <__aeabi_ddiv+0xee>
 8001128:	e1d4      	b.n	80014d4 <__aeabi_ddiv+0x498>
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0xf2>
 800112c:	e1cf      	b.n	80014ce <__aeabi_ddiv+0x492>
 800112e:	2301      	movs	r3, #1
 8001130:	425b      	negs	r3, r3
 8001132:	469c      	mov	ip, r3
 8001134:	4644      	mov	r4, r8
 8001136:	4648      	mov	r0, r9
 8001138:	2700      	movs	r7, #0
 800113a:	44e2      	add	sl, ip
 800113c:	465b      	mov	r3, fp
 800113e:	0e15      	lsrs	r5, r2, #24
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	431d      	orrs	r5, r3
 8001144:	0c19      	lsrs	r1, r3, #16
 8001146:	042b      	lsls	r3, r5, #16
 8001148:	0212      	lsls	r2, r2, #8
 800114a:	9500      	str	r5, [sp, #0]
 800114c:	0c1d      	lsrs	r5, r3, #16
 800114e:	4691      	mov	r9, r2
 8001150:	9102      	str	r1, [sp, #8]
 8001152:	9503      	str	r5, [sp, #12]
 8001154:	f7ff f87a 	bl	800024c <__aeabi_uidivmod>
 8001158:	0002      	movs	r2, r0
 800115a:	436a      	muls	r2, r5
 800115c:	040b      	lsls	r3, r1, #16
 800115e:	0c21      	lsrs	r1, r4, #16
 8001160:	4680      	mov	r8, r0
 8001162:	4319      	orrs	r1, r3
 8001164:	428a      	cmp	r2, r1
 8001166:	d909      	bls.n	800117c <__aeabi_ddiv+0x140>
 8001168:	9d00      	ldr	r5, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	46ac      	mov	ip, r5
 800116e:	425b      	negs	r3, r3
 8001170:	4461      	add	r1, ip
 8001172:	469c      	mov	ip, r3
 8001174:	44e0      	add	r8, ip
 8001176:	428d      	cmp	r5, r1
 8001178:	d800      	bhi.n	800117c <__aeabi_ddiv+0x140>
 800117a:	e1fb      	b.n	8001574 <__aeabi_ddiv+0x538>
 800117c:	1a88      	subs	r0, r1, r2
 800117e:	9902      	ldr	r1, [sp, #8]
 8001180:	f7ff f864 	bl	800024c <__aeabi_uidivmod>
 8001184:	9a03      	ldr	r2, [sp, #12]
 8001186:	0424      	lsls	r4, r4, #16
 8001188:	4342      	muls	r2, r0
 800118a:	0409      	lsls	r1, r1, #16
 800118c:	0c24      	lsrs	r4, r4, #16
 800118e:	0003      	movs	r3, r0
 8001190:	430c      	orrs	r4, r1
 8001192:	42a2      	cmp	r2, r4
 8001194:	d906      	bls.n	80011a4 <__aeabi_ddiv+0x168>
 8001196:	9900      	ldr	r1, [sp, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	468c      	mov	ip, r1
 800119c:	4464      	add	r4, ip
 800119e:	42a1      	cmp	r1, r4
 80011a0:	d800      	bhi.n	80011a4 <__aeabi_ddiv+0x168>
 80011a2:	e1e1      	b.n	8001568 <__aeabi_ddiv+0x52c>
 80011a4:	1aa0      	subs	r0, r4, r2
 80011a6:	4642      	mov	r2, r8
 80011a8:	0412      	lsls	r2, r2, #16
 80011aa:	431a      	orrs	r2, r3
 80011ac:	4693      	mov	fp, r2
 80011ae:	464b      	mov	r3, r9
 80011b0:	4659      	mov	r1, fp
 80011b2:	0c1b      	lsrs	r3, r3, #16
 80011b4:	001d      	movs	r5, r3
 80011b6:	9304      	str	r3, [sp, #16]
 80011b8:	040b      	lsls	r3, r1, #16
 80011ba:	4649      	mov	r1, r9
 80011bc:	0409      	lsls	r1, r1, #16
 80011be:	0c09      	lsrs	r1, r1, #16
 80011c0:	000c      	movs	r4, r1
 80011c2:	0c1b      	lsrs	r3, r3, #16
 80011c4:	435c      	muls	r4, r3
 80011c6:	0c12      	lsrs	r2, r2, #16
 80011c8:	436b      	muls	r3, r5
 80011ca:	4688      	mov	r8, r1
 80011cc:	4351      	muls	r1, r2
 80011ce:	436a      	muls	r2, r5
 80011d0:	0c25      	lsrs	r5, r4, #16
 80011d2:	46ac      	mov	ip, r5
 80011d4:	185b      	adds	r3, r3, r1
 80011d6:	4463      	add	r3, ip
 80011d8:	4299      	cmp	r1, r3
 80011da:	d903      	bls.n	80011e4 <__aeabi_ddiv+0x1a8>
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	0249      	lsls	r1, r1, #9
 80011e0:	468c      	mov	ip, r1
 80011e2:	4462      	add	r2, ip
 80011e4:	0c19      	lsrs	r1, r3, #16
 80011e6:	0424      	lsls	r4, r4, #16
 80011e8:	041b      	lsls	r3, r3, #16
 80011ea:	0c24      	lsrs	r4, r4, #16
 80011ec:	188a      	adds	r2, r1, r2
 80011ee:	191c      	adds	r4, r3, r4
 80011f0:	4290      	cmp	r0, r2
 80011f2:	d302      	bcc.n	80011fa <__aeabi_ddiv+0x1be>
 80011f4:	d116      	bne.n	8001224 <__aeabi_ddiv+0x1e8>
 80011f6:	42a7      	cmp	r7, r4
 80011f8:	d214      	bcs.n	8001224 <__aeabi_ddiv+0x1e8>
 80011fa:	465b      	mov	r3, fp
 80011fc:	9d00      	ldr	r5, [sp, #0]
 80011fe:	3b01      	subs	r3, #1
 8001200:	444f      	add	r7, r9
 8001202:	9305      	str	r3, [sp, #20]
 8001204:	454f      	cmp	r7, r9
 8001206:	419b      	sbcs	r3, r3
 8001208:	46ac      	mov	ip, r5
 800120a:	425b      	negs	r3, r3
 800120c:	4463      	add	r3, ip
 800120e:	18c0      	adds	r0, r0, r3
 8001210:	4285      	cmp	r5, r0
 8001212:	d300      	bcc.n	8001216 <__aeabi_ddiv+0x1da>
 8001214:	e1a1      	b.n	800155a <__aeabi_ddiv+0x51e>
 8001216:	4282      	cmp	r2, r0
 8001218:	d900      	bls.n	800121c <__aeabi_ddiv+0x1e0>
 800121a:	e1f6      	b.n	800160a <__aeabi_ddiv+0x5ce>
 800121c:	d100      	bne.n	8001220 <__aeabi_ddiv+0x1e4>
 800121e:	e1f1      	b.n	8001604 <__aeabi_ddiv+0x5c8>
 8001220:	9b05      	ldr	r3, [sp, #20]
 8001222:	469b      	mov	fp, r3
 8001224:	1b3c      	subs	r4, r7, r4
 8001226:	42a7      	cmp	r7, r4
 8001228:	41bf      	sbcs	r7, r7
 800122a:	9d00      	ldr	r5, [sp, #0]
 800122c:	1a80      	subs	r0, r0, r2
 800122e:	427f      	negs	r7, r7
 8001230:	1bc0      	subs	r0, r0, r7
 8001232:	4285      	cmp	r5, r0
 8001234:	d100      	bne.n	8001238 <__aeabi_ddiv+0x1fc>
 8001236:	e1d0      	b.n	80015da <__aeabi_ddiv+0x59e>
 8001238:	9902      	ldr	r1, [sp, #8]
 800123a:	f7ff f807 	bl	800024c <__aeabi_uidivmod>
 800123e:	9a03      	ldr	r2, [sp, #12]
 8001240:	040b      	lsls	r3, r1, #16
 8001242:	4342      	muls	r2, r0
 8001244:	0c21      	lsrs	r1, r4, #16
 8001246:	0007      	movs	r7, r0
 8001248:	4319      	orrs	r1, r3
 800124a:	428a      	cmp	r2, r1
 800124c:	d900      	bls.n	8001250 <__aeabi_ddiv+0x214>
 800124e:	e178      	b.n	8001542 <__aeabi_ddiv+0x506>
 8001250:	1a88      	subs	r0, r1, r2
 8001252:	9902      	ldr	r1, [sp, #8]
 8001254:	f7fe fffa 	bl	800024c <__aeabi_uidivmod>
 8001258:	9a03      	ldr	r2, [sp, #12]
 800125a:	0424      	lsls	r4, r4, #16
 800125c:	4342      	muls	r2, r0
 800125e:	0409      	lsls	r1, r1, #16
 8001260:	0c24      	lsrs	r4, r4, #16
 8001262:	0003      	movs	r3, r0
 8001264:	430c      	orrs	r4, r1
 8001266:	42a2      	cmp	r2, r4
 8001268:	d900      	bls.n	800126c <__aeabi_ddiv+0x230>
 800126a:	e15d      	b.n	8001528 <__aeabi_ddiv+0x4ec>
 800126c:	4641      	mov	r1, r8
 800126e:	1aa4      	subs	r4, r4, r2
 8001270:	043a      	lsls	r2, r7, #16
 8001272:	431a      	orrs	r2, r3
 8001274:	9d04      	ldr	r5, [sp, #16]
 8001276:	0413      	lsls	r3, r2, #16
 8001278:	0c1b      	lsrs	r3, r3, #16
 800127a:	4359      	muls	r1, r3
 800127c:	4647      	mov	r7, r8
 800127e:	436b      	muls	r3, r5
 8001280:	469c      	mov	ip, r3
 8001282:	0c10      	lsrs	r0, r2, #16
 8001284:	4347      	muls	r7, r0
 8001286:	0c0b      	lsrs	r3, r1, #16
 8001288:	44bc      	add	ip, r7
 800128a:	4463      	add	r3, ip
 800128c:	4368      	muls	r0, r5
 800128e:	429f      	cmp	r7, r3
 8001290:	d903      	bls.n	800129a <__aeabi_ddiv+0x25e>
 8001292:	2580      	movs	r5, #128	@ 0x80
 8001294:	026d      	lsls	r5, r5, #9
 8001296:	46ac      	mov	ip, r5
 8001298:	4460      	add	r0, ip
 800129a:	0c1f      	lsrs	r7, r3, #16
 800129c:	0409      	lsls	r1, r1, #16
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	0c09      	lsrs	r1, r1, #16
 80012a2:	183f      	adds	r7, r7, r0
 80012a4:	185b      	adds	r3, r3, r1
 80012a6:	42bc      	cmp	r4, r7
 80012a8:	d200      	bcs.n	80012ac <__aeabi_ddiv+0x270>
 80012aa:	e102      	b.n	80014b2 <__aeabi_ddiv+0x476>
 80012ac:	d100      	bne.n	80012b0 <__aeabi_ddiv+0x274>
 80012ae:	e0fd      	b.n	80014ac <__aeabi_ddiv+0x470>
 80012b0:	2301      	movs	r3, #1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	4b43      	ldr	r3, [pc, #268]	@ (80013c4 <__aeabi_ddiv+0x388>)
 80012b6:	4453      	add	r3, sl
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dc00      	bgt.n	80012be <__aeabi_ddiv+0x282>
 80012bc:	e0ae      	b.n	800141c <__aeabi_ddiv+0x3e0>
 80012be:	0751      	lsls	r1, r2, #29
 80012c0:	d000      	beq.n	80012c4 <__aeabi_ddiv+0x288>
 80012c2:	e198      	b.n	80015f6 <__aeabi_ddiv+0x5ba>
 80012c4:	4659      	mov	r1, fp
 80012c6:	01c9      	lsls	r1, r1, #7
 80012c8:	d506      	bpl.n	80012d8 <__aeabi_ddiv+0x29c>
 80012ca:	4659      	mov	r1, fp
 80012cc:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <__aeabi_ddiv+0x38c>)
 80012ce:	4019      	ands	r1, r3
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	468b      	mov	fp, r1
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4453      	add	r3, sl
 80012d8:	493c      	ldr	r1, [pc, #240]	@ (80013cc <__aeabi_ddiv+0x390>)
 80012da:	428b      	cmp	r3, r1
 80012dc:	dd00      	ble.n	80012e0 <__aeabi_ddiv+0x2a4>
 80012de:	e71a      	b.n	8001116 <__aeabi_ddiv+0xda>
 80012e0:	4659      	mov	r1, fp
 80012e2:	08d2      	lsrs	r2, r2, #3
 80012e4:	0749      	lsls	r1, r1, #29
 80012e6:	4311      	orrs	r1, r2
 80012e8:	465a      	mov	r2, fp
 80012ea:	055b      	lsls	r3, r3, #21
 80012ec:	0254      	lsls	r4, r2, #9
 80012ee:	4688      	mov	r8, r1
 80012f0:	0b24      	lsrs	r4, r4, #12
 80012f2:	0d5b      	lsrs	r3, r3, #21
 80012f4:	e702      	b.n	80010fc <__aeabi_ddiv+0xc0>
 80012f6:	465a      	mov	r2, fp
 80012f8:	9b00      	ldr	r3, [sp, #0]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	d100      	bne.n	8001300 <__aeabi_ddiv+0x2c4>
 80012fe:	e07e      	b.n	80013fe <__aeabi_ddiv+0x3c2>
 8001300:	465b      	mov	r3, fp
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <__aeabi_ddiv+0x2cc>
 8001306:	e100      	b.n	800150a <__aeabi_ddiv+0x4ce>
 8001308:	4658      	mov	r0, fp
 800130a:	f001 fabb 	bl	8002884 <__clzsi2>
 800130e:	0002      	movs	r2, r0
 8001310:	0003      	movs	r3, r0
 8001312:	3a0b      	subs	r2, #11
 8001314:	271d      	movs	r7, #29
 8001316:	9e00      	ldr	r6, [sp, #0]
 8001318:	1aba      	subs	r2, r7, r2
 800131a:	0019      	movs	r1, r3
 800131c:	4658      	mov	r0, fp
 800131e:	40d6      	lsrs	r6, r2
 8001320:	3908      	subs	r1, #8
 8001322:	4088      	lsls	r0, r1
 8001324:	0032      	movs	r2, r6
 8001326:	4302      	orrs	r2, r0
 8001328:	4693      	mov	fp, r2
 800132a:	9a00      	ldr	r2, [sp, #0]
 800132c:	408a      	lsls	r2, r1
 800132e:	4928      	ldr	r1, [pc, #160]	@ (80013d0 <__aeabi_ddiv+0x394>)
 8001330:	4453      	add	r3, sl
 8001332:	468a      	mov	sl, r1
 8001334:	449a      	add	sl, r3
 8001336:	2300      	movs	r3, #0
 8001338:	e6c8      	b.n	80010cc <__aeabi_ddiv+0x90>
 800133a:	465b      	mov	r3, fp
 800133c:	4303      	orrs	r3, r0
 800133e:	4699      	mov	r9, r3
 8001340:	d056      	beq.n	80013f0 <__aeabi_ddiv+0x3b4>
 8001342:	465b      	mov	r3, fp
 8001344:	2b00      	cmp	r3, #0
 8001346:	d100      	bne.n	800134a <__aeabi_ddiv+0x30e>
 8001348:	e0cd      	b.n	80014e6 <__aeabi_ddiv+0x4aa>
 800134a:	4658      	mov	r0, fp
 800134c:	f001 fa9a 	bl	8002884 <__clzsi2>
 8001350:	230b      	movs	r3, #11
 8001352:	425b      	negs	r3, r3
 8001354:	469c      	mov	ip, r3
 8001356:	0002      	movs	r2, r0
 8001358:	4484      	add	ip, r0
 800135a:	4666      	mov	r6, ip
 800135c:	231d      	movs	r3, #29
 800135e:	1b9b      	subs	r3, r3, r6
 8001360:	0026      	movs	r6, r4
 8001362:	0011      	movs	r1, r2
 8001364:	4658      	mov	r0, fp
 8001366:	40de      	lsrs	r6, r3
 8001368:	3908      	subs	r1, #8
 800136a:	4088      	lsls	r0, r1
 800136c:	0033      	movs	r3, r6
 800136e:	4303      	orrs	r3, r0
 8001370:	4699      	mov	r9, r3
 8001372:	0023      	movs	r3, r4
 8001374:	408b      	lsls	r3, r1
 8001376:	4698      	mov	r8, r3
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <__aeabi_ddiv+0x398>)
 800137a:	2400      	movs	r4, #0
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	469a      	mov	sl, r3
 8001380:	2300      	movs	r3, #0
 8001382:	9303      	str	r3, [sp, #12]
 8001384:	e682      	b.n	800108c <__aeabi_ddiv+0x50>
 8001386:	465a      	mov	r2, fp
 8001388:	4302      	orrs	r2, r0
 800138a:	4691      	mov	r9, r2
 800138c:	d12a      	bne.n	80013e4 <__aeabi_ddiv+0x3a8>
 800138e:	2200      	movs	r2, #0
 8001390:	469a      	mov	sl, r3
 8001392:	2302      	movs	r3, #2
 8001394:	4690      	mov	r8, r2
 8001396:	2408      	movs	r4, #8
 8001398:	9303      	str	r3, [sp, #12]
 800139a:	e677      	b.n	800108c <__aeabi_ddiv+0x50>
 800139c:	465a      	mov	r2, fp
 800139e:	9b00      	ldr	r3, [sp, #0]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <__aeabi_ddiv+0x39c>)
 80013a4:	469c      	mov	ip, r3
 80013a6:	44e2      	add	sl, ip
 80013a8:	2a00      	cmp	r2, #0
 80013aa:	d117      	bne.n	80013dc <__aeabi_ddiv+0x3a0>
 80013ac:	2302      	movs	r3, #2
 80013ae:	431c      	orrs	r4, r3
 80013b0:	2300      	movs	r3, #0
 80013b2:	469b      	mov	fp, r3
 80013b4:	3302      	adds	r3, #2
 80013b6:	e689      	b.n	80010cc <__aeabi_ddiv+0x90>
 80013b8:	000007ff 	.word	0x000007ff
 80013bc:	fffffc01 	.word	0xfffffc01
 80013c0:	0800cd00 	.word	0x0800cd00
 80013c4:	000003ff 	.word	0x000003ff
 80013c8:	feffffff 	.word	0xfeffffff
 80013cc:	000007fe 	.word	0x000007fe
 80013d0:	000003f3 	.word	0x000003f3
 80013d4:	fffffc0d 	.word	0xfffffc0d
 80013d8:	fffff801 	.word	0xfffff801
 80013dc:	2303      	movs	r3, #3
 80013de:	0032      	movs	r2, r6
 80013e0:	431c      	orrs	r4, r3
 80013e2:	e673      	b.n	80010cc <__aeabi_ddiv+0x90>
 80013e4:	469a      	mov	sl, r3
 80013e6:	2303      	movs	r3, #3
 80013e8:	46d9      	mov	r9, fp
 80013ea:	240c      	movs	r4, #12
 80013ec:	9303      	str	r3, [sp, #12]
 80013ee:	e64d      	b.n	800108c <__aeabi_ddiv+0x50>
 80013f0:	2300      	movs	r3, #0
 80013f2:	4698      	mov	r8, r3
 80013f4:	469a      	mov	sl, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	2404      	movs	r4, #4
 80013fa:	9303      	str	r3, [sp, #12]
 80013fc:	e646      	b.n	800108c <__aeabi_ddiv+0x50>
 80013fe:	2301      	movs	r3, #1
 8001400:	431c      	orrs	r4, r3
 8001402:	2300      	movs	r3, #0
 8001404:	469b      	mov	fp, r3
 8001406:	3301      	adds	r3, #1
 8001408:	e660      	b.n	80010cc <__aeabi_ddiv+0x90>
 800140a:	2300      	movs	r3, #0
 800140c:	2480      	movs	r4, #128	@ 0x80
 800140e:	4698      	mov	r8, r3
 8001410:	2600      	movs	r6, #0
 8001412:	4b92      	ldr	r3, [pc, #584]	@ (800165c <__aeabi_ddiv+0x620>)
 8001414:	0324      	lsls	r4, r4, #12
 8001416:	e671      	b.n	80010fc <__aeabi_ddiv+0xc0>
 8001418:	2201      	movs	r2, #1
 800141a:	4252      	negs	r2, r2
 800141c:	2101      	movs	r1, #1
 800141e:	1ac9      	subs	r1, r1, r3
 8001420:	2938      	cmp	r1, #56	@ 0x38
 8001422:	dd00      	ble.n	8001426 <__aeabi_ddiv+0x3ea>
 8001424:	e666      	b.n	80010f4 <__aeabi_ddiv+0xb8>
 8001426:	291f      	cmp	r1, #31
 8001428:	dc00      	bgt.n	800142c <__aeabi_ddiv+0x3f0>
 800142a:	e0ab      	b.n	8001584 <__aeabi_ddiv+0x548>
 800142c:	201f      	movs	r0, #31
 800142e:	4240      	negs	r0, r0
 8001430:	1ac3      	subs	r3, r0, r3
 8001432:	4658      	mov	r0, fp
 8001434:	40d8      	lsrs	r0, r3
 8001436:	0003      	movs	r3, r0
 8001438:	2920      	cmp	r1, #32
 800143a:	d004      	beq.n	8001446 <__aeabi_ddiv+0x40a>
 800143c:	4658      	mov	r0, fp
 800143e:	4988      	ldr	r1, [pc, #544]	@ (8001660 <__aeabi_ddiv+0x624>)
 8001440:	4451      	add	r1, sl
 8001442:	4088      	lsls	r0, r1
 8001444:	4302      	orrs	r2, r0
 8001446:	1e51      	subs	r1, r2, #1
 8001448:	418a      	sbcs	r2, r1
 800144a:	431a      	orrs	r2, r3
 800144c:	2307      	movs	r3, #7
 800144e:	0019      	movs	r1, r3
 8001450:	2400      	movs	r4, #0
 8001452:	4011      	ands	r1, r2
 8001454:	4213      	tst	r3, r2
 8001456:	d00c      	beq.n	8001472 <__aeabi_ddiv+0x436>
 8001458:	230f      	movs	r3, #15
 800145a:	4013      	ands	r3, r2
 800145c:	2b04      	cmp	r3, #4
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0x426>
 8001460:	e0f9      	b.n	8001656 <__aeabi_ddiv+0x61a>
 8001462:	1d11      	adds	r1, r2, #4
 8001464:	4291      	cmp	r1, r2
 8001466:	419b      	sbcs	r3, r3
 8001468:	000a      	movs	r2, r1
 800146a:	425b      	negs	r3, r3
 800146c:	0759      	lsls	r1, r3, #29
 800146e:	025b      	lsls	r3, r3, #9
 8001470:	0b1c      	lsrs	r4, r3, #12
 8001472:	08d2      	lsrs	r2, r2, #3
 8001474:	430a      	orrs	r2, r1
 8001476:	4690      	mov	r8, r2
 8001478:	2300      	movs	r3, #0
 800147a:	e63f      	b.n	80010fc <__aeabi_ddiv+0xc0>
 800147c:	2480      	movs	r4, #128	@ 0x80
 800147e:	464b      	mov	r3, r9
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	4223      	tst	r3, r4
 8001484:	d009      	beq.n	800149a <__aeabi_ddiv+0x45e>
 8001486:	465b      	mov	r3, fp
 8001488:	4223      	tst	r3, r4
 800148a:	d106      	bne.n	800149a <__aeabi_ddiv+0x45e>
 800148c:	431c      	orrs	r4, r3
 800148e:	0324      	lsls	r4, r4, #12
 8001490:	002e      	movs	r6, r5
 8001492:	4690      	mov	r8, r2
 8001494:	4b71      	ldr	r3, [pc, #452]	@ (800165c <__aeabi_ddiv+0x620>)
 8001496:	0b24      	lsrs	r4, r4, #12
 8001498:	e630      	b.n	80010fc <__aeabi_ddiv+0xc0>
 800149a:	2480      	movs	r4, #128	@ 0x80
 800149c:	464b      	mov	r3, r9
 800149e:	0324      	lsls	r4, r4, #12
 80014a0:	431c      	orrs	r4, r3
 80014a2:	0324      	lsls	r4, r4, #12
 80014a4:	9e02      	ldr	r6, [sp, #8]
 80014a6:	4b6d      	ldr	r3, [pc, #436]	@ (800165c <__aeabi_ddiv+0x620>)
 80014a8:	0b24      	lsrs	r4, r4, #12
 80014aa:	e627      	b.n	80010fc <__aeabi_ddiv+0xc0>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_ddiv+0x476>
 80014b0:	e700      	b.n	80012b4 <__aeabi_ddiv+0x278>
 80014b2:	9800      	ldr	r0, [sp, #0]
 80014b4:	1e51      	subs	r1, r2, #1
 80014b6:	4684      	mov	ip, r0
 80014b8:	4464      	add	r4, ip
 80014ba:	4284      	cmp	r4, r0
 80014bc:	d200      	bcs.n	80014c0 <__aeabi_ddiv+0x484>
 80014be:	e084      	b.n	80015ca <__aeabi_ddiv+0x58e>
 80014c0:	42bc      	cmp	r4, r7
 80014c2:	d200      	bcs.n	80014c6 <__aeabi_ddiv+0x48a>
 80014c4:	e0ae      	b.n	8001624 <__aeabi_ddiv+0x5e8>
 80014c6:	d100      	bne.n	80014ca <__aeabi_ddiv+0x48e>
 80014c8:	e0c1      	b.n	800164e <__aeabi_ddiv+0x612>
 80014ca:	000a      	movs	r2, r1
 80014cc:	e6f0      	b.n	80012b0 <__aeabi_ddiv+0x274>
 80014ce:	4542      	cmp	r2, r8
 80014d0:	d900      	bls.n	80014d4 <__aeabi_ddiv+0x498>
 80014d2:	e62c      	b.n	800112e <__aeabi_ddiv+0xf2>
 80014d4:	464b      	mov	r3, r9
 80014d6:	07dc      	lsls	r4, r3, #31
 80014d8:	0858      	lsrs	r0, r3, #1
 80014da:	4643      	mov	r3, r8
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	431c      	orrs	r4, r3
 80014e0:	4643      	mov	r3, r8
 80014e2:	07df      	lsls	r7, r3, #31
 80014e4:	e62a      	b.n	800113c <__aeabi_ddiv+0x100>
 80014e6:	f001 f9cd 	bl	8002884 <__clzsi2>
 80014ea:	2315      	movs	r3, #21
 80014ec:	469c      	mov	ip, r3
 80014ee:	4484      	add	ip, r0
 80014f0:	0002      	movs	r2, r0
 80014f2:	4663      	mov	r3, ip
 80014f4:	3220      	adds	r2, #32
 80014f6:	2b1c      	cmp	r3, #28
 80014f8:	dc00      	bgt.n	80014fc <__aeabi_ddiv+0x4c0>
 80014fa:	e72e      	b.n	800135a <__aeabi_ddiv+0x31e>
 80014fc:	0023      	movs	r3, r4
 80014fe:	3808      	subs	r0, #8
 8001500:	4083      	lsls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	2300      	movs	r3, #0
 8001506:	4698      	mov	r8, r3
 8001508:	e736      	b.n	8001378 <__aeabi_ddiv+0x33c>
 800150a:	f001 f9bb 	bl	8002884 <__clzsi2>
 800150e:	0002      	movs	r2, r0
 8001510:	0003      	movs	r3, r0
 8001512:	3215      	adds	r2, #21
 8001514:	3320      	adds	r3, #32
 8001516:	2a1c      	cmp	r2, #28
 8001518:	dc00      	bgt.n	800151c <__aeabi_ddiv+0x4e0>
 800151a:	e6fb      	b.n	8001314 <__aeabi_ddiv+0x2d8>
 800151c:	9900      	ldr	r1, [sp, #0]
 800151e:	3808      	subs	r0, #8
 8001520:	4081      	lsls	r1, r0
 8001522:	2200      	movs	r2, #0
 8001524:	468b      	mov	fp, r1
 8001526:	e702      	b.n	800132e <__aeabi_ddiv+0x2f2>
 8001528:	9900      	ldr	r1, [sp, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	468c      	mov	ip, r1
 800152e:	4464      	add	r4, ip
 8001530:	42a1      	cmp	r1, r4
 8001532:	d900      	bls.n	8001536 <__aeabi_ddiv+0x4fa>
 8001534:	e69a      	b.n	800126c <__aeabi_ddiv+0x230>
 8001536:	42a2      	cmp	r2, r4
 8001538:	d800      	bhi.n	800153c <__aeabi_ddiv+0x500>
 800153a:	e697      	b.n	800126c <__aeabi_ddiv+0x230>
 800153c:	1e83      	subs	r3, r0, #2
 800153e:	4464      	add	r4, ip
 8001540:	e694      	b.n	800126c <__aeabi_ddiv+0x230>
 8001542:	46ac      	mov	ip, r5
 8001544:	4461      	add	r1, ip
 8001546:	3f01      	subs	r7, #1
 8001548:	428d      	cmp	r5, r1
 800154a:	d900      	bls.n	800154e <__aeabi_ddiv+0x512>
 800154c:	e680      	b.n	8001250 <__aeabi_ddiv+0x214>
 800154e:	428a      	cmp	r2, r1
 8001550:	d800      	bhi.n	8001554 <__aeabi_ddiv+0x518>
 8001552:	e67d      	b.n	8001250 <__aeabi_ddiv+0x214>
 8001554:	1e87      	subs	r7, r0, #2
 8001556:	4461      	add	r1, ip
 8001558:	e67a      	b.n	8001250 <__aeabi_ddiv+0x214>
 800155a:	4285      	cmp	r5, r0
 800155c:	d000      	beq.n	8001560 <__aeabi_ddiv+0x524>
 800155e:	e65f      	b.n	8001220 <__aeabi_ddiv+0x1e4>
 8001560:	45b9      	cmp	r9, r7
 8001562:	d900      	bls.n	8001566 <__aeabi_ddiv+0x52a>
 8001564:	e65c      	b.n	8001220 <__aeabi_ddiv+0x1e4>
 8001566:	e656      	b.n	8001216 <__aeabi_ddiv+0x1da>
 8001568:	42a2      	cmp	r2, r4
 800156a:	d800      	bhi.n	800156e <__aeabi_ddiv+0x532>
 800156c:	e61a      	b.n	80011a4 <__aeabi_ddiv+0x168>
 800156e:	1e83      	subs	r3, r0, #2
 8001570:	4464      	add	r4, ip
 8001572:	e617      	b.n	80011a4 <__aeabi_ddiv+0x168>
 8001574:	428a      	cmp	r2, r1
 8001576:	d800      	bhi.n	800157a <__aeabi_ddiv+0x53e>
 8001578:	e600      	b.n	800117c <__aeabi_ddiv+0x140>
 800157a:	46ac      	mov	ip, r5
 800157c:	1e83      	subs	r3, r0, #2
 800157e:	4698      	mov	r8, r3
 8001580:	4461      	add	r1, ip
 8001582:	e5fb      	b.n	800117c <__aeabi_ddiv+0x140>
 8001584:	4837      	ldr	r0, [pc, #220]	@ (8001664 <__aeabi_ddiv+0x628>)
 8001586:	0014      	movs	r4, r2
 8001588:	4450      	add	r0, sl
 800158a:	4082      	lsls	r2, r0
 800158c:	465b      	mov	r3, fp
 800158e:	0017      	movs	r7, r2
 8001590:	4083      	lsls	r3, r0
 8001592:	40cc      	lsrs	r4, r1
 8001594:	1e7a      	subs	r2, r7, #1
 8001596:	4197      	sbcs	r7, r2
 8001598:	4323      	orrs	r3, r4
 800159a:	433b      	orrs	r3, r7
 800159c:	001a      	movs	r2, r3
 800159e:	465b      	mov	r3, fp
 80015a0:	40cb      	lsrs	r3, r1
 80015a2:	0751      	lsls	r1, r2, #29
 80015a4:	d009      	beq.n	80015ba <__aeabi_ddiv+0x57e>
 80015a6:	210f      	movs	r1, #15
 80015a8:	4011      	ands	r1, r2
 80015aa:	2904      	cmp	r1, #4
 80015ac:	d005      	beq.n	80015ba <__aeabi_ddiv+0x57e>
 80015ae:	1d11      	adds	r1, r2, #4
 80015b0:	4291      	cmp	r1, r2
 80015b2:	4192      	sbcs	r2, r2
 80015b4:	4252      	negs	r2, r2
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	000a      	movs	r2, r1
 80015ba:	0219      	lsls	r1, r3, #8
 80015bc:	d400      	bmi.n	80015c0 <__aeabi_ddiv+0x584>
 80015be:	e755      	b.n	800146c <__aeabi_ddiv+0x430>
 80015c0:	2200      	movs	r2, #0
 80015c2:	2301      	movs	r3, #1
 80015c4:	2400      	movs	r4, #0
 80015c6:	4690      	mov	r8, r2
 80015c8:	e598      	b.n	80010fc <__aeabi_ddiv+0xc0>
 80015ca:	000a      	movs	r2, r1
 80015cc:	42bc      	cmp	r4, r7
 80015ce:	d000      	beq.n	80015d2 <__aeabi_ddiv+0x596>
 80015d0:	e66e      	b.n	80012b0 <__aeabi_ddiv+0x274>
 80015d2:	454b      	cmp	r3, r9
 80015d4:	d000      	beq.n	80015d8 <__aeabi_ddiv+0x59c>
 80015d6:	e66b      	b.n	80012b0 <__aeabi_ddiv+0x274>
 80015d8:	e66c      	b.n	80012b4 <__aeabi_ddiv+0x278>
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <__aeabi_ddiv+0x62c>)
 80015dc:	4a23      	ldr	r2, [pc, #140]	@ (800166c <__aeabi_ddiv+0x630>)
 80015de:	4453      	add	r3, sl
 80015e0:	4592      	cmp	sl, r2
 80015e2:	da00      	bge.n	80015e6 <__aeabi_ddiv+0x5aa>
 80015e4:	e718      	b.n	8001418 <__aeabi_ddiv+0x3dc>
 80015e6:	2101      	movs	r1, #1
 80015e8:	4249      	negs	r1, r1
 80015ea:	1d0a      	adds	r2, r1, #4
 80015ec:	428a      	cmp	r2, r1
 80015ee:	4189      	sbcs	r1, r1
 80015f0:	4249      	negs	r1, r1
 80015f2:	448b      	add	fp, r1
 80015f4:	e666      	b.n	80012c4 <__aeabi_ddiv+0x288>
 80015f6:	210f      	movs	r1, #15
 80015f8:	4011      	ands	r1, r2
 80015fa:	2904      	cmp	r1, #4
 80015fc:	d100      	bne.n	8001600 <__aeabi_ddiv+0x5c4>
 80015fe:	e661      	b.n	80012c4 <__aeabi_ddiv+0x288>
 8001600:	0011      	movs	r1, r2
 8001602:	e7f2      	b.n	80015ea <__aeabi_ddiv+0x5ae>
 8001604:	42bc      	cmp	r4, r7
 8001606:	d800      	bhi.n	800160a <__aeabi_ddiv+0x5ce>
 8001608:	e60a      	b.n	8001220 <__aeabi_ddiv+0x1e4>
 800160a:	2302      	movs	r3, #2
 800160c:	425b      	negs	r3, r3
 800160e:	469c      	mov	ip, r3
 8001610:	9900      	ldr	r1, [sp, #0]
 8001612:	444f      	add	r7, r9
 8001614:	454f      	cmp	r7, r9
 8001616:	419b      	sbcs	r3, r3
 8001618:	44e3      	add	fp, ip
 800161a:	468c      	mov	ip, r1
 800161c:	425b      	negs	r3, r3
 800161e:	4463      	add	r3, ip
 8001620:	18c0      	adds	r0, r0, r3
 8001622:	e5ff      	b.n	8001224 <__aeabi_ddiv+0x1e8>
 8001624:	4649      	mov	r1, r9
 8001626:	9d00      	ldr	r5, [sp, #0]
 8001628:	0048      	lsls	r0, r1, #1
 800162a:	4548      	cmp	r0, r9
 800162c:	4189      	sbcs	r1, r1
 800162e:	46ac      	mov	ip, r5
 8001630:	4249      	negs	r1, r1
 8001632:	4461      	add	r1, ip
 8001634:	4681      	mov	r9, r0
 8001636:	3a02      	subs	r2, #2
 8001638:	1864      	adds	r4, r4, r1
 800163a:	e7c7      	b.n	80015cc <__aeabi_ddiv+0x590>
 800163c:	2480      	movs	r4, #128	@ 0x80
 800163e:	465b      	mov	r3, fp
 8001640:	0324      	lsls	r4, r4, #12
 8001642:	431c      	orrs	r4, r3
 8001644:	0324      	lsls	r4, r4, #12
 8001646:	4690      	mov	r8, r2
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__aeabi_ddiv+0x620>)
 800164a:	0b24      	lsrs	r4, r4, #12
 800164c:	e556      	b.n	80010fc <__aeabi_ddiv+0xc0>
 800164e:	4599      	cmp	r9, r3
 8001650:	d3e8      	bcc.n	8001624 <__aeabi_ddiv+0x5e8>
 8001652:	000a      	movs	r2, r1
 8001654:	e7bd      	b.n	80015d2 <__aeabi_ddiv+0x596>
 8001656:	2300      	movs	r3, #0
 8001658:	e708      	b.n	800146c <__aeabi_ddiv+0x430>
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	000007ff 	.word	0x000007ff
 8001660:	0000043e 	.word	0x0000043e
 8001664:	0000041e 	.word	0x0000041e
 8001668:	000003ff 	.word	0x000003ff
 800166c:	fffffc02 	.word	0xfffffc02

08001670 <__eqdf2>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4657      	mov	r7, sl
 8001674:	46de      	mov	lr, fp
 8001676:	464e      	mov	r6, r9
 8001678:	4645      	mov	r5, r8
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	000d      	movs	r5, r1
 800167e:	0004      	movs	r4, r0
 8001680:	0fe8      	lsrs	r0, r5, #31
 8001682:	4683      	mov	fp, r0
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	0fd8      	lsrs	r0, r3, #31
 8001688:	0b09      	lsrs	r1, r1, #12
 800168a:	4682      	mov	sl, r0
 800168c:	4819      	ldr	r0, [pc, #100]	@ (80016f4 <__eqdf2+0x84>)
 800168e:	468c      	mov	ip, r1
 8001690:	031f      	lsls	r7, r3, #12
 8001692:	0069      	lsls	r1, r5, #1
 8001694:	005e      	lsls	r6, r3, #1
 8001696:	0d49      	lsrs	r1, r1, #21
 8001698:	0b3f      	lsrs	r7, r7, #12
 800169a:	0d76      	lsrs	r6, r6, #21
 800169c:	4281      	cmp	r1, r0
 800169e:	d018      	beq.n	80016d2 <__eqdf2+0x62>
 80016a0:	4286      	cmp	r6, r0
 80016a2:	d00f      	beq.n	80016c4 <__eqdf2+0x54>
 80016a4:	2001      	movs	r0, #1
 80016a6:	42b1      	cmp	r1, r6
 80016a8:	d10d      	bne.n	80016c6 <__eqdf2+0x56>
 80016aa:	45bc      	cmp	ip, r7
 80016ac:	d10b      	bne.n	80016c6 <__eqdf2+0x56>
 80016ae:	4294      	cmp	r4, r2
 80016b0:	d109      	bne.n	80016c6 <__eqdf2+0x56>
 80016b2:	45d3      	cmp	fp, sl
 80016b4:	d01c      	beq.n	80016f0 <__eqdf2+0x80>
 80016b6:	2900      	cmp	r1, #0
 80016b8:	d105      	bne.n	80016c6 <__eqdf2+0x56>
 80016ba:	4660      	mov	r0, ip
 80016bc:	4320      	orrs	r0, r4
 80016be:	1e43      	subs	r3, r0, #1
 80016c0:	4198      	sbcs	r0, r3
 80016c2:	e000      	b.n	80016c6 <__eqdf2+0x56>
 80016c4:	2001      	movs	r0, #1
 80016c6:	bcf0      	pop	{r4, r5, r6, r7}
 80016c8:	46bb      	mov	fp, r7
 80016ca:	46b2      	mov	sl, r6
 80016cc:	46a9      	mov	r9, r5
 80016ce:	46a0      	mov	r8, r4
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d2:	2001      	movs	r0, #1
 80016d4:	428e      	cmp	r6, r1
 80016d6:	d1f6      	bne.n	80016c6 <__eqdf2+0x56>
 80016d8:	4661      	mov	r1, ip
 80016da:	4339      	orrs	r1, r7
 80016dc:	000f      	movs	r7, r1
 80016de:	4317      	orrs	r7, r2
 80016e0:	4327      	orrs	r7, r4
 80016e2:	d1f0      	bne.n	80016c6 <__eqdf2+0x56>
 80016e4:	465b      	mov	r3, fp
 80016e6:	4652      	mov	r2, sl
 80016e8:	1a98      	subs	r0, r3, r2
 80016ea:	1e43      	subs	r3, r0, #1
 80016ec:	4198      	sbcs	r0, r3
 80016ee:	e7ea      	b.n	80016c6 <__eqdf2+0x56>
 80016f0:	2000      	movs	r0, #0
 80016f2:	e7e8      	b.n	80016c6 <__eqdf2+0x56>
 80016f4:	000007ff 	.word	0x000007ff

080016f8 <__gedf2>:
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	4657      	mov	r7, sl
 80016fc:	464e      	mov	r6, r9
 80016fe:	4645      	mov	r5, r8
 8001700:	46de      	mov	lr, fp
 8001702:	b5e0      	push	{r5, r6, r7, lr}
 8001704:	000d      	movs	r5, r1
 8001706:	030f      	lsls	r7, r1, #12
 8001708:	0b39      	lsrs	r1, r7, #12
 800170a:	b083      	sub	sp, #12
 800170c:	0004      	movs	r4, r0
 800170e:	4680      	mov	r8, r0
 8001710:	9101      	str	r1, [sp, #4]
 8001712:	0058      	lsls	r0, r3, #1
 8001714:	0fe9      	lsrs	r1, r5, #31
 8001716:	4f31      	ldr	r7, [pc, #196]	@ (80017dc <__gedf2+0xe4>)
 8001718:	0d40      	lsrs	r0, r0, #21
 800171a:	468c      	mov	ip, r1
 800171c:	006e      	lsls	r6, r5, #1
 800171e:	0319      	lsls	r1, r3, #12
 8001720:	4682      	mov	sl, r0
 8001722:	4691      	mov	r9, r2
 8001724:	0d76      	lsrs	r6, r6, #21
 8001726:	0b09      	lsrs	r1, r1, #12
 8001728:	0fd8      	lsrs	r0, r3, #31
 800172a:	42be      	cmp	r6, r7
 800172c:	d01f      	beq.n	800176e <__gedf2+0x76>
 800172e:	45ba      	cmp	sl, r7
 8001730:	d00f      	beq.n	8001752 <__gedf2+0x5a>
 8001732:	2e00      	cmp	r6, #0
 8001734:	d12f      	bne.n	8001796 <__gedf2+0x9e>
 8001736:	4655      	mov	r5, sl
 8001738:	9e01      	ldr	r6, [sp, #4]
 800173a:	4334      	orrs	r4, r6
 800173c:	2d00      	cmp	r5, #0
 800173e:	d127      	bne.n	8001790 <__gedf2+0x98>
 8001740:	430a      	orrs	r2, r1
 8001742:	d03a      	beq.n	80017ba <__gedf2+0xc2>
 8001744:	2c00      	cmp	r4, #0
 8001746:	d145      	bne.n	80017d4 <__gedf2+0xdc>
 8001748:	2800      	cmp	r0, #0
 800174a:	d11a      	bne.n	8001782 <__gedf2+0x8a>
 800174c:	2001      	movs	r0, #1
 800174e:	4240      	negs	r0, r0
 8001750:	e017      	b.n	8001782 <__gedf2+0x8a>
 8001752:	4311      	orrs	r1, r2
 8001754:	d13b      	bne.n	80017ce <__gedf2+0xd6>
 8001756:	2e00      	cmp	r6, #0
 8001758:	d102      	bne.n	8001760 <__gedf2+0x68>
 800175a:	9f01      	ldr	r7, [sp, #4]
 800175c:	4327      	orrs	r7, r4
 800175e:	d0f3      	beq.n	8001748 <__gedf2+0x50>
 8001760:	4584      	cmp	ip, r0
 8001762:	d109      	bne.n	8001778 <__gedf2+0x80>
 8001764:	4663      	mov	r3, ip
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <__gedf2+0x54>
 800176a:	4660      	mov	r0, ip
 800176c:	e009      	b.n	8001782 <__gedf2+0x8a>
 800176e:	9f01      	ldr	r7, [sp, #4]
 8001770:	4327      	orrs	r7, r4
 8001772:	d12c      	bne.n	80017ce <__gedf2+0xd6>
 8001774:	45b2      	cmp	sl, r6
 8001776:	d024      	beq.n	80017c2 <__gedf2+0xca>
 8001778:	4663      	mov	r3, ip
 800177a:	2002      	movs	r0, #2
 800177c:	3b01      	subs	r3, #1
 800177e:	4018      	ands	r0, r3
 8001780:	3801      	subs	r0, #1
 8001782:	b003      	add	sp, #12
 8001784:	bcf0      	pop	{r4, r5, r6, r7}
 8001786:	46bb      	mov	fp, r7
 8001788:	46b2      	mov	sl, r6
 800178a:	46a9      	mov	r9, r5
 800178c:	46a0      	mov	r8, r4
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001790:	2c00      	cmp	r4, #0
 8001792:	d0d9      	beq.n	8001748 <__gedf2+0x50>
 8001794:	e7e4      	b.n	8001760 <__gedf2+0x68>
 8001796:	4654      	mov	r4, sl
 8001798:	2c00      	cmp	r4, #0
 800179a:	d0ed      	beq.n	8001778 <__gedf2+0x80>
 800179c:	4584      	cmp	ip, r0
 800179e:	d1eb      	bne.n	8001778 <__gedf2+0x80>
 80017a0:	4556      	cmp	r6, sl
 80017a2:	dce9      	bgt.n	8001778 <__gedf2+0x80>
 80017a4:	dbde      	blt.n	8001764 <__gedf2+0x6c>
 80017a6:	9b01      	ldr	r3, [sp, #4]
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d8e5      	bhi.n	8001778 <__gedf2+0x80>
 80017ac:	d1da      	bne.n	8001764 <__gedf2+0x6c>
 80017ae:	45c8      	cmp	r8, r9
 80017b0:	d8e2      	bhi.n	8001778 <__gedf2+0x80>
 80017b2:	2000      	movs	r0, #0
 80017b4:	45c8      	cmp	r8, r9
 80017b6:	d2e4      	bcs.n	8001782 <__gedf2+0x8a>
 80017b8:	e7d4      	b.n	8001764 <__gedf2+0x6c>
 80017ba:	2000      	movs	r0, #0
 80017bc:	2c00      	cmp	r4, #0
 80017be:	d0e0      	beq.n	8001782 <__gedf2+0x8a>
 80017c0:	e7da      	b.n	8001778 <__gedf2+0x80>
 80017c2:	4311      	orrs	r1, r2
 80017c4:	d103      	bne.n	80017ce <__gedf2+0xd6>
 80017c6:	4584      	cmp	ip, r0
 80017c8:	d1d6      	bne.n	8001778 <__gedf2+0x80>
 80017ca:	2000      	movs	r0, #0
 80017cc:	e7d9      	b.n	8001782 <__gedf2+0x8a>
 80017ce:	2002      	movs	r0, #2
 80017d0:	4240      	negs	r0, r0
 80017d2:	e7d6      	b.n	8001782 <__gedf2+0x8a>
 80017d4:	4584      	cmp	ip, r0
 80017d6:	d0e6      	beq.n	80017a6 <__gedf2+0xae>
 80017d8:	e7ce      	b.n	8001778 <__gedf2+0x80>
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	000007ff 	.word	0x000007ff

080017e0 <__ledf2>:
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	4657      	mov	r7, sl
 80017e4:	464e      	mov	r6, r9
 80017e6:	4645      	mov	r5, r8
 80017e8:	46de      	mov	lr, fp
 80017ea:	b5e0      	push	{r5, r6, r7, lr}
 80017ec:	000d      	movs	r5, r1
 80017ee:	030f      	lsls	r7, r1, #12
 80017f0:	0004      	movs	r4, r0
 80017f2:	4680      	mov	r8, r0
 80017f4:	0fe8      	lsrs	r0, r5, #31
 80017f6:	0b39      	lsrs	r1, r7, #12
 80017f8:	4684      	mov	ip, r0
 80017fa:	b083      	sub	sp, #12
 80017fc:	0058      	lsls	r0, r3, #1
 80017fe:	4f30      	ldr	r7, [pc, #192]	@ (80018c0 <__ledf2+0xe0>)
 8001800:	0d40      	lsrs	r0, r0, #21
 8001802:	9101      	str	r1, [sp, #4]
 8001804:	031e      	lsls	r6, r3, #12
 8001806:	0069      	lsls	r1, r5, #1
 8001808:	4682      	mov	sl, r0
 800180a:	4691      	mov	r9, r2
 800180c:	0d49      	lsrs	r1, r1, #21
 800180e:	0b36      	lsrs	r6, r6, #12
 8001810:	0fd8      	lsrs	r0, r3, #31
 8001812:	42b9      	cmp	r1, r7
 8001814:	d020      	beq.n	8001858 <__ledf2+0x78>
 8001816:	45ba      	cmp	sl, r7
 8001818:	d00f      	beq.n	800183a <__ledf2+0x5a>
 800181a:	2900      	cmp	r1, #0
 800181c:	d12b      	bne.n	8001876 <__ledf2+0x96>
 800181e:	9901      	ldr	r1, [sp, #4]
 8001820:	430c      	orrs	r4, r1
 8001822:	4651      	mov	r1, sl
 8001824:	2900      	cmp	r1, #0
 8001826:	d137      	bne.n	8001898 <__ledf2+0xb8>
 8001828:	4332      	orrs	r2, r6
 800182a:	d038      	beq.n	800189e <__ledf2+0xbe>
 800182c:	2c00      	cmp	r4, #0
 800182e:	d144      	bne.n	80018ba <__ledf2+0xda>
 8001830:	2800      	cmp	r0, #0
 8001832:	d119      	bne.n	8001868 <__ledf2+0x88>
 8001834:	2001      	movs	r0, #1
 8001836:	4240      	negs	r0, r0
 8001838:	e016      	b.n	8001868 <__ledf2+0x88>
 800183a:	4316      	orrs	r6, r2
 800183c:	d113      	bne.n	8001866 <__ledf2+0x86>
 800183e:	2900      	cmp	r1, #0
 8001840:	d102      	bne.n	8001848 <__ledf2+0x68>
 8001842:	9f01      	ldr	r7, [sp, #4]
 8001844:	4327      	orrs	r7, r4
 8001846:	d0f3      	beq.n	8001830 <__ledf2+0x50>
 8001848:	4584      	cmp	ip, r0
 800184a:	d020      	beq.n	800188e <__ledf2+0xae>
 800184c:	4663      	mov	r3, ip
 800184e:	2002      	movs	r0, #2
 8001850:	3b01      	subs	r3, #1
 8001852:	4018      	ands	r0, r3
 8001854:	3801      	subs	r0, #1
 8001856:	e007      	b.n	8001868 <__ledf2+0x88>
 8001858:	9f01      	ldr	r7, [sp, #4]
 800185a:	4327      	orrs	r7, r4
 800185c:	d103      	bne.n	8001866 <__ledf2+0x86>
 800185e:	458a      	cmp	sl, r1
 8001860:	d1f4      	bne.n	800184c <__ledf2+0x6c>
 8001862:	4316      	orrs	r6, r2
 8001864:	d01f      	beq.n	80018a6 <__ledf2+0xc6>
 8001866:	2002      	movs	r0, #2
 8001868:	b003      	add	sp, #12
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	4654      	mov	r4, sl
 8001878:	2c00      	cmp	r4, #0
 800187a:	d0e7      	beq.n	800184c <__ledf2+0x6c>
 800187c:	4584      	cmp	ip, r0
 800187e:	d1e5      	bne.n	800184c <__ledf2+0x6c>
 8001880:	4551      	cmp	r1, sl
 8001882:	dce3      	bgt.n	800184c <__ledf2+0x6c>
 8001884:	db03      	blt.n	800188e <__ledf2+0xae>
 8001886:	9b01      	ldr	r3, [sp, #4]
 8001888:	42b3      	cmp	r3, r6
 800188a:	d8df      	bhi.n	800184c <__ledf2+0x6c>
 800188c:	d00f      	beq.n	80018ae <__ledf2+0xce>
 800188e:	4663      	mov	r3, ip
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0cf      	beq.n	8001834 <__ledf2+0x54>
 8001894:	4660      	mov	r0, ip
 8001896:	e7e7      	b.n	8001868 <__ledf2+0x88>
 8001898:	2c00      	cmp	r4, #0
 800189a:	d0c9      	beq.n	8001830 <__ledf2+0x50>
 800189c:	e7d4      	b.n	8001848 <__ledf2+0x68>
 800189e:	2000      	movs	r0, #0
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d0e1      	beq.n	8001868 <__ledf2+0x88>
 80018a4:	e7d2      	b.n	800184c <__ledf2+0x6c>
 80018a6:	4584      	cmp	ip, r0
 80018a8:	d1d0      	bne.n	800184c <__ledf2+0x6c>
 80018aa:	2000      	movs	r0, #0
 80018ac:	e7dc      	b.n	8001868 <__ledf2+0x88>
 80018ae:	45c8      	cmp	r8, r9
 80018b0:	d8cc      	bhi.n	800184c <__ledf2+0x6c>
 80018b2:	2000      	movs	r0, #0
 80018b4:	45c8      	cmp	r8, r9
 80018b6:	d2d7      	bcs.n	8001868 <__ledf2+0x88>
 80018b8:	e7e9      	b.n	800188e <__ledf2+0xae>
 80018ba:	4584      	cmp	ip, r0
 80018bc:	d0e3      	beq.n	8001886 <__ledf2+0xa6>
 80018be:	e7c5      	b.n	800184c <__ledf2+0x6c>
 80018c0:	000007ff 	.word	0x000007ff

080018c4 <__aeabi_dmul>:
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	4657      	mov	r7, sl
 80018c8:	46de      	mov	lr, fp
 80018ca:	464e      	mov	r6, r9
 80018cc:	4645      	mov	r5, r8
 80018ce:	b5e0      	push	{r5, r6, r7, lr}
 80018d0:	001f      	movs	r7, r3
 80018d2:	030b      	lsls	r3, r1, #12
 80018d4:	0b1b      	lsrs	r3, r3, #12
 80018d6:	0016      	movs	r6, r2
 80018d8:	469a      	mov	sl, r3
 80018da:	0fca      	lsrs	r2, r1, #31
 80018dc:	004b      	lsls	r3, r1, #1
 80018de:	0004      	movs	r4, r0
 80018e0:	4693      	mov	fp, r2
 80018e2:	b087      	sub	sp, #28
 80018e4:	0d5b      	lsrs	r3, r3, #21
 80018e6:	d100      	bne.n	80018ea <__aeabi_dmul+0x26>
 80018e8:	e0d5      	b.n	8001a96 <__aeabi_dmul+0x1d2>
 80018ea:	4abb      	ldr	r2, [pc, #748]	@ (8001bd8 <__aeabi_dmul+0x314>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dmul+0x2e>
 80018f0:	e0f8      	b.n	8001ae4 <__aeabi_dmul+0x220>
 80018f2:	4651      	mov	r1, sl
 80018f4:	0f42      	lsrs	r2, r0, #29
 80018f6:	00c9      	lsls	r1, r1, #3
 80018f8:	430a      	orrs	r2, r1
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	0409      	lsls	r1, r1, #16
 80018fe:	4311      	orrs	r1, r2
 8001900:	00c2      	lsls	r2, r0, #3
 8001902:	4691      	mov	r9, r2
 8001904:	4ab5      	ldr	r2, [pc, #724]	@ (8001bdc <__aeabi_dmul+0x318>)
 8001906:	468a      	mov	sl, r1
 8001908:	189d      	adds	r5, r3, r2
 800190a:	2300      	movs	r3, #0
 800190c:	4698      	mov	r8, r3
 800190e:	9302      	str	r3, [sp, #8]
 8001910:	033c      	lsls	r4, r7, #12
 8001912:	007b      	lsls	r3, r7, #1
 8001914:	0ffa      	lsrs	r2, r7, #31
 8001916:	0030      	movs	r0, r6
 8001918:	0b24      	lsrs	r4, r4, #12
 800191a:	0d5b      	lsrs	r3, r3, #21
 800191c:	9200      	str	r2, [sp, #0]
 800191e:	d100      	bne.n	8001922 <__aeabi_dmul+0x5e>
 8001920:	e096      	b.n	8001a50 <__aeabi_dmul+0x18c>
 8001922:	4aad      	ldr	r2, [pc, #692]	@ (8001bd8 <__aeabi_dmul+0x314>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d031      	beq.n	800198c <__aeabi_dmul+0xc8>
 8001928:	0f72      	lsrs	r2, r6, #29
 800192a:	00e4      	lsls	r4, r4, #3
 800192c:	4322      	orrs	r2, r4
 800192e:	2480      	movs	r4, #128	@ 0x80
 8001930:	0424      	lsls	r4, r4, #16
 8001932:	4314      	orrs	r4, r2
 8001934:	4aa9      	ldr	r2, [pc, #676]	@ (8001bdc <__aeabi_dmul+0x318>)
 8001936:	00f0      	lsls	r0, r6, #3
 8001938:	4694      	mov	ip, r2
 800193a:	4463      	add	r3, ip
 800193c:	195b      	adds	r3, r3, r5
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	9201      	str	r2, [sp, #4]
 8001942:	4642      	mov	r2, r8
 8001944:	2600      	movs	r6, #0
 8001946:	2a0a      	cmp	r2, #10
 8001948:	dc42      	bgt.n	80019d0 <__aeabi_dmul+0x10c>
 800194a:	465a      	mov	r2, fp
 800194c:	9900      	ldr	r1, [sp, #0]
 800194e:	404a      	eors	r2, r1
 8001950:	4693      	mov	fp, r2
 8001952:	4642      	mov	r2, r8
 8001954:	2a02      	cmp	r2, #2
 8001956:	dc32      	bgt.n	80019be <__aeabi_dmul+0xfa>
 8001958:	3a01      	subs	r2, #1
 800195a:	2a01      	cmp	r2, #1
 800195c:	d900      	bls.n	8001960 <__aeabi_dmul+0x9c>
 800195e:	e149      	b.n	8001bf4 <__aeabi_dmul+0x330>
 8001960:	2e02      	cmp	r6, #2
 8001962:	d100      	bne.n	8001966 <__aeabi_dmul+0xa2>
 8001964:	e0ca      	b.n	8001afc <__aeabi_dmul+0x238>
 8001966:	2e01      	cmp	r6, #1
 8001968:	d13d      	bne.n	80019e6 <__aeabi_dmul+0x122>
 800196a:	2300      	movs	r3, #0
 800196c:	2400      	movs	r4, #0
 800196e:	2200      	movs	r2, #0
 8001970:	0010      	movs	r0, r2
 8001972:	465a      	mov	r2, fp
 8001974:	051b      	lsls	r3, r3, #20
 8001976:	4323      	orrs	r3, r4
 8001978:	07d2      	lsls	r2, r2, #31
 800197a:	4313      	orrs	r3, r2
 800197c:	0019      	movs	r1, r3
 800197e:	b007      	add	sp, #28
 8001980:	bcf0      	pop	{r4, r5, r6, r7}
 8001982:	46bb      	mov	fp, r7
 8001984:	46b2      	mov	sl, r6
 8001986:	46a9      	mov	r9, r5
 8001988:	46a0      	mov	r8, r4
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198c:	4b92      	ldr	r3, [pc, #584]	@ (8001bd8 <__aeabi_dmul+0x314>)
 800198e:	4326      	orrs	r6, r4
 8001990:	18eb      	adds	r3, r5, r3
 8001992:	2e00      	cmp	r6, #0
 8001994:	d100      	bne.n	8001998 <__aeabi_dmul+0xd4>
 8001996:	e0bb      	b.n	8001b10 <__aeabi_dmul+0x24c>
 8001998:	2203      	movs	r2, #3
 800199a:	4641      	mov	r1, r8
 800199c:	4311      	orrs	r1, r2
 800199e:	465a      	mov	r2, fp
 80019a0:	4688      	mov	r8, r1
 80019a2:	9900      	ldr	r1, [sp, #0]
 80019a4:	404a      	eors	r2, r1
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	0109      	lsls	r1, r1, #4
 80019aa:	468c      	mov	ip, r1
 80019ac:	0029      	movs	r1, r5
 80019ae:	4461      	add	r1, ip
 80019b0:	9101      	str	r1, [sp, #4]
 80019b2:	4641      	mov	r1, r8
 80019b4:	290a      	cmp	r1, #10
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dmul+0xf6>
 80019b8:	e233      	b.n	8001e22 <__aeabi_dmul+0x55e>
 80019ba:	4693      	mov	fp, r2
 80019bc:	2603      	movs	r6, #3
 80019be:	4642      	mov	r2, r8
 80019c0:	2701      	movs	r7, #1
 80019c2:	4097      	lsls	r7, r2
 80019c4:	21a6      	movs	r1, #166	@ 0xa6
 80019c6:	003a      	movs	r2, r7
 80019c8:	00c9      	lsls	r1, r1, #3
 80019ca:	400a      	ands	r2, r1
 80019cc:	420f      	tst	r7, r1
 80019ce:	d031      	beq.n	8001a34 <__aeabi_dmul+0x170>
 80019d0:	9e02      	ldr	r6, [sp, #8]
 80019d2:	2e02      	cmp	r6, #2
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dmul+0x114>
 80019d6:	e235      	b.n	8001e44 <__aeabi_dmul+0x580>
 80019d8:	2e03      	cmp	r6, #3
 80019da:	d100      	bne.n	80019de <__aeabi_dmul+0x11a>
 80019dc:	e1d2      	b.n	8001d84 <__aeabi_dmul+0x4c0>
 80019de:	4654      	mov	r4, sl
 80019e0:	4648      	mov	r0, r9
 80019e2:	2e01      	cmp	r6, #1
 80019e4:	d0c1      	beq.n	800196a <__aeabi_dmul+0xa6>
 80019e6:	9a01      	ldr	r2, [sp, #4]
 80019e8:	4b7d      	ldr	r3, [pc, #500]	@ (8001be0 <__aeabi_dmul+0x31c>)
 80019ea:	4694      	mov	ip, r2
 80019ec:	4463      	add	r3, ip
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc00      	bgt.n	80019f4 <__aeabi_dmul+0x130>
 80019f2:	e0c0      	b.n	8001b76 <__aeabi_dmul+0x2b2>
 80019f4:	0742      	lsls	r2, r0, #29
 80019f6:	d009      	beq.n	8001a0c <__aeabi_dmul+0x148>
 80019f8:	220f      	movs	r2, #15
 80019fa:	4002      	ands	r2, r0
 80019fc:	2a04      	cmp	r2, #4
 80019fe:	d005      	beq.n	8001a0c <__aeabi_dmul+0x148>
 8001a00:	1d02      	adds	r2, r0, #4
 8001a02:	4282      	cmp	r2, r0
 8001a04:	4180      	sbcs	r0, r0
 8001a06:	4240      	negs	r0, r0
 8001a08:	1824      	adds	r4, r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	01e2      	lsls	r2, r4, #7
 8001a0e:	d506      	bpl.n	8001a1e <__aeabi_dmul+0x15a>
 8001a10:	4b74      	ldr	r3, [pc, #464]	@ (8001be4 <__aeabi_dmul+0x320>)
 8001a12:	9a01      	ldr	r2, [sp, #4]
 8001a14:	401c      	ands	r4, r3
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	4694      	mov	ip, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4463      	add	r3, ip
 8001a1e:	4a72      	ldr	r2, [pc, #456]	@ (8001be8 <__aeabi_dmul+0x324>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	dc6b      	bgt.n	8001afc <__aeabi_dmul+0x238>
 8001a24:	0762      	lsls	r2, r4, #29
 8001a26:	08c0      	lsrs	r0, r0, #3
 8001a28:	0264      	lsls	r4, r4, #9
 8001a2a:	055b      	lsls	r3, r3, #21
 8001a2c:	4302      	orrs	r2, r0
 8001a2e:	0b24      	lsrs	r4, r4, #12
 8001a30:	0d5b      	lsrs	r3, r3, #21
 8001a32:	e79d      	b.n	8001970 <__aeabi_dmul+0xac>
 8001a34:	2190      	movs	r1, #144	@ 0x90
 8001a36:	0089      	lsls	r1, r1, #2
 8001a38:	420f      	tst	r7, r1
 8001a3a:	d163      	bne.n	8001b04 <__aeabi_dmul+0x240>
 8001a3c:	2288      	movs	r2, #136	@ 0x88
 8001a3e:	423a      	tst	r2, r7
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dmul+0x180>
 8001a42:	e0d7      	b.n	8001bf4 <__aeabi_dmul+0x330>
 8001a44:	9b00      	ldr	r3, [sp, #0]
 8001a46:	46a2      	mov	sl, r4
 8001a48:	469b      	mov	fp, r3
 8001a4a:	4681      	mov	r9, r0
 8001a4c:	9602      	str	r6, [sp, #8]
 8001a4e:	e7bf      	b.n	80019d0 <__aeabi_dmul+0x10c>
 8001a50:	0023      	movs	r3, r4
 8001a52:	4333      	orrs	r3, r6
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dmul+0x194>
 8001a56:	e07f      	b.n	8001b58 <__aeabi_dmul+0x294>
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dmul+0x19a>
 8001a5c:	e1ad      	b.n	8001dba <__aeabi_dmul+0x4f6>
 8001a5e:	0020      	movs	r0, r4
 8001a60:	f000 ff10 	bl	8002884 <__clzsi2>
 8001a64:	0002      	movs	r2, r0
 8001a66:	0003      	movs	r3, r0
 8001a68:	3a0b      	subs	r2, #11
 8001a6a:	201d      	movs	r0, #29
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	0030      	movs	r0, r6
 8001a72:	3908      	subs	r1, #8
 8001a74:	40d0      	lsrs	r0, r2
 8001a76:	408c      	lsls	r4, r1
 8001a78:	4304      	orrs	r4, r0
 8001a7a:	0030      	movs	r0, r6
 8001a7c:	4088      	lsls	r0, r1
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bec <__aeabi_dmul+0x328>)
 8001a80:	1aeb      	subs	r3, r5, r3
 8001a82:	4694      	mov	ip, r2
 8001a84:	4463      	add	r3, ip
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	4642      	mov	r2, r8
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	2a0a      	cmp	r2, #10
 8001a90:	dc00      	bgt.n	8001a94 <__aeabi_dmul+0x1d0>
 8001a92:	e75a      	b.n	800194a <__aeabi_dmul+0x86>
 8001a94:	e79c      	b.n	80019d0 <__aeabi_dmul+0x10c>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	4699      	mov	r9, r3
 8001a9c:	d054      	beq.n	8001b48 <__aeabi_dmul+0x284>
 8001a9e:	4653      	mov	r3, sl
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dmul+0x1e2>
 8001aa4:	e177      	b.n	8001d96 <__aeabi_dmul+0x4d2>
 8001aa6:	4650      	mov	r0, sl
 8001aa8:	f000 feec 	bl	8002884 <__clzsi2>
 8001aac:	230b      	movs	r3, #11
 8001aae:	425b      	negs	r3, r3
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	4484      	add	ip, r0
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	4650      	mov	r0, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	4088      	lsls	r0, r1
 8001abe:	231d      	movs	r3, #29
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4660      	mov	r0, ip
 8001ac4:	1a1b      	subs	r3, r3, r0
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	40d8      	lsrs	r0, r3
 8001aca:	0003      	movs	r3, r0
 8001acc:	4640      	mov	r0, r8
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	0023      	movs	r3, r4
 8001ad4:	408b      	lsls	r3, r1
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4d44      	ldr	r5, [pc, #272]	@ (8001bec <__aeabi_dmul+0x328>)
 8001adc:	4698      	mov	r8, r3
 8001ade:	1aad      	subs	r5, r5, r2
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	e715      	b.n	8001910 <__aeabi_dmul+0x4c>
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	4302      	orrs	r2, r0
 8001ae8:	4691      	mov	r9, r2
 8001aea:	d126      	bne.n	8001b3a <__aeabi_dmul+0x276>
 8001aec:	2200      	movs	r2, #0
 8001aee:	001d      	movs	r5, r3
 8001af0:	2302      	movs	r3, #2
 8001af2:	4692      	mov	sl, r2
 8001af4:	3208      	adds	r2, #8
 8001af6:	4690      	mov	r8, r2
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	e709      	b.n	8001910 <__aeabi_dmul+0x4c>
 8001afc:	2400      	movs	r4, #0
 8001afe:	2200      	movs	r2, #0
 8001b00:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <__aeabi_dmul+0x314>)
 8001b02:	e735      	b.n	8001970 <__aeabi_dmul+0xac>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2480      	movs	r4, #128	@ 0x80
 8001b08:	469b      	mov	fp, r3
 8001b0a:	0324      	lsls	r4, r4, #12
 8001b0c:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <__aeabi_dmul+0x314>)
 8001b0e:	e72f      	b.n	8001970 <__aeabi_dmul+0xac>
 8001b10:	2202      	movs	r2, #2
 8001b12:	4641      	mov	r1, r8
 8001b14:	4311      	orrs	r1, r2
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	4694      	mov	ip, r2
 8001b1c:	002a      	movs	r2, r5
 8001b1e:	4462      	add	r2, ip
 8001b20:	4688      	mov	r8, r1
 8001b22:	9201      	str	r2, [sp, #4]
 8001b24:	290a      	cmp	r1, #10
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dmul+0x266>
 8001b28:	e752      	b.n	80019d0 <__aeabi_dmul+0x10c>
 8001b2a:	465a      	mov	r2, fp
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	9900      	ldr	r1, [sp, #0]
 8001b30:	0004      	movs	r4, r0
 8001b32:	404a      	eors	r2, r1
 8001b34:	4693      	mov	fp, r2
 8001b36:	2602      	movs	r6, #2
 8001b38:	e70b      	b.n	8001952 <__aeabi_dmul+0x8e>
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	001d      	movs	r5, r3
 8001b3e:	2303      	movs	r3, #3
 8001b40:	4681      	mov	r9, r0
 8001b42:	4690      	mov	r8, r2
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	e6e3      	b.n	8001910 <__aeabi_dmul+0x4c>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	469a      	mov	sl, r3
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	4698      	mov	r8, r3
 8001b50:	3b03      	subs	r3, #3
 8001b52:	2500      	movs	r5, #0
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e6db      	b.n	8001910 <__aeabi_dmul+0x4c>
 8001b58:	4642      	mov	r2, r8
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	002b      	movs	r3, r5
 8001b60:	4690      	mov	r8, r2
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	9201      	str	r2, [sp, #4]
 8001b66:	4642      	mov	r2, r8
 8001b68:	2400      	movs	r4, #0
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	2601      	movs	r6, #1
 8001b6e:	2a0a      	cmp	r2, #10
 8001b70:	dc00      	bgt.n	8001b74 <__aeabi_dmul+0x2b0>
 8001b72:	e6ea      	b.n	800194a <__aeabi_dmul+0x86>
 8001b74:	e72c      	b.n	80019d0 <__aeabi_dmul+0x10c>
 8001b76:	2201      	movs	r2, #1
 8001b78:	1ad2      	subs	r2, r2, r3
 8001b7a:	2a38      	cmp	r2, #56	@ 0x38
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dmul+0x2bc>
 8001b7e:	e6f4      	b.n	800196a <__aeabi_dmul+0xa6>
 8001b80:	2a1f      	cmp	r2, #31
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_dmul+0x2c2>
 8001b84:	e12a      	b.n	8001ddc <__aeabi_dmul+0x518>
 8001b86:	211f      	movs	r1, #31
 8001b88:	4249      	negs	r1, r1
 8001b8a:	1acb      	subs	r3, r1, r3
 8001b8c:	0021      	movs	r1, r4
 8001b8e:	40d9      	lsrs	r1, r3
 8001b90:	000b      	movs	r3, r1
 8001b92:	2a20      	cmp	r2, #32
 8001b94:	d005      	beq.n	8001ba2 <__aeabi_dmul+0x2de>
 8001b96:	4a16      	ldr	r2, [pc, #88]	@ (8001bf0 <__aeabi_dmul+0x32c>)
 8001b98:	9d01      	ldr	r5, [sp, #4]
 8001b9a:	4694      	mov	ip, r2
 8001b9c:	4465      	add	r5, ip
 8001b9e:	40ac      	lsls	r4, r5
 8001ba0:	4320      	orrs	r0, r4
 8001ba2:	1e42      	subs	r2, r0, #1
 8001ba4:	4190      	sbcs	r0, r2
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	2307      	movs	r3, #7
 8001baa:	0019      	movs	r1, r3
 8001bac:	2400      	movs	r4, #0
 8001bae:	4001      	ands	r1, r0
 8001bb0:	4203      	tst	r3, r0
 8001bb2:	d00c      	beq.n	8001bce <__aeabi_dmul+0x30a>
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	4003      	ands	r3, r0
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dmul+0x2fa>
 8001bbc:	e140      	b.n	8001e40 <__aeabi_dmul+0x57c>
 8001bbe:	1d03      	adds	r3, r0, #4
 8001bc0:	4283      	cmp	r3, r0
 8001bc2:	41a4      	sbcs	r4, r4
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	0761      	lsls	r1, r4, #29
 8001bca:	0264      	lsls	r4, r4, #9
 8001bcc:	0b24      	lsrs	r4, r4, #12
 8001bce:	08c2      	lsrs	r2, r0, #3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	e6cc      	b.n	8001970 <__aeabi_dmul+0xac>
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	000007ff 	.word	0x000007ff
 8001bdc:	fffffc01 	.word	0xfffffc01
 8001be0:	000003ff 	.word	0x000003ff
 8001be4:	feffffff 	.word	0xfeffffff
 8001be8:	000007fe 	.word	0x000007fe
 8001bec:	fffffc0d 	.word	0xfffffc0d
 8001bf0:	0000043e 	.word	0x0000043e
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	464a      	mov	r2, r9
 8001bf8:	0409      	lsls	r1, r1, #16
 8001bfa:	0c09      	lsrs	r1, r1, #16
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0c16      	lsrs	r6, r2, #16
 8001c00:	0c02      	lsrs	r2, r0, #16
 8001c02:	0400      	lsls	r0, r0, #16
 8001c04:	0c00      	lsrs	r0, r0, #16
 8001c06:	4345      	muls	r5, r0
 8001c08:	46ac      	mov	ip, r5
 8001c0a:	0005      	movs	r5, r0
 8001c0c:	4375      	muls	r5, r6
 8001c0e:	46a8      	mov	r8, r5
 8001c10:	0015      	movs	r5, r2
 8001c12:	000f      	movs	r7, r1
 8001c14:	4375      	muls	r5, r6
 8001c16:	9200      	str	r2, [sp, #0]
 8001c18:	9502      	str	r5, [sp, #8]
 8001c1a:	002a      	movs	r2, r5
 8001c1c:	9d00      	ldr	r5, [sp, #0]
 8001c1e:	436f      	muls	r7, r5
 8001c20:	4665      	mov	r5, ip
 8001c22:	0c2d      	lsrs	r5, r5, #16
 8001c24:	46a9      	mov	r9, r5
 8001c26:	4447      	add	r7, r8
 8001c28:	444f      	add	r7, r9
 8001c2a:	45b8      	cmp	r8, r7
 8001c2c:	d905      	bls.n	8001c3a <__aeabi_dmul+0x376>
 8001c2e:	0015      	movs	r5, r2
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	0252      	lsls	r2, r2, #9
 8001c34:	4690      	mov	r8, r2
 8001c36:	4445      	add	r5, r8
 8001c38:	9502      	str	r5, [sp, #8]
 8001c3a:	0c3d      	lsrs	r5, r7, #16
 8001c3c:	9503      	str	r5, [sp, #12]
 8001c3e:	4665      	mov	r5, ip
 8001c40:	042d      	lsls	r5, r5, #16
 8001c42:	043f      	lsls	r7, r7, #16
 8001c44:	0c2d      	lsrs	r5, r5, #16
 8001c46:	46ac      	mov	ip, r5
 8001c48:	003d      	movs	r5, r7
 8001c4a:	4465      	add	r5, ip
 8001c4c:	9504      	str	r5, [sp, #16]
 8001c4e:	0c25      	lsrs	r5, r4, #16
 8001c50:	0424      	lsls	r4, r4, #16
 8001c52:	0c24      	lsrs	r4, r4, #16
 8001c54:	46ac      	mov	ip, r5
 8001c56:	0025      	movs	r5, r4
 8001c58:	4375      	muls	r5, r6
 8001c5a:	46a8      	mov	r8, r5
 8001c5c:	4665      	mov	r5, ip
 8001c5e:	000f      	movs	r7, r1
 8001c60:	4369      	muls	r1, r5
 8001c62:	4441      	add	r1, r8
 8001c64:	4689      	mov	r9, r1
 8001c66:	4367      	muls	r7, r4
 8001c68:	0c39      	lsrs	r1, r7, #16
 8001c6a:	4449      	add	r1, r9
 8001c6c:	436e      	muls	r6, r5
 8001c6e:	4588      	cmp	r8, r1
 8001c70:	d903      	bls.n	8001c7a <__aeabi_dmul+0x3b6>
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	0252      	lsls	r2, r2, #9
 8001c76:	4690      	mov	r8, r2
 8001c78:	4446      	add	r6, r8
 8001c7a:	0c0d      	lsrs	r5, r1, #16
 8001c7c:	46a8      	mov	r8, r5
 8001c7e:	0035      	movs	r5, r6
 8001c80:	4445      	add	r5, r8
 8001c82:	9505      	str	r5, [sp, #20]
 8001c84:	9d03      	ldr	r5, [sp, #12]
 8001c86:	043f      	lsls	r7, r7, #16
 8001c88:	46a8      	mov	r8, r5
 8001c8a:	0c3f      	lsrs	r7, r7, #16
 8001c8c:	0409      	lsls	r1, r1, #16
 8001c8e:	19c9      	adds	r1, r1, r7
 8001c90:	4488      	add	r8, r1
 8001c92:	4645      	mov	r5, r8
 8001c94:	9503      	str	r5, [sp, #12]
 8001c96:	4655      	mov	r5, sl
 8001c98:	042e      	lsls	r6, r5, #16
 8001c9a:	0c36      	lsrs	r6, r6, #16
 8001c9c:	0c2f      	lsrs	r7, r5, #16
 8001c9e:	0035      	movs	r5, r6
 8001ca0:	4345      	muls	r5, r0
 8001ca2:	4378      	muls	r0, r7
 8001ca4:	4681      	mov	r9, r0
 8001ca6:	0038      	movs	r0, r7
 8001ca8:	46a8      	mov	r8, r5
 8001caa:	0c2d      	lsrs	r5, r5, #16
 8001cac:	46aa      	mov	sl, r5
 8001cae:	9a00      	ldr	r2, [sp, #0]
 8001cb0:	4350      	muls	r0, r2
 8001cb2:	4372      	muls	r2, r6
 8001cb4:	444a      	add	r2, r9
 8001cb6:	4452      	add	r2, sl
 8001cb8:	4591      	cmp	r9, r2
 8001cba:	d903      	bls.n	8001cc4 <__aeabi_dmul+0x400>
 8001cbc:	2580      	movs	r5, #128	@ 0x80
 8001cbe:	026d      	lsls	r5, r5, #9
 8001cc0:	46a9      	mov	r9, r5
 8001cc2:	4448      	add	r0, r9
 8001cc4:	0c15      	lsrs	r5, r2, #16
 8001cc6:	46a9      	mov	r9, r5
 8001cc8:	4645      	mov	r5, r8
 8001cca:	042d      	lsls	r5, r5, #16
 8001ccc:	0c2d      	lsrs	r5, r5, #16
 8001cce:	46a8      	mov	r8, r5
 8001cd0:	4665      	mov	r5, ip
 8001cd2:	437d      	muls	r5, r7
 8001cd4:	0412      	lsls	r2, r2, #16
 8001cd6:	4448      	add	r0, r9
 8001cd8:	4490      	add	r8, r2
 8001cda:	46a9      	mov	r9, r5
 8001cdc:	0032      	movs	r2, r6
 8001cde:	4665      	mov	r5, ip
 8001ce0:	4362      	muls	r2, r4
 8001ce2:	436e      	muls	r6, r5
 8001ce4:	437c      	muls	r4, r7
 8001ce6:	0c17      	lsrs	r7, r2, #16
 8001ce8:	1936      	adds	r6, r6, r4
 8001cea:	19bf      	adds	r7, r7, r6
 8001cec:	42bc      	cmp	r4, r7
 8001cee:	d903      	bls.n	8001cf8 <__aeabi_dmul+0x434>
 8001cf0:	2480      	movs	r4, #128	@ 0x80
 8001cf2:	0264      	lsls	r4, r4, #9
 8001cf4:	46a4      	mov	ip, r4
 8001cf6:	44e1      	add	r9, ip
 8001cf8:	9c02      	ldr	r4, [sp, #8]
 8001cfa:	9e03      	ldr	r6, [sp, #12]
 8001cfc:	46a4      	mov	ip, r4
 8001cfe:	9d05      	ldr	r5, [sp, #20]
 8001d00:	4466      	add	r6, ip
 8001d02:	428e      	cmp	r6, r1
 8001d04:	4189      	sbcs	r1, r1
 8001d06:	46ac      	mov	ip, r5
 8001d08:	0412      	lsls	r2, r2, #16
 8001d0a:	043c      	lsls	r4, r7, #16
 8001d0c:	0c12      	lsrs	r2, r2, #16
 8001d0e:	18a2      	adds	r2, r4, r2
 8001d10:	4462      	add	r2, ip
 8001d12:	4249      	negs	r1, r1
 8001d14:	1854      	adds	r4, r2, r1
 8001d16:	4446      	add	r6, r8
 8001d18:	46a4      	mov	ip, r4
 8001d1a:	4546      	cmp	r6, r8
 8001d1c:	41a4      	sbcs	r4, r4
 8001d1e:	4682      	mov	sl, r0
 8001d20:	4264      	negs	r4, r4
 8001d22:	46a0      	mov	r8, r4
 8001d24:	42aa      	cmp	r2, r5
 8001d26:	4192      	sbcs	r2, r2
 8001d28:	458c      	cmp	ip, r1
 8001d2a:	4189      	sbcs	r1, r1
 8001d2c:	44e2      	add	sl, ip
 8001d2e:	44d0      	add	r8, sl
 8001d30:	4249      	negs	r1, r1
 8001d32:	4252      	negs	r2, r2
 8001d34:	430a      	orrs	r2, r1
 8001d36:	45a0      	cmp	r8, r4
 8001d38:	41a4      	sbcs	r4, r4
 8001d3a:	4582      	cmp	sl, r0
 8001d3c:	4189      	sbcs	r1, r1
 8001d3e:	4264      	negs	r4, r4
 8001d40:	4249      	negs	r1, r1
 8001d42:	430c      	orrs	r4, r1
 8001d44:	4641      	mov	r1, r8
 8001d46:	0c3f      	lsrs	r7, r7, #16
 8001d48:	19d2      	adds	r2, r2, r7
 8001d4a:	1912      	adds	r2, r2, r4
 8001d4c:	0dcc      	lsrs	r4, r1, #23
 8001d4e:	9904      	ldr	r1, [sp, #16]
 8001d50:	0270      	lsls	r0, r6, #9
 8001d52:	4308      	orrs	r0, r1
 8001d54:	1e41      	subs	r1, r0, #1
 8001d56:	4188      	sbcs	r0, r1
 8001d58:	4641      	mov	r1, r8
 8001d5a:	444a      	add	r2, r9
 8001d5c:	0df6      	lsrs	r6, r6, #23
 8001d5e:	0252      	lsls	r2, r2, #9
 8001d60:	4330      	orrs	r0, r6
 8001d62:	0249      	lsls	r1, r1, #9
 8001d64:	4314      	orrs	r4, r2
 8001d66:	4308      	orrs	r0, r1
 8001d68:	01d2      	lsls	r2, r2, #7
 8001d6a:	d535      	bpl.n	8001dd8 <__aeabi_dmul+0x514>
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	0843      	lsrs	r3, r0, #1
 8001d70:	4002      	ands	r2, r0
 8001d72:	4313      	orrs	r3, r2
 8001d74:	07e0      	lsls	r0, r4, #31
 8001d76:	4318      	orrs	r0, r3
 8001d78:	0864      	lsrs	r4, r4, #1
 8001d7a:	e634      	b.n	80019e6 <__aeabi_dmul+0x122>
 8001d7c:	9b00      	ldr	r3, [sp, #0]
 8001d7e:	46a2      	mov	sl, r4
 8001d80:	469b      	mov	fp, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	2480      	movs	r4, #128	@ 0x80
 8001d86:	4653      	mov	r3, sl
 8001d88:	0324      	lsls	r4, r4, #12
 8001d8a:	431c      	orrs	r4, r3
 8001d8c:	0324      	lsls	r4, r4, #12
 8001d8e:	464a      	mov	r2, r9
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <__aeabi_dmul+0x588>)
 8001d92:	0b24      	lsrs	r4, r4, #12
 8001d94:	e5ec      	b.n	8001970 <__aeabi_dmul+0xac>
 8001d96:	f000 fd75 	bl	8002884 <__clzsi2>
 8001d9a:	2315      	movs	r3, #21
 8001d9c:	469c      	mov	ip, r3
 8001d9e:	4484      	add	ip, r0
 8001da0:	0002      	movs	r2, r0
 8001da2:	4663      	mov	r3, ip
 8001da4:	3220      	adds	r2, #32
 8001da6:	2b1c      	cmp	r3, #28
 8001da8:	dc00      	bgt.n	8001dac <__aeabi_dmul+0x4e8>
 8001daa:	e684      	b.n	8001ab6 <__aeabi_dmul+0x1f2>
 8001dac:	2300      	movs	r3, #0
 8001dae:	4699      	mov	r9, r3
 8001db0:	0023      	movs	r3, r4
 8001db2:	3808      	subs	r0, #8
 8001db4:	4083      	lsls	r3, r0
 8001db6:	469a      	mov	sl, r3
 8001db8:	e68e      	b.n	8001ad8 <__aeabi_dmul+0x214>
 8001dba:	f000 fd63 	bl	8002884 <__clzsi2>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	3215      	adds	r2, #21
 8001dc4:	3320      	adds	r3, #32
 8001dc6:	2a1c      	cmp	r2, #28
 8001dc8:	dc00      	bgt.n	8001dcc <__aeabi_dmul+0x508>
 8001dca:	e64e      	b.n	8001a6a <__aeabi_dmul+0x1a6>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	0034      	movs	r4, r6
 8001dd0:	3a08      	subs	r2, #8
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4094      	lsls	r4, r2
 8001dd6:	e652      	b.n	8001a7e <__aeabi_dmul+0x1ba>
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	e604      	b.n	80019e6 <__aeabi_dmul+0x122>
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <__aeabi_dmul+0x58c>)
 8001dde:	0021      	movs	r1, r4
 8001de0:	469c      	mov	ip, r3
 8001de2:	0003      	movs	r3, r0
 8001de4:	9d01      	ldr	r5, [sp, #4]
 8001de6:	40d3      	lsrs	r3, r2
 8001de8:	4465      	add	r5, ip
 8001dea:	40a9      	lsls	r1, r5
 8001dec:	4319      	orrs	r1, r3
 8001dee:	0003      	movs	r3, r0
 8001df0:	40ab      	lsls	r3, r5
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	4183      	sbcs	r3, r0
 8001df6:	4319      	orrs	r1, r3
 8001df8:	0008      	movs	r0, r1
 8001dfa:	40d4      	lsrs	r4, r2
 8001dfc:	074b      	lsls	r3, r1, #29
 8001dfe:	d009      	beq.n	8001e14 <__aeabi_dmul+0x550>
 8001e00:	230f      	movs	r3, #15
 8001e02:	400b      	ands	r3, r1
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d005      	beq.n	8001e14 <__aeabi_dmul+0x550>
 8001e08:	1d0b      	adds	r3, r1, #4
 8001e0a:	428b      	cmp	r3, r1
 8001e0c:	4180      	sbcs	r0, r0
 8001e0e:	4240      	negs	r0, r0
 8001e10:	1824      	adds	r4, r4, r0
 8001e12:	0018      	movs	r0, r3
 8001e14:	0223      	lsls	r3, r4, #8
 8001e16:	d400      	bmi.n	8001e1a <__aeabi_dmul+0x556>
 8001e18:	e6d6      	b.n	8001bc8 <__aeabi_dmul+0x304>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	2400      	movs	r4, #0
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e5a6      	b.n	8001970 <__aeabi_dmul+0xac>
 8001e22:	290f      	cmp	r1, #15
 8001e24:	d1aa      	bne.n	8001d7c <__aeabi_dmul+0x4b8>
 8001e26:	2380      	movs	r3, #128	@ 0x80
 8001e28:	4652      	mov	r2, sl
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	421a      	tst	r2, r3
 8001e2e:	d0a9      	beq.n	8001d84 <__aeabi_dmul+0x4c0>
 8001e30:	421c      	tst	r4, r3
 8001e32:	d1a7      	bne.n	8001d84 <__aeabi_dmul+0x4c0>
 8001e34:	431c      	orrs	r4, r3
 8001e36:	9b00      	ldr	r3, [sp, #0]
 8001e38:	0002      	movs	r2, r0
 8001e3a:	469b      	mov	fp, r3
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <__aeabi_dmul+0x588>)
 8001e3e:	e597      	b.n	8001970 <__aeabi_dmul+0xac>
 8001e40:	2400      	movs	r4, #0
 8001e42:	e6c1      	b.n	8001bc8 <__aeabi_dmul+0x304>
 8001e44:	2400      	movs	r4, #0
 8001e46:	4b01      	ldr	r3, [pc, #4]	@ (8001e4c <__aeabi_dmul+0x588>)
 8001e48:	0022      	movs	r2, r4
 8001e4a:	e591      	b.n	8001970 <__aeabi_dmul+0xac>
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	0000041e 	.word	0x0000041e

08001e54 <__aeabi_dsub>:
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	464e      	mov	r6, r9
 8001e58:	4645      	mov	r5, r8
 8001e5a:	46de      	mov	lr, fp
 8001e5c:	4657      	mov	r7, sl
 8001e5e:	b5e0      	push	{r5, r6, r7, lr}
 8001e60:	b085      	sub	sp, #20
 8001e62:	9000      	str	r0, [sp, #0]
 8001e64:	9101      	str	r1, [sp, #4]
 8001e66:	030c      	lsls	r4, r1, #12
 8001e68:	004f      	lsls	r7, r1, #1
 8001e6a:	0fce      	lsrs	r6, r1, #31
 8001e6c:	0a61      	lsrs	r1, r4, #9
 8001e6e:	9c00      	ldr	r4, [sp, #0]
 8001e70:	46b0      	mov	r8, r6
 8001e72:	0f64      	lsrs	r4, r4, #29
 8001e74:	430c      	orrs	r4, r1
 8001e76:	9900      	ldr	r1, [sp, #0]
 8001e78:	0d7f      	lsrs	r7, r7, #21
 8001e7a:	00c8      	lsls	r0, r1, #3
 8001e7c:	0011      	movs	r1, r2
 8001e7e:	001a      	movs	r2, r3
 8001e80:	031b      	lsls	r3, r3, #12
 8001e82:	469c      	mov	ip, r3
 8001e84:	9100      	str	r1, [sp, #0]
 8001e86:	9201      	str	r2, [sp, #4]
 8001e88:	0051      	lsls	r1, r2, #1
 8001e8a:	0d4b      	lsrs	r3, r1, #21
 8001e8c:	4699      	mov	r9, r3
 8001e8e:	9b01      	ldr	r3, [sp, #4]
 8001e90:	9d00      	ldr	r5, [sp, #0]
 8001e92:	0fd9      	lsrs	r1, r3, #31
 8001e94:	4663      	mov	r3, ip
 8001e96:	0f6a      	lsrs	r2, r5, #29
 8001e98:	0a5b      	lsrs	r3, r3, #9
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	00ea      	lsls	r2, r5, #3
 8001e9e:	4694      	mov	ip, r2
 8001ea0:	4693      	mov	fp, r2
 8001ea2:	4ac1      	ldr	r2, [pc, #772]	@ (80021a8 <__aeabi_dsub+0x354>)
 8001ea4:	9003      	str	r0, [sp, #12]
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	4591      	cmp	r9, r2
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x5a>
 8001eac:	e0cd      	b.n	800204a <__aeabi_dsub+0x1f6>
 8001eae:	2501      	movs	r5, #1
 8001eb0:	4069      	eors	r1, r5
 8001eb2:	464d      	mov	r5, r9
 8001eb4:	1b7d      	subs	r5, r7, r5
 8001eb6:	46aa      	mov	sl, r5
 8001eb8:	428e      	cmp	r6, r1
 8001eba:	d100      	bne.n	8001ebe <__aeabi_dsub+0x6a>
 8001ebc:	e080      	b.n	8001fc0 <__aeabi_dsub+0x16c>
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	dc00      	bgt.n	8001ec4 <__aeabi_dsub+0x70>
 8001ec2:	e335      	b.n	8002530 <__aeabi_dsub+0x6dc>
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	2900      	cmp	r1, #0
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x78>
 8001eca:	e0df      	b.n	800208c <__aeabi_dsub+0x238>
 8001ecc:	4297      	cmp	r7, r2
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x7e>
 8001ed0:	e194      	b.n	80021fc <__aeabi_dsub+0x3a8>
 8001ed2:	4652      	mov	r2, sl
 8001ed4:	2501      	movs	r5, #1
 8001ed6:	2a38      	cmp	r2, #56	@ 0x38
 8001ed8:	dc19      	bgt.n	8001f0e <__aeabi_dsub+0xba>
 8001eda:	2280      	movs	r2, #128	@ 0x80
 8001edc:	9b02      	ldr	r3, [sp, #8]
 8001ede:	0412      	lsls	r2, r2, #16
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	9302      	str	r3, [sp, #8]
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	2a1f      	cmp	r2, #31
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_dsub+0x98>
 8001eea:	e1e3      	b.n	80022b4 <__aeabi_dsub+0x460>
 8001eec:	4653      	mov	r3, sl
 8001eee:	2220      	movs	r2, #32
 8001ef0:	4661      	mov	r1, ip
 8001ef2:	9d02      	ldr	r5, [sp, #8]
 8001ef4:	1ad2      	subs	r2, r2, r3
 8001ef6:	4095      	lsls	r5, r2
 8001ef8:	40d9      	lsrs	r1, r3
 8001efa:	430d      	orrs	r5, r1
 8001efc:	4661      	mov	r1, ip
 8001efe:	4091      	lsls	r1, r2
 8001f00:	000a      	movs	r2, r1
 8001f02:	1e51      	subs	r1, r2, #1
 8001f04:	418a      	sbcs	r2, r1
 8001f06:	4315      	orrs	r5, r2
 8001f08:	9a02      	ldr	r2, [sp, #8]
 8001f0a:	40da      	lsrs	r2, r3
 8001f0c:	1aa4      	subs	r4, r4, r2
 8001f0e:	1b45      	subs	r5, r0, r5
 8001f10:	42a8      	cmp	r0, r5
 8001f12:	4180      	sbcs	r0, r0
 8001f14:	4240      	negs	r0, r0
 8001f16:	1a24      	subs	r4, r4, r0
 8001f18:	0223      	lsls	r3, r4, #8
 8001f1a:	d400      	bmi.n	8001f1e <__aeabi_dsub+0xca>
 8001f1c:	e13d      	b.n	800219a <__aeabi_dsub+0x346>
 8001f1e:	0264      	lsls	r4, r4, #9
 8001f20:	0a64      	lsrs	r4, r4, #9
 8001f22:	2c00      	cmp	r4, #0
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dsub+0xd4>
 8001f26:	e147      	b.n	80021b8 <__aeabi_dsub+0x364>
 8001f28:	0020      	movs	r0, r4
 8001f2a:	f000 fcab 	bl	8002884 <__clzsi2>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	3b08      	subs	r3, #8
 8001f32:	2120      	movs	r1, #32
 8001f34:	0028      	movs	r0, r5
 8001f36:	1aca      	subs	r2, r1, r3
 8001f38:	40d0      	lsrs	r0, r2
 8001f3a:	409c      	lsls	r4, r3
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	409d      	lsls	r5, r3
 8001f40:	4322      	orrs	r2, r4
 8001f42:	429f      	cmp	r7, r3
 8001f44:	dd00      	ble.n	8001f48 <__aeabi_dsub+0xf4>
 8001f46:	e177      	b.n	8002238 <__aeabi_dsub+0x3e4>
 8001f48:	1bd8      	subs	r0, r3, r7
 8001f4a:	3001      	adds	r0, #1
 8001f4c:	1a09      	subs	r1, r1, r0
 8001f4e:	002c      	movs	r4, r5
 8001f50:	408d      	lsls	r5, r1
 8001f52:	40c4      	lsrs	r4, r0
 8001f54:	1e6b      	subs	r3, r5, #1
 8001f56:	419d      	sbcs	r5, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	40c2      	lsrs	r2, r0
 8001f5c:	408b      	lsls	r3, r1
 8001f5e:	4325      	orrs	r5, r4
 8001f60:	2700      	movs	r7, #0
 8001f62:	0014      	movs	r4, r2
 8001f64:	431d      	orrs	r5, r3
 8001f66:	076b      	lsls	r3, r5, #29
 8001f68:	d009      	beq.n	8001f7e <__aeabi_dsub+0x12a>
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	402b      	ands	r3, r5
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d005      	beq.n	8001f7e <__aeabi_dsub+0x12a>
 8001f72:	1d2b      	adds	r3, r5, #4
 8001f74:	42ab      	cmp	r3, r5
 8001f76:	41ad      	sbcs	r5, r5
 8001f78:	426d      	negs	r5, r5
 8001f7a:	1964      	adds	r4, r4, r5
 8001f7c:	001d      	movs	r5, r3
 8001f7e:	0223      	lsls	r3, r4, #8
 8001f80:	d400      	bmi.n	8001f84 <__aeabi_dsub+0x130>
 8001f82:	e140      	b.n	8002206 <__aeabi_dsub+0x3b2>
 8001f84:	4a88      	ldr	r2, [pc, #544]	@ (80021a8 <__aeabi_dsub+0x354>)
 8001f86:	3701      	adds	r7, #1
 8001f88:	4297      	cmp	r7, r2
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x13a>
 8001f8c:	e101      	b.n	8002192 <__aeabi_dsub+0x33e>
 8001f8e:	2601      	movs	r6, #1
 8001f90:	4643      	mov	r3, r8
 8001f92:	4986      	ldr	r1, [pc, #536]	@ (80021ac <__aeabi_dsub+0x358>)
 8001f94:	08ed      	lsrs	r5, r5, #3
 8001f96:	4021      	ands	r1, r4
 8001f98:	074a      	lsls	r2, r1, #29
 8001f9a:	432a      	orrs	r2, r5
 8001f9c:	057c      	lsls	r4, r7, #21
 8001f9e:	024d      	lsls	r5, r1, #9
 8001fa0:	0b2d      	lsrs	r5, r5, #12
 8001fa2:	0d64      	lsrs	r4, r4, #21
 8001fa4:	401e      	ands	r6, r3
 8001fa6:	0524      	lsls	r4, r4, #20
 8001fa8:	432c      	orrs	r4, r5
 8001faa:	07f6      	lsls	r6, r6, #31
 8001fac:	4334      	orrs	r4, r6
 8001fae:	0010      	movs	r0, r2
 8001fb0:	0021      	movs	r1, r4
 8001fb2:	b005      	add	sp, #20
 8001fb4:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb6:	46bb      	mov	fp, r7
 8001fb8:	46b2      	mov	sl, r6
 8001fba:	46a9      	mov	r9, r5
 8001fbc:	46a0      	mov	r8, r4
 8001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	dc00      	bgt.n	8001fc6 <__aeabi_dsub+0x172>
 8001fc4:	e2d0      	b.n	8002568 <__aeabi_dsub+0x714>
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	2900      	cmp	r1, #0
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x17a>
 8001fcc:	e0d4      	b.n	8002178 <__aeabi_dsub+0x324>
 8001fce:	4661      	mov	r1, ip
 8001fd0:	9b02      	ldr	r3, [sp, #8]
 8001fd2:	4319      	orrs	r1, r3
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x184>
 8001fd6:	e12b      	b.n	8002230 <__aeabi_dsub+0x3dc>
 8001fd8:	1e69      	subs	r1, r5, #1
 8001fda:	2d01      	cmp	r5, #1
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x18c>
 8001fde:	e1d9      	b.n	8002394 <__aeabi_dsub+0x540>
 8001fe0:	4295      	cmp	r5, r2
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dsub+0x192>
 8001fe4:	e10a      	b.n	80021fc <__aeabi_dsub+0x3a8>
 8001fe6:	2501      	movs	r5, #1
 8001fe8:	2938      	cmp	r1, #56	@ 0x38
 8001fea:	dc17      	bgt.n	800201c <__aeabi_dsub+0x1c8>
 8001fec:	468a      	mov	sl, r1
 8001fee:	4653      	mov	r3, sl
 8001ff0:	2b1f      	cmp	r3, #31
 8001ff2:	dd00      	ble.n	8001ff6 <__aeabi_dsub+0x1a2>
 8001ff4:	e1e7      	b.n	80023c6 <__aeabi_dsub+0x572>
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	1ad2      	subs	r2, r2, r3
 8001ffa:	9b02      	ldr	r3, [sp, #8]
 8001ffc:	4661      	mov	r1, ip
 8001ffe:	4093      	lsls	r3, r2
 8002000:	001d      	movs	r5, r3
 8002002:	4653      	mov	r3, sl
 8002004:	40d9      	lsrs	r1, r3
 8002006:	4663      	mov	r3, ip
 8002008:	4093      	lsls	r3, r2
 800200a:	001a      	movs	r2, r3
 800200c:	430d      	orrs	r5, r1
 800200e:	1e51      	subs	r1, r2, #1
 8002010:	418a      	sbcs	r2, r1
 8002012:	4653      	mov	r3, sl
 8002014:	4315      	orrs	r5, r2
 8002016:	9a02      	ldr	r2, [sp, #8]
 8002018:	40da      	lsrs	r2, r3
 800201a:	18a4      	adds	r4, r4, r2
 800201c:	182d      	adds	r5, r5, r0
 800201e:	4285      	cmp	r5, r0
 8002020:	4180      	sbcs	r0, r0
 8002022:	4240      	negs	r0, r0
 8002024:	1824      	adds	r4, r4, r0
 8002026:	0223      	lsls	r3, r4, #8
 8002028:	d400      	bmi.n	800202c <__aeabi_dsub+0x1d8>
 800202a:	e0b6      	b.n	800219a <__aeabi_dsub+0x346>
 800202c:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <__aeabi_dsub+0x354>)
 800202e:	3701      	adds	r7, #1
 8002030:	429f      	cmp	r7, r3
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x1e2>
 8002034:	e0ad      	b.n	8002192 <__aeabi_dsub+0x33e>
 8002036:	2101      	movs	r1, #1
 8002038:	4b5c      	ldr	r3, [pc, #368]	@ (80021ac <__aeabi_dsub+0x358>)
 800203a:	086a      	lsrs	r2, r5, #1
 800203c:	401c      	ands	r4, r3
 800203e:	4029      	ands	r1, r5
 8002040:	430a      	orrs	r2, r1
 8002042:	07e5      	lsls	r5, r4, #31
 8002044:	4315      	orrs	r5, r2
 8002046:	0864      	lsrs	r4, r4, #1
 8002048:	e78d      	b.n	8001f66 <__aeabi_dsub+0x112>
 800204a:	4a59      	ldr	r2, [pc, #356]	@ (80021b0 <__aeabi_dsub+0x35c>)
 800204c:	9b02      	ldr	r3, [sp, #8]
 800204e:	4692      	mov	sl, r2
 8002050:	4662      	mov	r2, ip
 8002052:	44ba      	add	sl, r7
 8002054:	431a      	orrs	r2, r3
 8002056:	d02c      	beq.n	80020b2 <__aeabi_dsub+0x25e>
 8002058:	428e      	cmp	r6, r1
 800205a:	d02e      	beq.n	80020ba <__aeabi_dsub+0x266>
 800205c:	4652      	mov	r2, sl
 800205e:	2a00      	cmp	r2, #0
 8002060:	d060      	beq.n	8002124 <__aeabi_dsub+0x2d0>
 8002062:	2f00      	cmp	r7, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x214>
 8002066:	e0db      	b.n	8002220 <__aeabi_dsub+0x3cc>
 8002068:	4663      	mov	r3, ip
 800206a:	000e      	movs	r6, r1
 800206c:	9c02      	ldr	r4, [sp, #8]
 800206e:	08d8      	lsrs	r0, r3, #3
 8002070:	0762      	lsls	r2, r4, #29
 8002072:	4302      	orrs	r2, r0
 8002074:	08e4      	lsrs	r4, r4, #3
 8002076:	0013      	movs	r3, r2
 8002078:	4323      	orrs	r3, r4
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x22a>
 800207c:	e254      	b.n	8002528 <__aeabi_dsub+0x6d4>
 800207e:	2580      	movs	r5, #128	@ 0x80
 8002080:	032d      	lsls	r5, r5, #12
 8002082:	4325      	orrs	r5, r4
 8002084:	032d      	lsls	r5, r5, #12
 8002086:	4c48      	ldr	r4, [pc, #288]	@ (80021a8 <__aeabi_dsub+0x354>)
 8002088:	0b2d      	lsrs	r5, r5, #12
 800208a:	e78c      	b.n	8001fa6 <__aeabi_dsub+0x152>
 800208c:	4661      	mov	r1, ip
 800208e:	9b02      	ldr	r3, [sp, #8]
 8002090:	4319      	orrs	r1, r3
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x242>
 8002094:	e0cc      	b.n	8002230 <__aeabi_dsub+0x3dc>
 8002096:	0029      	movs	r1, r5
 8002098:	3901      	subs	r1, #1
 800209a:	2d01      	cmp	r5, #1
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x24c>
 800209e:	e188      	b.n	80023b2 <__aeabi_dsub+0x55e>
 80020a0:	4295      	cmp	r5, r2
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x252>
 80020a4:	e0aa      	b.n	80021fc <__aeabi_dsub+0x3a8>
 80020a6:	2501      	movs	r5, #1
 80020a8:	2938      	cmp	r1, #56	@ 0x38
 80020aa:	dd00      	ble.n	80020ae <__aeabi_dsub+0x25a>
 80020ac:	e72f      	b.n	8001f0e <__aeabi_dsub+0xba>
 80020ae:	468a      	mov	sl, r1
 80020b0:	e718      	b.n	8001ee4 <__aeabi_dsub+0x90>
 80020b2:	2201      	movs	r2, #1
 80020b4:	4051      	eors	r1, r2
 80020b6:	428e      	cmp	r6, r1
 80020b8:	d1d0      	bne.n	800205c <__aeabi_dsub+0x208>
 80020ba:	4653      	mov	r3, sl
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_dsub+0x26e>
 80020c0:	e0be      	b.n	8002240 <__aeabi_dsub+0x3ec>
 80020c2:	2f00      	cmp	r7, #0
 80020c4:	d000      	beq.n	80020c8 <__aeabi_dsub+0x274>
 80020c6:	e138      	b.n	800233a <__aeabi_dsub+0x4e6>
 80020c8:	46ca      	mov	sl, r9
 80020ca:	0022      	movs	r2, r4
 80020cc:	4302      	orrs	r2, r0
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x27e>
 80020d0:	e1e2      	b.n	8002498 <__aeabi_dsub+0x644>
 80020d2:	4653      	mov	r3, sl
 80020d4:	1e59      	subs	r1, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x288>
 80020da:	e20d      	b.n	80024f8 <__aeabi_dsub+0x6a4>
 80020dc:	4a32      	ldr	r2, [pc, #200]	@ (80021a8 <__aeabi_dsub+0x354>)
 80020de:	4592      	cmp	sl, r2
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x290>
 80020e2:	e1d2      	b.n	800248a <__aeabi_dsub+0x636>
 80020e4:	2701      	movs	r7, #1
 80020e6:	2938      	cmp	r1, #56	@ 0x38
 80020e8:	dc13      	bgt.n	8002112 <__aeabi_dsub+0x2be>
 80020ea:	291f      	cmp	r1, #31
 80020ec:	dd00      	ble.n	80020f0 <__aeabi_dsub+0x29c>
 80020ee:	e1ee      	b.n	80024ce <__aeabi_dsub+0x67a>
 80020f0:	2220      	movs	r2, #32
 80020f2:	9b02      	ldr	r3, [sp, #8]
 80020f4:	1a52      	subs	r2, r2, r1
 80020f6:	0025      	movs	r5, r4
 80020f8:	0007      	movs	r7, r0
 80020fa:	469a      	mov	sl, r3
 80020fc:	40cc      	lsrs	r4, r1
 80020fe:	4090      	lsls	r0, r2
 8002100:	4095      	lsls	r5, r2
 8002102:	40cf      	lsrs	r7, r1
 8002104:	44a2      	add	sl, r4
 8002106:	1e42      	subs	r2, r0, #1
 8002108:	4190      	sbcs	r0, r2
 800210a:	4653      	mov	r3, sl
 800210c:	432f      	orrs	r7, r5
 800210e:	4307      	orrs	r7, r0
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	003d      	movs	r5, r7
 8002114:	4465      	add	r5, ip
 8002116:	4565      	cmp	r5, ip
 8002118:	4192      	sbcs	r2, r2
 800211a:	9b02      	ldr	r3, [sp, #8]
 800211c:	4252      	negs	r2, r2
 800211e:	464f      	mov	r7, r9
 8002120:	18d4      	adds	r4, r2, r3
 8002122:	e780      	b.n	8002026 <__aeabi_dsub+0x1d2>
 8002124:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <__aeabi_dsub+0x360>)
 8002126:	1c7d      	adds	r5, r7, #1
 8002128:	4215      	tst	r5, r2
 800212a:	d000      	beq.n	800212e <__aeabi_dsub+0x2da>
 800212c:	e0aa      	b.n	8002284 <__aeabi_dsub+0x430>
 800212e:	4662      	mov	r2, ip
 8002130:	0025      	movs	r5, r4
 8002132:	9b02      	ldr	r3, [sp, #8]
 8002134:	4305      	orrs	r5, r0
 8002136:	431a      	orrs	r2, r3
 8002138:	2f00      	cmp	r7, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x2ea>
 800213c:	e0f5      	b.n	800232a <__aeabi_dsub+0x4d6>
 800213e:	2d00      	cmp	r5, #0
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x2f0>
 8002142:	e16b      	b.n	800241c <__aeabi_dsub+0x5c8>
 8002144:	2a00      	cmp	r2, #0
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x2f6>
 8002148:	e152      	b.n	80023f0 <__aeabi_dsub+0x59c>
 800214a:	4663      	mov	r3, ip
 800214c:	1ac5      	subs	r5, r0, r3
 800214e:	9b02      	ldr	r3, [sp, #8]
 8002150:	1ae2      	subs	r2, r4, r3
 8002152:	42a8      	cmp	r0, r5
 8002154:	419b      	sbcs	r3, r3
 8002156:	425b      	negs	r3, r3
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	021a      	lsls	r2, r3, #8
 800215c:	d400      	bmi.n	8002160 <__aeabi_dsub+0x30c>
 800215e:	e1d5      	b.n	800250c <__aeabi_dsub+0x6b8>
 8002160:	4663      	mov	r3, ip
 8002162:	1a1d      	subs	r5, r3, r0
 8002164:	45ac      	cmp	ip, r5
 8002166:	4192      	sbcs	r2, r2
 8002168:	2601      	movs	r6, #1
 800216a:	9b02      	ldr	r3, [sp, #8]
 800216c:	4252      	negs	r2, r2
 800216e:	1b1c      	subs	r4, r3, r4
 8002170:	4688      	mov	r8, r1
 8002172:	1aa4      	subs	r4, r4, r2
 8002174:	400e      	ands	r6, r1
 8002176:	e6f6      	b.n	8001f66 <__aeabi_dsub+0x112>
 8002178:	4297      	cmp	r7, r2
 800217a:	d03f      	beq.n	80021fc <__aeabi_dsub+0x3a8>
 800217c:	4652      	mov	r2, sl
 800217e:	2501      	movs	r5, #1
 8002180:	2a38      	cmp	r2, #56	@ 0x38
 8002182:	dd00      	ble.n	8002186 <__aeabi_dsub+0x332>
 8002184:	e74a      	b.n	800201c <__aeabi_dsub+0x1c8>
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	9b02      	ldr	r3, [sp, #8]
 800218a:	0412      	lsls	r2, r2, #16
 800218c:	4313      	orrs	r3, r2
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	e72d      	b.n	8001fee <__aeabi_dsub+0x19a>
 8002192:	003c      	movs	r4, r7
 8002194:	2500      	movs	r5, #0
 8002196:	2200      	movs	r2, #0
 8002198:	e705      	b.n	8001fa6 <__aeabi_dsub+0x152>
 800219a:	2307      	movs	r3, #7
 800219c:	402b      	ands	r3, r5
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d000      	beq.n	80021a4 <__aeabi_dsub+0x350>
 80021a2:	e6e2      	b.n	8001f6a <__aeabi_dsub+0x116>
 80021a4:	e06b      	b.n	800227e <__aeabi_dsub+0x42a>
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	000007ff 	.word	0x000007ff
 80021ac:	ff7fffff 	.word	0xff7fffff
 80021b0:	fffff801 	.word	0xfffff801
 80021b4:	000007fe 	.word	0x000007fe
 80021b8:	0028      	movs	r0, r5
 80021ba:	f000 fb63 	bl	8002884 <__clzsi2>
 80021be:	0003      	movs	r3, r0
 80021c0:	3318      	adds	r3, #24
 80021c2:	2b1f      	cmp	r3, #31
 80021c4:	dc00      	bgt.n	80021c8 <__aeabi_dsub+0x374>
 80021c6:	e6b4      	b.n	8001f32 <__aeabi_dsub+0xde>
 80021c8:	002a      	movs	r2, r5
 80021ca:	3808      	subs	r0, #8
 80021cc:	4082      	lsls	r2, r0
 80021ce:	429f      	cmp	r7, r3
 80021d0:	dd00      	ble.n	80021d4 <__aeabi_dsub+0x380>
 80021d2:	e0b9      	b.n	8002348 <__aeabi_dsub+0x4f4>
 80021d4:	1bdb      	subs	r3, r3, r7
 80021d6:	1c58      	adds	r0, r3, #1
 80021d8:	281f      	cmp	r0, #31
 80021da:	dc00      	bgt.n	80021de <__aeabi_dsub+0x38a>
 80021dc:	e1a0      	b.n	8002520 <__aeabi_dsub+0x6cc>
 80021de:	0015      	movs	r5, r2
 80021e0:	3b1f      	subs	r3, #31
 80021e2:	40dd      	lsrs	r5, r3
 80021e4:	2820      	cmp	r0, #32
 80021e6:	d005      	beq.n	80021f4 <__aeabi_dsub+0x3a0>
 80021e8:	2340      	movs	r3, #64	@ 0x40
 80021ea:	1a1b      	subs	r3, r3, r0
 80021ec:	409a      	lsls	r2, r3
 80021ee:	1e53      	subs	r3, r2, #1
 80021f0:	419a      	sbcs	r2, r3
 80021f2:	4315      	orrs	r5, r2
 80021f4:	2307      	movs	r3, #7
 80021f6:	2700      	movs	r7, #0
 80021f8:	402b      	ands	r3, r5
 80021fa:	e7d0      	b.n	800219e <__aeabi_dsub+0x34a>
 80021fc:	08c0      	lsrs	r0, r0, #3
 80021fe:	0762      	lsls	r2, r4, #29
 8002200:	4302      	orrs	r2, r0
 8002202:	08e4      	lsrs	r4, r4, #3
 8002204:	e737      	b.n	8002076 <__aeabi_dsub+0x222>
 8002206:	08ea      	lsrs	r2, r5, #3
 8002208:	0763      	lsls	r3, r4, #29
 800220a:	431a      	orrs	r2, r3
 800220c:	4bd3      	ldr	r3, [pc, #844]	@ (800255c <__aeabi_dsub+0x708>)
 800220e:	08e4      	lsrs	r4, r4, #3
 8002210:	429f      	cmp	r7, r3
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x3c2>
 8002214:	e72f      	b.n	8002076 <__aeabi_dsub+0x222>
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	0b25      	lsrs	r5, r4, #12
 800221a:	057c      	lsls	r4, r7, #21
 800221c:	0d64      	lsrs	r4, r4, #21
 800221e:	e6c2      	b.n	8001fa6 <__aeabi_dsub+0x152>
 8002220:	46ca      	mov	sl, r9
 8002222:	0022      	movs	r2, r4
 8002224:	4302      	orrs	r2, r0
 8002226:	d158      	bne.n	80022da <__aeabi_dsub+0x486>
 8002228:	4663      	mov	r3, ip
 800222a:	000e      	movs	r6, r1
 800222c:	9c02      	ldr	r4, [sp, #8]
 800222e:	9303      	str	r3, [sp, #12]
 8002230:	9b03      	ldr	r3, [sp, #12]
 8002232:	4657      	mov	r7, sl
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	e7e7      	b.n	8002208 <__aeabi_dsub+0x3b4>
 8002238:	4cc9      	ldr	r4, [pc, #804]	@ (8002560 <__aeabi_dsub+0x70c>)
 800223a:	1aff      	subs	r7, r7, r3
 800223c:	4014      	ands	r4, r2
 800223e:	e692      	b.n	8001f66 <__aeabi_dsub+0x112>
 8002240:	4dc8      	ldr	r5, [pc, #800]	@ (8002564 <__aeabi_dsub+0x710>)
 8002242:	1c7a      	adds	r2, r7, #1
 8002244:	422a      	tst	r2, r5
 8002246:	d000      	beq.n	800224a <__aeabi_dsub+0x3f6>
 8002248:	e084      	b.n	8002354 <__aeabi_dsub+0x500>
 800224a:	0022      	movs	r2, r4
 800224c:	4302      	orrs	r2, r0
 800224e:	2f00      	cmp	r7, #0
 8002250:	d000      	beq.n	8002254 <__aeabi_dsub+0x400>
 8002252:	e0ef      	b.n	8002434 <__aeabi_dsub+0x5e0>
 8002254:	2a00      	cmp	r2, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x406>
 8002258:	e0e5      	b.n	8002426 <__aeabi_dsub+0x5d2>
 800225a:	4662      	mov	r2, ip
 800225c:	9902      	ldr	r1, [sp, #8]
 800225e:	430a      	orrs	r2, r1
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x410>
 8002262:	e0c5      	b.n	80023f0 <__aeabi_dsub+0x59c>
 8002264:	4663      	mov	r3, ip
 8002266:	18c5      	adds	r5, r0, r3
 8002268:	468c      	mov	ip, r1
 800226a:	4285      	cmp	r5, r0
 800226c:	4180      	sbcs	r0, r0
 800226e:	4464      	add	r4, ip
 8002270:	4240      	negs	r0, r0
 8002272:	1824      	adds	r4, r4, r0
 8002274:	0223      	lsls	r3, r4, #8
 8002276:	d502      	bpl.n	800227e <__aeabi_dsub+0x42a>
 8002278:	4bb9      	ldr	r3, [pc, #740]	@ (8002560 <__aeabi_dsub+0x70c>)
 800227a:	3701      	adds	r7, #1
 800227c:	401c      	ands	r4, r3
 800227e:	46ba      	mov	sl, r7
 8002280:	9503      	str	r5, [sp, #12]
 8002282:	e7d5      	b.n	8002230 <__aeabi_dsub+0x3dc>
 8002284:	4662      	mov	r2, ip
 8002286:	1a85      	subs	r5, r0, r2
 8002288:	42a8      	cmp	r0, r5
 800228a:	4192      	sbcs	r2, r2
 800228c:	4252      	negs	r2, r2
 800228e:	4691      	mov	r9, r2
 8002290:	9b02      	ldr	r3, [sp, #8]
 8002292:	1ae3      	subs	r3, r4, r3
 8002294:	001a      	movs	r2, r3
 8002296:	464b      	mov	r3, r9
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	4691      	mov	r9, r2
 800229e:	021a      	lsls	r2, r3, #8
 80022a0:	d46c      	bmi.n	800237c <__aeabi_dsub+0x528>
 80022a2:	464a      	mov	r2, r9
 80022a4:	464c      	mov	r4, r9
 80022a6:	432a      	orrs	r2, r5
 80022a8:	d000      	beq.n	80022ac <__aeabi_dsub+0x458>
 80022aa:	e63a      	b.n	8001f22 <__aeabi_dsub+0xce>
 80022ac:	2600      	movs	r6, #0
 80022ae:	2400      	movs	r4, #0
 80022b0:	2500      	movs	r5, #0
 80022b2:	e678      	b.n	8001fa6 <__aeabi_dsub+0x152>
 80022b4:	9902      	ldr	r1, [sp, #8]
 80022b6:	4653      	mov	r3, sl
 80022b8:	000d      	movs	r5, r1
 80022ba:	3a20      	subs	r2, #32
 80022bc:	40d5      	lsrs	r5, r2
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d006      	beq.n	80022d0 <__aeabi_dsub+0x47c>
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	1ad2      	subs	r2, r2, r3
 80022c6:	000b      	movs	r3, r1
 80022c8:	4093      	lsls	r3, r2
 80022ca:	4662      	mov	r2, ip
 80022cc:	431a      	orrs	r2, r3
 80022ce:	4693      	mov	fp, r2
 80022d0:	465b      	mov	r3, fp
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	4193      	sbcs	r3, r2
 80022d6:	431d      	orrs	r5, r3
 80022d8:	e619      	b.n	8001f0e <__aeabi_dsub+0xba>
 80022da:	4653      	mov	r3, sl
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x490>
 80022e2:	e0c6      	b.n	8002472 <__aeabi_dsub+0x61e>
 80022e4:	4e9d      	ldr	r6, [pc, #628]	@ (800255c <__aeabi_dsub+0x708>)
 80022e6:	45b2      	cmp	sl, r6
 80022e8:	d100      	bne.n	80022ec <__aeabi_dsub+0x498>
 80022ea:	e6bd      	b.n	8002068 <__aeabi_dsub+0x214>
 80022ec:	4688      	mov	r8, r1
 80022ee:	000e      	movs	r6, r1
 80022f0:	2501      	movs	r5, #1
 80022f2:	2a38      	cmp	r2, #56	@ 0x38
 80022f4:	dc10      	bgt.n	8002318 <__aeabi_dsub+0x4c4>
 80022f6:	2a1f      	cmp	r2, #31
 80022f8:	dc7f      	bgt.n	80023fa <__aeabi_dsub+0x5a6>
 80022fa:	2120      	movs	r1, #32
 80022fc:	0025      	movs	r5, r4
 80022fe:	1a89      	subs	r1, r1, r2
 8002300:	0007      	movs	r7, r0
 8002302:	4088      	lsls	r0, r1
 8002304:	408d      	lsls	r5, r1
 8002306:	40d7      	lsrs	r7, r2
 8002308:	40d4      	lsrs	r4, r2
 800230a:	1e41      	subs	r1, r0, #1
 800230c:	4188      	sbcs	r0, r1
 800230e:	9b02      	ldr	r3, [sp, #8]
 8002310:	433d      	orrs	r5, r7
 8002312:	1b1b      	subs	r3, r3, r4
 8002314:	4305      	orrs	r5, r0
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	4662      	mov	r2, ip
 800231a:	1b55      	subs	r5, r2, r5
 800231c:	45ac      	cmp	ip, r5
 800231e:	4192      	sbcs	r2, r2
 8002320:	9b02      	ldr	r3, [sp, #8]
 8002322:	4252      	negs	r2, r2
 8002324:	464f      	mov	r7, r9
 8002326:	1a9c      	subs	r4, r3, r2
 8002328:	e5f6      	b.n	8001f18 <__aeabi_dsub+0xc4>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d000      	beq.n	8002330 <__aeabi_dsub+0x4dc>
 800232e:	e0b7      	b.n	80024a0 <__aeabi_dsub+0x64c>
 8002330:	2a00      	cmp	r2, #0
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x4e2>
 8002334:	e0f0      	b.n	8002518 <__aeabi_dsub+0x6c4>
 8002336:	2601      	movs	r6, #1
 8002338:	400e      	ands	r6, r1
 800233a:	4663      	mov	r3, ip
 800233c:	9802      	ldr	r0, [sp, #8]
 800233e:	08d9      	lsrs	r1, r3, #3
 8002340:	0742      	lsls	r2, r0, #29
 8002342:	430a      	orrs	r2, r1
 8002344:	08c4      	lsrs	r4, r0, #3
 8002346:	e696      	b.n	8002076 <__aeabi_dsub+0x222>
 8002348:	4c85      	ldr	r4, [pc, #532]	@ (8002560 <__aeabi_dsub+0x70c>)
 800234a:	1aff      	subs	r7, r7, r3
 800234c:	4014      	ands	r4, r2
 800234e:	0762      	lsls	r2, r4, #29
 8002350:	08e4      	lsrs	r4, r4, #3
 8002352:	e760      	b.n	8002216 <__aeabi_dsub+0x3c2>
 8002354:	4981      	ldr	r1, [pc, #516]	@ (800255c <__aeabi_dsub+0x708>)
 8002356:	428a      	cmp	r2, r1
 8002358:	d100      	bne.n	800235c <__aeabi_dsub+0x508>
 800235a:	e0c9      	b.n	80024f0 <__aeabi_dsub+0x69c>
 800235c:	4663      	mov	r3, ip
 800235e:	18c1      	adds	r1, r0, r3
 8002360:	4281      	cmp	r1, r0
 8002362:	4180      	sbcs	r0, r0
 8002364:	9b02      	ldr	r3, [sp, #8]
 8002366:	4240      	negs	r0, r0
 8002368:	18e3      	adds	r3, r4, r3
 800236a:	181b      	adds	r3, r3, r0
 800236c:	07dd      	lsls	r5, r3, #31
 800236e:	085c      	lsrs	r4, r3, #1
 8002370:	2307      	movs	r3, #7
 8002372:	0849      	lsrs	r1, r1, #1
 8002374:	430d      	orrs	r5, r1
 8002376:	0017      	movs	r7, r2
 8002378:	402b      	ands	r3, r5
 800237a:	e710      	b.n	800219e <__aeabi_dsub+0x34a>
 800237c:	4663      	mov	r3, ip
 800237e:	1a1d      	subs	r5, r3, r0
 8002380:	45ac      	cmp	ip, r5
 8002382:	4192      	sbcs	r2, r2
 8002384:	2601      	movs	r6, #1
 8002386:	9b02      	ldr	r3, [sp, #8]
 8002388:	4252      	negs	r2, r2
 800238a:	1b1c      	subs	r4, r3, r4
 800238c:	4688      	mov	r8, r1
 800238e:	1aa4      	subs	r4, r4, r2
 8002390:	400e      	ands	r6, r1
 8002392:	e5c6      	b.n	8001f22 <__aeabi_dsub+0xce>
 8002394:	4663      	mov	r3, ip
 8002396:	18c5      	adds	r5, r0, r3
 8002398:	9b02      	ldr	r3, [sp, #8]
 800239a:	4285      	cmp	r5, r0
 800239c:	4180      	sbcs	r0, r0
 800239e:	469c      	mov	ip, r3
 80023a0:	4240      	negs	r0, r0
 80023a2:	4464      	add	r4, ip
 80023a4:	1824      	adds	r4, r4, r0
 80023a6:	2701      	movs	r7, #1
 80023a8:	0223      	lsls	r3, r4, #8
 80023aa:	d400      	bmi.n	80023ae <__aeabi_dsub+0x55a>
 80023ac:	e6f5      	b.n	800219a <__aeabi_dsub+0x346>
 80023ae:	2702      	movs	r7, #2
 80023b0:	e641      	b.n	8002036 <__aeabi_dsub+0x1e2>
 80023b2:	4663      	mov	r3, ip
 80023b4:	1ac5      	subs	r5, r0, r3
 80023b6:	42a8      	cmp	r0, r5
 80023b8:	4180      	sbcs	r0, r0
 80023ba:	9b02      	ldr	r3, [sp, #8]
 80023bc:	4240      	negs	r0, r0
 80023be:	1ae4      	subs	r4, r4, r3
 80023c0:	2701      	movs	r7, #1
 80023c2:	1a24      	subs	r4, r4, r0
 80023c4:	e5a8      	b.n	8001f18 <__aeabi_dsub+0xc4>
 80023c6:	9d02      	ldr	r5, [sp, #8]
 80023c8:	4652      	mov	r2, sl
 80023ca:	002b      	movs	r3, r5
 80023cc:	3a20      	subs	r2, #32
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	4653      	mov	r3, sl
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d006      	beq.n	80023e6 <__aeabi_dsub+0x592>
 80023d8:	2240      	movs	r2, #64	@ 0x40
 80023da:	1ad2      	subs	r2, r2, r3
 80023dc:	002b      	movs	r3, r5
 80023de:	4093      	lsls	r3, r2
 80023e0:	4662      	mov	r2, ip
 80023e2:	431a      	orrs	r2, r3
 80023e4:	4693      	mov	fp, r2
 80023e6:	465d      	mov	r5, fp
 80023e8:	1e6b      	subs	r3, r5, #1
 80023ea:	419d      	sbcs	r5, r3
 80023ec:	430d      	orrs	r5, r1
 80023ee:	e615      	b.n	800201c <__aeabi_dsub+0x1c8>
 80023f0:	0762      	lsls	r2, r4, #29
 80023f2:	08c0      	lsrs	r0, r0, #3
 80023f4:	4302      	orrs	r2, r0
 80023f6:	08e4      	lsrs	r4, r4, #3
 80023f8:	e70d      	b.n	8002216 <__aeabi_dsub+0x3c2>
 80023fa:	0011      	movs	r1, r2
 80023fc:	0027      	movs	r7, r4
 80023fe:	3920      	subs	r1, #32
 8002400:	40cf      	lsrs	r7, r1
 8002402:	2a20      	cmp	r2, #32
 8002404:	d005      	beq.n	8002412 <__aeabi_dsub+0x5be>
 8002406:	2140      	movs	r1, #64	@ 0x40
 8002408:	1a8a      	subs	r2, r1, r2
 800240a:	4094      	lsls	r4, r2
 800240c:	0025      	movs	r5, r4
 800240e:	4305      	orrs	r5, r0
 8002410:	9503      	str	r5, [sp, #12]
 8002412:	9d03      	ldr	r5, [sp, #12]
 8002414:	1e6a      	subs	r2, r5, #1
 8002416:	4195      	sbcs	r5, r2
 8002418:	433d      	orrs	r5, r7
 800241a:	e77d      	b.n	8002318 <__aeabi_dsub+0x4c4>
 800241c:	2a00      	cmp	r2, #0
 800241e:	d100      	bne.n	8002422 <__aeabi_dsub+0x5ce>
 8002420:	e744      	b.n	80022ac <__aeabi_dsub+0x458>
 8002422:	2601      	movs	r6, #1
 8002424:	400e      	ands	r6, r1
 8002426:	4663      	mov	r3, ip
 8002428:	08d9      	lsrs	r1, r3, #3
 800242a:	9b02      	ldr	r3, [sp, #8]
 800242c:	075a      	lsls	r2, r3, #29
 800242e:	430a      	orrs	r2, r1
 8002430:	08dc      	lsrs	r4, r3, #3
 8002432:	e6f0      	b.n	8002216 <__aeabi_dsub+0x3c2>
 8002434:	2a00      	cmp	r2, #0
 8002436:	d028      	beq.n	800248a <__aeabi_dsub+0x636>
 8002438:	4662      	mov	r2, ip
 800243a:	9f02      	ldr	r7, [sp, #8]
 800243c:	08c0      	lsrs	r0, r0, #3
 800243e:	433a      	orrs	r2, r7
 8002440:	d100      	bne.n	8002444 <__aeabi_dsub+0x5f0>
 8002442:	e6dc      	b.n	80021fe <__aeabi_dsub+0x3aa>
 8002444:	0762      	lsls	r2, r4, #29
 8002446:	4310      	orrs	r0, r2
 8002448:	2280      	movs	r2, #128	@ 0x80
 800244a:	08e4      	lsrs	r4, r4, #3
 800244c:	0312      	lsls	r2, r2, #12
 800244e:	4214      	tst	r4, r2
 8002450:	d009      	beq.n	8002466 <__aeabi_dsub+0x612>
 8002452:	08fd      	lsrs	r5, r7, #3
 8002454:	4215      	tst	r5, r2
 8002456:	d106      	bne.n	8002466 <__aeabi_dsub+0x612>
 8002458:	4663      	mov	r3, ip
 800245a:	2601      	movs	r6, #1
 800245c:	002c      	movs	r4, r5
 800245e:	08d8      	lsrs	r0, r3, #3
 8002460:	077b      	lsls	r3, r7, #29
 8002462:	4318      	orrs	r0, r3
 8002464:	400e      	ands	r6, r1
 8002466:	0f42      	lsrs	r2, r0, #29
 8002468:	00c0      	lsls	r0, r0, #3
 800246a:	08c0      	lsrs	r0, r0, #3
 800246c:	0752      	lsls	r2, r2, #29
 800246e:	4302      	orrs	r2, r0
 8002470:	e601      	b.n	8002076 <__aeabi_dsub+0x222>
 8002472:	4663      	mov	r3, ip
 8002474:	1a1d      	subs	r5, r3, r0
 8002476:	45ac      	cmp	ip, r5
 8002478:	4192      	sbcs	r2, r2
 800247a:	9b02      	ldr	r3, [sp, #8]
 800247c:	4252      	negs	r2, r2
 800247e:	1b1c      	subs	r4, r3, r4
 8002480:	000e      	movs	r6, r1
 8002482:	4688      	mov	r8, r1
 8002484:	2701      	movs	r7, #1
 8002486:	1aa4      	subs	r4, r4, r2
 8002488:	e546      	b.n	8001f18 <__aeabi_dsub+0xc4>
 800248a:	4663      	mov	r3, ip
 800248c:	08d9      	lsrs	r1, r3, #3
 800248e:	9b02      	ldr	r3, [sp, #8]
 8002490:	075a      	lsls	r2, r3, #29
 8002492:	430a      	orrs	r2, r1
 8002494:	08dc      	lsrs	r4, r3, #3
 8002496:	e5ee      	b.n	8002076 <__aeabi_dsub+0x222>
 8002498:	4663      	mov	r3, ip
 800249a:	9c02      	ldr	r4, [sp, #8]
 800249c:	9303      	str	r3, [sp, #12]
 800249e:	e6c7      	b.n	8002230 <__aeabi_dsub+0x3dc>
 80024a0:	08c0      	lsrs	r0, r0, #3
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x654>
 80024a6:	e6aa      	b.n	80021fe <__aeabi_dsub+0x3aa>
 80024a8:	0762      	lsls	r2, r4, #29
 80024aa:	4310      	orrs	r0, r2
 80024ac:	2280      	movs	r2, #128	@ 0x80
 80024ae:	08e4      	lsrs	r4, r4, #3
 80024b0:	0312      	lsls	r2, r2, #12
 80024b2:	4214      	tst	r4, r2
 80024b4:	d0d7      	beq.n	8002466 <__aeabi_dsub+0x612>
 80024b6:	9f02      	ldr	r7, [sp, #8]
 80024b8:	08fd      	lsrs	r5, r7, #3
 80024ba:	4215      	tst	r5, r2
 80024bc:	d1d3      	bne.n	8002466 <__aeabi_dsub+0x612>
 80024be:	4663      	mov	r3, ip
 80024c0:	2601      	movs	r6, #1
 80024c2:	08d8      	lsrs	r0, r3, #3
 80024c4:	077b      	lsls	r3, r7, #29
 80024c6:	002c      	movs	r4, r5
 80024c8:	4318      	orrs	r0, r3
 80024ca:	400e      	ands	r6, r1
 80024cc:	e7cb      	b.n	8002466 <__aeabi_dsub+0x612>
 80024ce:	000a      	movs	r2, r1
 80024d0:	0027      	movs	r7, r4
 80024d2:	3a20      	subs	r2, #32
 80024d4:	40d7      	lsrs	r7, r2
 80024d6:	2920      	cmp	r1, #32
 80024d8:	d005      	beq.n	80024e6 <__aeabi_dsub+0x692>
 80024da:	2240      	movs	r2, #64	@ 0x40
 80024dc:	1a52      	subs	r2, r2, r1
 80024de:	4094      	lsls	r4, r2
 80024e0:	0025      	movs	r5, r4
 80024e2:	4305      	orrs	r5, r0
 80024e4:	9503      	str	r5, [sp, #12]
 80024e6:	9d03      	ldr	r5, [sp, #12]
 80024e8:	1e6a      	subs	r2, r5, #1
 80024ea:	4195      	sbcs	r5, r2
 80024ec:	432f      	orrs	r7, r5
 80024ee:	e610      	b.n	8002112 <__aeabi_dsub+0x2be>
 80024f0:	0014      	movs	r4, r2
 80024f2:	2500      	movs	r5, #0
 80024f4:	2200      	movs	r2, #0
 80024f6:	e556      	b.n	8001fa6 <__aeabi_dsub+0x152>
 80024f8:	9b02      	ldr	r3, [sp, #8]
 80024fa:	4460      	add	r0, ip
 80024fc:	4699      	mov	r9, r3
 80024fe:	4560      	cmp	r0, ip
 8002500:	4192      	sbcs	r2, r2
 8002502:	444c      	add	r4, r9
 8002504:	4252      	negs	r2, r2
 8002506:	0005      	movs	r5, r0
 8002508:	18a4      	adds	r4, r4, r2
 800250a:	e74c      	b.n	80023a6 <__aeabi_dsub+0x552>
 800250c:	001a      	movs	r2, r3
 800250e:	001c      	movs	r4, r3
 8002510:	432a      	orrs	r2, r5
 8002512:	d000      	beq.n	8002516 <__aeabi_dsub+0x6c2>
 8002514:	e6b3      	b.n	800227e <__aeabi_dsub+0x42a>
 8002516:	e6c9      	b.n	80022ac <__aeabi_dsub+0x458>
 8002518:	2480      	movs	r4, #128	@ 0x80
 800251a:	2600      	movs	r6, #0
 800251c:	0324      	lsls	r4, r4, #12
 800251e:	e5ae      	b.n	800207e <__aeabi_dsub+0x22a>
 8002520:	2120      	movs	r1, #32
 8002522:	2500      	movs	r5, #0
 8002524:	1a09      	subs	r1, r1, r0
 8002526:	e517      	b.n	8001f58 <__aeabi_dsub+0x104>
 8002528:	2200      	movs	r2, #0
 800252a:	2500      	movs	r5, #0
 800252c:	4c0b      	ldr	r4, [pc, #44]	@ (800255c <__aeabi_dsub+0x708>)
 800252e:	e53a      	b.n	8001fa6 <__aeabi_dsub+0x152>
 8002530:	2d00      	cmp	r5, #0
 8002532:	d100      	bne.n	8002536 <__aeabi_dsub+0x6e2>
 8002534:	e5f6      	b.n	8002124 <__aeabi_dsub+0x2d0>
 8002536:	464b      	mov	r3, r9
 8002538:	1bda      	subs	r2, r3, r7
 800253a:	4692      	mov	sl, r2
 800253c:	2f00      	cmp	r7, #0
 800253e:	d100      	bne.n	8002542 <__aeabi_dsub+0x6ee>
 8002540:	e66f      	b.n	8002222 <__aeabi_dsub+0x3ce>
 8002542:	2a38      	cmp	r2, #56	@ 0x38
 8002544:	dc05      	bgt.n	8002552 <__aeabi_dsub+0x6fe>
 8002546:	2680      	movs	r6, #128	@ 0x80
 8002548:	0436      	lsls	r6, r6, #16
 800254a:	4334      	orrs	r4, r6
 800254c:	4688      	mov	r8, r1
 800254e:	000e      	movs	r6, r1
 8002550:	e6d1      	b.n	80022f6 <__aeabi_dsub+0x4a2>
 8002552:	4688      	mov	r8, r1
 8002554:	000e      	movs	r6, r1
 8002556:	2501      	movs	r5, #1
 8002558:	e6de      	b.n	8002318 <__aeabi_dsub+0x4c4>
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	000007ff 	.word	0x000007ff
 8002560:	ff7fffff 	.word	0xff7fffff
 8002564:	000007fe 	.word	0x000007fe
 8002568:	2d00      	cmp	r5, #0
 800256a:	d100      	bne.n	800256e <__aeabi_dsub+0x71a>
 800256c:	e668      	b.n	8002240 <__aeabi_dsub+0x3ec>
 800256e:	464b      	mov	r3, r9
 8002570:	1bd9      	subs	r1, r3, r7
 8002572:	2f00      	cmp	r7, #0
 8002574:	d101      	bne.n	800257a <__aeabi_dsub+0x726>
 8002576:	468a      	mov	sl, r1
 8002578:	e5a7      	b.n	80020ca <__aeabi_dsub+0x276>
 800257a:	2701      	movs	r7, #1
 800257c:	2938      	cmp	r1, #56	@ 0x38
 800257e:	dd00      	ble.n	8002582 <__aeabi_dsub+0x72e>
 8002580:	e5c7      	b.n	8002112 <__aeabi_dsub+0x2be>
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	0412      	lsls	r2, r2, #16
 8002586:	4314      	orrs	r4, r2
 8002588:	e5af      	b.n	80020ea <__aeabi_dsub+0x296>
 800258a:	46c0      	nop			@ (mov r8, r8)

0800258c <__aeabi_dcmpun>:
 800258c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258e:	46c6      	mov	lr, r8
 8002590:	031e      	lsls	r6, r3, #12
 8002592:	0b36      	lsrs	r6, r6, #12
 8002594:	46b0      	mov	r8, r6
 8002596:	4e0d      	ldr	r6, [pc, #52]	@ (80025cc <__aeabi_dcmpun+0x40>)
 8002598:	030c      	lsls	r4, r1, #12
 800259a:	004d      	lsls	r5, r1, #1
 800259c:	005f      	lsls	r7, r3, #1
 800259e:	b500      	push	{lr}
 80025a0:	0b24      	lsrs	r4, r4, #12
 80025a2:	0d6d      	lsrs	r5, r5, #21
 80025a4:	0d7f      	lsrs	r7, r7, #21
 80025a6:	42b5      	cmp	r5, r6
 80025a8:	d00b      	beq.n	80025c2 <__aeabi_dcmpun+0x36>
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__aeabi_dcmpun+0x40>)
 80025ac:	2000      	movs	r0, #0
 80025ae:	428f      	cmp	r7, r1
 80025b0:	d104      	bne.n	80025bc <__aeabi_dcmpun+0x30>
 80025b2:	4646      	mov	r6, r8
 80025b4:	4316      	orrs	r6, r2
 80025b6:	0030      	movs	r0, r6
 80025b8:	1e43      	subs	r3, r0, #1
 80025ba:	4198      	sbcs	r0, r3
 80025bc:	bc80      	pop	{r7}
 80025be:	46b8      	mov	r8, r7
 80025c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c2:	4304      	orrs	r4, r0
 80025c4:	2001      	movs	r0, #1
 80025c6:	2c00      	cmp	r4, #0
 80025c8:	d1f8      	bne.n	80025bc <__aeabi_dcmpun+0x30>
 80025ca:	e7ee      	b.n	80025aa <__aeabi_dcmpun+0x1e>
 80025cc:	000007ff 	.word	0x000007ff

080025d0 <__aeabi_d2iz>:
 80025d0:	000b      	movs	r3, r1
 80025d2:	0002      	movs	r2, r0
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	4d16      	ldr	r5, [pc, #88]	@ (8002630 <__aeabi_d2iz+0x60>)
 80025d8:	030c      	lsls	r4, r1, #12
 80025da:	b082      	sub	sp, #8
 80025dc:	0049      	lsls	r1, r1, #1
 80025de:	2000      	movs	r0, #0
 80025e0:	9200      	str	r2, [sp, #0]
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d49      	lsrs	r1, r1, #21
 80025e8:	0fde      	lsrs	r6, r3, #31
 80025ea:	42a9      	cmp	r1, r5
 80025ec:	dd04      	ble.n	80025f8 <__aeabi_d2iz+0x28>
 80025ee:	4811      	ldr	r0, [pc, #68]	@ (8002634 <__aeabi_d2iz+0x64>)
 80025f0:	4281      	cmp	r1, r0
 80025f2:	dd03      	ble.n	80025fc <__aeabi_d2iz+0x2c>
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <__aeabi_d2iz+0x68>)
 80025f6:	18f0      	adds	r0, r6, r3
 80025f8:	b002      	add	sp, #8
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	2080      	movs	r0, #128	@ 0x80
 80025fe:	0340      	lsls	r0, r0, #13
 8002600:	4320      	orrs	r0, r4
 8002602:	4c0e      	ldr	r4, [pc, #56]	@ (800263c <__aeabi_d2iz+0x6c>)
 8002604:	1a64      	subs	r4, r4, r1
 8002606:	2c1f      	cmp	r4, #31
 8002608:	dd08      	ble.n	800261c <__aeabi_d2iz+0x4c>
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <__aeabi_d2iz+0x70>)
 800260c:	1a5b      	subs	r3, r3, r1
 800260e:	40d8      	lsrs	r0, r3
 8002610:	0003      	movs	r3, r0
 8002612:	4258      	negs	r0, r3
 8002614:	2e00      	cmp	r6, #0
 8002616:	d1ef      	bne.n	80025f8 <__aeabi_d2iz+0x28>
 8002618:	0018      	movs	r0, r3
 800261a:	e7ed      	b.n	80025f8 <__aeabi_d2iz+0x28>
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <__aeabi_d2iz+0x74>)
 800261e:	9a00      	ldr	r2, [sp, #0]
 8002620:	469c      	mov	ip, r3
 8002622:	0003      	movs	r3, r0
 8002624:	4461      	add	r1, ip
 8002626:	408b      	lsls	r3, r1
 8002628:	40e2      	lsrs	r2, r4
 800262a:	4313      	orrs	r3, r2
 800262c:	e7f1      	b.n	8002612 <__aeabi_d2iz+0x42>
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	000003fe 	.word	0x000003fe
 8002634:	0000041d 	.word	0x0000041d
 8002638:	7fffffff 	.word	0x7fffffff
 800263c:	00000433 	.word	0x00000433
 8002640:	00000413 	.word	0x00000413
 8002644:	fffffbed 	.word	0xfffffbed

08002648 <__aeabi_i2d>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	2800      	cmp	r0, #0
 800264c:	d016      	beq.n	800267c <__aeabi_i2d+0x34>
 800264e:	17c3      	asrs	r3, r0, #31
 8002650:	18c5      	adds	r5, r0, r3
 8002652:	405d      	eors	r5, r3
 8002654:	0fc4      	lsrs	r4, r0, #31
 8002656:	0028      	movs	r0, r5
 8002658:	f000 f914 	bl	8002884 <__clzsi2>
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <__aeabi_i2d+0x58>)
 800265e:	1a1b      	subs	r3, r3, r0
 8002660:	055b      	lsls	r3, r3, #21
 8002662:	0d5b      	lsrs	r3, r3, #21
 8002664:	280a      	cmp	r0, #10
 8002666:	dc14      	bgt.n	8002692 <__aeabi_i2d+0x4a>
 8002668:	0002      	movs	r2, r0
 800266a:	002e      	movs	r6, r5
 800266c:	3215      	adds	r2, #21
 800266e:	4096      	lsls	r6, r2
 8002670:	220b      	movs	r2, #11
 8002672:	1a12      	subs	r2, r2, r0
 8002674:	40d5      	lsrs	r5, r2
 8002676:	032d      	lsls	r5, r5, #12
 8002678:	0b2d      	lsrs	r5, r5, #12
 800267a:	e003      	b.n	8002684 <__aeabi_i2d+0x3c>
 800267c:	2400      	movs	r4, #0
 800267e:	2300      	movs	r3, #0
 8002680:	2500      	movs	r5, #0
 8002682:	2600      	movs	r6, #0
 8002684:	051b      	lsls	r3, r3, #20
 8002686:	432b      	orrs	r3, r5
 8002688:	07e4      	lsls	r4, r4, #31
 800268a:	4323      	orrs	r3, r4
 800268c:	0030      	movs	r0, r6
 800268e:	0019      	movs	r1, r3
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	380b      	subs	r0, #11
 8002694:	4085      	lsls	r5, r0
 8002696:	032d      	lsls	r5, r5, #12
 8002698:	2600      	movs	r6, #0
 800269a:	0b2d      	lsrs	r5, r5, #12
 800269c:	e7f2      	b.n	8002684 <__aeabi_i2d+0x3c>
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	0000041e 	.word	0x0000041e

080026a4 <__aeabi_ui2d>:
 80026a4:	b510      	push	{r4, lr}
 80026a6:	1e04      	subs	r4, r0, #0
 80026a8:	d010      	beq.n	80026cc <__aeabi_ui2d+0x28>
 80026aa:	f000 f8eb 	bl	8002884 <__clzsi2>
 80026ae:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <__aeabi_ui2d+0x44>)
 80026b0:	1a1b      	subs	r3, r3, r0
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	0d5b      	lsrs	r3, r3, #21
 80026b6:	280a      	cmp	r0, #10
 80026b8:	dc0f      	bgt.n	80026da <__aeabi_ui2d+0x36>
 80026ba:	220b      	movs	r2, #11
 80026bc:	0021      	movs	r1, r4
 80026be:	1a12      	subs	r2, r2, r0
 80026c0:	40d1      	lsrs	r1, r2
 80026c2:	3015      	adds	r0, #21
 80026c4:	030a      	lsls	r2, r1, #12
 80026c6:	4084      	lsls	r4, r0
 80026c8:	0b12      	lsrs	r2, r2, #12
 80026ca:	e001      	b.n	80026d0 <__aeabi_ui2d+0x2c>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2200      	movs	r2, #0
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	4313      	orrs	r3, r2
 80026d4:	0020      	movs	r0, r4
 80026d6:	0019      	movs	r1, r3
 80026d8:	bd10      	pop	{r4, pc}
 80026da:	0022      	movs	r2, r4
 80026dc:	380b      	subs	r0, #11
 80026de:	4082      	lsls	r2, r0
 80026e0:	0312      	lsls	r2, r2, #12
 80026e2:	2400      	movs	r4, #0
 80026e4:	0b12      	lsrs	r2, r2, #12
 80026e6:	e7f3      	b.n	80026d0 <__aeabi_ui2d+0x2c>
 80026e8:	0000041e 	.word	0x0000041e

080026ec <__aeabi_f2d>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	0242      	lsls	r2, r0, #9
 80026f0:	0043      	lsls	r3, r0, #1
 80026f2:	0fc4      	lsrs	r4, r0, #31
 80026f4:	20fe      	movs	r0, #254	@ 0xfe
 80026f6:	0e1b      	lsrs	r3, r3, #24
 80026f8:	1c59      	adds	r1, r3, #1
 80026fa:	0a55      	lsrs	r5, r2, #9
 80026fc:	4208      	tst	r0, r1
 80026fe:	d00c      	beq.n	800271a <__aeabi_f2d+0x2e>
 8002700:	21e0      	movs	r1, #224	@ 0xe0
 8002702:	0089      	lsls	r1, r1, #2
 8002704:	468c      	mov	ip, r1
 8002706:	076d      	lsls	r5, r5, #29
 8002708:	0b12      	lsrs	r2, r2, #12
 800270a:	4463      	add	r3, ip
 800270c:	051b      	lsls	r3, r3, #20
 800270e:	4313      	orrs	r3, r2
 8002710:	07e4      	lsls	r4, r4, #31
 8002712:	4323      	orrs	r3, r4
 8002714:	0028      	movs	r0, r5
 8002716:	0019      	movs	r1, r3
 8002718:	bd70      	pop	{r4, r5, r6, pc}
 800271a:	2b00      	cmp	r3, #0
 800271c:	d114      	bne.n	8002748 <__aeabi_f2d+0x5c>
 800271e:	2d00      	cmp	r5, #0
 8002720:	d01b      	beq.n	800275a <__aeabi_f2d+0x6e>
 8002722:	0028      	movs	r0, r5
 8002724:	f000 f8ae 	bl	8002884 <__clzsi2>
 8002728:	280a      	cmp	r0, #10
 800272a:	dc1c      	bgt.n	8002766 <__aeabi_f2d+0x7a>
 800272c:	230b      	movs	r3, #11
 800272e:	002a      	movs	r2, r5
 8002730:	1a1b      	subs	r3, r3, r0
 8002732:	40da      	lsrs	r2, r3
 8002734:	0003      	movs	r3, r0
 8002736:	3315      	adds	r3, #21
 8002738:	409d      	lsls	r5, r3
 800273a:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <__aeabi_f2d+0x88>)
 800273c:	0312      	lsls	r2, r2, #12
 800273e:	1a1b      	subs	r3, r3, r0
 8002740:	055b      	lsls	r3, r3, #21
 8002742:	0b12      	lsrs	r2, r2, #12
 8002744:	0d5b      	lsrs	r3, r3, #21
 8002746:	e7e1      	b.n	800270c <__aeabi_f2d+0x20>
 8002748:	2d00      	cmp	r5, #0
 800274a:	d009      	beq.n	8002760 <__aeabi_f2d+0x74>
 800274c:	0b13      	lsrs	r3, r2, #12
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	0312      	lsls	r2, r2, #12
 8002752:	431a      	orrs	r2, r3
 8002754:	076d      	lsls	r5, r5, #29
 8002756:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <__aeabi_f2d+0x8c>)
 8002758:	e7d8      	b.n	800270c <__aeabi_f2d+0x20>
 800275a:	2300      	movs	r3, #0
 800275c:	2200      	movs	r2, #0
 800275e:	e7d5      	b.n	800270c <__aeabi_f2d+0x20>
 8002760:	2200      	movs	r2, #0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <__aeabi_f2d+0x8c>)
 8002764:	e7d2      	b.n	800270c <__aeabi_f2d+0x20>
 8002766:	0003      	movs	r3, r0
 8002768:	002a      	movs	r2, r5
 800276a:	3b0b      	subs	r3, #11
 800276c:	409a      	lsls	r2, r3
 800276e:	2500      	movs	r5, #0
 8002770:	e7e3      	b.n	800273a <__aeabi_f2d+0x4e>
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	00000389 	.word	0x00000389
 8002778:	000007ff 	.word	0x000007ff

0800277c <__aeabi_d2f>:
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	004b      	lsls	r3, r1, #1
 8002780:	030f      	lsls	r7, r1, #12
 8002782:	0d5b      	lsrs	r3, r3, #21
 8002784:	4c3b      	ldr	r4, [pc, #236]	@ (8002874 <__aeabi_d2f+0xf8>)
 8002786:	0f45      	lsrs	r5, r0, #29
 8002788:	b083      	sub	sp, #12
 800278a:	0a7f      	lsrs	r7, r7, #9
 800278c:	1c5e      	adds	r6, r3, #1
 800278e:	432f      	orrs	r7, r5
 8002790:	9000      	str	r0, [sp, #0]
 8002792:	9101      	str	r1, [sp, #4]
 8002794:	0fca      	lsrs	r2, r1, #31
 8002796:	00c5      	lsls	r5, r0, #3
 8002798:	4226      	tst	r6, r4
 800279a:	d00b      	beq.n	80027b4 <__aeabi_d2f+0x38>
 800279c:	4936      	ldr	r1, [pc, #216]	@ (8002878 <__aeabi_d2f+0xfc>)
 800279e:	185c      	adds	r4, r3, r1
 80027a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80027a2:	dd13      	ble.n	80027cc <__aeabi_d2f+0x50>
 80027a4:	20ff      	movs	r0, #255	@ 0xff
 80027a6:	2300      	movs	r3, #0
 80027a8:	05c0      	lsls	r0, r0, #23
 80027aa:	4318      	orrs	r0, r3
 80027ac:	07d2      	lsls	r2, r2, #31
 80027ae:	4310      	orrs	r0, r2
 80027b0:	b003      	add	sp, #12
 80027b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <__aeabi_d2f+0x42>
 80027b8:	2000      	movs	r0, #0
 80027ba:	2300      	movs	r3, #0
 80027bc:	e7f4      	b.n	80027a8 <__aeabi_d2f+0x2c>
 80027be:	433d      	orrs	r5, r7
 80027c0:	d0f0      	beq.n	80027a4 <__aeabi_d2f+0x28>
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	03db      	lsls	r3, r3, #15
 80027c6:	20ff      	movs	r0, #255	@ 0xff
 80027c8:	433b      	orrs	r3, r7
 80027ca:	e7ed      	b.n	80027a8 <__aeabi_d2f+0x2c>
 80027cc:	2c00      	cmp	r4, #0
 80027ce:	dd14      	ble.n	80027fa <__aeabi_d2f+0x7e>
 80027d0:	9b00      	ldr	r3, [sp, #0]
 80027d2:	00ff      	lsls	r7, r7, #3
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0f69      	lsrs	r1, r5, #29
 80027dc:	433b      	orrs	r3, r7
 80027de:	430b      	orrs	r3, r1
 80027e0:	0759      	lsls	r1, r3, #29
 80027e2:	d041      	beq.n	8002868 <__aeabi_d2f+0xec>
 80027e4:	210f      	movs	r1, #15
 80027e6:	4019      	ands	r1, r3
 80027e8:	2904      	cmp	r1, #4
 80027ea:	d028      	beq.n	800283e <__aeabi_d2f+0xc2>
 80027ec:	3304      	adds	r3, #4
 80027ee:	0159      	lsls	r1, r3, #5
 80027f0:	d525      	bpl.n	800283e <__aeabi_d2f+0xc2>
 80027f2:	3401      	adds	r4, #1
 80027f4:	2300      	movs	r3, #0
 80027f6:	b2e0      	uxtb	r0, r4
 80027f8:	e7d6      	b.n	80027a8 <__aeabi_d2f+0x2c>
 80027fa:	0021      	movs	r1, r4
 80027fc:	3117      	adds	r1, #23
 80027fe:	dbdb      	blt.n	80027b8 <__aeabi_d2f+0x3c>
 8002800:	2180      	movs	r1, #128	@ 0x80
 8002802:	201e      	movs	r0, #30
 8002804:	0409      	lsls	r1, r1, #16
 8002806:	4339      	orrs	r1, r7
 8002808:	1b00      	subs	r0, r0, r4
 800280a:	281f      	cmp	r0, #31
 800280c:	dd1b      	ble.n	8002846 <__aeabi_d2f+0xca>
 800280e:	2602      	movs	r6, #2
 8002810:	4276      	negs	r6, r6
 8002812:	1b34      	subs	r4, r6, r4
 8002814:	000e      	movs	r6, r1
 8002816:	40e6      	lsrs	r6, r4
 8002818:	0034      	movs	r4, r6
 800281a:	2820      	cmp	r0, #32
 800281c:	d004      	beq.n	8002828 <__aeabi_d2f+0xac>
 800281e:	4817      	ldr	r0, [pc, #92]	@ (800287c <__aeabi_d2f+0x100>)
 8002820:	4684      	mov	ip, r0
 8002822:	4463      	add	r3, ip
 8002824:	4099      	lsls	r1, r3
 8002826:	430d      	orrs	r5, r1
 8002828:	002b      	movs	r3, r5
 800282a:	1e59      	subs	r1, r3, #1
 800282c:	418b      	sbcs	r3, r1
 800282e:	4323      	orrs	r3, r4
 8002830:	0759      	lsls	r1, r3, #29
 8002832:	d015      	beq.n	8002860 <__aeabi_d2f+0xe4>
 8002834:	210f      	movs	r1, #15
 8002836:	2400      	movs	r4, #0
 8002838:	4019      	ands	r1, r3
 800283a:	2904      	cmp	r1, #4
 800283c:	d117      	bne.n	800286e <__aeabi_d2f+0xf2>
 800283e:	019b      	lsls	r3, r3, #6
 8002840:	0a5b      	lsrs	r3, r3, #9
 8002842:	b2e0      	uxtb	r0, r4
 8002844:	e7b0      	b.n	80027a8 <__aeabi_d2f+0x2c>
 8002846:	4c0e      	ldr	r4, [pc, #56]	@ (8002880 <__aeabi_d2f+0x104>)
 8002848:	191c      	adds	r4, r3, r4
 800284a:	002b      	movs	r3, r5
 800284c:	40a5      	lsls	r5, r4
 800284e:	40c3      	lsrs	r3, r0
 8002850:	40a1      	lsls	r1, r4
 8002852:	1e68      	subs	r0, r5, #1
 8002854:	4185      	sbcs	r5, r0
 8002856:	4329      	orrs	r1, r5
 8002858:	430b      	orrs	r3, r1
 800285a:	2400      	movs	r4, #0
 800285c:	0759      	lsls	r1, r3, #29
 800285e:	d1c1      	bne.n	80027e4 <__aeabi_d2f+0x68>
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	2000      	movs	r0, #0
 8002864:	0a5b      	lsrs	r3, r3, #9
 8002866:	e79f      	b.n	80027a8 <__aeabi_d2f+0x2c>
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	b2e0      	uxtb	r0, r4
 800286c:	e79c      	b.n	80027a8 <__aeabi_d2f+0x2c>
 800286e:	3304      	adds	r3, #4
 8002870:	e7e5      	b.n	800283e <__aeabi_d2f+0xc2>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007fe 	.word	0x000007fe
 8002878:	fffffc80 	.word	0xfffffc80
 800287c:	fffffca2 	.word	0xfffffca2
 8002880:	fffffc82 	.word	0xfffffc82

08002884 <__clzsi2>:
 8002884:	211c      	movs	r1, #28
 8002886:	2301      	movs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	4298      	cmp	r0, r3
 800288c:	d301      	bcc.n	8002892 <__clzsi2+0xe>
 800288e:	0c00      	lsrs	r0, r0, #16
 8002890:	3910      	subs	r1, #16
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	4298      	cmp	r0, r3
 8002896:	d301      	bcc.n	800289c <__clzsi2+0x18>
 8002898:	0a00      	lsrs	r0, r0, #8
 800289a:	3908      	subs	r1, #8
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	4298      	cmp	r0, r3
 80028a0:	d301      	bcc.n	80028a6 <__clzsi2+0x22>
 80028a2:	0900      	lsrs	r0, r0, #4
 80028a4:	3904      	subs	r1, #4
 80028a6:	a202      	add	r2, pc, #8	@ (adr r2, 80028b0 <__clzsi2+0x2c>)
 80028a8:	5c10      	ldrb	r0, [r2, r0]
 80028aa:	1840      	adds	r0, r0, r1
 80028ac:	4770      	bx	lr
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	02020304 	.word	0x02020304
 80028b4:	01010101 	.word	0x01010101
	...

080028c0 <__clzdi2>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	2900      	cmp	r1, #0
 80028c4:	d103      	bne.n	80028ce <__clzdi2+0xe>
 80028c6:	f7ff ffdd 	bl	8002884 <__clzsi2>
 80028ca:	3020      	adds	r0, #32
 80028cc:	e002      	b.n	80028d4 <__clzdi2+0x14>
 80028ce:	0008      	movs	r0, r1
 80028d0:	f7ff ffd8 	bl	8002884 <__clzsi2>
 80028d4:	bd10      	pop	{r4, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)

080028d8 <BQ769x2_InitState>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

/*initialze BQ state struct*/
void BQ769x2_InitState(BQState *s, void *i2c_hdl, uint8_t i2c_adr, uint8_t crc_mode, void *tim_hdl,
		uint16_t ACTIVE_CELLS, GPIO_TypeDef * RST_SHUT_PORT, uint8_t RST_SHUT_PIN, GPIO_TypeDef * CFETOFF_PORT,
		uint8_t CFETOFF_PIN, GPIO_TypeDef * DFETOFF_PORT, uint8_t DFETOFF_PIN) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	0019      	movs	r1, r3
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	1dbb      	adds	r3, r7, #6
 80028ea:	1c0a      	adds	r2, r1, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	s->i2c_hdl = i2c_hdl;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	605a      	str	r2, [r3, #4]
	s->i2c_adr = i2c_adr;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1dfa      	adds	r2, r7, #7
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	721a      	strb	r2, [r3, #8]
	s->i2c_crc = crc_mode;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1dba      	adds	r2, r7, #6
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	725a      	strb	r2, [r3, #9]
	s->tim_hdl = tim_hdl;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	60da      	str	r2, [r3, #12]
	s->ActiveCells = ACTIVE_CELLS,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	221c      	movs	r2, #28
 800290e:	18ba      	adds	r2, r7, r2
 8002910:	8812      	ldrh	r2, [r2, #0]
 8002912:	801a      	strh	r2, [r3, #0]
	s->RST_SHUT_PORT = RST_SHUT_PORT;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	611a      	str	r2, [r3, #16]
	s->RST_SHUT_PIN = RST_SHUT_PIN;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2224      	movs	r2, #36	@ 0x24
 800291e:	18ba      	adds	r2, r7, r2
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	751a      	strb	r2, [r3, #20]
	s->CFETOFF_PORT = CFETOFF_PORT;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002928:	619a      	str	r2, [r3, #24]
	s->CFETOFF_PIN = CFETOFF_PIN;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	222c      	movs	r2, #44	@ 0x2c
 800292e:	18ba      	adds	r2, r7, r2
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	771a      	strb	r2, [r3, #28]
	s->DFETOFF_PORT = DFETOFF_PORT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002938:	621a      	str	r2, [r3, #32]
	s->DFETOFF_PIN = DFETOFF_PIN;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2234      	movs	r2, #52	@ 0x34
 800293e:	18ba      	adds	r2, r7, r2
 8002940:	2124      	movs	r1, #36	@ 0x24
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	545a      	strb	r2, [r3, r1]
}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}

0800294e <Checksum>:

/*Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.*/
unsigned char Checksum(unsigned char *ptr, unsigned char len)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	000a      	movs	r2, r1
 8002958:	1cfb      	adds	r3, r7, #3
 800295a:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	unsigned char checksum = 0;
 800295c:	230e      	movs	r3, #14
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < len; i++)
 8002964:	230f      	movs	r3, #15
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e010      	b.n	8002990 <Checksum+0x42>
		checksum += ptr[i];
 800296e:	200f      	movs	r0, #15
 8002970:	183b      	adds	r3, r7, r0
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	18d3      	adds	r3, r2, r3
 8002978:	7819      	ldrb	r1, [r3, #0]
 800297a:	220e      	movs	r2, #14
 800297c:	18bb      	adds	r3, r7, r2
 800297e:	18ba      	adds	r2, r7, r2
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	188a      	adds	r2, r1, r2
 8002984:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++)
 8002986:	183b      	adds	r3, r7, r0
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	183b      	adds	r3, r7, r0
 800298c:	3201      	adds	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	230f      	movs	r3, #15
 8002992:	18fa      	adds	r2, r7, r3
 8002994:	1cfb      	adds	r3, r7, #3
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d3e7      	bcc.n	800296e <Checksum+0x20>

	checksum = 0xff & ~checksum;
 800299e:	210e      	movs	r1, #14
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	187a      	adds	r2, r7, r1
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	43d2      	mvns	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

	return (checksum);
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	781b      	ldrb	r3, [r3, #0]
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <CRC8>:

/*Calculates CRC8 for passed bytes. Used in i2c read and write functions*/
unsigned char CRC8(unsigned char *ptr, unsigned char len)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	000a      	movs	r2, r1
 80029c0:	1cfb      	adds	r3, r7, #3
 80029c2:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	unsigned char crc = 0;
 80029c4:	230e      	movs	r3, #14
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
	while (len-- != 0) {
 80029cc:	e03e      	b.n	8002a4c <CRC8+0x96>
		for (i = 0x80; i != 0; i /= 2) {
 80029ce:	230f      	movs	r3, #15
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e031      	b.n	8002a3c <CRC8+0x86>
			if ((crc & 0x80) != 0) {
 80029d8:	210e      	movs	r1, #14
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da0d      	bge.n	8002a00 <CRC8+0x4a>
				crc *= 2;
 80029e4:	187a      	adds	r2, r7, r1
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	18db      	adds	r3, r3, r3
 80029ec:	7013      	strb	r3, [r2, #0]
				crc ^= 0x107;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	2207      	movs	r2, #7
 80029f6:	4053      	eors	r3, r2
 80029f8:	b25a      	sxtb	r2, r3
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e005      	b.n	8002a0c <CRC8+0x56>
			} else
				crc *= 2;
 8002a00:	230e      	movs	r3, #14
 8002a02:	18fa      	adds	r2, r7, r3
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	18db      	adds	r3, r3, r3
 8002a0a:	7013      	strb	r3, [r2, #0]

			if ((*ptr & i) != 0)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	220f      	movs	r2, #15
 8002a12:	18ba      	adds	r2, r7, r2
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	4013      	ands	r3, r2
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <CRC8+0x7a>
				crc ^= 0x107;
 8002a1e:	210e      	movs	r1, #14
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	2207      	movs	r2, #7
 8002a28:	4053      	eors	r3, r2
 8002a2a:	b25a      	sxtb	r2, r3
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	701a      	strb	r2, [r3, #0]
		for (i = 0x80; i != 0; i /= 2) {
 8002a30:	220f      	movs	r2, #15
 8002a32:	18bb      	adds	r3, r7, r2
 8002a34:	18ba      	adds	r2, r7, r2
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	0852      	lsrs	r2, r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1c8      	bne.n	80029d8 <CRC8+0x22>
		}
		ptr++;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	607b      	str	r3, [r7, #4]
	while (len-- != 0) {
 8002a4c:	1cfb      	adds	r3, r7, #3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	1cfa      	adds	r2, r7, #3
 8002a52:	1e59      	subs	r1, r3, #1
 8002a54:	7011      	strb	r1, [r2, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1b9      	bne.n	80029ce <CRC8+0x18>
	}
	return (crc);
 8002a5a:	230e      	movs	r3, #14
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	781b      	ldrb	r3, [r3, #0]
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WriteReg>:

/* BQ Specific I2C Functions -----------------------------------------------*/
void I2C_WriteReg(BQState *s, uint8_t reg_addr, uint8_t *reg_data,
		uint8_t count) {
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b097      	sub	sp, #92	@ 0x5c
 8002a6c:	af04      	add	r7, sp, #16
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	0008      	movs	r0, r1
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	0019      	movs	r1, r3
 8002a76:	260b      	movs	r6, #11
 8002a78:	19bb      	adds	r3, r7, r6
 8002a7a:	1c02      	adds	r2, r0, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	230a      	movs	r3, #10
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	1c0a      	adds	r2, r1, #0
 8002a84:	701a      	strb	r2, [r3, #0]
	uint8_t TX_Buffer[MAX_BUFFER_SIZE] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8002a86:	251c      	movs	r5, #28
 8002a88:	1979      	adds	r1, r7, r5
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc4 <I2C_WriteReg+0x15c>)
 8002a8c:	000b      	movs	r3, r1
 8002a8e:	ca11      	ldmia	r2!, {r0, r4}
 8002a90:	c311      	stmia	r3!, {r0, r4}
 8002a92:	8810      	ldrh	r0, [r2, #0]
 8002a94:	8018      	strh	r0, [r3, #0]
 8002a96:	7892      	ldrb	r2, [r2, #2]
 8002a98:	709a      	strb	r2, [r3, #2]
 8002a9a:	230b      	movs	r3, #11
 8002a9c:	18cb      	adds	r3, r1, r3
 8002a9e:	2215      	movs	r2, #21
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f008 f930 	bl	800ad08 <memset>
			0x00, 0x00, 0x00, 0x00 };
	if (s->i2c_crc)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	7a5b      	ldrb	r3, [r3, #9]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d06d      	beq.n	8002b8c <I2C_WriteReg+0x124>
	{
		uint8_t crc_count = 0;
 8002ab0:	213f      	movs	r1, #63	@ 0x3f
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
		crc_count = count * 2;
 8002ab8:	187a      	adds	r2, r7, r1
 8002aba:	230a      	movs	r3, #10
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	18db      	adds	r3, r3, r3
 8002ac2:	7013      	strb	r3, [r2, #0]
		uint8_t crc1stByteBuffer[3] = { 0x10, reg_addr, reg_data[0] };
 8002ac4:	2118      	movs	r1, #24
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2210      	movs	r2, #16
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	19ba      	adds	r2, r7, r6
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	705a      	strb	r2, [r3, #1]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	709a      	strb	r2, [r3, #2]
		unsigned int j;
		unsigned int i;
		uint8_t temp_crc_buffer[3];

		TX_Buffer[0] = reg_data[0];
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = CRC8(crc1stByteBuffer, 3);
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ff64 	bl	80029b6 <CRC8>
 8002aee:	0003      	movs	r3, r0
 8002af0:	001a      	movs	r2, r3
 8002af2:	197b      	adds	r3, r7, r5
 8002af4:	705a      	strb	r2, [r3, #1]

		j = 2;
 8002af6:	2302      	movs	r3, #2
 8002af8:	647b      	str	r3, [r7, #68]	@ 0x44
		for (i = 1; i < count; i++) {
 8002afa:	2301      	movs	r3, #1
 8002afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002afe:	e025      	b.n	8002b4c <I2C_WriteReg+0xe4>
			TX_Buffer[j] = reg_data[i];
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b04:	18d3      	adds	r3, r2, r3
 8002b06:	7819      	ldrb	r1, [r3, #0]
 8002b08:	241c      	movs	r4, #28
 8002b0a:	193a      	adds	r2, r7, r4
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b0e:	18d3      	adds	r3, r2, r3
 8002b10:	1c0a      	adds	r2, r1, #0
 8002b12:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 8002b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b16:	3301      	adds	r3, #1
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
			temp_crc_buffer[0] = reg_data[i];
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b1e:	18d3      	adds	r3, r2, r3
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	2114      	movs	r1, #20
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	701a      	strb	r2, [r3, #0]
			TX_Buffer[j] = CRC8(temp_crc_buffer, 1);
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ff42 	bl	80029b6 <CRC8>
 8002b32:	0003      	movs	r3, r0
 8002b34:	0019      	movs	r1, r3
 8002b36:	193a      	adds	r2, r7, r4
 8002b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3a:	18d3      	adds	r3, r2, r3
 8002b3c:	1c0a      	adds	r2, r1, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 8002b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b42:	3301      	adds	r3, #1
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
		for (i = 1; i < count; i++) {
 8002b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b48:	3301      	adds	r3, #1
 8002b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b4c:	230a      	movs	r3, #10
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3d3      	bcc.n	8002b00 <I2C_WriteReg+0x98>
		}

		HAL_I2C_Mem_Write(s->i2c_hdl, s->i2c_adr, reg_addr, 1, TX_Buffer,
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6858      	ldr	r0, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	7a1b      	ldrb	r3, [r3, #8]
 8002b60:	001c      	movs	r4, r3
 8002b62:	230b      	movs	r3, #11
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b299      	uxth	r1, r3
 8002b6a:	233f      	movs	r3, #63	@ 0x3f
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	22fa      	movs	r2, #250	@ 0xfa
 8002b74:	0092      	lsls	r2, r2, #2
 8002b76:	9202      	str	r2, [sp, #8]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	231c      	movs	r3, #28
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2301      	movs	r3, #1
 8002b82:	000a      	movs	r2, r1
 8002b84:	0021      	movs	r1, r4
 8002b86:	f003 fde1 	bl	800674c <HAL_I2C_Mem_Write>
	}
	else {
		HAL_I2C_Mem_Write(s->i2c_hdl, s->i2c_adr, reg_addr, 1, reg_data, count, 1000);
	}

}
 8002b8a:	e017      	b.n	8002bbc <I2C_WriteReg+0x154>
		HAL_I2C_Mem_Write(s->i2c_hdl, s->i2c_adr, reg_addr, 1, reg_data, count, 1000);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6858      	ldr	r0, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	7a1b      	ldrb	r3, [r3, #8]
 8002b94:	001c      	movs	r4, r3
 8002b96:	230b      	movs	r3, #11
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b299      	uxth	r1, r3
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	22fa      	movs	r2, #250	@ 0xfa
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	9202      	str	r2, [sp, #8]
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	0021      	movs	r1, r4
 8002bb8:	f003 fdc8 	bl	800674c <HAL_I2C_Mem_Write>
}
 8002bbc:	46c0      	nop			@ (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b013      	add	sp, #76	@ 0x4c
 8002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc4:	0800ccb8 	.word	0x0800ccb8

08002bc8 <I2C_BQ769x2_ReadReg>:

/* Read Register, version which doesn't segfault */
int I2C_BQ769x2_ReadReg(BQState *s, uint8_t reg_addr, uint8_t *reg_data,
		uint8_t count) {
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	b09f      	sub	sp, #124	@ 0x7c
 8002bcc:	af04      	add	r7, sp, #16
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	0008      	movs	r0, r1
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	260b      	movs	r6, #11
 8002bd8:	19bb      	adds	r3, r7, r6
 8002bda:	1c02      	adds	r2, r0, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	230a      	movs	r3, #10
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	1c0a      	adds	r2, r1, #0
 8002be4:	701a      	strb	r2, [r3, #0]
	unsigned int RX_CRC_Fail = 0; // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8002be6:	2300      	movs	r3, #0
 8002be8:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t RX_Buffer[MAX_BUFFER_SIZE] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8002bea:	2238      	movs	r2, #56	@ 0x38
 8002bec:	18bb      	adds	r3, r7, r2
 8002bee:	4a66      	ldr	r2, [pc, #408]	@ (8002d88 <I2C_BQ769x2_ReadReg+0x1c0>)
 8002bf0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bf2:	c313      	stmia	r3!, {r0, r1, r4}
 8002bf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bf6:	c313      	stmia	r3!, {r0, r1, r4}
 8002bf8:	ca03      	ldmia	r2!, {r0, r1}
 8002bfa:	c303      	stmia	r3!, {r0, r1}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00 };

	//uint8_t RX_Buffer[MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	if (s->i2c_crc) {
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	7a5b      	ldrb	r3, [r3, #9]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d100      	bne.n	8002c06 <I2C_BQ769x2_ReadReg+0x3e>
 8002c04:	e0a3      	b.n	8002d4e <I2C_BQ769x2_ReadReg+0x186>
		uint8_t crc_count = 0;
 8002c06:	235b      	movs	r3, #91	@ 0x5b
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
		//uint8_t ReceiveBuffer [10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
		uint8_t ReceiveBuffer[32] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8002c0e:	2510      	movs	r5, #16
 8002c10:	197b      	adds	r3, r7, r5
 8002c12:	4a5d      	ldr	r2, [pc, #372]	@ (8002d88 <I2C_BQ769x2_ReadReg+0x1c0>)
 8002c14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c16:	c313      	stmia	r3!, {r0, r1, r4}
 8002c18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c1a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c1c:	ca03      	ldmia	r2!, {r0, r1}
 8002c1e:	c303      	stmia	r3!, {r0, r1}
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00 };
		crc_count = count * 2;
 8002c20:	235b      	movs	r3, #91	@ 0x5b
 8002c22:	18fa      	adds	r2, r7, r3
 8002c24:	210a      	movs	r1, #10
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	18db      	adds	r3, r3, r3
 8002c2c:	7013      	strb	r3, [r2, #0]
		unsigned int j;
		unsigned int i;
		unsigned char CRCc = 0;
 8002c2e:	225a      	movs	r2, #90	@ 0x5a
 8002c30:	18bb      	adds	r3, r7, r2
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
		uint8_t temp_crc_buffer[3];

		HAL_I2C_Mem_Read(s->i2c_hdl, s->i2c_adr, reg_addr, 1, ReceiveBuffer,
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6858      	ldr	r0, [r3, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	7a1b      	ldrb	r3, [r3, #8]
 8002c3e:	001c      	movs	r4, r3
 8002c40:	19bb      	adds	r3, r7, r6
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b299      	uxth	r1, r3
 8002c46:	235b      	movs	r3, #91	@ 0x5b
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	22fa      	movs	r2, #250	@ 0xfa
 8002c50:	0092      	lsls	r2, r2, #2
 8002c52:	9202      	str	r2, [sp, #8]
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	197b      	adds	r3, r7, r5
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	0021      	movs	r1, r4
 8002c60:	f003 fea2 	bl	80069a8 <HAL_I2C_Mem_Read>
				crc_count, 1000);
		uint8_t crc1stByteBuffer[4] = { 0x10, reg_addr, 0x11, ReceiveBuffer[0] };
 8002c64:	2130      	movs	r1, #48	@ 0x30
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2210      	movs	r2, #16
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	19ba      	adds	r2, r7, r6
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	705a      	strb	r2, [r3, #1]
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2211      	movs	r2, #17
 8002c78:	709a      	strb	r2, [r3, #2]
 8002c7a:	197b      	adds	r3, r7, r5
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	70da      	strb	r2, [r3, #3]
		CRCc = CRC8(crc1stByteBuffer, 4);
 8002c82:	265a      	movs	r6, #90	@ 0x5a
 8002c84:	19bc      	adds	r4, r7, r6
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2104      	movs	r1, #4
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7ff fe93 	bl	80029b6 <CRC8>
 8002c90:	0003      	movs	r3, r0
 8002c92:	7023      	strb	r3, [r4, #0]
		if (CRCc != ReceiveBuffer[1]) {
 8002c94:	197b      	adds	r3, r7, r5
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	19ba      	adds	r2, r7, r6
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d002      	beq.n	8002ca6 <I2C_BQ769x2_ReadReg+0xde>
			RX_CRC_Fail += 1;
 8002ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	667b      	str	r3, [r7, #100]	@ 0x64
		}
		RX_Buffer[0] = ReceiveBuffer[0];
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	2338      	movs	r3, #56	@ 0x38
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	701a      	strb	r2, [r3, #0]

		j = 2;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	663b      	str	r3, [r7, #96]	@ 0x60
		for (i = 1; i < count; i++) {
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cba:	e02e      	b.n	8002d1a <I2C_BQ769x2_ReadReg+0x152>
			RX_Buffer[i] = ReceiveBuffer[j];
 8002cbc:	2510      	movs	r5, #16
 8002cbe:	197a      	adds	r2, r7, r5
 8002cc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	7819      	ldrb	r1, [r3, #0]
 8002cc6:	2338      	movs	r3, #56	@ 0x38
 8002cc8:	18fa      	adds	r2, r7, r3
 8002cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ccc:	18d3      	adds	r3, r2, r3
 8002cce:	1c0a      	adds	r2, r1, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
			temp_crc_buffer[0] = ReceiveBuffer[j];
 8002cd2:	197a      	adds	r2, r7, r5
 8002cd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cd6:	18d3      	adds	r3, r2, r3
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	2134      	movs	r1, #52	@ 0x34
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 8002ce0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	663b      	str	r3, [r7, #96]	@ 0x60
			CRCc = CRC8(temp_crc_buffer, 1);
 8002ce6:	265a      	movs	r6, #90	@ 0x5a
 8002ce8:	19bc      	adds	r4, r7, r6
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2101      	movs	r1, #1
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff fe61 	bl	80029b6 <CRC8>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	7023      	strb	r3, [r4, #0]
			if (CRCc != ReceiveBuffer[j])
 8002cf8:	197a      	adds	r2, r7, r5
 8002cfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	19ba      	adds	r2, r7, r6
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d002      	beq.n	8002d0e <I2C_BQ769x2_ReadReg+0x146>
				RX_CRC_Fail += 1;
 8002d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	667b      	str	r3, [r7, #100]	@ 0x64
			j = j + 1;
 8002d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d10:	3301      	adds	r3, #1
 8002d12:	663b      	str	r3, [r7, #96]	@ 0x60
		for (i = 1; i < count; i++) {
 8002d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d16:	3301      	adds	r3, #1
 8002d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3ca      	bcc.n	8002cbc <I2C_BQ769x2_ReadReg+0xf4>
		}
		CopyArray(RX_Buffer, reg_data, crc_count);
 8002d26:	235b      	movs	r3, #91	@ 0x5b
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	2338      	movs	r3, #56	@ 0x38
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	0018      	movs	r0, r3
 8002d34:	f002 fd5d 	bl	80057f2 <CopyArray>
		s->CRC_Fail += RX_CRC_Fail;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2284      	movs	r2, #132	@ 0x84
 8002d3c:	5a9a      	ldrh	r2, [r3, r2]
 8002d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	18d3      	adds	r3, r2, r3
 8002d44:	b299      	uxth	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2284      	movs	r2, #132	@ 0x84
 8002d4a:	5299      	strh	r1, [r3, r2]
 8002d4c:	e017      	b.n	8002d7e <I2C_BQ769x2_ReadReg+0x1b6>
	} else {
		HAL_I2C_Mem_Read(s->i2c_hdl, s->i2c_adr, reg_addr, 1, reg_data, count, 1000);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6858      	ldr	r0, [r3, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	7a1b      	ldrb	r3, [r3, #8]
 8002d56:	001c      	movs	r4, r3
 8002d58:	230b      	movs	r3, #11
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b299      	uxth	r1, r3
 8002d60:	230a      	movs	r3, #10
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	22fa      	movs	r2, #250	@ 0xfa
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	9202      	str	r2, [sp, #8]
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2301      	movs	r3, #1
 8002d76:	000a      	movs	r2, r1
 8002d78:	0021      	movs	r1, r4
 8002d7a:	f003 fe15 	bl	80069a8 <HAL_I2C_Mem_Read>
	}
	return 0;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b01b      	add	sp, #108	@ 0x6c
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d88:	0800ccd8 	.word	0x0800ccd8

08002d8c <BQ769x2_SetRegister>:

/* Set Register -----------------------------------------------*/
void BQ769x2_SetRegister(BQState *s, uint16_t reg_addr, uint32_t reg_data,
		uint8_t datalen) {
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	0008      	movs	r0, r1
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	0019      	movs	r1, r3
 8002d9a:	240a      	movs	r4, #10
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	1c02      	adds	r2, r0, #0
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	2509      	movs	r5, #9
 8002da4:	197b      	adds	r3, r7, r5
 8002da6:	1c0a      	adds	r2, r1, #0
 8002da8:	701a      	strb	r2, [r3, #0]
	uint8_t TX_Buffer[2] = { 0x00, 0x00 };
 8002daa:	231c      	movs	r3, #28
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	801a      	strh	r2, [r3, #0]
	uint8_t TX_RegData[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002db2:	2014      	movs	r0, #20
 8002db4:	183b      	adds	r3, r7, r0
 8002db6:	4a60      	ldr	r2, [pc, #384]	@ (8002f38 <BQ769x2_SetRegister+0x1ac>)
 8002db8:	6811      	ldr	r1, [r2, #0]
 8002dba:	6019      	str	r1, [r3, #0]
 8002dbc:	8892      	ldrh	r2, [r2, #4]
 8002dbe:	809a      	strh	r2, [r3, #4]

	//TX_RegData in little endian format
	TX_RegData[0] = reg_addr & 0xff;
 8002dc0:	193b      	adds	r3, r7, r4
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	701a      	strb	r2, [r3, #0]
	TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8002dca:	193b      	adds	r3, r7, r4
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	183b      	adds	r3, r7, r0
 8002dd6:	705a      	strb	r2, [r3, #1]
	TX_RegData[2] = reg_data & 0xff; //1st byte of data
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	183b      	adds	r3, r7, r0
 8002dde:	709a      	strb	r2, [r3, #2]

	switch (datalen) {
 8002de0:	197b      	adds	r3, r7, r5
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d061      	beq.n	8002eac <BQ769x2_SetRegister+0x120>
 8002de8:	dd00      	ble.n	8002dec <BQ769x2_SetRegister+0x60>
 8002dea:	e09a      	b.n	8002f22 <BQ769x2_SetRegister+0x196>
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <BQ769x2_SetRegister+0x6a>
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d02b      	beq.n	8002e4c <BQ769x2_SetRegister+0xc0>
 8002df4:	e095      	b.n	8002f22 <BQ769x2_SetRegister+0x196>
	case 1: //1 byte datalength
		I2C_WriteReg(s, 0x3E, TX_RegData, 3);
 8002df6:	2414      	movs	r4, #20
 8002df8:	193a      	adds	r2, r7, r4
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	213e      	movs	r1, #62	@ 0x3e
 8002e00:	f7ff fe32 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	22fa      	movs	r2, #250	@ 0xfa
 8002e0a:	00d2      	lsls	r2, r2, #3
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f002 fcbf 	bl	8005792 <delayUS>
		TX_Buffer[0] = Checksum(TX_RegData, 3);
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	2103      	movs	r1, #3
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff fd98 	bl	800294e <Checksum>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	001a      	movs	r2, r3
 8002e22:	211c      	movs	r1, #28
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x05; //combined length of register address and data
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(s, 0x60, TX_Buffer, 2); // Write the checksum and length
 8002e2e:	187a      	adds	r2, r7, r1
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	2302      	movs	r3, #2
 8002e34:	2160      	movs	r1, #96	@ 0x60
 8002e36:	f7ff fe17 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	22fa      	movs	r2, #250	@ 0xfa
 8002e40:	00d2      	lsls	r2, r2, #3
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f002 fca4 	bl	8005792 <delayUS>
		break;
 8002e4a:	e06a      	b.n	8002f22 <BQ769x2_SetRegister+0x196>
	case 2: //2 byte datalength
		TX_RegData[3] = (reg_data >> 8) & 0xff;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	2414      	movs	r4, #20
 8002e54:	193b      	adds	r3, r7, r4
 8002e56:	70da      	strb	r2, [r3, #3]
		I2C_WriteReg(s, 0x3E, TX_RegData, 4);
 8002e58:	193a      	adds	r2, r7, r4
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	213e      	movs	r1, #62	@ 0x3e
 8002e60:	f7ff fe02 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	22fa      	movs	r2, #250	@ 0xfa
 8002e6a:	00d2      	lsls	r2, r2, #3
 8002e6c:	0011      	movs	r1, r2
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f002 fc8f 	bl	8005792 <delayUS>
		TX_Buffer[0] = Checksum(TX_RegData, 4);
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	2104      	movs	r1, #4
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff fd68 	bl	800294e <Checksum>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	001a      	movs	r2, r3
 8002e82:	211c      	movs	r1, #28
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x06; //combined length of register address and data
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2206      	movs	r2, #6
 8002e8c:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(s, 0x60, TX_Buffer, 2); // Write the checksum and length
 8002e8e:	187a      	adds	r2, r7, r1
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	2302      	movs	r3, #2
 8002e94:	2160      	movs	r1, #96	@ 0x60
 8002e96:	f7ff fde7 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	22fa      	movs	r2, #250	@ 0xfa
 8002ea0:	00d2      	lsls	r2, r2, #3
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f002 fc74 	bl	8005792 <delayUS>
		break;
 8002eaa:	e03a      	b.n	8002f22 <BQ769x2_SetRegister+0x196>
	case 4: //4 byte datalength, Only used for CCGain and Capacity Gain
		TX_RegData[3] = (reg_data >> 8) & 0xff;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	2114      	movs	r1, #20
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	70da      	strb	r2, [r3, #3]
		TX_RegData[4] = (reg_data >> 16) & 0xff;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	711a      	strb	r2, [r3, #4]
		TX_RegData[5] = (reg_data >> 24) & 0xff;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0e1b      	lsrs	r3, r3, #24
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	715a      	strb	r2, [r3, #5]
		I2C_WriteReg(s, 0x3E, TX_RegData, 6);
 8002ecc:	000c      	movs	r4, r1
 8002ece:	187a      	adds	r2, r7, r1
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	213e      	movs	r1, #62	@ 0x3e
 8002ed6:	f7ff fdc7 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	22fa      	movs	r2, #250	@ 0xfa
 8002ee0:	00d2      	lsls	r2, r2, #3
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f002 fc54 	bl	8005792 <delayUS>
		TX_Buffer[0] = Checksum(TX_RegData, 6);
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	2106      	movs	r1, #6
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7ff fd2d 	bl	800294e <Checksum>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	211c      	movs	r1, #28
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x08; //combined length of register address and data
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2208      	movs	r2, #8
 8002f02:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(s, 0x60, TX_Buffer, 2); // Write the checksum and length
 8002f04:	187a      	adds	r2, r7, r1
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	2160      	movs	r1, #96	@ 0x60
 8002f0c:	f7ff fdac 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	22fa      	movs	r2, #250	@ 0xfa
 8002f16:	00d2      	lsls	r2, r2, #3
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f002 fc39 	bl	8005792 <delayUS>
		break;
 8002f20:	46c0      	nop			@ (mov r8, r8)
	}
	delayMS(s->tim_hdl, 2);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2102      	movs	r1, #2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f002 fc47 	bl	80057bc <delayMS>
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b008      	add	sp, #32
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	0800ccf8 	.word	0x0800ccf8

08002f3c <BQ769x2_CommandSubcommand>:

/* send command-only subommands (no response expected), see the TRM or the BQ76952 header file for a full list of Direct Commands */
void BQ769x2_CommandSubcommand(BQState *s, uint16_t command) //For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{ //For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	000a      	movs	r2, r1
 8002f46:	1cbb      	adds	r3, r7, #2
 8002f48:	801a      	strh	r2, [r3, #0]

	uint8_t TX_Reg[2] = { 0x00, 0x00 };
 8002f4a:	210c      	movs	r1, #12
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	2200      	movs	r2, #0
 8002f50:	801a      	strh	r2, [r3, #0]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 8002f52:	1cbb      	adds	r3, r7, #2
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	701a      	strb	r2, [r3, #0]
	TX_Reg[1] = (command >> 8) & 0xff;
 8002f5c:	1cbb      	adds	r3, r7, #2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	705a      	strb	r2, [r3, #1]

	I2C_WriteReg(s, 0x3E, TX_Reg, 2);
 8002f6a:	187a      	adds	r2, r7, r1
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	213e      	movs	r1, #62	@ 0x3e
 8002f72:	f7ff fd79 	bl	8002a68 <I2C_WriteReg>
	delayMS(s->tim_hdl, 2);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f002 fc1d 	bl	80057bc <delayMS>
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <BQ769x2_Subcommand>:
 * TODO fix the CRC segfault bug
 */
void BQ769x2_Subcommand(BQState *s, uint16_t command, uint16_t data,
		uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 8002f8c:	b5b0      	push	{r4, r5, r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	000c      	movs	r4, r1
 8002f96:	0010      	movs	r0, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	250a      	movs	r5, #10
 8002f9c:	197b      	adds	r3, r7, r5
 8002f9e:	1c22      	adds	r2, r4, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	1c02      	adds	r2, r0, #0
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	1c0a      	adds	r2, r1, #0
 8002fae:	701a      	strb	r2, [r3, #0]
	//security keys and Manu_data writes dont work with this function (reading these commands works)
	//max readback size is 16 bytes i.e. DASTATUS, CUV/COV snapshot are not supported by this function
	uint8_t TX_Reg[4] = { 0x00, 0x00, 0x00, 0x00 };
 8002fb0:	2114      	movs	r1, #20
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
	uint8_t TX_Buffer[2] = { 0x00, 0x00 };
 8002fb8:	2310      	movs	r3, #16
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	801a      	strh	r2, [r3, #0]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 8002fc0:	197b      	adds	r3, r7, r5
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	701a      	strb	r2, [r3, #0]
	TX_Reg[1] = (command >> 8) & 0xff;
 8002fca:	197b      	adds	r3, r7, r5
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	705a      	strb	r2, [r3, #1]

	if (type == R) {	//read
 8002fd8:	1dfb      	adds	r3, r7, #7
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d114      	bne.n	800300a <BQ769x2_Subcommand+0x7e>
		I2C_WriteReg(s, 0x3E, TX_Reg, 2);
 8002fe0:	187a      	adds	r2, r7, r1
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	213e      	movs	r1, #62	@ 0x3e
 8002fe8:	f7ff fd3e 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	22fa      	movs	r2, #250	@ 0xfa
 8002ff2:	00d2      	lsls	r2, r2, #3
 8002ff4:	0011      	movs	r1, r2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f002 fbcb 	bl	8005792 <delayUS>
		//I2C_BQ769x2_ReadReg(0x40, RX_32Byte, 32); //RX_32Byte is a global variable
		I2C_BQ769x2_ReadReg(s, 0x40, RX_32Byte, 16); //more then 16 would cause CRC errors for a reason I didn't dig into, so I limit this to 16. This does mean that large data reads are not supported.
 8002ffc:	4a38      	ldr	r2, [pc, #224]	@ (80030e0 <BQ769x2_Subcommand+0x154>)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	2310      	movs	r3, #16
 8003002:	2140      	movs	r1, #64	@ 0x40
 8003004:	f7ff fde0 	bl	8002bc8 <I2C_BQ769x2_ReadReg>
 8003008:	e060      	b.n	80030cc <BQ769x2_Subcommand+0x140>
	} else if (type == W) {
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d128      	bne.n	8003064 <BQ769x2_Subcommand+0xd8>
		//FET_Control, REG12_Control
		TX_Reg[2] = data & 0xff;
 8003012:	2308      	movs	r3, #8
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	2414      	movs	r4, #20
 800301c:	193b      	adds	r3, r7, r4
 800301e:	709a      	strb	r2, [r3, #2]
		I2C_WriteReg(s, 0x3E, TX_Reg, 3);
 8003020:	193a      	adds	r2, r7, r4
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	2303      	movs	r3, #3
 8003026:	213e      	movs	r1, #62	@ 0x3e
 8003028:	f7ff fd1e 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	22fa      	movs	r2, #250	@ 0xfa
 8003032:	00d2      	lsls	r2, r2, #3
 8003034:	0011      	movs	r1, r2
 8003036:	0018      	movs	r0, r3
 8003038:	f002 fbab 	bl	8005792 <delayUS>
		TX_Buffer[0] = Checksum(TX_Reg, 3);
 800303c:	193b      	adds	r3, r7, r4
 800303e:	2103      	movs	r1, #3
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff fc84 	bl	800294e <Checksum>
 8003046:	0003      	movs	r3, r0
 8003048:	001a      	movs	r2, r3
 800304a:	2110      	movs	r1, #16
 800304c:	187b      	adds	r3, r7, r1
 800304e:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x05; //combined length of registers address and data
 8003050:	187b      	adds	r3, r7, r1
 8003052:	2205      	movs	r2, #5
 8003054:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(s, 0x60, TX_Buffer, 2);
 8003056:	187a      	adds	r2, r7, r1
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	2302      	movs	r3, #2
 800305c:	2160      	movs	r1, #96	@ 0x60
 800305e:	f7ff fd03 	bl	8002a68 <I2C_WriteReg>
 8003062:	e033      	b.n	80030cc <BQ769x2_Subcommand+0x140>
	} else if (type == W2) { //write data with 2 bytes
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d12f      	bne.n	80030cc <BQ769x2_Subcommand+0x140>
		//CB_Active_Cells, CB_SET_LVL
		TX_Reg[2] = data & 0xff;
 800306c:	2008      	movs	r0, #8
 800306e:	183b      	adds	r3, r7, r0
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	2114      	movs	r1, #20
 8003076:	187b      	adds	r3, r7, r1
 8003078:	709a      	strb	r2, [r3, #2]
		TX_Reg[3] = (data >> 8) & 0xff;
 800307a:	183b      	adds	r3, r7, r0
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	b29b      	uxth	r3, r3
 8003082:	b2da      	uxtb	r2, r3
 8003084:	187b      	adds	r3, r7, r1
 8003086:	70da      	strb	r2, [r3, #3]
		I2C_WriteReg(s, 0x3E, TX_Reg, 4);
 8003088:	000c      	movs	r4, r1
 800308a:	187a      	adds	r2, r7, r1
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	2304      	movs	r3, #4
 8003090:	213e      	movs	r1, #62	@ 0x3e
 8003092:	f7ff fce9 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 1000);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	22fa      	movs	r2, #250	@ 0xfa
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f002 fb76 	bl	8005792 <delayUS>
		TX_Buffer[0] = Checksum(TX_Reg, 4);
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	2104      	movs	r1, #4
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7ff fc4f 	bl	800294e <Checksum>
 80030b0:	0003      	movs	r3, r0
 80030b2:	001a      	movs	r2, r3
 80030b4:	2110      	movs	r1, #16
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x06; //combined length of registers address and data
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2206      	movs	r2, #6
 80030be:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(s, 0x60, TX_Buffer, 2);
 80030c0:	187a      	adds	r2, r7, r1
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	2302      	movs	r3, #2
 80030c6:	2160      	movs	r1, #96	@ 0x60
 80030c8:	f7ff fcce 	bl	8002a68 <I2C_WriteReg>
	}
	delayMS(s->tim_hdl, 2);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2102      	movs	r1, #2
 80030d2:	0018      	movs	r0, r3
 80030d4:	f002 fb72 	bl	80057bc <delayMS>
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b006      	add	sp, #24
 80030de:	bdb0      	pop	{r4, r5, r7, pc}
 80030e0:	20000210 	.word	0x20000210

080030e4 <BQ769x2_DirectCommand>:

/* send direct command, see the TRM or the BQ76952 header file for a full list of Direct Commands */
void BQ769x2_DirectCommand(BQState *s, uint8_t command, uint16_t data,
		uint8_t type)

{	//type: R = read, W = write
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	000c      	movs	r4, r1
 80030ee:	0010      	movs	r0, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	1cfb      	adds	r3, r7, #3
 80030f4:	1c22      	adds	r2, r4, #0
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	003b      	movs	r3, r7
 80030fa:	1c02      	adds	r2, r0, #0
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	1cbb      	adds	r3, r7, #2
 8003100:	1c0a      	adds	r2, r1, #0
 8003102:	701a      	strb	r2, [r3, #0]
	uint8_t TX_data[2] = { 0x00, 0x00 };
 8003104:	210c      	movs	r1, #12
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2200      	movs	r2, #0
 800310a:	801a      	strh	r2, [r3, #0]

	//little endian format
	TX_data[0] = data & 0xff;
 800310c:	003b      	movs	r3, r7
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	187b      	adds	r3, r7, r1
 8003114:	701a      	strb	r2, [r3, #0]
	TX_data[1] = (data >> 8) & 0xff;
 8003116:	003b      	movs	r3, r7
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	b29b      	uxth	r3, r3
 800311e:	b2da      	uxtb	r2, r3
 8003120:	187b      	adds	r3, r7, r1
 8003122:	705a      	strb	r2, [r3, #1]

	if (type == R) {	//Read
 8003124:	1cbb      	adds	r3, r7, #2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10e      	bne.n	800314a <BQ769x2_DirectCommand+0x66>
		I2C_BQ769x2_ReadReg(s, command, RX_data, 2); //RX_data is a global variable
 800312c:	4a13      	ldr	r2, [pc, #76]	@ (800317c <BQ769x2_DirectCommand+0x98>)
 800312e:	1cfb      	adds	r3, r7, #3
 8003130:	7819      	ldrb	r1, [r3, #0]
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	2302      	movs	r3, #2
 8003136:	f7ff fd47 	bl	8002bc8 <I2C_BQ769x2_ReadReg>
		delayUS(s->tim_hdl, 2000);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	22fa      	movs	r2, #250	@ 0xfa
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f002 fb24 	bl	8005792 <delayUS>
	}
	if (type == W) { //write
 800314a:	1cbb      	adds	r3, r7, #2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10f      	bne.n	8003172 <BQ769x2_DirectCommand+0x8e>
		//Control_status, alarm_status, alarm_enable all 2 bytes long
		I2C_WriteReg(s, command, TX_data, 2);
 8003152:	230c      	movs	r3, #12
 8003154:	18fa      	adds	r2, r7, r3
 8003156:	1cfb      	adds	r3, r7, #3
 8003158:	7819      	ldrb	r1, [r3, #0]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	f7ff fc83 	bl	8002a68 <I2C_WriteReg>
		delayUS(s->tim_hdl, 2000);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	22fa      	movs	r2, #250	@ 0xfa
 8003168:	00d2      	lsls	r2, r2, #3
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f002 fb10 	bl	8005792 <delayUS>
	}
}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b005      	add	sp, #20
 8003178:	bd90      	pop	{r4, r7, pc}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	200001f0 	.word	0x200001f0

08003180 <BQ769x2_ReadUnsignedRegister>:
/* read an unsigned integer of 1 or 2 byte length */
uint16_t BQ769x2_ReadUnsignedRegister(BQState *s, uint16_t reg_addr,
		uint8_t count) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	0008      	movs	r0, r1
 800318a:	0011      	movs	r1, r2
 800318c:	1cbb      	adds	r3, r7, #2
 800318e:	1c02      	adds	r2, r0, #0
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	1c7b      	adds	r3, r7, #1
 8003194:	1c0a      	adds	r2, r1, #0
 8003196:	701a      	strb	r2, [r3, #0]
	// Read Unsigned Register of 1 or 2 byte length
	BQ769x2_Subcommand(s, reg_addr, 0x00, R);
 8003198:	1cbb      	adds	r3, r7, #2
 800319a:	8819      	ldrh	r1, [r3, #0]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	2300      	movs	r3, #0
 80031a0:	2200      	movs	r2, #0
 80031a2:	f7ff fef3 	bl	8002f8c <BQ769x2_Subcommand>
	switch (count) {
 80031a6:	1c7b      	adds	r3, r7, #1
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d002      	beq.n	80031b4 <BQ769x2_ReadUnsignedRegister+0x34>
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d003      	beq.n	80031ba <BQ769x2_ReadUnsignedRegister+0x3a>
 80031b2:	e00b      	b.n	80031cc <BQ769x2_ReadUnsignedRegister+0x4c>
	case 1:
		return RX_32Byte[0];
 80031b4:	4b08      	ldr	r3, [pc, #32]	@ (80031d8 <BQ769x2_ReadUnsignedRegister+0x58>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	e009      	b.n	80031ce <BQ769x2_ReadUnsignedRegister+0x4e>
	case 2:
		return (RX_32Byte[1] * 256 + RX_32Byte[0]);
 80031ba:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <BQ769x2_ReadUnsignedRegister+0x58>)
 80031bc:	785b      	ldrb	r3, [r3, #1]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <BQ769x2_ReadUnsignedRegister+0x58>)
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	e000      	b.n	80031ce <BQ769x2_ReadUnsignedRegister+0x4e>
	}
	return 0;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	20000210 	.word	0x20000210

080031dc <BQ769x2_Configure>:
		tries++;
	}
}

/* function which configures the BQ from defaults, must be called prior to enabling FETs */
void BQ769x2_Configure(BQState *s) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	// Configures all parameters in device RAM

	// Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
	BQ769x2_CommandSubcommand(s, SET_CFGUPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2190      	movs	r1, #144	@ 0x90
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff fea7 	bl	8002f3c <BQ769x2_CommandSubcommand>

	delayUS(s->tim_hdl, 2000);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	22fa      	movs	r2, #250	@ 0xfa
 80031f4:	00d2      	lsls	r2, r2, #3
 80031f6:	0011      	movs	r1, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f002 faca 	bl	8005792 <delayUS>
	 * BIT 6 - 0 for default ADC speed
	 * BIT 5/4 - 10 for quarter speed measurements during balancing, increases balancing power
	 * BIT 3-2 - 00 for standard loop ADC loop speed
	 * BIT 1-0 - 10 for default coulomb counter conversion speed
	 */
	BQ769x2_SetRegister(s, PowerConfig, 0b0010110010100010, 2);
 80031fe:	4acb      	ldr	r2, [pc, #812]	@ (800352c <BQ769x2_Configure+0x350>)
 8003200:	49cb      	ldr	r1, [pc, #812]	@ (8003530 <BQ769x2_Configure+0x354>)
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	2302      	movs	r3, #2
 8003206:	f7ff fdc1 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, FETOptions, 0x0D, 1); //device may not turn FETs on autonomously unless allowed to do so. Important because the STM32 is the only thing that can turn the pack off.
 800320a:	49ca      	ldr	r1, [pc, #808]	@ (8003534 <BQ769x2_Configure+0x358>)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	2301      	movs	r3, #1
 8003210:	220d      	movs	r2, #13
 8003212:	f7ff fdbb 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, REG0Config, 0x01, 1); // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
 8003216:	49c8      	ldr	r1, [pc, #800]	@ (8003538 <BQ769x2_Configure+0x35c>)
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	2301      	movs	r3, #1
 800321c:	2201      	movs	r2, #1
 800321e:	f7ff fdb5 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, REG12Config, 0x0D, 1); // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V and disable REG2 as not used
 8003222:	49c6      	ldr	r1, [pc, #792]	@ (800353c <BQ769x2_Configure+0x360>)
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	2301      	movs	r3, #1
 8003228:	220d      	movs	r2, #13
 800322a:	f7ff fdaf 	bl	8002d8c <BQ769x2_SetRegister>

	/* MFG status - keep chip in FULLACCESS, but set FETs to autonomous mode and enable permanent fail*/
	BQ769x2_SetRegister(s, MfgStatusInit, 0b0000000001010000, 2); //autonomous mode and enable permanent fail
 800322e:	49c4      	ldr	r1, [pc, #784]	@ (8003540 <BQ769x2_Configure+0x364>)
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	2302      	movs	r3, #2
 8003234:	2250      	movs	r2, #80	@ 0x50
 8003236:	f7ff fda9 	bl	8002d8c <BQ769x2_SetRegister>

	/* Pin Function Configs */
	BQ769x2_SetRegister(s, DFETOFFPinConfig, 0b10000010, 1); // Set DFETOFF pin to control BOTH DSG FET - 0x92FB = 0x42 (set to 0x00 to disable)
 800323a:	49c2      	ldr	r1, [pc, #776]	@ (8003544 <BQ769x2_Configure+0x368>)
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	2301      	movs	r3, #1
 8003240:	2282      	movs	r2, #130	@ 0x82
 8003242:	f7ff fda3 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CFETOFFPinConfig, 0b10000010, 1); // Set CFETOFF pin to control BOTH CHG FET - 0x92FA = 0x42 (set to 0x00 to disable). Configures as ALT function, active-low, individual control
 8003246:	49c0      	ldr	r1, [pc, #768]	@ (8003548 <BQ769x2_Configure+0x36c>)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	2301      	movs	r3, #1
 800324c:	2282      	movs	r2, #130	@ 0x82
 800324e:	f7ff fd9d 	bl	8002d8c <BQ769x2_SetRegister>
	//OPT3:1 to use REG1 to drive rising edge
	//OPT2:0 for no pull-up to reg1
	//OPT1:0
	//OPT0:1 weak pull-down enabled
	//FXN1/FXN0: 10 for alert
	BQ769x2_SetRegister(s, ALERTPinConfig, 0b00100110, 1);
 8003252:	49be      	ldr	r1, [pc, #760]	@ (800354c <BQ769x2_Configure+0x370>)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	2301      	movs	r3, #1
 8003258:	2226      	movs	r2, #38	@ 0x26
 800325a:	f7ff fd97 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, TS1Config, 0x07, 1); // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
 800325e:	49bc      	ldr	r1, [pc, #752]	@ (8003550 <BQ769x2_Configure+0x374>)
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	2301      	movs	r3, #1
 8003264:	2207      	movs	r2, #7
 8003266:	f7ff fd91 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, TS3Config, 0x07, 1); // Set TS3 to measure Cell Temperature - 0x74
 800326a:	49ba      	ldr	r1, [pc, #744]	@ (8003554 <BQ769x2_Configure+0x378>)
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	2301      	movs	r3, #1
 8003270:	2207      	movs	r2, #7
 8003272:	f7ff fd8b 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, HDQPinConfig, 0x07, 1); // Set HDQ pin to measure Cell temperature
 8003276:	2393      	movs	r3, #147	@ 0x93
 8003278:	0219      	lsls	r1, r3, #8
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	2301      	movs	r3, #1
 800327e:	2207      	movs	r2, #7
 8003280:	f7ff fd84 	bl	8002d8c <BQ769x2_SetRegister>

	/* Alarm Configuration - what can pull the ALERT pin high */
	// 'Default Alarm Mask' - only use the FULLSCAN bit - this will be set to trigger the ALERT pin to wake from DEEPSLEEP
	BQ769x2_SetRegister(s, DefaultAlarmMask, 0x0080, 2);
 8003284:	49b4      	ldr	r1, [pc, #720]	@ (8003558 <BQ769x2_Configure+0x37c>)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	2302      	movs	r3, #2
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	f7ff fd7e 	bl	8002d8c <BQ769x2_SetRegister>

	/* Current measurement */
	BQ769x2_SetRegister(s, CCGain, FloatToUInt32t((float) 0.75684), 4); // 7.5684/R_sense(mOhm) = 7.5684/10 = 7.76
 8003290:	4bb2      	ldr	r3, [pc, #712]	@ (800355c <BQ769x2_Configure+0x380>)
 8003292:	1c18      	adds	r0, r3, #0
 8003294:	f002 fad8 	bl	8005848 <FloatToUInt32t>
 8003298:	0002      	movs	r2, r0
 800329a:	49b1      	ldr	r1, [pc, #708]	@ (8003560 <BQ769x2_Configure+0x384>)
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	2304      	movs	r3, #4
 80032a0:	f7ff fd74 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CapacityGain, FloatToUInt32t((float) 225736.32), 4); // CC Gain * 298261.6178 = = 7.5684/10 * 298261.6178 = 225736.32
 80032a4:	4baf      	ldr	r3, [pc, #700]	@ (8003564 <BQ769x2_Configure+0x388>)
 80032a6:	1c18      	adds	r0, r3, #0
 80032a8:	f002 face 	bl	8005848 <FloatToUInt32t>
 80032ac:	0002      	movs	r2, r0
 80032ae:	49ae      	ldr	r1, [pc, #696]	@ (8003568 <BQ769x2_Configure+0x38c>)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	2304      	movs	r3, #4
 80032b4:	f7ff fd6a 	bl	8002d8c <BQ769x2_SetRegister>
	 *
	 bestA [A1 A2 A3 A4 A5] =  [-22175  31696 -16652  31696 4029]
	 bestB [B1 B2 B3 B4] =  [-23835  20738 -8470  4596]
	 Adc0 = 11703
	 */
	BQ769x2_SetRegister(s, T18kCoeffa1, (int16_t) -22175, 2);
 80032b8:	4aac      	ldr	r2, [pc, #688]	@ (800356c <BQ769x2_Configure+0x390>)
 80032ba:	49ad      	ldr	r1, [pc, #692]	@ (8003570 <BQ769x2_Configure+0x394>)
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	2302      	movs	r3, #2
 80032c0:	f7ff fd64 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffa2, (int16_t) 31696, 2);
 80032c4:	4aab      	ldr	r2, [pc, #684]	@ (8003574 <BQ769x2_Configure+0x398>)
 80032c6:	49ac      	ldr	r1, [pc, #688]	@ (8003578 <BQ769x2_Configure+0x39c>)
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	2302      	movs	r3, #2
 80032cc:	f7ff fd5e 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffa3, (int16_t) -16652, 2);
 80032d0:	4aaa      	ldr	r2, [pc, #680]	@ (800357c <BQ769x2_Configure+0x3a0>)
 80032d2:	49ab      	ldr	r1, [pc, #684]	@ (8003580 <BQ769x2_Configure+0x3a4>)
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	2302      	movs	r3, #2
 80032d8:	f7ff fd58 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffa4, (int16_t) 31696, 2);
 80032dc:	4aa5      	ldr	r2, [pc, #660]	@ (8003574 <BQ769x2_Configure+0x398>)
 80032de:	49a9      	ldr	r1, [pc, #676]	@ (8003584 <BQ769x2_Configure+0x3a8>)
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	f7ff fd52 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffa5, (int16_t) 4029, 2);
 80032e8:	4aa7      	ldr	r2, [pc, #668]	@ (8003588 <BQ769x2_Configure+0x3ac>)
 80032ea:	49a8      	ldr	r1, [pc, #672]	@ (800358c <BQ769x2_Configure+0x3b0>)
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	2302      	movs	r3, #2
 80032f0:	f7ff fd4c 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffb1, (int16_t) -23835, 2);
 80032f4:	4aa6      	ldr	r2, [pc, #664]	@ (8003590 <BQ769x2_Configure+0x3b4>)
 80032f6:	49a7      	ldr	r1, [pc, #668]	@ (8003594 <BQ769x2_Configure+0x3b8>)
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	f7ff fd46 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffb2, (int16_t) 20738, 2);
 8003300:	4aa5      	ldr	r2, [pc, #660]	@ (8003598 <BQ769x2_Configure+0x3bc>)
 8003302:	49a6      	ldr	r1, [pc, #664]	@ (800359c <BQ769x2_Configure+0x3c0>)
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	2302      	movs	r3, #2
 8003308:	f7ff fd40 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffb3, (int16_t) -8470, 2);
 800330c:	4aa4      	ldr	r2, [pc, #656]	@ (80035a0 <BQ769x2_Configure+0x3c4>)
 800330e:	49a5      	ldr	r1, [pc, #660]	@ (80035a4 <BQ769x2_Configure+0x3c8>)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	2302      	movs	r3, #2
 8003314:	f7ff fd3a 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kCoeffb4, (int16_t) 4596, 2);
 8003318:	4aa3      	ldr	r2, [pc, #652]	@ (80035a8 <BQ769x2_Configure+0x3cc>)
 800331a:	49a4      	ldr	r1, [pc, #656]	@ (80035ac <BQ769x2_Configure+0x3d0>)
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	2302      	movs	r3, #2
 8003320:	f7ff fd34 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, T18kAdc0, (int16_t) 11703, 2);
 8003324:	4aa2      	ldr	r2, [pc, #648]	@ (80035b0 <BQ769x2_Configure+0x3d4>)
 8003326:	49a3      	ldr	r1, [pc, #652]	@ (80035b4 <BQ769x2_Configure+0x3d8>)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	f7ff fd2e 	bl	8002d8c <BQ769x2_SetRegister>

	/* Protections Config */
	BQ769x2_SetRegister(s, VCellMode, s->ActiveCells, 2); //Faraday BMS = 0xAAFF for 12 cells. See schematic
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	001a      	movs	r2, r3
 8003336:	49a0      	ldr	r1, [pc, #640]	@ (80035b8 <BQ769x2_Configure+0x3dc>)
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	2302      	movs	r3, #2
 800333c:	f7ff fd26 	bl	8002d8c <BQ769x2_SetRegister>

	// Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
	// Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
	// COV (over-voltage), CUV (under-voltage)
	//BQ769x2_SetRegister(s,EnabledProtectionsA, 0xBC, 1);
	BQ769x2_SetRegister(s, EnabledProtectionsA, 0b10111100, 1);
 8003340:	499e      	ldr	r1, [pc, #632]	@ (80035bc <BQ769x2_Configure+0x3e0>)
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	2301      	movs	r3, #1
 8003346:	22bc      	movs	r2, #188	@ 0xbc
 8003348:	f7ff fd20 	bl	8002d8c <BQ769x2_SetRegister>

	// Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
	// Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
	// OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
	BQ769x2_SetRegister(s, EnabledProtectionsB, 0b01110111, 1);
 800334c:	499c      	ldr	r1, [pc, #624]	@ (80035c0 <BQ769x2_Configure+0x3e4>)
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	2301      	movs	r3, #1
 8003352:	2277      	movs	r2, #119	@ 0x77
 8003354:	f7ff fd1a 	bl	8002d8c <BQ769x2_SetRegister>

	/* Set temperature thresholds */
	BQ769x2_SetRegister(s, UTCThreshold, (signed char) 5, 1); // Set undertemperature in charge threshold. Assume +/- 5C because of poor thermistor coupling
 8003358:	499a      	ldr	r1, [pc, #616]	@ (80035c4 <BQ769x2_Configure+0x3e8>)
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	2301      	movs	r3, #1
 800335e:	2205      	movs	r2, #5
 8003360:	f7ff fd14 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, UTDThreshold, (signed char) -10, 1); // Set undertemperature in discharge threshold. Assume +/- 5C because of poor thermistor coupling
 8003364:	230a      	movs	r3, #10
 8003366:	425a      	negs	r2, r3
 8003368:	4997      	ldr	r1, [pc, #604]	@ (80035c8 <BQ769x2_Configure+0x3ec>)
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	2301      	movs	r3, #1
 800336e:	f7ff fd0d 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, OTCThreshold, (signed char) 40, 1); // Set overtemperature in charge threshold. Assume +/- 5C because of poor thermistor coupling
 8003372:	4996      	ldr	r1, [pc, #600]	@ (80035cc <BQ769x2_Configure+0x3f0>)
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	2301      	movs	r3, #1
 8003378:	2228      	movs	r2, #40	@ 0x28
 800337a:	f7ff fd07 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, OTDThreshold, (signed char) 55, 1); // Set overtemperature in discharge threshold. Assume +/- 5C because of poor thermistor coupling
 800337e:	4994      	ldr	r1, [pc, #592]	@ (80035d0 <BQ769x2_Configure+0x3f4>)
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	2301      	movs	r3, #1
 8003384:	2237      	movs	r2, #55	@ 0x37
 8003386:	f7ff fd01 	bl	8002d8c <BQ769x2_SetRegister>

	/*Over and Under Voltage configuration*/
	BQ769x2_SetRegister(s, CUVThreshold, 0x34, 1); //CUV (under-voltage) Threshold - 0x9275 = 0x34 (2631 mV) this value multiplied by 50.6mV = 2631mV
 800338a:	4992      	ldr	r1, [pc, #584]	@ (80035d4 <BQ769x2_Configure+0x3f8>)
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	2301      	movs	r3, #1
 8003390:	2234      	movs	r2, #52	@ 0x34
 8003392:	f7ff fcfb 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, COVThreshold, 0x52, 1); //COV (over-voltage) Threshold - 0x9278 = 0x53 (4199 mV) seems to result in 4.15V max voltage. Go for 0x52 for long life (4.15V max with lift) 82 * 50.6mV = 4149mV
 8003396:	4990      	ldr	r1, [pc, #576]	@ (80035d8 <BQ769x2_Configure+0x3fc>)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	2301      	movs	r3, #1
 800339c:	2252      	movs	r2, #82	@ 0x52
 800339e:	f7ff fcf5 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, ShutdownCellVoltage, 0x0960, 2); // Shutdown 0x923F - enter SHUTDOWN when below this cell voltage to minimize power draw . Set to 2400mV
 80033a2:	2396      	movs	r3, #150	@ 0x96
 80033a4:	011a      	lsls	r2, r3, #4
 80033a6:	498d      	ldr	r1, [pc, #564]	@ (80035dc <BQ769x2_Configure+0x400>)
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	2302      	movs	r3, #2
 80033ac:	f7ff fcee 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, ShutdownStackVoltage, 0x0AC8, 2); //ShutdownStackVoltage 0x9241 - enter SHUTDOWn when the stack is below this voltage - set to 2300mV/cell -> 2760*10mV
 80033b0:	4a8b      	ldr	r2, [pc, #556]	@ (80035e0 <BQ769x2_Configure+0x404>)
 80033b2:	498c      	ldr	r1, [pc, #560]	@ (80035e4 <BQ769x2_Configure+0x408>)
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	2302      	movs	r3, #2
 80033b8:	f7ff fce8 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CUVRecoveryHysteresis, 0x04, 1); //CUVRecoveryHystersis 0x927B - hysteresis value after COV - set to 200mV -> 4* 50.6mV = 202.4mV
 80033bc:	498a      	ldr	r1, [pc, #552]	@ (80035e8 <BQ769x2_Configure+0x40c>)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	2301      	movs	r3, #1
 80033c2:	2204      	movs	r2, #4
 80033c4:	f7ff fce2 	bl	8002d8c <BQ769x2_SetRegister>

	/*Set Permanent Fail for SUV and SOV to just disable FETs to prevent charging of severely undervolted cells. STM32 goes to sleep due to inactivity afterwards*/
	BQ769x2_SetRegister(s, SUVThreshold, 1900, 2); //0x92CB - set safety undervoltage threshold to 1.9V
 80033c8:	4a88      	ldr	r2, [pc, #544]	@ (80035ec <BQ769x2_Configure+0x410>)
 80033ca:	4989      	ldr	r1, [pc, #548]	@ (80035f0 <BQ769x2_Configure+0x414>)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	2302      	movs	r3, #2
 80033d0:	f7ff fcdc 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, SOVThreshold, 4500, 2); //0x92CE - set safety overvoltage threshold to 4.5V
 80033d4:	4a87      	ldr	r2, [pc, #540]	@ (80035f4 <BQ769x2_Configure+0x418>)
 80033d6:	4988      	ldr	r1, [pc, #544]	@ (80035f8 <BQ769x2_Configure+0x41c>)
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	2302      	movs	r3, #2
 80033dc:	f7ff fcd6 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, EnabledPFA, 0b00000011, 1); //Enable Permanent Fail for Safety Undervoltage and Safety Overvoltage Only
 80033e0:	4986      	ldr	r1, [pc, #536]	@ (80035fc <BQ769x2_Configure+0x420>)
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	2301      	movs	r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	f7ff fcd0 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, EnabledPFD, 0b00000001, 1); //Enable Permanent Fail for Safety Undervoltage and Safety Overvoltage Only
 80033ec:	4984      	ldr	r1, [pc, #528]	@ (8003600 <BQ769x2_Configure+0x424>)
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	2301      	movs	r3, #1
 80033f2:	2201      	movs	r2, #1
 80033f4:	f7ff fcca 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, TOSSThreshold, 240, 2); //enable permanent fail if top of stack voltage deviates from cell voltages added up by 240*12 = 2.8V
 80033f8:	4982      	ldr	r1, [pc, #520]	@ (8003604 <BQ769x2_Configure+0x428>)
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	2302      	movs	r3, #2
 80033fe:	22f0      	movs	r2, #240	@ 0xf0
 8003400:	f7ff fcc4 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, ProtectionConfiguration, 0x02, 2); //Set Permanent Fail to turn FETs off only. Assume that idle will take care of DEEPSLEEP
 8003404:	4980      	ldr	r1, [pc, #512]	@ (8003608 <BQ769x2_Configure+0x42c>)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	2302      	movs	r3, #2
 800340a:	2202      	movs	r2, #2
 800340c:	f7ff fcbe 	bl	8002d8c <BQ769x2_SetRegister>

	/* Balancing Configuration*/
	BQ769x2_SetRegister(s, BalancingConfiguration, 0b00000011, 1); //Set balancing to autonomously operate while in RELAX and CHARGE configurations. Sleep is disabled.
 8003410:	497e      	ldr	r1, [pc, #504]	@ (800360c <BQ769x2_Configure+0x430>)
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	2301      	movs	r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	f7ff fcb8 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CellBalanceMaxCells, 3, 1); //0x933A  - set maximum number of cells that may balance at once to 3. Contributes to thermal limit of BQ chip
 800341c:	497c      	ldr	r1, [pc, #496]	@ (8003610 <BQ769x2_Configure+0x434>)
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	2301      	movs	r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	f7ff fcb2 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CellBalanceMinDeltaCharge, 25, 1); //0x933D - set minimum cell balance delta at which balancing starts in CHARGE to 25mV
 8003428:	497a      	ldr	r1, [pc, #488]	@ (8003614 <BQ769x2_Configure+0x438>)
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	2301      	movs	r3, #1
 800342e:	2219      	movs	r2, #25
 8003430:	f7ff fcac 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CellBalanceMinDeltaRelax, 25, 1); //0x933D - set minimum cell balance delta at which balancing starts in RELAX to 25mV
 8003434:	4978      	ldr	r1, [pc, #480]	@ (8003618 <BQ769x2_Configure+0x43c>)
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	2301      	movs	r3, #1
 800343a:	2219      	movs	r2, #25
 800343c:	f7ff fca6 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CellBalanceStopDeltaCharge, 15, 1); //0x933D - set minimum cell balance delta at which balancing stops in CHARGE to 15mV
 8003440:	4976      	ldr	r1, [pc, #472]	@ (800361c <BQ769x2_Configure+0x440>)
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	2301      	movs	r3, #1
 8003446:	220f      	movs	r2, #15
 8003448:	f7ff fca0 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CellBalanceStopDeltaRelax, 15, 1); //0x933D - set minimum cell balance delta at which balancing stops in RELAX to 15mV
 800344c:	4974      	ldr	r1, [pc, #464]	@ (8003620 <BQ769x2_Configure+0x444>)
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	2301      	movs	r3, #1
 8003452:	220f      	movs	r2, #15
 8003454:	f7ff fc9a 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CellBalanceMinCellVCharge, (int16_t) 0x0E74, 2); //0x933B -Minimum voltage at which cells start balancing. Set to 3700mV for now
 8003458:	4a72      	ldr	r2, [pc, #456]	@ (8003624 <BQ769x2_Configure+0x448>)
 800345a:	4973      	ldr	r1, [pc, #460]	@ (8003628 <BQ769x2_Configure+0x44c>)
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	2302      	movs	r3, #2
 8003460:	f7ff fc94 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, CellBalanceMinCellVRelax, (int16_t) 0x0E74, 2); //0x933F -Minimum voltage at which cells start balancing. Set to 3700mV for now
 8003464:	4a6f      	ldr	r2, [pc, #444]	@ (8003624 <BQ769x2_Configure+0x448>)
 8003466:	4971      	ldr	r1, [pc, #452]	@ (800362c <BQ769x2_Configure+0x450>)
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	2302      	movs	r3, #2
 800346c:	f7ff fc8e 	bl	8002d8c <BQ769x2_SetRegister>

	/*Definitions of charge and discharge*/
	BQ769x2_SetRegister(s, DsgCurrentThreshold, 0x64, 2); //0x9310   Set definition of discharge in mA. 100mA. Balancing happens when current is above the negative of this current.
 8003470:	496f      	ldr	r1, [pc, #444]	@ (8003630 <BQ769x2_Configure+0x454>)
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	2302      	movs	r3, #2
 8003476:	2264      	movs	r2, #100	@ 0x64
 8003478:	f7ff fc88 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, ChgCurrentThreshold, 0x32, 2); //0x9312  Set definition of charge in mA. 50mA Balancing happens in charge when above this current
 800347c:	496d      	ldr	r1, [pc, #436]	@ (8003634 <BQ769x2_Configure+0x458>)
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	2302      	movs	r3, #2
 8003482:	2232      	movs	r2, #50	@ 0x32
 8003484:	f7ff fc82 	bl	8002d8c <BQ769x2_SetRegister>

	/*Charge current limit*/
	BQ769x2_SetRegister(s, OCCThreshold, 0x0F, 1); //OCC (over-current in charge) Threshold - 0x9280 = 0x05 (30mV = 3A across 10mOhm sense resistor) Units in 2mV
 8003488:	496b      	ldr	r1, [pc, #428]	@ (8003638 <BQ769x2_Configure+0x45c>)
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	2301      	movs	r3, #1
 800348e:	220f      	movs	r2, #15
 8003490:	f7ff fc7c 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, OCCDelay, 0x1E, 1); //OCC Delay (over current in charge delay) - 0x9281 = 0x0D (around 100ms)
 8003494:	4969      	ldr	r1, [pc, #420]	@ (800363c <BQ769x2_Configure+0x460>)
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	2301      	movs	r3, #1
 800349a:	221e      	movs	r2, #30
 800349c:	f7ff fc76 	bl	8002d8c <BQ769x2_SetRegister>

	/*Overcurrent in Discharge Config*/
	BQ769x2_SetRegister(s, OCD1Threshold, 0x7D, 1); //OCD1 "fast"Threshold - 0x9282 = 0x62 (250 mV = -25A across 10mOhm sense resistor) units of 2mV
 80034a0:	4967      	ldr	r1, [pc, #412]	@ (8003640 <BQ769x2_Configure+0x464>)
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	2301      	movs	r3, #1
 80034a6:	227d      	movs	r2, #125	@ 0x7d
 80034a8:	f7ff fc70 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, OCD1Delay, 0x04, 1); //OCD1 Delay- 0x9283 = 10 ms to 426 ms in units of 3.3 ms, with the actual delay being 3.3 ms × (2 + setting) = 20ms.
 80034ac:	4965      	ldr	r1, [pc, #404]	@ (8003644 <BQ769x2_Configure+0x468>)
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	2301      	movs	r3, #1
 80034b2:	2204      	movs	r2, #4
 80034b4:	f7ff fc6a 	bl	8002d8c <BQ769x2_SetRegister>

	BQ769x2_SetRegister(s, OCD2Threshold, 0x64, 1); //OCD1 Threshold - 0x9284 = (0x50 * 20 mV = 20A across 10mOhm sense resistor) units of 2mV
 80034b8:	4963      	ldr	r1, [pc, #396]	@ (8003648 <BQ769x2_Configure+0x46c>)
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	2301      	movs	r3, #1
 80034be:	2264      	movs	r2, #100	@ 0x64
 80034c0:	f7ff fc64 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, OCD2Delay, 0x5A, 1); //OCD2 Threshold - 0x9285 = 10 ms to 426 ms in units of 3.3 ms, with the actual delay being 3.3 ms × (2 + 120) = 90ms.
 80034c4:	4961      	ldr	r1, [pc, #388]	@ (800364c <BQ769x2_Configure+0x470>)
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	2301      	movs	r3, #1
 80034ca:	225a      	movs	r2, #90	@ 0x5a
 80034cc:	f7ff fc5e 	bl	8002d8c <BQ769x2_SetRegister>

	BQ769x2_SetRegister(s, OCD3Threshold, (int16_t) -16000, 2); //OCD3 Threshold - 0x928A (-16A in units of user Amps (mA))
 80034d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003650 <BQ769x2_Configure+0x474>)
 80034d2:	4960      	ldr	r1, [pc, #384]	@ (8003654 <BQ769x2_Configure+0x478>)
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	2302      	movs	r3, #2
 80034d8:	f7ff fc58 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, OCD3Delay, 15, 2); //OCD3 Threshold - 0x928C (15 second delay)
 80034dc:	495e      	ldr	r1, [pc, #376]	@ (8003658 <BQ769x2_Configure+0x47c>)
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	2302      	movs	r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	f7ff fc52 	bl	8002d8c <BQ769x2_SetRegister>

	/*Fast short circuit detection config */
	BQ769x2_SetRegister(s, SCDThreshold, 0x0D, 1); //Short circuit discharge Threshold - 0x9286 = 0x0B (400 mV = 40A across 10mOhm sense resistor)
 80034e8:	495c      	ldr	r1, [pc, #368]	@ (800365c <BQ769x2_Configure+0x480>)
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	2301      	movs	r3, #1
 80034ee:	220d      	movs	r2, #13
 80034f0:	f7ff fc4c 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, SCDDelay, 0x11, 1); //SCD Delay - 0x9287 = 0x11 (240us = (17-1)*15us = 240us
 80034f4:	495a      	ldr	r1, [pc, #360]	@ (8003660 <BQ769x2_Configure+0x484>)
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	2301      	movs	r3, #1
 80034fa:	2211      	movs	r2, #17
 80034fc:	f7ff fc46 	bl	8002d8c <BQ769x2_SetRegister>
	BQ769x2_SetRegister(s, SCDLLatchLimit, 0x01, 1); //Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
 8003500:	4958      	ldr	r1, [pc, #352]	@ (8003664 <BQ769x2_Configure+0x488>)
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	2301      	movs	r3, #1
 8003506:	2201      	movs	r2, #1
 8003508:	f7ff fc40 	bl	8002d8c <BQ769x2_SetRegister>

	// Exit CONFIGUPDATE mode  - Subcommand 0x0092
	BQ769x2_CommandSubcommand(s, EXIT_CFGUPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2192      	movs	r1, #146	@ 0x92
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff fd13 	bl	8002f3c <BQ769x2_CommandSubcommand>
	delayUS(s->tim_hdl, 60000); //wait for chip to be ready
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4a53      	ldr	r2, [pc, #332]	@ (8003668 <BQ769x2_Configure+0x48c>)
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f002 f937 	bl	8005792 <delayUS>
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}
 800352c:	00002ca2 	.word	0x00002ca2
 8003530:	00009234 	.word	0x00009234
 8003534:	00009308 	.word	0x00009308
 8003538:	00009237 	.word	0x00009237
 800353c:	00009236 	.word	0x00009236
 8003540:	00009343 	.word	0x00009343
 8003544:	000092fb 	.word	0x000092fb
 8003548:	000092fa 	.word	0x000092fa
 800354c:	000092fc 	.word	0x000092fc
 8003550:	000092fd 	.word	0x000092fd
 8003554:	000092ff 	.word	0x000092ff
 8003558:	0000926d 	.word	0x0000926d
 800355c:	3f41c044 	.word	0x3f41c044
 8003560:	000091a8 	.word	0x000091a8
 8003564:	485c7214 	.word	0x485c7214
 8003568:	000091ac 	.word	0x000091ac
 800356c:	ffffa961 	.word	0xffffa961
 8003570:	000091ea 	.word	0x000091ea
 8003574:	00007bd0 	.word	0x00007bd0
 8003578:	000091ec 	.word	0x000091ec
 800357c:	ffffbef4 	.word	0xffffbef4
 8003580:	000091ee 	.word	0x000091ee
 8003584:	000091f0 	.word	0x000091f0
 8003588:	00000fbd 	.word	0x00000fbd
 800358c:	000091f2 	.word	0x000091f2
 8003590:	ffffa2e5 	.word	0xffffa2e5
 8003594:	000091f4 	.word	0x000091f4
 8003598:	00005102 	.word	0x00005102
 800359c:	000091f6 	.word	0x000091f6
 80035a0:	ffffdeea 	.word	0xffffdeea
 80035a4:	000091f8 	.word	0x000091f8
 80035a8:	000011f4 	.word	0x000011f4
 80035ac:	000091fa 	.word	0x000091fa
 80035b0:	00002db7 	.word	0x00002db7
 80035b4:	000091fe 	.word	0x000091fe
 80035b8:	00009304 	.word	0x00009304
 80035bc:	00009261 	.word	0x00009261
 80035c0:	00009262 	.word	0x00009262
 80035c4:	000092a6 	.word	0x000092a6
 80035c8:	000092a9 	.word	0x000092a9
 80035cc:	0000929a 	.word	0x0000929a
 80035d0:	0000929d 	.word	0x0000929d
 80035d4:	00009275 	.word	0x00009275
 80035d8:	00009278 	.word	0x00009278
 80035dc:	0000923f 	.word	0x0000923f
 80035e0:	00000ac8 	.word	0x00000ac8
 80035e4:	00009241 	.word	0x00009241
 80035e8:	0000927b 	.word	0x0000927b
 80035ec:	0000076c 	.word	0x0000076c
 80035f0:	000092cb 	.word	0x000092cb
 80035f4:	00001194 	.word	0x00001194
 80035f8:	000092ce 	.word	0x000092ce
 80035fc:	000092c0 	.word	0x000092c0
 8003600:	000092c3 	.word	0x000092c3
 8003604:	000092d1 	.word	0x000092d1
 8003608:	0000925f 	.word	0x0000925f
 800360c:	00009335 	.word	0x00009335
 8003610:	0000933a 	.word	0x0000933a
 8003614:	0000933d 	.word	0x0000933d
 8003618:	00009341 	.word	0x00009341
 800361c:	0000933e 	.word	0x0000933e
 8003620:	00009342 	.word	0x00009342
 8003624:	00000e74 	.word	0x00000e74
 8003628:	0000933b 	.word	0x0000933b
 800362c:	0000933f 	.word	0x0000933f
 8003630:	00009310 	.word	0x00009310
 8003634:	00009312 	.word	0x00009312
 8003638:	00009280 	.word	0x00009280
 800363c:	00009281 	.word	0x00009281
 8003640:	00009282 	.word	0x00009282
 8003644:	00009283 	.word	0x00009283
 8003648:	00009284 	.word	0x00009284
 800364c:	00009285 	.word	0x00009285
 8003650:	ffffc180 	.word	0xffffc180
 8003654:	0000928a 	.word	0x0000928a
 8003658:	0000928c 	.word	0x0000928c
 800365c:	00009286 	.word	0x00009286
 8003660:	00009287 	.word	0x00009287
 8003664:	00009295 	.word	0x00009295
 8003668:	0000ea60 	.word	0x0000ea60

0800366c <BQ769x2_Initialize>:

/*Initialize BQ chip by configuring registers and then checking that a critical register was written. Return 1 if successfully configured, 0 if failed*/
uint8_t BQ769x2_Initialize(BQState *s) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	BQ769x2_Configure(s);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0018      	movs	r0, r3
 8003678:	f7ff fdb0 	bl	80031dc <BQ769x2_Configure>

	//Fail if device is still in config update mode.
	BQ769x2_ReadBatteryStatus(s);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f000 f9b2 	bl	80039e8 <BQ769x2_ReadBatteryStatus>
	if (s->value_BatteryStatus & 1) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	226e      	movs	r2, #110	@ 0x6e
 8003688:	5a9b      	ldrh	r3, [r3, r2]
 800368a:	001a      	movs	r2, r3
 800368c:	2301      	movs	r3, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d001      	beq.n	8003696 <BQ769x2_Initialize+0x2a>
		return 0;
 8003692:	2300      	movs	r3, #0
 8003694:	e00e      	b.n	80036b4 <BQ769x2_Initialize+0x48>
	}
	//Fail if the active cells register is not 0xAAFF
	if (BQ769x2_ReadUnsignedRegister(s, VCellMode, 2) != s->ActiveCells) {
 8003696:	4909      	ldr	r1, [pc, #36]	@ (80036bc <BQ769x2_Initialize+0x50>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fd6f 	bl	8003180 <BQ769x2_ReadUnsignedRegister>
 80036a2:	0003      	movs	r3, r0
 80036a4:	001a      	movs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d001      	beq.n	80036b2 <BQ769x2_Initialize+0x46>
		return 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e000      	b.n	80036b4 <BQ769x2_Initialize+0x48>
	}

	//config successful and register spot check complete
	return 1;
 80036b2:	2301      	movs	r3, #1

}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	00009304 	.word	0x00009304

080036c0 <BQ769x2_ForceDisableFETs>:

//  ********************************* FET Control Commands  ***************************************

/* Blocks the FETs from turning on via the MCU pins*/
void BQ769x2_ForceDisableFETs(BQState *s) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(s->CFETOFF_PORT, s->CFETOFF_PIN, GPIO_PIN_RESET); // CFETOFF pin (BOTHOFF) set low
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6998      	ldr	r0, [r3, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7f1b      	ldrb	r3, [r3, #28]
 80036d0:	2200      	movs	r2, #0
 80036d2:	0019      	movs	r1, r3
 80036d4:	f002 ff61 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(s->DFETOFF_PORT, s->DFETOFF_PIN, GPIO_PIN_RESET); // DFETOFF pin (BOTHOFF) set low
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a18      	ldr	r0, [r3, #32]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	@ 0x24
 80036e0:	5c9b      	ldrb	r3, [r3, r2]
 80036e2:	2200      	movs	r2, #0
 80036e4:	0019      	movs	r1, r3
 80036e6:	f002 ff58 	bl	800659a <HAL_GPIO_WritePin>
}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <BQ769x2_AllowFETs>:

/* sends the FET_ENABLE command, sets the MCU pins to allow FETs, the sends enable again. Sending FET_ENABLE twice seems to be necessary
 * 	The CFETOFF and DFETOFF pin on the BQ76952 should be connected to the MCU board to use this function*/
void BQ769x2_AllowFETs(BQState *s) {
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
	// Enables FETS both via comms and via the STM32 hardware overide pins

	BQ769x2_CommandSubcommand(s, FET_ENABLE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2122      	movs	r1, #34	@ 0x22
 80036fe:	0018      	movs	r0, r3
 8003700:	f7ff fc1c 	bl	8002f3c <BQ769x2_CommandSubcommand>
	HAL_GPIO_WritePin(s->CFETOFF_PORT, s->CFETOFF_PIN, GPIO_PIN_SET); // CFETOFF pin set high
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6998      	ldr	r0, [r3, #24]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7f1b      	ldrb	r3, [r3, #28]
 800370c:	2201      	movs	r2, #1
 800370e:	0019      	movs	r1, r3
 8003710:	f002 ff43 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(s->DFETOFF_PORT, s->DFETOFF_PIN, GPIO_PIN_SET); // DFETOFF pin set high
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a18      	ldr	r0, [r3, #32]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	@ 0x24
 800371c:	5c9b      	ldrb	r3, [r3, r2]
 800371e:	2201      	movs	r2, #1
 8003720:	0019      	movs	r1, r3
 8003722:	f002 ff3a 	bl	800659a <HAL_GPIO_WritePin>
	BQ769x2_CommandSubcommand(s, FET_ENABLE); //gotta do this twice, not sure why
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2122      	movs	r1, #34	@ 0x22
 800372a:	0018      	movs	r0, r3
 800372c:	f7ff fc06 	bl	8002f3c <BQ769x2_CommandSubcommand>
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <BQ769x2_ReadFETStatus>:

/* update BQState with the status of all the FETs */
void BQ769x2_ReadFETStatus(BQState *s) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

	BQ769x2_DirectCommand(s, FETStatus, 0x00, R);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	2200      	movs	r2, #0
 8003746:	217f      	movs	r1, #127	@ 0x7f
 8003748:	f7ff fccc 	bl	80030e4 <BQ769x2_DirectCommand>
	s->FET_Status = (RX_data[1] * 256 + RX_data[0]);
 800374c:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <BQ769x2_ReadFETStatus+0x74>)
 800374e:	7819      	ldrb	r1, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2270      	movs	r2, #112	@ 0x70
 8003754:	5499      	strb	r1, [r3, r2]
	s->Dsg = ((0x4 & RX_data[0]) >> 2); // discharge FET state
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <BQ769x2_ReadFETStatus+0x74>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2201      	movs	r2, #1
 8003760:	4013      	ands	r3, r2
 8003762:	b2d9      	uxtb	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	227a      	movs	r2, #122	@ 0x7a
 8003768:	5499      	strb	r1, [r3, r2]
	s->Chg = (0x1 & RX_data[0]); // charge FET state
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <BQ769x2_ReadFETStatus+0x74>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2201      	movs	r2, #1
 8003770:	4013      	ands	r3, r2
 8003772:	b2d9      	uxtb	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	227b      	movs	r2, #123	@ 0x7b
 8003778:	5499      	strb	r1, [r3, r2]
	s->PChg = ((0x2 & RX_data[0]) >> 1); // pre-charge FET state
 800377a:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <BQ769x2_ReadFETStatus+0x74>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2201      	movs	r2, #1
 8003784:	4013      	ands	r3, r2
 8003786:	b2d9      	uxtb	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	227c      	movs	r2, #124	@ 0x7c
 800378c:	5499      	strb	r1, [r3, r2]
	s->PDsg = ((0x8 & RX_data[0]) >> 3); // pre-discharge FET state
 800378e:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <BQ769x2_ReadFETStatus+0x74>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	08db      	lsrs	r3, r3, #3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	b2d9      	uxtb	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	227d      	movs	r2, #125	@ 0x7d
 80037a0:	5499      	strb	r1, [r3, r2]
}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b002      	add	sp, #8
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	200001f0 	.word	0x200001f0

080037b0 <BQ769x2_ResetShutdownPin>:
}

/* Releases the RST_SHUT pin
 * The RST_SHUT pin on the BQ76952 should be connected to the MCU board to use this function
 */
void BQ769x2_ResetShutdownPin(BQState *s) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(s->RST_SHUT_PORT, s->RST_SHUT_PIN, GPIO_PIN_RESET); // Resets RST_SHUT pin
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6918      	ldr	r0, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7d1b      	ldrb	r3, [r3, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	0019      	movs	r1, r3
 80037c4:	f002 fee9 	bl	800659a <HAL_GPIO_WritePin>
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <BQ769x2_EnterDeepSleep>:

/*Put the BQ into DEEPSLEEP by writing the DEEPSLEEP command twice. Returns 1 if successful, otherwise 0*/
uint8_t BQ769x2_EnterDeepSleep(BQState *s) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	BQ769x2_CommandSubcommand(s, DEEPSLEEP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	210f      	movs	r1, #15
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff fbad 	bl	8002f3c <BQ769x2_CommandSubcommand>
	delayUS(s->tim_hdl, 2000);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	22fa      	movs	r2, #250	@ 0xfa
 80037e8:	00d2      	lsls	r2, r2, #3
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f001 ffd0 	bl	8005792 <delayUS>
	BQ769x2_CommandSubcommand(s, DEEPSLEEP);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	210f      	movs	r1, #15
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7ff fba0 	bl	8002f3c <BQ769x2_CommandSubcommand>
	delayUS(s->tim_hdl, 2000);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	22fa      	movs	r2, #250	@ 0xfa
 8003802:	00d2      	lsls	r2, r2, #3
 8003804:	0011      	movs	r1, r2
 8003806:	0018      	movs	r0, r3
 8003808:	f001 ffc3 	bl	8005792 <delayUS>
	if (BQ769x2_ReadControlStatus(s) & 0x04) //if bit 2 is high, then device is in DEEPSLEEP. Return 1 for success
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f8ba 	bl	8003988 <BQ769x2_ReadControlStatus>
 8003814:	0003      	movs	r3, r0
 8003816:	001a      	movs	r2, r3
 8003818:	2304      	movs	r3, #4
 800381a:	4013      	ands	r3, r2
 800381c:	d001      	beq.n	8003822 <BQ769x2_EnterDeepSleep+0x52>
	{
		return 1;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <BQ769x2_EnterDeepSleep+0x54>
	}
	return 0;
 8003822:	2300      	movs	r3, #0
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}

0800382c <BQ769x2_Wake>:

/*Wake up the BQ from DEEPSLEEP by toggling RST_SHUT once. Return 1 if successfully woken up, otherwise 0*/
uint8_t BQ769x2_Wake(BQState *s) { //TODO add port/pin to this
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(s->RST_SHUT_PORT, s->RST_SHUT_PIN, GPIO_PIN_SET);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6918      	ldr	r0, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7d1b      	ldrb	r3, [r3, #20]
 800383c:	2201      	movs	r2, #1
 800383e:	0019      	movs	r1, r3
 8003840:	f002 feab 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(s->tim_hdl, 2000);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	22fa      	movs	r2, #250	@ 0xfa
 800384a:	00d2      	lsls	r2, r2, #3
 800384c:	0011      	movs	r1, r2
 800384e:	0018      	movs	r0, r3
 8003850:	f001 ff9f 	bl	8005792 <delayUS>
	HAL_GPIO_WritePin(s->RST_SHUT_PORT, s->RST_SHUT_PIN, GPIO_PIN_RESET);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6918      	ldr	r0, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7d1b      	ldrb	r3, [r3, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	0019      	movs	r1, r3
 8003860:	f002 fe9b 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(s->tim_hdl, 2000);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	22fa      	movs	r2, #250	@ 0xfa
 800386a:	00d2      	lsls	r2, r2, #3
 800386c:	0011      	movs	r1, r2
 800386e:	0018      	movs	r0, r3
 8003870:	f001 ff8f 	bl	8005792 <delayUS>

	if (BQ769x2_ReadControlStatus(s) & 0x04) { //if bit 2 is high, then device is in DEEPSLEEP
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f886 	bl	8003988 <BQ769x2_ReadControlStatus>
 800387c:	0003      	movs	r3, r0
 800387e:	001a      	movs	r2, r3
 8003880:	2304      	movs	r3, #4
 8003882:	4013      	ands	r3, r2
 8003884:	d001      	beq.n	800388a <BQ769x2_Wake+0x5e>
		return 0;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <BQ769x2_Wake+0x60>
	}

	return 1;
 800388a:	2301      	movs	r3, #1

}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <BQ769x2_Reset>:
	HAL_GPIO_WritePin(s->RST_SHUT_PORT, s->RST_SHUT_PIN, GPIO_PIN_RESET);
}

/* BQ769x2_Reset - hard reset of the BQ chip, which takes ~250ms. The 3V3 rail comes up 20ms after the reset begins. Returns 0 if the 3v3 rail is externally powered.
 * Should only be called if the 3v3 rail needs to be reset, which can fix some issues related to sleep with the STM32 after using the debugger */
uint8_t BQ769x2_Reset(BQState *s) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	uint8_t RetryCounter = 0;
 800389c:	230f      	movs	r3, #15
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
	while (RetryCounter < 20) {
 80038a4:	e012      	b.n	80038cc <BQ769x2_Reset+0x38>
		BQ769x2_CommandSubcommand(s, BQ769x2_RESET); // Resets the BQ769x2 registers and kills the 3v3 Rail
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2112      	movs	r1, #18
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff fb46 	bl	8002f3c <BQ769x2_CommandSubcommand>
		delayUS(s->tim_hdl, 1000); //wait for the 3.3v rail to die
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	22fa      	movs	r2, #250	@ 0xfa
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	0011      	movs	r1, r2
 80038ba:	0018      	movs	r0, r3
 80038bc:	f001 ff69 	bl	8005792 <delayUS>
		RetryCounter++;
 80038c0:	210f      	movs	r1, #15
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	3201      	adds	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
	while (RetryCounter < 20) {
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b13      	cmp	r3, #19
 80038d4:	d9e7      	bls.n	80038a6 <BQ769x2_Reset+0x12>
	}
	return 0; //should never get here unless 3v3 rail is externally powered by debugger
 80038d6:	2300      	movs	r3, #0

}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b004      	add	sp, #16
 80038de:	bd80      	pop	{r7, pc}

080038e0 <BQ769x2_Ready>:

/* BQ769x2_Ready - return 1 if BQ is initialized, 0 otherwise */
uint8_t BQ769x2_Ready(BQState *s) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	BQ769x2_ReadBatteryStatus(s);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 f87c 	bl	80039e8 <BQ769x2_ReadBatteryStatus>
	if (s->value_BatteryStatus & 0x300) { //if bits 8 and 9 of battery status are set, device has finished booting
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	226e      	movs	r2, #110	@ 0x6e
 80038f4:	5a9b      	ldrh	r3, [r3, r2]
 80038f6:	001a      	movs	r2, r3
 80038f8:	23c0      	movs	r3, #192	@ 0xc0
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4013      	ands	r3, r2
 80038fe:	d007      	beq.n	8003910 <BQ769x2_Ready+0x30>
		delayMS(s->tim_hdl, 60);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	213c      	movs	r1, #60	@ 0x3c
 8003906:	0018      	movs	r0, r3
 8003908:	f001 ff58 	bl	80057bc <delayMS>
		return 1;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <BQ769x2_Ready+0x32>
	};
	return 0;
 8003910:	2300      	movs	r3, #0
}
 8003912:	0018      	movs	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}

0800391a <BQ769x2_SoftWake>:

/* Quickly toggle RST_SHUT to wake the BQ chip. Simple function that doesn't block */
void BQ769x2_SoftWake(BQState *s) {
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(s->RST_SHUT_PORT, s->RST_SHUT_PIN, GPIO_PIN_SET);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6918      	ldr	r0, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7d1b      	ldrb	r3, [r3, #20]
 800392a:	2201      	movs	r2, #1
 800392c:	0019      	movs	r1, r3
 800392e:	f002 fe34 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(s->tim_hdl, 2000);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	22fa      	movs	r2, #250	@ 0xfa
 8003938:	00d2      	lsls	r2, r2, #3
 800393a:	0011      	movs	r1, r2
 800393c:	0018      	movs	r0, r3
 800393e:	f001 ff28 	bl	8005792 <delayUS>
	HAL_GPIO_WritePin(s->RST_SHUT_PORT, s->RST_SHUT_PIN, GPIO_PIN_RESET);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6918      	ldr	r0, [r3, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7d1b      	ldrb	r3, [r3, #20]
 800394a:	2200      	movs	r2, #0
 800394c:	0019      	movs	r1, r3
 800394e:	f002 fe24 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(s->tim_hdl, 2000);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	22fa      	movs	r2, #250	@ 0xfa
 8003958:	00d2      	lsls	r2, r2, #3
 800395a:	0011      	movs	r1, r2
 800395c:	0018      	movs	r0, r3
 800395e:	f001 ff18 	bl	8005792 <delayUS>
}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}

0800396a <BQ769x2_ClearFullScan>:

/* Clear the FULLSCAN bit, must be called prior to entering DEEPSLEEP*/
void BQ769x2_ClearFullScan(BQState *s){
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
	BQ769x2_DirectCommand(s, AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit, otherwise STM32 will wake up immediately
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	2301      	movs	r3, #1
 8003976:	2280      	movs	r2, #128	@ 0x80
 8003978:	2162      	movs	r1, #98	@ 0x62
 800397a:	f7ff fbb3 	bl	80030e4 <BQ769x2_DirectCommand>
}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b002      	add	sp, #8
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <BQ769x2_ReadControlStatus>:

// ********************************* BQ769x2 Status and Fault Commands   *****************************************


/* Read this register to get the Control Status Pins*/
uint16_t BQ769x2_ReadControlStatus(BQState *s) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	BQ769x2_DirectCommand(s, ControlStatus, 0x00, R);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	2300      	movs	r3, #0
 8003994:	2200      	movs	r2, #0
 8003996:	2100      	movs	r1, #0
 8003998:	f7ff fba4 	bl	80030e4 <BQ769x2_DirectCommand>
	return (RX_data[1] * 256 + RX_data[0]);
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <BQ769x2_ReadControlStatus+0x2c>)
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	4a03      	ldr	r2, [pc, #12]	@ (80039b4 <BQ769x2_ReadControlStatus+0x2c>)
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	189b      	adds	r3, r3, r2
 80039aa:	b29b      	uxth	r3, r3
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	200001f0 	.word	0x200001f0

080039b8 <BQ769x2_ReadAlarmStatus>:

/* Read this register to find out why the ALERT pin was asserted */
uint16_t BQ769x2_ReadAlarmStatus(BQState *s) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	BQ769x2_DirectCommand(s, AlarmStatus, 0x00, R);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	2300      	movs	r3, #0
 80039c4:	2200      	movs	r2, #0
 80039c6:	2162      	movs	r1, #98	@ 0x62
 80039c8:	f7ff fb8c 	bl	80030e4 <BQ769x2_DirectCommand>
	return (RX_data[1] * 256 + RX_data[0]);
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <BQ769x2_ReadAlarmStatus+0x2c>)
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4a03      	ldr	r2, [pc, #12]	@ (80039e4 <BQ769x2_ReadAlarmStatus+0x2c>)
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	b29b      	uxth	r3, r3
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200001f0 	.word	0x200001f0

080039e8 <BQ769x2_ReadBatteryStatus>:
	BQ769x2_DirectCommand(s, AlarmRawStatus, 0x00, R);
	return (RX_data[1] * 256 + RX_data[0]);
}

/* read back battery status register */
void BQ769x2_ReadBatteryStatus(BQState *s) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	// Read Battery Status with DirectCommand
	// This shows which primary protections have been triggered
	BQ769x2_DirectCommand(s, BatteryStatus, 0x00, R);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2200      	movs	r2, #0
 80039f6:	2112      	movs	r1, #18
 80039f8:	f7ff fb74 	bl	80030e4 <BQ769x2_DirectCommand>
	s->value_BatteryStatus = (RX_data[1] * 256 + RX_data[0]);
 80039fc:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <BQ769x2_ReadBatteryStatus+0x34>)
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4a05      	ldr	r2, [pc, #20]	@ (8003a1c <BQ769x2_ReadBatteryStatus+0x34>)
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	189b      	adds	r3, r3, r2
 8003a0a:	b299      	uxth	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	226e      	movs	r2, #110	@ 0x6e
 8003a10:	5299      	strh	r1, [r3, r2]
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	200001f0 	.word	0x200001f0

08003a20 <BQ769x2_ReadSafetyStatus>:
	BQ769x2_Subcommand(s, DEVICE_NUMBER, 0x00, R);
	return (RX_32Byte[1] * 256 + RX_32Byte[0]);
}

/* update safety status A,B,C and UV/OV/SCD/OCD/ProtectionsTriggered flags in BQState */
uint8_t BQ769x2_ReadSafetyStatus(BQState *s) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	// Read Safety Status A/B/C and find which bits are set
	// This shows which primary protections have been triggered
	// Return 1 at end to match structure of other functions
	BQ769x2_DirectCommand(s, SafetyStatusA, 0x00, R);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2103      	movs	r1, #3
 8003a30:	f7ff fb58 	bl	80030e4 <BQ769x2_DirectCommand>
	s->value_SafetyStatusA = (RX_data[1] * 256 + RX_data[0]);
 8003a34:	4b2f      	ldr	r3, [pc, #188]	@ (8003af4 <BQ769x2_ReadSafetyStatus+0xd4>)
 8003a36:	7819      	ldrb	r1, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2268      	movs	r2, #104	@ 0x68
 8003a3c:	5499      	strb	r1, [r3, r2]
	//Example Fault Flags
	s->UV_Fault = ((0x4 & RX_data[0]) >> 2);
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003af4 <BQ769x2_ReadSafetyStatus+0xd4>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2201      	movs	r2, #1
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b2d9      	uxtb	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2274      	movs	r2, #116	@ 0x74
 8003a50:	5499      	strb	r1, [r3, r2]
	s->OV_Fault = ((0x8 & RX_data[0]) >> 3);
 8003a52:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <BQ769x2_ReadSafetyStatus+0xd4>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	08db      	lsrs	r3, r3, #3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b2d9      	uxtb	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2275      	movs	r2, #117	@ 0x75
 8003a64:	5499      	strb	r1, [r3, r2]
	s->SCD_Fault = ((0x8 & RX_data[1]) >> 3);
 8003a66:	4b23      	ldr	r3, [pc, #140]	@ (8003af4 <BQ769x2_ReadSafetyStatus+0xd4>)
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	08db      	lsrs	r3, r3, #3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4013      	ands	r3, r2
 8003a72:	b2d9      	uxtb	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2276      	movs	r2, #118	@ 0x76
 8003a78:	5499      	strb	r1, [r3, r2]
	s->OCD_Fault = ((0x2 & RX_data[1]) >> 1);
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003af4 <BQ769x2_ReadSafetyStatus+0xd4>)
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2201      	movs	r2, #1
 8003a84:	4013      	ands	r3, r2
 8003a86:	b2d9      	uxtb	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2277      	movs	r2, #119	@ 0x77
 8003a8c:	5499      	strb	r1, [r3, r2]
	BQ769x2_DirectCommand(s, SafetyStatusB, 0x00, R);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2200      	movs	r2, #0
 8003a94:	2105      	movs	r1, #5
 8003a96:	f7ff fb25 	bl	80030e4 <BQ769x2_DirectCommand>
	s->value_SafetyStatusB = (RX_data[1] * 256 + RX_data[0]);
 8003a9a:	4b16      	ldr	r3, [pc, #88]	@ (8003af4 <BQ769x2_ReadSafetyStatus+0xd4>)
 8003a9c:	7819      	ldrb	r1, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2269      	movs	r2, #105	@ 0x69
 8003aa2:	5499      	strb	r1, [r3, r2]

	BQ769x2_DirectCommand(s, SafetyStatusC, 0x00, R);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2107      	movs	r1, #7
 8003aac:	f7ff fb1a 	bl	80030e4 <BQ769x2_DirectCommand>
	s->value_SafetyStatusC = (RX_data[1] * 256 + RX_data[0]);
 8003ab0:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <BQ769x2_ReadSafetyStatus+0xd4>)
 8003ab2:	7819      	ldrb	r1, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	226a      	movs	r2, #106	@ 0x6a
 8003ab8:	5499      	strb	r1, [r3, r2]

	if ((s->value_SafetyStatusA + s->value_SafetyStatusB
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2268      	movs	r2, #104	@ 0x68
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2269      	movs	r2, #105	@ 0x69
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	18cb      	adds	r3, r1, r3
			+ s->value_SafetyStatusC) > 1) {
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	216a      	movs	r1, #106	@ 0x6a
 8003ace:	5c52      	ldrb	r2, [r2, r1]
 8003ad0:	189b      	adds	r3, r3, r2
	if ((s->value_SafetyStatusA + s->value_SafetyStatusB
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	dd04      	ble.n	8003ae0 <BQ769x2_ReadSafetyStatus+0xc0>
		s->ProtectionsTriggered = 1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2278      	movs	r2, #120	@ 0x78
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]
 8003ade:	e003      	b.n	8003ae8 <BQ769x2_ReadSafetyStatus+0xc8>
	} else {
		s->ProtectionsTriggered = 0;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2278      	movs	r2, #120	@ 0x78
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]
	}

	return 1;
 8003ae8:	2301      	movs	r3, #1
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	200001f0 	.word	0x200001f0

08003af8 <BQ769x2_ReadVoltage>:
// ********************************* End of BQ769x2 Status and Fault Commands   *****************************************

// ********************************* BQ769x2 Measurement Commands   *****************************************

/* read a specific voltage register */
uint16_t BQ769x2_ReadVoltage(BQState *s, uint8_t command){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	000a      	movs	r2, r1
 8003b02:	1cfb      	adds	r3, r7, #3
 8003b04:	701a      	strb	r2, [r3, #0]
	BQ769x2_DirectCommand(s, command, 0x00, R);
 8003b06:	1cfb      	adds	r3, r7, #3
 8003b08:	7819      	ldrb	r1, [r3, #0]
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f7ff fae8 	bl	80030e4 <BQ769x2_DirectCommand>
	delayUS(s->tim_hdl, 2000);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	22fa      	movs	r2, #250	@ 0xfa
 8003b1a:	00d2      	lsls	r2, r2, #3
 8003b1c:	0011      	movs	r1, r2
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f001 fe37 	bl	8005792 <delayUS>
	if (command >= Cell1Voltage && command <= Cell16Voltage) {//Cells 1 through 16 (0x14 to 0x32)
 8003b24:	1cfb      	adds	r3, r7, #3
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b13      	cmp	r3, #19
 8003b2a:	d90c      	bls.n	8003b46 <BQ769x2_ReadVoltage+0x4e>
 8003b2c:	1cfb      	adds	r3, r7, #3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b32      	cmp	r3, #50	@ 0x32
 8003b32:	d808      	bhi.n	8003b46 <BQ769x2_ReadVoltage+0x4e>
		return (RX_data[1] * 256 + RX_data[0]); //voltage is reported in mV
 8003b34:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <BQ769x2_ReadVoltage+0x70>)
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <BQ769x2_ReadVoltage+0x70>)
 8003b3e:	7812      	ldrb	r2, [r2, #0]
 8003b40:	189b      	adds	r3, r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	e00b      	b.n	8003b5e <BQ769x2_ReadVoltage+0x66>
	} else { //stack, Pack, LD
		return 10 * (RX_data[1] * 256 + RX_data[0]); //voltage is reported in 0.01V units
 8003b46:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <BQ769x2_ReadVoltage+0x70>)
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	4a06      	ldr	r2, [pc, #24]	@ (8003b68 <BQ769x2_ReadVoltage+0x70>)
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	189b      	adds	r3, r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	1c1a      	adds	r2, r3, #0
 8003b56:	0092      	lsls	r2, r2, #2
 8003b58:	18d3      	adds	r3, r2, r3
 8003b5a:	18db      	adds	r3, r3, r3
 8003b5c:	b29b      	uxth	r3, r3
	}

}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	200001f0 	.word	0x200001f0

08003b6c <BQ769x2_ReadAllVoltages>:

/* update all cell voltages, stack voltage, external voltage, load detect voltage, loads into BQState */
void BQ769x2_ReadAllVoltages(BQState *s){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	for (int x = 0; x < 16; x++) { //Reads all cell voltages
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e016      	b.n	8003ba8 <BQ769x2_ReadAllVoltages+0x3c>
		s->CellVoltage[x] = BQ769x2_ReadVoltage(s, Cell1Voltage + 2 * x); //TODO check this line
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	330a      	adds	r3, #10
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	18db      	adds	r3, r3, r3
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0011      	movs	r1, r2
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff ffb5 	bl	8003af8 <BQ769x2_ReadVoltage>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	b219      	sxth	r1, r3
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3310      	adds	r3, #16
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	18d3      	adds	r3, r2, r3
 8003b9c:	3306      	adds	r3, #6
 8003b9e:	1c0a      	adds	r2, r1, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
	for (int x = 0; x < 16; x++) { //Reads all cell voltages
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	dde5      	ble.n	8003b7a <BQ769x2_ReadAllVoltages+0xe>
	}

	s->Stack_Voltage = BQ769x2_ReadVoltage(s, StackVoltage);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2134      	movs	r1, #52	@ 0x34
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff ffa0 	bl	8003af8 <BQ769x2_ReadVoltage>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	225e      	movs	r2, #94	@ 0x5e
 8003bc0:	5299      	strh	r1, [r3, r2]
	s->Pack_Voltage = BQ769x2_ReadVoltage(s, PACKPinVoltage);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2136      	movs	r1, #54	@ 0x36
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f7ff ff96 	bl	8003af8 <BQ769x2_ReadVoltage>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	0019      	movs	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2260      	movs	r2, #96	@ 0x60
 8003bd4:	5299      	strh	r1, [r3, r2]
	s->LD_Voltage = BQ769x2_ReadVoltage(s, LDPinVoltage);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2138      	movs	r1, #56	@ 0x38
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff ff8c 	bl	8003af8 <BQ769x2_ReadVoltage>
 8003be0:	0003      	movs	r3, r0
 8003be2:	0019      	movs	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2262      	movs	r2, #98	@ 0x62
 8003be8:	5299      	strh	r1, [r3, r2]
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <BQ769x2_ReadCurrent>:

/* reads pack current from the CC2 register. Returns an int16 in UserA (typically mA) */
int16_t BQ769x2_ReadCurrent(BQState *s){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	BQ769x2_DirectCommand(s, CC2Current, 0x00, R);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2200      	movs	r2, #0
 8003c02:	213a      	movs	r1, #58	@ 0x3a
 8003c04:	f7ff fa6e 	bl	80030e4 <BQ769x2_DirectCommand>
	return (RX_data[1] * 256 + RX_data[0]); // cell current is reported as an int16 in UserAmps
 8003c08:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <BQ769x2_ReadCurrent+0x30>)
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4a04      	ldr	r2, [pc, #16]	@ (8003c24 <BQ769x2_ReadCurrent+0x30>)
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b21b      	sxth	r3, r3
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	200001f0 	.word	0x200001f0

08003c28 <BQ769x2_ReadTemperature>:

/* reads a specific temperature register as a float*/
float BQ769x2_ReadTemperature(BQState *s, uint8_t command) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	000a      	movs	r2, r1
 8003c32:	1cfb      	adds	r3, r7, #3
 8003c34:	701a      	strb	r2, [r3, #0]
	BQ769x2_DirectCommand(s, command, 0x00, R);
 8003c36:	1cfb      	adds	r3, r7, #3
 8003c38:	7819      	ldrb	r1, [r3, #0]
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f7ff fa50 	bl	80030e4 <BQ769x2_DirectCommand>
	return (0.1 * (float) (RX_data[1] * 256 + RX_data[0])) - 273.15; // converts from 0.1K to Celcius
 8003c44:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <BQ769x2_ReadTemperature+0x64>)
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	4a10      	ldr	r2, [pc, #64]	@ (8003c8c <BQ769x2_ReadTemperature+0x64>)
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7fc fe43 	bl	80008dc <__aeabi_i2f>
 8003c56:	1c03      	adds	r3, r0, #0
 8003c58:	1c18      	adds	r0, r3, #0
 8003c5a:	f7fe fd47 	bl	80026ec <__aeabi_f2d>
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c90 <BQ769x2_ReadTemperature+0x68>)
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <BQ769x2_ReadTemperature+0x6c>)
 8003c62:	f7fd fe2f 	bl	80018c4 <__aeabi_dmul>
 8003c66:	0002      	movs	r2, r0
 8003c68:	000b      	movs	r3, r1
 8003c6a:	0010      	movs	r0, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c98 <BQ769x2_ReadTemperature+0x70>)
 8003c70:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <BQ769x2_ReadTemperature+0x74>)
 8003c72:	f7fe f8ef 	bl	8001e54 <__aeabi_dsub>
 8003c76:	0002      	movs	r2, r0
 8003c78:	000b      	movs	r3, r1
 8003c7a:	0010      	movs	r0, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	f7fe fd7d 	bl	800277c <__aeabi_d2f>
 8003c82:	1c03      	adds	r3, r0, #0
}
 8003c84:	1c18      	adds	r0, r3, #0
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200001f0 	.word	0x200001f0
 8003c90:	9999999a 	.word	0x9999999a
 8003c94:	3fb99999 	.word	0x3fb99999
 8003c98:	66666666 	.word	0x66666666
 8003c9c:	40711266 	.word	0x40711266

08003ca0 <BQ769x2_ReadBalancingStatus>:

/* update CB_ActiveCells with a 2 byte bitfield of which cells are balancing */
void BQ769x2_ReadBalancingStatus(BQState *s) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	BQ769x2_Subcommand(s, CB_ACTIVE_CELLS, 0x00, R);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	2200      	movs	r2, #0
 8003cae:	2183      	movs	r1, #131	@ 0x83
 8003cb0:	f7ff f96c 	bl	8002f8c <BQ769x2_Subcommand>
	s->CB_ActiveCells = (RX_32Byte[1] * 256 + RX_32Byte[0]);
 8003cb4:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <BQ769x2_ReadBalancingStatus+0x34>)
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4a05      	ldr	r2, [pc, #20]	@ (8003cd4 <BQ769x2_ReadBalancingStatus+0x34>)
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	b299      	uxth	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2272      	movs	r2, #114	@ 0x72
 8003cc8:	5299      	strh	r1, [r3, r2]
}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	20000210 	.word	0x20000210

08003cd8 <BQ769x2_ReadBatteryData>:
	s->AccumulatedCharge_Time = ((RX_32Byte[11] << 24) + (RX_32Byte[10] << 16)
			+ (RX_32Byte[9] << 8) + RX_32Byte[8]); //Bytes 8-11
}

/* update BQstate. Returns 1 if successful, 0 if failed or data not yet ready */
uint8_t BQ769x2_ReadBatteryData(BQState *s) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	s->AlarmBits = BQ769x2_ReadAlarmStatus(s);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7ff fe68 	bl	80039b8 <BQ769x2_ReadAlarmStatus>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2266      	movs	r2, #102	@ 0x66
 8003cf0:	5299      	strh	r1, [r3, r2]
	if (s->AlarmBits & 0x80) { // Check if FULLSCAN is complete. If set, new measurements are available
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2266      	movs	r2, #102	@ 0x66
 8003cf6:	5a9b      	ldrh	r3, [r3, r2]
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d038      	beq.n	8003d72 <BQ769x2_ReadBatteryData+0x9a>
		s->Pack_Current = BQ769x2_ReadCurrent(s); //needed for STM32_HandleInactivity, do not remove
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff ff76 	bl	8003bf4 <BQ769x2_ReadCurrent>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2264      	movs	r2, #100	@ 0x64
 8003d10:	5299      	strh	r1, [r3, r2]
		BQ769x2_ReadAllVoltages(s); //get most recent voltages
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff ff29 	bl	8003b6c <BQ769x2_ReadAllVoltages>
		BQ769x2_ReadBalancingStatus(s); //needed for balancing status message
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7ff ffbf 	bl	8003ca0 <BQ769x2_ReadBalancingStatus>
		s->Temperature[0] = BQ769x2_ReadTemperature(s, TS1Temperature);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2170      	movs	r1, #112	@ 0x70
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7ff ff7e 	bl	8003c28 <BQ769x2_ReadTemperature>
 8003d2c:	1c02      	adds	r2, r0, #0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	64da      	str	r2, [r3, #76]	@ 0x4c
		s->Temperature[1] = BQ769x2_ReadTemperature(s, TS3Temperature);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2174      	movs	r1, #116	@ 0x74
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7ff ff76 	bl	8003c28 <BQ769x2_ReadTemperature>
 8003d3c:	1c02      	adds	r2, r0, #0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	651a      	str	r2, [r3, #80]	@ 0x50
		s->Temperature[2] = BQ769x2_ReadTemperature(s, HDQTemperature);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2176      	movs	r1, #118	@ 0x76
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff ff6e 	bl	8003c28 <BQ769x2_ReadTemperature>
 8003d4c:	1c02      	adds	r2, r0, #0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
		s->Temperature[3] = BQ769x2_ReadTemperature(s, IntTemperature);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2168      	movs	r1, #104	@ 0x68
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7ff ff66 	bl	8003c28 <BQ769x2_ReadTemperature>
 8003d5c:	1c02      	adds	r2, r0, #0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	@ 0x58

		BQ769x2_DirectCommand(s, AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	2301      	movs	r3, #1
 8003d66:	2280      	movs	r2, #128	@ 0x80
 8003d68:	2162      	movs	r1, #98	@ 0x62
 8003d6a:	f7ff f9bb 	bl	80030e4 <BQ769x2_DirectCommand>
		return 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <BQ769x2_ReadBatteryData+0x9c>
	} else {
		return 0;
 8003d72:	2300      	movs	r3, #0
	}
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <BQ769x2_CalcMinMaxCellV>:

/* calculate min and max voltage, update globals. */
void BQ769x2_CalcMinMaxCellV(BQState *s) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	// Assume the first element is the minimum
	int maxV = 50;
 8003d84:	2332      	movs	r3, #50	@ 0x32
 8003d86:	617b      	str	r3, [r7, #20]
	int minV = 6000;
 8003d88:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <BQ769x2_CalcMinMaxCellV+0xa4>)
 8003d8a:	613b      	str	r3, [r7, #16]

	// Loop through the array to find the minimum
	for (int i = 0; i < 16; i++) {
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e035      	b.n	8003dfe <BQ769x2_CalcMinMaxCellV+0x82>
		if (s->ActiveCells & (1 << i)) {
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	001a      	movs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	411a      	asrs	r2, r3
 8003d9c:	0013      	movs	r3, r2
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4013      	ands	r3, r2
 8003da2:	d029      	beq.n	8003df8 <BQ769x2_CalcMinMaxCellV+0x7c>
			if (s->CellVoltage[i] < minV) {
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3310      	adds	r3, #16
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	18d3      	adds	r3, r2, r3
 8003dae:	3306      	adds	r3, #6
 8003db0:	2200      	movs	r2, #0
 8003db2:	5e9b      	ldrsh	r3, [r3, r2]
 8003db4:	001a      	movs	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	dd08      	ble.n	8003dce <BQ769x2_CalcMinMaxCellV+0x52>
				minV = s->CellVoltage[i];
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	3306      	adds	r3, #6
 8003dc8:	2200      	movs	r2, #0
 8003dca:	5e9b      	ldrsh	r3, [r3, r2]
 8003dcc:	613b      	str	r3, [r7, #16]
			}
			if (s->CellVoltage[i] > maxV) {
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	18d3      	adds	r3, r2, r3
 8003dd8:	3306      	adds	r3, #6
 8003dda:	2200      	movs	r2, #0
 8003ddc:	5e9b      	ldrsh	r3, [r3, r2]
 8003dde:	001a      	movs	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	da08      	bge.n	8003df8 <BQ769x2_CalcMinMaxCellV+0x7c>
				maxV = s->CellVoltage[i];
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3310      	adds	r3, #16
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	18d3      	adds	r3, r2, r3
 8003df0:	3306      	adds	r3, #6
 8003df2:	2200      	movs	r2, #0
 8003df4:	5e9b      	ldrsh	r3, [r3, r2]
 8003df6:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 16; i++) {
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	ddc6      	ble.n	8003d92 <BQ769x2_CalcMinMaxCellV+0x16>
			}
		}
	}
	s->CellMinV = minV;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	b219      	sxth	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2246      	movs	r2, #70	@ 0x46
 8003e0c:	5299      	strh	r1, [r3, r2]
	s->CellMaxV = maxV;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	b219      	sxth	r1, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2248      	movs	r2, #72	@ 0x48
 8003e16:	5299      	strh	r1, [r3, r2]
}
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b006      	add	sp, #24
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	00001770 	.word	0x00001770

08003e24 <BQ769x2_CalcMinMaxCellT>:

/* calculate min and max temp, update globals. hard coded to use only the first 3 temperatures. Temperature[3] is die temp */
void BQ769x2_CalcMinMaxCellT(BQState *s) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	// Assume the first element is the minimum
	float minT = 60;
 8003e2c:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <BQ769x2_CalcMinMaxCellT+0xa4>)
 8003e2e:	617b      	str	r3, [r7, #20]
	float maxT = -50;
 8003e30:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <BQ769x2_CalcMinMaxCellT+0xa8>)
 8003e32:	613b      	str	r3, [r7, #16]

	// Loop through the array to find the minimum
	for (int i = 0; i < 3; i++) {
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e02c      	b.n	8003e94 <BQ769x2_CalcMinMaxCellT+0x70>
		if (s->Temperature[i] < minT){
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3312      	adds	r3, #18
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	18d3      	adds	r3, r2, r3
 8003e44:	3304      	adds	r3, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	1c19      	adds	r1, r3, #0
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f7fc fb52 	bl	80004f4 <__aeabi_fcmpgt>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d007      	beq.n	8003e64 <BQ769x2_CalcMinMaxCellT+0x40>
			minT = s->Temperature[i];
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3312      	adds	r3, #18
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	18d3      	adds	r3, r2, r3
 8003e5e:	3304      	adds	r3, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	617b      	str	r3, [r7, #20]
		}
		if (s->Temperature[i] > maxT){
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3312      	adds	r3, #18
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	18d3      	adds	r3, r2, r3
 8003e6e:	3304      	adds	r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1c19      	adds	r1, r3, #0
 8003e74:	6938      	ldr	r0, [r7, #16]
 8003e76:	f7fc fb29 	bl	80004cc <__aeabi_fcmplt>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d007      	beq.n	8003e8e <BQ769x2_CalcMinMaxCellT+0x6a>
			maxT = s->Temperature[i];
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3312      	adds	r3, #18
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	18d3      	adds	r3, r2, r3
 8003e88:	3304      	adds	r3, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++) {
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3301      	adds	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	ddcf      	ble.n	8003e3a <BQ769x2_CalcMinMaxCellT+0x16>
		}
	}
	s->CellMinT = FloatToInt8t(minT);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	1c18      	adds	r0, r3, #0
 8003e9e:	f001 fcdd 	bl	800585c <FloatToInt8t>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	225c      	movs	r2, #92	@ 0x5c
 8003eaa:	5499      	strb	r1, [r3, r2]
	s->CellMaxT = FloatToInt8t(maxT);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1c18      	adds	r0, r3, #0
 8003eb0:	f001 fcd4 	bl	800585c <FloatToInt8t>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	225d      	movs	r2, #93	@ 0x5d
 8003ebc:	5499      	strb	r1, [r3, r2]
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b006      	add	sp, #24
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	42700000 	.word	0x42700000
 8003ecc:	c2480000 	.word	0xc2480000

08003ed0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ed4:	f3bf 8f4f 	dsb	sy
}
 8003ed8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eda:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <__NVIC_SystemReset+0x1c>)
 8003edc:	4a04      	ldr	r2, [pc, #16]	@ (8003ef0 <__NVIC_SystemReset+0x20>)
 8003ede:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ee0:	f3bf 8f4f 	dsb	sy
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	e7fd      	b.n	8003ee6 <__NVIC_SystemReset+0x16>
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	e000ed00 	.word	0xe000ed00
 8003ef0:	05fa0004 	.word	0x05fa0004

08003ef4 <UART_CRC>:
}

/* UART Functions
 * ===================== */
//calculate faraday modbus CRC
uint16_t UART_CRC(uint8_t *buf, uint16_t size) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	000a      	movs	r2, r1
 8003efe:	1cbb      	adds	r3, r7, #2
 8003f00:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0xFFFF;
 8003f02:	230e      	movs	r3, #14
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	2201      	movs	r2, #1
 8003f08:	4252      	negs	r2, r2
 8003f0a:	801a      	strh	r2, [r3, #0]

	uint8_t n;
	uint8_t i;
	for (n = 0; n < size; n++) {
 8003f0c:	230d      	movs	r3, #13
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e03a      	b.n	8003f8c <UART_CRC+0x98>
		crc = crc ^ buf[n];
 8003f16:	230d      	movs	r3, #13
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	18d3      	adds	r3, r2, r3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	0019      	movs	r1, r3
 8003f24:	220e      	movs	r2, #14
 8003f26:	18bb      	adds	r3, r7, r2
 8003f28:	18ba      	adds	r2, r7, r2
 8003f2a:	8812      	ldrh	r2, [r2, #0]
 8003f2c:	404a      	eors	r2, r1
 8003f2e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8003f30:	230c      	movs	r3, #12
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e01d      	b.n	8003f76 <UART_CRC+0x82>
			if (crc & 1) {
 8003f3a:	210e      	movs	r1, #14
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	4013      	ands	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <UART_CRC+0x6a>
				crc = crc >> 1;
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	187a      	adds	r2, r7, r1
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	0852      	lsrs	r2, r2, #1
 8003f4e:	801a      	strh	r2, [r3, #0]
				crc = crc ^ 0xA001;
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	187a      	adds	r2, r7, r1
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	4915      	ldr	r1, [pc, #84]	@ (8003fac <UART_CRC+0xb8>)
 8003f58:	404a      	eors	r2, r1
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	e005      	b.n	8003f6a <UART_CRC+0x76>
			} else {
				crc = crc >> 1;
 8003f5e:	220e      	movs	r2, #14
 8003f60:	18bb      	adds	r3, r7, r2
 8003f62:	18ba      	adds	r2, r7, r2
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	0852      	lsrs	r2, r2, #1
 8003f68:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8003f6a:	210c      	movs	r1, #12
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	3201      	adds	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	230c      	movs	r3, #12
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b07      	cmp	r3, #7
 8003f7e:	d9dc      	bls.n	8003f3a <UART_CRC+0x46>
	for (n = 0; n < size; n++) {
 8003f80:	210d      	movs	r1, #13
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	3201      	adds	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	230d      	movs	r3, #13
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	1cba      	adds	r2, r7, #2
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d8bc      	bhi.n	8003f16 <UART_CRC+0x22>
			}
		}
	}
	return crc;
 8003f9c:	230e      	movs	r3, #14
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	881b      	ldrh	r3, [r3, #0]
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b004      	add	sp, #16
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	ffffa001 	.word	0xffffa001

08003fb0 <THVD2410_Sleep>:

void THVD2410_Sleep() {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_RESET);
 8003fb4:	23a0      	movs	r3, #160	@ 0xa0
 8003fb6:	05db      	lsls	r3, r3, #23
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2140      	movs	r1, #64	@ 0x40
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f002 faec 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET);
 8003fc2:	23a0      	movs	r3, #160	@ 0xa0
 8003fc4:	05db      	lsls	r3, r3, #23
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2180      	movs	r1, #128	@ 0x80
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f002 fae5 	bl	800659a <HAL_GPIO_WritePin>
}
 8003fd0:	46c0      	nop			@ (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <THVD2410_Transmit>:
;
void THVD2410_Transmit() {
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_SET);
 8003fda:	23a0      	movs	r3, #160	@ 0xa0
 8003fdc:	05db      	lsls	r3, r3, #23
 8003fde:	2201      	movs	r2, #1
 8003fe0:	2140      	movs	r1, #64	@ 0x40
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f002 fad9 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET);
 8003fe8:	23a0      	movs	r3, #160	@ 0xa0
 8003fea:	05db      	lsls	r3, r3, #23
 8003fec:	2201      	movs	r2, #1
 8003fee:	2180      	movs	r1, #128	@ 0x80
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f002 fad2 	bl	800659a <HAL_GPIO_WritePin>
}
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <THVD2410_Receive>:
;
void THVD2410_Receive() {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_RESET);
 8004000:	23a0      	movs	r3, #160	@ 0xa0
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	2200      	movs	r2, #0
 8004006:	2140      	movs	r1, #64	@ 0x40
 8004008:	0018      	movs	r0, r3
 800400a:	f002 fac6 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_RESET);
 800400e:	23a0      	movs	r3, #160	@ 0xa0
 8004010:	05db      	lsls	r3, r3, #23
 8004012:	2200      	movs	r2, #0
 8004014:	2180      	movs	r1, #128	@ 0x80
 8004016:	0018      	movs	r0, r3
 8004018:	f002 fabf 	bl	800659a <HAL_GPIO_WritePin>
}
 800401c:	46c0      	nop			@ (mov r8, r8)
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <UART_WaitForCommand>:
;

/* interrupt-safe function to clear RxData and wait for a new message */
void UART_WaitForCommand() {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0

	if (!UartBusy) {
 800402a:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <UART_WaitForCommand+0x54>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11d      	bne.n	8004070 <UART_WaitForCommand+0x4c>
		//set RX buffer to all zeros
		for (int i = 0; i < 8; i++) {
 8004034:	2300      	movs	r3, #0
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	e007      	b.n	800404a <UART_WaitForCommand+0x26>
			UART_RxData[i] = 0;
 800403a:	4a10      	ldr	r2, [pc, #64]	@ (800407c <UART_WaitForCommand+0x58>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	18d3      	adds	r3, r2, r3
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3301      	adds	r3, #1
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b07      	cmp	r3, #7
 800404e:	ddf4      	ble.n	800403a <UART_WaitForCommand+0x16>
		}

		//set transciever to receive
		THVD2410_Receive();
 8004050:	f7ff ffd4 	bl	8003ffc <THVD2410_Receive>

		//start recieve-to-idle interrupt
		huart2.RxState = HAL_UART_STATE_READY;
 8004054:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <UART_WaitForCommand+0x5c>)
 8004056:	2280      	movs	r2, #128	@ 0x80
 8004058:	2120      	movs	r1, #32
 800405a:	5099      	str	r1, [r3, r2]
		if (HAL_UARTEx_ReceiveToIdle_IT(&huart2, UART_RxData, 8) != HAL_OK) {
 800405c:	4907      	ldr	r1, [pc, #28]	@ (800407c <UART_WaitForCommand+0x58>)
 800405e:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <UART_WaitForCommand+0x5c>)
 8004060:	2208      	movs	r2, #8
 8004062:	0018      	movs	r0, r3
 8004064:	f006 f876 	bl	800a154 <HAL_UARTEx_ReceiveToIdle_IT>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d001      	beq.n	8004070 <UART_WaitForCommand+0x4c>
			Error_Handler();
 800406c:	f001 f93e 	bl	80052ec <Error_Handler>
		}
	}

}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b002      	add	sp, #8
 8004076:	bd80      	pop	{r7, pc}
 8004078:	200003dc 	.word	0x200003dc
 800407c:	20000474 	.word	0x20000474
 8004080:	20000320 	.word	0x20000320

08004084 <UART_PrepCellVoltageMessage>:

/*
 * Prep cell balancing message (30 bytes). Refer to documentation for packet format
 */
uint8_t UART_PrepCellVoltageMessage() {
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0

	for (int i = 0; i < 32; i++) {
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	e007      	b.n	80040a0 <UART_PrepCellVoltageMessage+0x1c>
		UART_TxData[i] = 0;
 8004090:	4a38      	ldr	r2, [pc, #224]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	18d3      	adds	r3, r2, r3
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3301      	adds	r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b1f      	cmp	r3, #31
 80040a4:	ddf4      	ble.n	8004090 <UART_PrepCellVoltageMessage+0xc>
	}

	//device, fxn, length
	UART_TxData[0] = 0x02;
 80040a6:	4b33      	ldr	r3, [pc, #204]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 80040a8:	2202      	movs	r2, #2
 80040aa:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 80040ac:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 80040ae:	2203      	movs	r2, #3
 80040b0:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x18;
 80040b2:	4b30      	ldr	r3, [pc, #192]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 80040b4:	2218      	movs	r2, #24
 80040b6:	709a      	strb	r2, [r3, #2]

	// loop through voltage field and construct uints
	int k = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 16; i++) {
 80040bc:	2300      	movs	r3, #0
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	e038      	b.n	8004134 <UART_PrepCellVoltageMessage+0xb0>
		if (batt.ActiveCells & (1 << i)) {
 80040c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004178 <UART_PrepCellVoltageMessage+0xf4>)
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	001a      	movs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	411a      	asrs	r2, r3
 80040cc:	0013      	movs	r3, r2
 80040ce:	2201      	movs	r2, #1
 80040d0:	4013      	ands	r3, r2
 80040d2:	d02c      	beq.n	800412e <UART_PrepCellVoltageMessage+0xaa>
			UART_TxData[2 * k + 3] = (batt.CellVoltage[i] * 2 / 3) >> 8;
 80040d4:	4a28      	ldr	r2, [pc, #160]	@ (8004178 <UART_PrepCellVoltageMessage+0xf4>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3310      	adds	r3, #16
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	3306      	adds	r3, #6
 80040e0:	2200      	movs	r2, #0
 80040e2:	5e9b      	ldrsh	r3, [r3, r2]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2103      	movs	r1, #3
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7fc f8b3 	bl	8000254 <__divsi3>
 80040ee:	0003      	movs	r3, r0
 80040f0:	121a      	asrs	r2, r3, #8
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	3303      	adds	r3, #3
 80040f8:	b2d1      	uxtb	r1, r2
 80040fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 80040fc:	54d1      	strb	r1, [r2, r3]
			UART_TxData[2 * k + 4] = (batt.CellVoltage[i] * 2 / 3) & 0xFF;
 80040fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004178 <UART_PrepCellVoltageMessage+0xf4>)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3310      	adds	r3, #16
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	18d3      	adds	r3, r2, r3
 8004108:	3306      	adds	r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	5e9b      	ldrsh	r3, [r3, r2]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2103      	movs	r1, #3
 8004112:	0018      	movs	r0, r3
 8004114:	f7fc f89e 	bl	8000254 <__divsi3>
 8004118:	0003      	movs	r3, r0
 800411a:	001a      	movs	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3302      	adds	r3, #2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	b2d1      	uxtb	r1, r2
 8004124:	4a13      	ldr	r2, [pc, #76]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 8004126:	54d1      	strb	r1, [r2, r3]

			//UART_TxData[2 * k + 3] = (3100 * 2 / 3) >> 8;
			//UART_TxData[2 * k + 4] = (3100 * 2 / 3) & 0xFF;
			k++;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	3301      	adds	r3, #1
 800412c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 16; i++) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3301      	adds	r3, #1
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	ddc3      	ble.n	80040c2 <UART_PrepCellVoltageMessage+0x3e>
		}
	}

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 27);
 800413a:	1cbc      	adds	r4, r7, #2
 800413c:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 800413e:	211b      	movs	r1, #27
 8004140:	0018      	movs	r0, r3
 8004142:	f7ff fed7 	bl	8003ef4 <UART_CRC>
 8004146:	0003      	movs	r3, r0
 8004148:	8023      	strh	r3, [r4, #0]
	UART_TxData[27] = crc & 0xFF;
 800414a:	1cbb      	adds	r3, r7, #2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 8004152:	76da      	strb	r2, [r3, #27]
	UART_TxData[28] = crc >> 8;
 8004154:	1cbb      	adds	r3, r7, #2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	b29b      	uxth	r3, r3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 8004160:	771a      	strb	r2, [r3, #28]
	UART_TxData[29] = 0xFF; //add extra byte of zeros to match faraday protocol
 8004162:	4b04      	ldr	r3, [pc, #16]	@ (8004174 <UART_PrepCellVoltageMessage+0xf0>)
 8004164:	22ff      	movs	r2, #255	@ 0xff
 8004166:	775a      	strb	r2, [r3, #29]

	return 30;
 8004168:	231e      	movs	r3, #30
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b005      	add	sp, #20
 8004170:	bd90      	pop	{r4, r7, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	2000047c 	.word	0x2000047c
 8004178:	200003ec 	.word	0x200003ec

0800417c <UART_PrepCellBalancingMessage>:

/*
 * Prep cell balancing message (8 bytes). Refer to documentation for packet format
 */
uint8_t UART_PrepCellBalancingMessage() {
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0

	for (int i = 0; i < 32; i++) {
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e007      	b.n	8004198 <UART_PrepCellBalancingMessage+0x1c>
		UART_TxData[i] = 0;
 8004188:	4a37      	ldr	r2, [pc, #220]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	18d3      	adds	r3, r2, r3
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3301      	adds	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b1f      	cmp	r3, #31
 800419c:	ddf4      	ble.n	8004188 <UART_PrepCellBalancingMessage+0xc>
	}

	UART_TxData[0] = 0x02;
 800419e:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 80041a4:	4b30      	ldr	r3, [pc, #192]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 80041a6:	2203      	movs	r2, #3
 80041a8:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x02;
 80041aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 80041ac:	2202      	movs	r2, #2
 80041ae:	709a      	strb	r2, [r3, #2]

	// CB_ActiveCells is a bitfield of which of 16 channels are active. Bike expects a bitfield with the first byte blank and the remainder a bitfield
	uint16_t CB = 0x00;
 80041b0:	2312      	movs	r3, #18
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2200      	movs	r2, #0
 80041b6:	801a      	strh	r2, [r3, #0]
	int k = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	e025      	b.n	800420e <UART_PrepCellBalancingMessage+0x92>
		if (batt.ActiveCells & (1 << i)) {
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <UART_PrepCellBalancingMessage+0xf0>)
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	001a      	movs	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	411a      	asrs	r2, r3
 80041cc:	0013      	movs	r3, r2
 80041ce:	2201      	movs	r2, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	d019      	beq.n	8004208 <UART_PrepCellBalancingMessage+0x8c>
			//i is the cell number active cell bitfield (0xAAFF)
			//k is the cell number in faraday index
			if (batt.CB_ActiveCells & (1 << i)) {
 80041d4:	4b25      	ldr	r3, [pc, #148]	@ (800426c <UART_PrepCellBalancingMessage+0xf0>)
 80041d6:	2272      	movs	r2, #114	@ 0x72
 80041d8:	5a9b      	ldrh	r3, [r3, r2]
 80041da:	001a      	movs	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	411a      	asrs	r2, r3
 80041e0:	0013      	movs	r3, r2
 80041e2:	2201      	movs	r2, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	d00c      	beq.n	8004202 <UART_PrepCellBalancingMessage+0x86>
				CB = CB | (1 << k); //TODO determine whether the cell number is mapped correctly
 80041e8:	2201      	movs	r2, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	409a      	lsls	r2, r3
 80041ee:	0013      	movs	r3, r2
 80041f0:	b21a      	sxth	r2, r3
 80041f2:	2112      	movs	r1, #18
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	2000      	movs	r0, #0
 80041f8:	5e1b      	ldrsh	r3, [r3, r0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	801a      	strh	r2, [r3, #0]
			};
			k++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3301      	adds	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3301      	adds	r3, #1
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b0f      	cmp	r3, #15
 8004212:	ddd6      	ble.n	80041c2 <UART_PrepCellBalancingMessage+0x46>
		}
	}

	UART_TxData[3] = CB >> 8;
 8004214:	2112      	movs	r1, #18
 8004216:	187b      	adds	r3, r7, r1
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 8004222:	70da      	strb	r2, [r3, #3]
	UART_TxData[4] = CB & 0xFF;
 8004224:	187b      	adds	r3, r7, r1
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b0f      	ldr	r3, [pc, #60]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 800422c:	711a      	strb	r2, [r3, #4]

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 5);
 800422e:	1dbc      	adds	r4, r7, #6
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 8004232:	2105      	movs	r1, #5
 8004234:	0018      	movs	r0, r3
 8004236:	f7ff fe5d 	bl	8003ef4 <UART_CRC>
 800423a:	0003      	movs	r3, r0
 800423c:	8023      	strh	r3, [r4, #0]
	UART_TxData[5] = crc & 0xFF;
 800423e:	1dbb      	adds	r3, r7, #6
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 8004246:	715a      	strb	r2, [r3, #5]
	UART_TxData[6] = crc >> 8;
 8004248:	1dbb      	adds	r3, r7, #6
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	b29b      	uxth	r3, r3
 8004250:	b2da      	uxtb	r2, r3
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 8004254:	719a      	strb	r2, [r3, #6]
	UART_TxData[7] = 0xFF; //add extra byte of zeros to match faraday protocol
 8004256:	4b04      	ldr	r3, [pc, #16]	@ (8004268 <UART_PrepCellBalancingMessage+0xec>)
 8004258:	22ff      	movs	r2, #255	@ 0xff
 800425a:	71da      	strb	r2, [r3, #7]
	return 8;
 800425c:	2308      	movs	r3, #8
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b007      	add	sp, #28
 8004264:	bd90      	pop	{r4, r7, pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	2000047c 	.word	0x2000047c
 800426c:	200003ec 	.word	0x200003ec

08004270 <UART_PrepBatteryStatusMessage1>:
 *
 * Hard coded for now
 * Example request 0x2 0x3 0x0 0x0 0x0 0x1 0x84 0x39
 * Example response 0x2 0x3 0x2 0x0 0x0 0xfc 0x44
 */
uint8_t UART_PrepBatteryStatusMessage1() {
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0

	for (int i = 0; i < 32; i++) {
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	e007      	b.n	800428c <UART_PrepBatteryStatusMessage1+0x1c>
		UART_TxData[i] = 0;
 800427c:	4a1a      	ldr	r2, [pc, #104]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	18d3      	adds	r3, r2, r3
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3301      	adds	r3, #1
 800428a:	607b      	str	r3, [r7, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b1f      	cmp	r3, #31
 8004290:	ddf4      	ble.n	800427c <UART_PrepBatteryStatusMessage1+0xc>
	}

	UART_TxData[0] = 0x02;
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 8004294:	2202      	movs	r2, #2
 8004296:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 8004298:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 800429a:	2203      	movs	r2, #3
 800429c:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x02;
 800429e:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 80042a0:	2202      	movs	r2, #2
 80042a2:	709a      	strb	r2, [r3, #2]
	UART_TxData[3] = 0x00;
 80042a4:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	70da      	strb	r2, [r3, #3]
	UART_TxData[4] = 0x00;
 80042aa:	4b0f      	ldr	r3, [pc, #60]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	711a      	strb	r2, [r3, #4]

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 5);
 80042b0:	1cbc      	adds	r4, r7, #2
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 80042b4:	2105      	movs	r1, #5
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff fe1c 	bl	8003ef4 <UART_CRC>
 80042bc:	0003      	movs	r3, r0
 80042be:	8023      	strh	r3, [r4, #0]
	UART_TxData[5] = crc & 0xFF;
 80042c0:	1cbb      	adds	r3, r7, #2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 80042c8:	715a      	strb	r2, [r3, #5]
	UART_TxData[6] = crc >> 8;
 80042ca:	1cbb      	adds	r3, r7, #2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 80042d6:	719a      	strb	r2, [r3, #6]
	UART_TxData[7] = 0xFF; //add extra byte of zeros to match faraday protocol
 80042d8:	4b03      	ldr	r3, [pc, #12]	@ (80042e8 <UART_PrepBatteryStatusMessage1+0x78>)
 80042da:	22ff      	movs	r2, #255	@ 0xff
 80042dc:	71da      	strb	r2, [r3, #7]
	return 8;
 80042de:	2308      	movs	r3, #8
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b003      	add	sp, #12
 80042e6:	bd90      	pop	{r4, r7, pc}
 80042e8:	2000047c 	.word	0x2000047c

080042ec <UART_PrepBatteryStatusMessage2>:
 * Fill UART_TxData to battery status message 2 - purpose unknown. Hard coded for now
 *
 * Example request 0x2 0x3 0x0 0x1 0x0 0x1 0xd5 0xf9
 * Example response 0x2 0x3 0x2 0x0 0x19 0x3d 0x8e
 */
uint8_t UART_PrepBatteryStatusMessage2() {
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0

	//get highest cell temp

	for (int i = 0; i < 32; i++) {
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e007      	b.n	8004308 <UART_PrepBatteryStatusMessage2+0x1c>
		UART_TxData[i] = 0;
 80042f8:	4a1c      	ldr	r2, [pc, #112]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3301      	adds	r3, #1
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b1f      	cmp	r3, #31
 800430c:	ddf4      	ble.n	80042f8 <UART_PrepBatteryStatusMessage2+0xc>
	}

	UART_TxData[0] = 0x02;
 800430e:	4b17      	ldr	r3, [pc, #92]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 8004310:	2202      	movs	r2, #2
 8004312:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 8004314:	4b15      	ldr	r3, [pc, #84]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 8004316:	2203      	movs	r2, #3
 8004318:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x02;
 800431a:	4b14      	ldr	r3, [pc, #80]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 800431c:	2202      	movs	r2, #2
 800431e:	709a      	strb	r2, [r3, #2]
	UART_TxData[3] = 0x00;
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 8004322:	2200      	movs	r2, #0
 8004324:	70da      	strb	r2, [r3, #3]
	// UART_TxData[4] = 0x19; old hard coded value
	UART_TxData[4] = batt.CellMaxT;
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <UART_PrepBatteryStatusMessage2+0x84>)
 8004328:	225d      	movs	r2, #93	@ 0x5d
 800432a:	569b      	ldrsb	r3, [r3, r2]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b0f      	ldr	r3, [pc, #60]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 8004330:	711a      	strb	r2, [r3, #4]

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 5);
 8004332:	1cbc      	adds	r4, r7, #2
 8004334:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 8004336:	2105      	movs	r1, #5
 8004338:	0018      	movs	r0, r3
 800433a:	f7ff fddb 	bl	8003ef4 <UART_CRC>
 800433e:	0003      	movs	r3, r0
 8004340:	8023      	strh	r3, [r4, #0]
	UART_TxData[5] = crc & 0xFF;
 8004342:	1cbb      	adds	r3, r7, #2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	4b08      	ldr	r3, [pc, #32]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 800434a:	715a      	strb	r2, [r3, #5]
	UART_TxData[6] = crc >> 8;
 800434c:	1cbb      	adds	r3, r7, #2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	b29b      	uxth	r3, r3
 8004354:	b2da      	uxtb	r2, r3
 8004356:	4b05      	ldr	r3, [pc, #20]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 8004358:	719a      	strb	r2, [r3, #6]

	UART_TxData[7] = 0xFF; //add extra byte of zeros to match faraday protocol
 800435a:	4b04      	ldr	r3, [pc, #16]	@ (800436c <UART_PrepBatteryStatusMessage2+0x80>)
 800435c:	22ff      	movs	r2, #255	@ 0xff
 800435e:	71da      	strb	r2, [r3, #7]
	return 8;
 8004360:	2308      	movs	r3, #8
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b003      	add	sp, #12
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	2000047c 	.word	0x2000047c
 8004370:	200003ec 	.word	0x200003ec

08004374 <UART_Respond>:

/*Takes in an 8 byte message, parses, checks CRC, and then responds with the appropriate message */
void UART_Respond(uint8_t *buf, uint16_t size) {
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	000a      	movs	r2, r1
 800437e:	1cbb      	adds	r3, r7, #2
 8004380:	801a      	strh	r2, [r3, #0]

	//Code currently only supports 8 byte read messages, which is all that's necessary to get the bike moving.
	if (size == 8) {
 8004382:	1cbb      	adds	r3, r7, #2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d000      	beq.n	800438c <UART_Respond+0x18>
 800438a:	e0b0      	b.n	80044ee <UART_Respond+0x17a>

		//unpack message
		uint8_t SlaveID = buf[0];
 800438c:	2417      	movs	r4, #23
 800438e:	193b      	adds	r3, r7, r4
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	701a      	strb	r2, [r3, #0]
		uint8_t FunctionCode = buf[1];
 8004396:	2516      	movs	r5, #22
 8004398:	197b      	adds	r3, r7, r5
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	7852      	ldrb	r2, [r2, #1]
 800439e:	701a      	strb	r2, [r3, #0]
		uint16_t Address = buf[2] << 8 | buf[3];
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3302      	adds	r3, #2
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	b21a      	sxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3303      	adds	r3, #3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b21b      	sxth	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b21a      	sxth	r2, r3
 80043b6:	2614      	movs	r6, #20
 80043b8:	19bb      	adds	r3, r7, r6
 80043ba:	801a      	strh	r2, [r3, #0]
		uint16_t NumRegs = buf[4] << 8 | buf[5];
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	b21a      	sxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3305      	adds	r3, #5
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b21a      	sxth	r2, r3
 80043d2:	2312      	movs	r3, #18
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	801a      	strh	r2, [r3, #0]
		uint16_t CRCRecv = buf[7] << 8 | buf[6];
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3307      	adds	r3, #7
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	b21a      	sxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3306      	adds	r3, #6
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	2310      	movs	r3, #16
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	801a      	strh	r2, [r3, #0]

		//Check CRC and that we're the target audience (BMS is 0x02)
		if (CRCRecv == UART_CRC(buf, 6) && SlaveID == 0x02) {
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2106      	movs	r1, #6
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7ff fd7b 	bl	8003ef4 <UART_CRC>
 80043fe:	0003      	movs	r3, r0
 8004400:	001a      	movs	r2, r3
 8004402:	2310      	movs	r3, #16
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	4293      	cmp	r3, r2
 800440a:	d000      	beq.n	800440e <UART_Respond+0x9a>
 800440c:	e06f      	b.n	80044ee <UART_Respond+0x17a>
 800440e:	193b      	adds	r3, r7, r4
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d000      	beq.n	8004418 <UART_Respond+0xa4>
 8004416:	e06a      	b.n	80044ee <UART_Respond+0x17a>
			delayUS(&htim2, 450); //insert 1ms delay to match timing of original battery
 8004418:	23e1      	movs	r3, #225	@ 0xe1
 800441a:	005a      	lsls	r2, r3, #1
 800441c:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <UART_Respond+0x198>)
 800441e:	0011      	movs	r1, r2
 8004420:	0018      	movs	r0, r3
 8004422:	f001 f9b6 	bl	8005792 <delayUS>
			if (FunctionCode == 0x03) { //it's a read
 8004426:	197b      	adds	r3, r7, r5
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d15f      	bne.n	80044ee <UART_Respond+0x17a>
					HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
				}

				uint8_t len;

				if (Address == 0x02) { //Battery Voltage Message
 800442e:	19bb      	adds	r3, r7, r6
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d110      	bne.n	8004458 <UART_Respond+0xe4>
					len = UART_PrepCellVoltageMessage();
 8004436:	250f      	movs	r5, #15
 8004438:	197c      	adds	r4, r7, r5
 800443a:	f7ff fe23 	bl	8004084 <UART_PrepCellVoltageMessage>
 800443e:	0003      	movs	r3, r0
 8004440:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 8004442:	f7ff fdc8 	bl	8003fd6 <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 8004446:	197b      	adds	r3, r7, r5
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b29a      	uxth	r2, r3
 800444c:	4930      	ldr	r1, [pc, #192]	@ (8004510 <UART_Respond+0x19c>)
 800444e:	4831      	ldr	r0, [pc, #196]	@ (8004514 <UART_Respond+0x1a0>)
 8004450:	2303      	movs	r3, #3
 8004452:	f004 fba1 	bl	8008b98 <HAL_UART_Transmit>
 8004456:	e04a      	b.n	80044ee <UART_Respond+0x17a>
					UART_TIMEOUT_S);

				} else if (Address == 0x17) { //Battery Balancing Message
 8004458:	2314      	movs	r3, #20
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	2b17      	cmp	r3, #23
 8004460:	d110      	bne.n	8004484 <UART_Respond+0x110>
					len = UART_PrepCellBalancingMessage();
 8004462:	250f      	movs	r5, #15
 8004464:	197c      	adds	r4, r7, r5
 8004466:	f7ff fe89 	bl	800417c <UART_PrepCellBalancingMessage>
 800446a:	0003      	movs	r3, r0
 800446c:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 800446e:	f7ff fdb2 	bl	8003fd6 <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 8004472:	197b      	adds	r3, r7, r5
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	4925      	ldr	r1, [pc, #148]	@ (8004510 <UART_Respond+0x19c>)
 800447a:	4826      	ldr	r0, [pc, #152]	@ (8004514 <UART_Respond+0x1a0>)
 800447c:	2303      	movs	r3, #3
 800447e:	f004 fb8b 	bl	8008b98 <HAL_UART_Transmit>
 8004482:	e034      	b.n	80044ee <UART_Respond+0x17a>
					UART_TIMEOUT_S);

				} else if (Address == 0x00 && NumRegs == 0x01) { //Battery Status Message 1
 8004484:	2314      	movs	r3, #20
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d115      	bne.n	80044ba <UART_Respond+0x146>
 800448e:	2312      	movs	r3, #18
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d110      	bne.n	80044ba <UART_Respond+0x146>
					len = UART_PrepBatteryStatusMessage1();
 8004498:	250f      	movs	r5, #15
 800449a:	197c      	adds	r4, r7, r5
 800449c:	f7ff fee8 	bl	8004270 <UART_PrepBatteryStatusMessage1>
 80044a0:	0003      	movs	r3, r0
 80044a2:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 80044a4:	f7ff fd97 	bl	8003fd6 <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 80044a8:	197b      	adds	r3, r7, r5
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	4918      	ldr	r1, [pc, #96]	@ (8004510 <UART_Respond+0x19c>)
 80044b0:	4818      	ldr	r0, [pc, #96]	@ (8004514 <UART_Respond+0x1a0>)
 80044b2:	2303      	movs	r3, #3
 80044b4:	f004 fb70 	bl	8008b98 <HAL_UART_Transmit>
 80044b8:	e019      	b.n	80044ee <UART_Respond+0x17a>
					UART_TIMEOUT_S);

				} else if (Address == 0x01 && NumRegs == 0x01) { //Battery Status Message 1
 80044ba:	2314      	movs	r3, #20
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d114      	bne.n	80044ee <UART_Respond+0x17a>
 80044c4:	2312      	movs	r3, #18
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d10f      	bne.n	80044ee <UART_Respond+0x17a>
					len = UART_PrepBatteryStatusMessage2();
 80044ce:	250f      	movs	r5, #15
 80044d0:	197c      	adds	r4, r7, r5
 80044d2:	f7ff ff0b 	bl	80042ec <UART_PrepBatteryStatusMessage2>
 80044d6:	0003      	movs	r3, r0
 80044d8:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 80044da:	f7ff fd7c 	bl	8003fd6 <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 80044de:	197b      	adds	r3, r7, r5
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	490a      	ldr	r1, [pc, #40]	@ (8004510 <UART_Respond+0x19c>)
 80044e6:	480b      	ldr	r0, [pc, #44]	@ (8004514 <UART_Respond+0x1a0>)
 80044e8:	2303      	movs	r3, #3
 80044ea:	f004 fb55 	bl	8008b98 <HAL_UART_Transmit>
				}
			}
		}

	}
	THVD2410_Receive();
 80044ee:	f7ff fd85 	bl	8003ffc <THVD2410_Receive>
	HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
 80044f2:	2380      	movs	r3, #128	@ 0x80
 80044f4:	0099      	lsls	r1, r3, #2
 80044f6:	23a0      	movs	r3, #160	@ 0xa0
 80044f8:	05db      	lsls	r3, r3, #23
 80044fa:	2200      	movs	r2, #0
 80044fc:	0018      	movs	r0, r3
 80044fe:	f002 f84c 	bl	800659a <HAL_GPIO_WritePin>
}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b007      	add	sp, #28
 8004508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	200002e0 	.word	0x200002e0
 8004510:	2000047c 	.word	0x2000047c
 8004514:	20000320 	.word	0x20000320

08004518 <STM32_PetWatchdog>:

/* State Machine Functions
 * ===================== */

/*Pet Independent Watchdog. Must be done once a second or sooner*/
void STM32_PetWatchdog() {
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0

	/* Refresh IWDG: reload counter */
	if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK) {
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <STM32_PetWatchdog+0x1c>)
 800451e:	0018      	movs	r0, r3
 8004520:	f002 ff52 	bl	80073c8 <HAL_IWDG_Refresh>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <STM32_PetWatchdog+0x14>
		/* Refresh Error */
		Error_Handler();
 8004528:	f000 fee0 	bl	80052ec <Error_Handler>
	}
}
 800452c:	46c0      	nop			@ (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	200003a8 	.word	0x200003a8

08004538 <STM32_HandleButton>:

/* Implement button press timing*/
void STM32_HandleButton() {
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
	if (STM32_Wake_Button_Pressed()) {
 800453c:	f000 f822 	bl	8004584 <STM32_Wake_Button_Pressed>
 8004540:	1e03      	subs	r3, r0, #0
 8004542:	d006      	beq.n	8004552 <STM32_HandleButton+0x1a>
		state.ButtonCount++;
 8004544:	4b0e      	ldr	r3, [pc, #56]	@ (8004580 <STM32_HandleButton+0x48>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	b2da      	uxtb	r2, r3
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <STM32_HandleButton+0x48>)
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e009      	b.n	8004566 <STM32_HandleButton+0x2e>

	} else if (state.ButtonCount) {
 8004552:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <STM32_HandleButton+0x48>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <STM32_HandleButton+0x2e>
		state.ButtonCount -= 1;
 800455a:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <STM32_HandleButton+0x48>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	3b01      	subs	r3, #1
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <STM32_HandleButton+0x48>)
 8004564:	701a      	strb	r2, [r3, #0]
	};

	if (state.ButtonCount > BUTTON_LONG_PRESS_LOOPS) {
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <STM32_HandleButton+0x48>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d904      	bls.n	8004578 <STM32_HandleButton+0x40>
		if (DEBUG) {
			printf("\r\nbutton long press...time to get ready for bed\r\n");
		}
		state.ButtonCount = 0;
 800456e:	4b04      	ldr	r3, [pc, #16]	@ (8004580 <STM32_HandleButton+0x48>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
		Sleep();
 8004574:	f000 f944 	bl	8004800 <Sleep>
	};
}
 8004578:	46c0      	nop			@ (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			@ (mov r8, r8)
 8004580:	200003e0 	.word	0x200003e0

08004584 <STM32_Wake_Button_Pressed>:

uint8_t STM32_Wake_Button_Pressed() {
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	return !(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
 8004588:	23a0      	movs	r3, #160	@ 0xa0
 800458a:	05db      	lsls	r3, r3, #23
 800458c:	2101      	movs	r1, #1
 800458e:	0018      	movs	r0, r3
 8004590:	f001 ffe6 	bl	8006560 <HAL_GPIO_ReadPin>
 8004594:	0003      	movs	r3, r0
 8004596:	425a      	negs	r2, r3
 8004598:	4153      	adcs	r3, r2
 800459a:	b2db      	uxtb	r3, r3
}
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <STM32_HandleInactivity>:

/* If current below 250mA for more than XXX loops, activate sleep. Must have a fresh value in Pack_Current */
void STM32_HandleInactivity() {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0

	//Increment sleep timer if current is between +20mA and -250mA. Increment much faster if we're done with charge to get the correct Faraday LED behavior.
	if (batt.Pack_Current >= PACK_CURRENT_INACTIVITY_LOWER_LIMIT_MA
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <STM32_HandleInactivity+0x6c>)
 80045aa:	2264      	movs	r2, #100	@ 0x64
 80045ac:	5e9b      	ldrsh	r3, [r3, r2]
 80045ae:	33fa      	adds	r3, #250	@ 0xfa
 80045b0:	db1d      	blt.n	80045ee <STM32_HandleInactivity+0x4a>
			&& batt.Pack_Current <= PACK_CURRENT_INACTIVITY_UPPER_LIMIT_MA) {
 80045b2:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <STM32_HandleInactivity+0x6c>)
 80045b4:	2264      	movs	r2, #100	@ 0x64
 80045b6:	5e9b      	ldrsh	r3, [r3, r2]
 80045b8:	2b4b      	cmp	r3, #75	@ 0x4b
 80045ba:	dc18      	bgt.n	80045ee <STM32_HandleInactivity+0x4a>
		if (!batt.Chg && batt.Dsg) {
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <STM32_HandleInactivity+0x6c>)
 80045be:	227b      	movs	r2, #123	@ 0x7b
 80045c0:	5c9b      	ldrb	r3, [r3, r2]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10c      	bne.n	80045e0 <STM32_HandleInactivity+0x3c>
 80045c6:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <STM32_HandleInactivity+0x6c>)
 80045c8:	227a      	movs	r2, #122	@ 0x7a
 80045ca:	5c9b      	ldrb	r3, [r3, r2]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <STM32_HandleInactivity+0x3c>
			state.InactivityCount += 300; //if CHG fet is off but DSG is still on, we're finished with charge and should sleep in around a second.
 80045d0:	4b10      	ldr	r3, [pc, #64]	@ (8004614 <STM32_HandleInactivity+0x70>)
 80045d2:	889b      	ldrh	r3, [r3, #4]
 80045d4:	332d      	adds	r3, #45	@ 0x2d
 80045d6:	33ff      	adds	r3, #255	@ 0xff
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <STM32_HandleInactivity+0x70>)
 80045dc:	809a      	strh	r2, [r3, #4]
		if (!batt.Chg && batt.Dsg) {
 80045de:	e00c      	b.n	80045fa <STM32_HandleInactivity+0x56>
		} else {
			state.InactivityCount++;
 80045e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <STM32_HandleInactivity+0x70>)
 80045e2:	889b      	ldrh	r3, [r3, #4]
 80045e4:	3301      	adds	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <STM32_HandleInactivity+0x70>)
 80045ea:	809a      	strh	r2, [r3, #4]
		if (!batt.Chg && batt.Dsg) {
 80045ec:	e005      	b.n	80045fa <STM32_HandleInactivity+0x56>
		}
	} else {
		state.InactivityCount = state.InactivityCount / 2; //exponential decay if current detected
 80045ee:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <STM32_HandleInactivity+0x70>)
 80045f0:	889b      	ldrh	r3, [r3, #4]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	4b07      	ldr	r3, [pc, #28]	@ (8004614 <STM32_HandleInactivity+0x70>)
 80045f8:	809a      	strh	r2, [r3, #4]
	}

	if (!DEBUG) {
		if (state.InactivityCount > INACTIVITY_LOOPS_MAX) {
 80045fa:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <STM32_HandleInactivity+0x70>)
 80045fc:	889b      	ldrh	r3, [r3, #4]
 80045fe:	4a06      	ldr	r2, [pc, #24]	@ (8004618 <STM32_HandleInactivity+0x74>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d901      	bls.n	8004608 <STM32_HandleInactivity+0x64>
			Sleep();
 8004604:	f000 f8fc 	bl	8004800 <Sleep>
			printf("\r\ninactivity timeout...time to get ready for bed\r\n");
			Sleep();
		}

	}
}
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	200003ec 	.word	0x200003ec
 8004614:	200003e0 	.word	0x200003e0
 8004618:	00002af8 	.word	0x00002af8

0800461c <STM32_Stop>:

/* STM32_Stop - puts the STM32 into STOP mode at minimum power consumption.
 * Leaves two ways to wake - EXTI0_1 (PA0 pulldown) and EXTI2_3 (PB5 pullup)
 *
 * Note that this function will fail if IWDG is running. This must be called before IWDG is started to be successful*/
void STM32_Stop() {
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b08b      	sub	sp, #44	@ 0x2c
 8004620:	af00      	add	r7, sp, #0
		delayMS(&htim2, 100);
		HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
	}

	//turn off LEDs
	HAL_GPIO_WritePin(LED_CHG_PORT, LED_CHG_PIN, GPIO_PIN_RESET);
 8004622:	4b5f      	ldr	r3, [pc, #380]	@ (80047a0 <STM32_Stop+0x184>)
 8004624:	2200      	movs	r2, #0
 8004626:	2101      	movs	r1, #1
 8004628:	0018      	movs	r0, r3
 800462a:	f001 ffb6 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DSG_PORT, LED_DSG_PIN, GPIO_PIN_RESET);
 800462e:	4b5c      	ldr	r3, [pc, #368]	@ (80047a0 <STM32_Stop+0x184>)
 8004630:	2200      	movs	r2, #0
 8004632:	2102      	movs	r1, #2
 8004634:	0018      	movs	r0, r3
 8004636:	f001 ffb0 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BF_PORT, LED_BF_PIN, GPIO_PIN_RESET);
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	0059      	lsls	r1, r3, #1
 800463e:	23a0      	movs	r3, #160	@ 0xa0
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	2200      	movs	r2, #0
 8004644:	0018      	movs	r0, r3
 8004646:	f001 ffa8 	bl	800659a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	0099      	lsls	r1, r3, #2
 800464e:	23a0      	movs	r3, #160	@ 0xa0
 8004650:	05db      	lsls	r3, r3, #23
 8004652:	2200      	movs	r2, #0
 8004654:	0018      	movs	r0, r3
 8004656:	f001 ffa0 	bl	800659a <HAL_GPIO_WritePin>

	//Turn off FETs
	BQ769x2_ForceDisableFETs(&batt);
 800465a:	4b52      	ldr	r3, [pc, #328]	@ (80047a4 <STM32_Stop+0x188>)
 800465c:	0018      	movs	r0, r3
 800465e:	f7ff f82f 	bl	80036c0 <BQ769x2_ForceDisableFETs>

	//Turn off RS485 Chip
	THVD2410_Sleep();
 8004662:	f7ff fca5 	bl	8003fb0 <THVD2410_Sleep>

	//Configure wake Interrupt on ALERT pin
	EXTI2_3_IRQHandler_Config();
 8004666:	f000 fb03 	bl	8004c70 <EXTI2_3_IRQHandler_Config>

	//Configure wake interrupt on BUTTON pin
	EXTI0_1_IRQHandler_Config();
 800466a:	f000 fad3 	bl	8004c14 <EXTI0_1_IRQHandler_Config>

	/* Enable GPIOs clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	4b4e      	ldr	r3, [pc, #312]	@ (80047a8 <STM32_Stop+0x18c>)
 8004670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004672:	4b4d      	ldr	r3, [pc, #308]	@ (80047a8 <STM32_Stop+0x18c>)
 8004674:	2101      	movs	r1, #1
 8004676:	430a      	orrs	r2, r1
 8004678:	62da      	str	r2, [r3, #44]	@ 0x2c
 800467a:	4b4b      	ldr	r3, [pc, #300]	@ (80047a8 <STM32_Stop+0x18c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	2201      	movs	r2, #1
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004686:	4b48      	ldr	r3, [pc, #288]	@ (80047a8 <STM32_Stop+0x18c>)
 8004688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468a:	4b47      	ldr	r3, [pc, #284]	@ (80047a8 <STM32_Stop+0x18c>)
 800468c:	2102      	movs	r1, #2
 800468e:	430a      	orrs	r2, r1
 8004690:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004692:	4b45      	ldr	r3, [pc, #276]	@ (80047a8 <STM32_Stop+0x18c>)
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	2202      	movs	r2, #2
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800469e:	4b42      	ldr	r3, [pc, #264]	@ (80047a8 <STM32_Stop+0x18c>)
 80046a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a2:	4b41      	ldr	r3, [pc, #260]	@ (80047a8 <STM32_Stop+0x18c>)
 80046a4:	2104      	movs	r1, #4
 80046a6:	430a      	orrs	r2, r1
 80046a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046aa:	4b3f      	ldr	r3, [pc, #252]	@ (80047a8 <STM32_Stop+0x18c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	2204      	movs	r2, #4
 80046b0:	4013      	ands	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80046b6:	4b3c      	ldr	r3, [pc, #240]	@ (80047a8 <STM32_Stop+0x18c>)
 80046b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ba:	4b3b      	ldr	r3, [pc, #236]	@ (80047a8 <STM32_Stop+0x18c>)
 80046bc:	2108      	movs	r1, #8
 80046be:	430a      	orrs	r2, r1
 80046c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046c2:	4b39      	ldr	r3, [pc, #228]	@ (80047a8 <STM32_Stop+0x18c>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	2208      	movs	r2, #8
 80046c8:	4013      	ands	r3, r2
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80046ce:	4b36      	ldr	r3, [pc, #216]	@ (80047a8 <STM32_Stop+0x18c>)
 80046d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d2:	4b35      	ldr	r3, [pc, #212]	@ (80047a8 <STM32_Stop+0x18c>)
 80046d4:	2180      	movs	r1, #128	@ 0x80
 80046d6:	430a      	orrs	r2, r1
 80046d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046da:	4b33      	ldr	r3, [pc, #204]	@ (80047a8 <STM32_Stop+0x18c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	2280      	movs	r2, #128	@ 0x80
 80046e0:	4013      	ands	r3, r2
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]

	//Configure all GPIO port pins in Analog Input mode (floating input trigger OFF)
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80046e6:	2414      	movs	r4, #20
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	2203      	movs	r2, #3
 80046ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80046ee:	193b      	adds	r3, r7, r4
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]

	//special config for port A since we use it for wake
	GPIO_InitStructure.Pin = GPIO_PIN_All & ~GPIO_PIN_0;
 80046f4:	193b      	adds	r3, r7, r4
 80046f6:	4a2d      	ldr	r2, [pc, #180]	@ (80047ac <STM32_Stop+0x190>)
 80046f8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80046fa:	193a      	adds	r2, r7, r4
 80046fc:	23a0      	movs	r3, #160	@ 0xa0
 80046fe:	05db      	lsls	r3, r3, #23
 8004700:	0011      	movs	r1, r2
 8004702:	0018      	movs	r0, r3
 8004704:	f001 fcdc 	bl	80060c0 <HAL_GPIO_Init>

	//special config for port B since we use it for wake
	GPIO_InitStructure.Pin = GPIO_PIN_All & ~GPIO_PIN_5;
 8004708:	193b      	adds	r3, r7, r4
 800470a:	4a29      	ldr	r2, [pc, #164]	@ (80047b0 <STM32_Stop+0x194>)
 800470c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800470e:	193b      	adds	r3, r7, r4
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <STM32_Stop+0x184>)
 8004712:	0019      	movs	r1, r3
 8004714:	0010      	movs	r0, r2
 8004716:	f001 fcd3 	bl	80060c0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_All;
 800471a:	193b      	adds	r3, r7, r4
 800471c:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <STM32_Stop+0x198>)
 800471e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004720:	193b      	adds	r3, r7, r4
 8004722:	4a25      	ldr	r2, [pc, #148]	@ (80047b8 <STM32_Stop+0x19c>)
 8004724:	0019      	movs	r1, r3
 8004726:	0010      	movs	r0, r2
 8004728:	f001 fcca 	bl	80060c0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800472c:	193b      	adds	r3, r7, r4
 800472e:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <STM32_Stop+0x1a0>)
 8004730:	0019      	movs	r1, r3
 8004732:	0010      	movs	r0, r2
 8004734:	f001 fcc4 	bl	80060c0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 8004738:	193b      	adds	r3, r7, r4
 800473a:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <STM32_Stop+0x1a4>)
 800473c:	0019      	movs	r1, r3
 800473e:	0010      	movs	r0, r2
 8004740:	f001 fcbe 	bl	80060c0 <HAL_GPIO_Init>

	//disable GPIO clocks to save power
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8004744:	4b18      	ldr	r3, [pc, #96]	@ (80047a8 <STM32_Stop+0x18c>)
 8004746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004748:	4b17      	ldr	r3, [pc, #92]	@ (80047a8 <STM32_Stop+0x18c>)
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8004750:	4b15      	ldr	r3, [pc, #84]	@ (80047a8 <STM32_Stop+0x18c>)
 8004752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004754:	4b14      	ldr	r3, [pc, #80]	@ (80047a8 <STM32_Stop+0x18c>)
 8004756:	2102      	movs	r1, #2
 8004758:	438a      	bics	r2, r1
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 800475c:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <STM32_Stop+0x18c>)
 800475e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004760:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <STM32_Stop+0x18c>)
 8004762:	2104      	movs	r1, #4
 8004764:	438a      	bics	r2, r1
 8004766:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 8004768:	4b0f      	ldr	r3, [pc, #60]	@ (80047a8 <STM32_Stop+0x18c>)
 800476a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476c:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <STM32_Stop+0x18c>)
 800476e:	2108      	movs	r1, #8
 8004770:	438a      	bics	r2, r1
 8004772:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8004774:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <STM32_Stop+0x18c>)
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <STM32_Stop+0x18c>)
 800477a:	2180      	movs	r1, #128	@ 0x80
 800477c:	438a      	bics	r2, r1
 800477e:	62da      	str	r2, [r3, #44]	@ 0x2c

	//disable RTC to save power
	HAL_RTC_MspDeInit(&hrtc);
 8004780:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <STM32_Stop+0x1a8>)
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fe6e 	bl	8005464 <HAL_RTC_MspDeInit>

	//here we go!
	//HAL_SuspendTick(); TODO investigate whether this prevents wake-on-detect-load
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004788:	4b0f      	ldr	r3, [pc, #60]	@ (80047c8 <STM32_Stop+0x1ac>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <STM32_Stop+0x1ac>)
 800478e:	2104      	movs	r1, #4
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8004794:	2101      	movs	r1, #1
 8004796:	2001      	movs	r0, #1
 8004798:	f002 fe44 	bl	8007424 <HAL_PWR_EnterSTOPMode>

	//reset on wake
	NVIC_SystemReset(); //When woken up, just reset, it's simpler that way.
 800479c:	f7ff fb98 	bl	8003ed0 <__NVIC_SystemReset>
 80047a0:	50000400 	.word	0x50000400
 80047a4:	200003ec 	.word	0x200003ec
 80047a8:	40021000 	.word	0x40021000
 80047ac:	0000fffe 	.word	0x0000fffe
 80047b0:	0000ffdf 	.word	0x0000ffdf
 80047b4:	0000ffff 	.word	0x0000ffff
 80047b8:	50000800 	.word	0x50000800
 80047bc:	50000c00 	.word	0x50000c00
 80047c0:	50001c00 	.word	0x50001c00
 80047c4:	200003b8 	.word	0x200003b8
 80047c8:	40007000 	.word	0x40007000

080047cc <STM32_CheckForWatchdogReset>:

}

void STM32_CheckForWatchdogReset() {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) {
 80047d0:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <STM32_CheckForWatchdogReset+0x2c>)
 80047d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	059b      	lsls	r3, r3, #22
 80047d8:	4013      	ands	r3, r2
 80047da:	d002      	beq.n	80047e2 <STM32_CheckForWatchdogReset+0x16>
		state.ResetByWatchdog = 1;
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <STM32_CheckForWatchdogReset+0x30>)
 80047de:	2201      	movs	r2, #1
 80047e0:	721a      	strb	r2, [r3, #8]
	}

	/* Clear reset flags in any cases */
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <STM32_CheckForWatchdogReset+0x2c>)
 80047e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047e6:	4b04      	ldr	r3, [pc, #16]	@ (80047f8 <STM32_CheckForWatchdogReset+0x2c>)
 80047e8:	2180      	movs	r1, #128	@ 0x80
 80047ea:	0409      	lsls	r1, r1, #16
 80047ec:	430a      	orrs	r2, r1
 80047ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	40021000 	.word	0x40021000
 80047fc:	200003e0 	.word	0x200003e0

08004800 <Sleep>:
/* Sleep() - start the process of putting the BMS in a low power mode
 * Puts the BQ chip to DEEPSLEEP, set a persistent flag that indicates we want to enter STOP,
 * reset the STM32. This clears the IWDG and the main loop reads the flag and puts the STM32 in STOP.
 * When the STM32 resets it will call STM32_Stop().
 * This is the only good way with an STM32L0 to disable IWDG and stay in STOP mode*/
void Sleep() {
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0

	//pet the watchdog so this delay doesn't turn it off
	STM32_PetWatchdog();
 8004804:	f7ff fe88 	bl	8004518 <STM32_PetWatchdog>

	//disable the only interrupt that should be running (RS485 RX interrupt)
	CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE);
 8004808:	4b16      	ldr	r3, [pc, #88]	@ (8004864 <Sleep+0x64>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <Sleep+0x64>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2120      	movs	r1, #32
 8004814:	438a      	bics	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

	//turn off both fets
	BQ769x2_ForceDisableFETs(&batt);
 8004818:	4b13      	ldr	r3, [pc, #76]	@ (8004868 <Sleep+0x68>)
 800481a:	0018      	movs	r0, r3
 800481c:	f7fe ff50 	bl	80036c0 <BQ769x2_ForceDisableFETs>

	//wait 200ms for the bus voltage to decay
	delayMS(&htim2, 200);
 8004820:	4b12      	ldr	r3, [pc, #72]	@ (800486c <Sleep+0x6c>)
 8004822:	21c8      	movs	r1, #200	@ 0xc8
 8004824:	0018      	movs	r0, r3
 8004826:	f000 ffc9 	bl	80057bc <delayMS>

	//Put the BQ to sleep
	while (!BQ769x2_EnterDeepSleep(&batt)) {
 800482a:	e005      	b.n	8004838 <Sleep+0x38>
		delayUS(&htim2, 5000);
 800482c:	4a10      	ldr	r2, [pc, #64]	@ (8004870 <Sleep+0x70>)
 800482e:	4b0f      	ldr	r3, [pc, #60]	@ (800486c <Sleep+0x6c>)
 8004830:	0011      	movs	r1, r2
 8004832:	0018      	movs	r0, r3
 8004834:	f000 ffad 	bl	8005792 <delayUS>
	while (!BQ769x2_EnterDeepSleep(&batt)) {
 8004838:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <Sleep+0x68>)
 800483a:	0018      	movs	r0, r3
 800483c:	f7fe ffc8 	bl	80037d0 <BQ769x2_EnterDeepSleep>
 8004840:	1e03      	subs	r3, r0, #0
 8004842:	d0f3      	beq.n	800482c <Sleep+0x2c>
	}

	BQ769x2_ClearFullScan(&batt);
 8004844:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <Sleep+0x68>)
 8004846:	0018      	movs	r0, r3
 8004848:	f7ff f88f 	bl	800396a <BQ769x2_ClearFullScan>
		printf(
				"\r\nbq put into DEEP SLEEP, STM about to reset to disable watchdog...\r\n");
	}

	//set persistent flag that we will want to STOP immediately upon reset
	HAL_PWR_EnableBkUpAccess();
 800484c:	f002 fdcc 	bl	80073e8 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xDEAD); // Writes a data in a RTC Backup data Register 1
 8004850:	4a08      	ldr	r2, [pc, #32]	@ (8004874 <Sleep+0x74>)
 8004852:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <Sleep+0x78>)
 8004854:	2101      	movs	r1, #1
 8004856:	0018      	movs	r0, r3
 8004858:	f003 fe5a 	bl	8008510 <HAL_RTCEx_BKUPWrite>
	HAL_PWR_DisableBkUpAccess();
 800485c:	f002 fdd2 	bl	8007404 <HAL_PWR_DisableBkUpAccess>

	//restart into STOP mode
	NVIC_SystemReset();
 8004860:	f7ff fb36 	bl	8003ed0 <__NVIC_SystemReset>
 8004864:	20000320 	.word	0x20000320
 8004868:	200003ec 	.word	0x200003ec
 800486c:	200002e0 	.word	0x200002e0
 8004870:	00001388 	.word	0x00001388
 8004874:	0000dead 	.word	0x0000dead
 8004878:	200003b8 	.word	0x200003b8

0800487c <STM32_ShouldStop>:
	HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
	delayMS(&htim2, period_ms);
}

/* Check to see if the magic value was written into the persistent RTC registers on the last reboot. Return 1 if true, 0 if not. */
uint8_t STM32_ShouldStop() {
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0xDEAD) {
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <STM32_ShouldStop+0x38>)
 8004882:	2101      	movs	r1, #1
 8004884:	0018      	movs	r0, r3
 8004886:	f003 fe5b 	bl	8008540 <HAL_RTCEx_BKUPRead>
 800488a:	0003      	movs	r3, r0
 800488c:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <STM32_ShouldStop+0x3c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d10b      	bne.n	80048aa <STM32_ShouldStop+0x2e>
		HAL_PWR_EnableBkUpAccess(); // Write Back Up Register 1 Data
 8004892:	f002 fda9 	bl	80073e8 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x0000); // Writes a data in a RTC Backup data Register 1
 8004896:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <STM32_ShouldStop+0x38>)
 8004898:	2200      	movs	r2, #0
 800489a:	2101      	movs	r1, #1
 800489c:	0018      	movs	r0, r3
 800489e:	f003 fe37 	bl	8008510 <HAL_RTCEx_BKUPWrite>
		HAL_PWR_DisableBkUpAccess(); //Disable access
 80048a2:	f002 fdaf 	bl	8007404 <HAL_PWR_DisableBkUpAccess>
		return 1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <STM32_ShouldStop+0x30>
	}

	return 0;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	200003b8 	.word	0x200003b8
 80048b8:	0000dead 	.word	0x0000dead

080048bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af08      	add	r7, sp, #32

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80048c2:	f001 f819 	bl	80058f8 <HAL_Init>

	/* USER CODE BEGIN Init */
	if (!DEBUG) {
		STM32_CheckForWatchdogReset();
 80048c6:	f7ff ff81 	bl	80047cc <STM32_CheckForWatchdogReset>
	}
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80048ca:	f000 fa01 	bl	8004cd0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 80048ce:	f000 fbf9 	bl	80050c4 <MX_GPIO_Init>
	MX_ADC_Init();
 80048d2:	f000 fa6f 	bl	8004db4 <MX_ADC_Init>
	MX_I2C1_Init();
 80048d6:	f000 fad3 	bl	8004e80 <MX_I2C1_Init>
	MX_TIM2_Init();
 80048da:	f000 fb45 	bl	8004f68 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80048de:	f000 fb97 	bl	8005010 <MX_USART2_UART_Init>
	SystemPower_Config();
 80048e2:	f000 fb0d 	bl	8004f00 <SystemPower_Config>
	MX_RTC_Init();
 80048e6:	f000 fbc3 	bl	8005070 <MX_RTC_Init>
	HAL_TIM_Base_Start(&htim2);
 80048ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004b68 <main+0x2ac>)
 80048ec:	0018      	movs	r0, r3
 80048ee:	f003 fe7d 	bl	80085ec <HAL_TIM_Base_Start>
	if (DEBUG) {
		printf("stm32 init complete\r\n");
	}

	/*Check to see if the button is currently pressed*/
	if (STM32_Wake_Button_Pressed()) {
 80048f2:	f7ff fe47 	bl	8004584 <STM32_Wake_Button_Pressed>
 80048f6:	1e03      	subs	r3, r0, #0
 80048f8:	d002      	beq.n	8004900 <main+0x44>
		state.ButtonPressedDuringBoot = 1;
 80048fa:	4b9c      	ldr	r3, [pc, #624]	@ (8004b6c <main+0x2b0>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	725a      	strb	r2, [r3, #9]
	}

	/* Check to see if the STOP flag is set from prior reset. If so, initiate STOP*/
	if (STM32_ShouldStop()) {
 8004900:	f7ff ffbc 	bl	800487c <STM32_ShouldStop>
 8004904:	1e03      	subs	r3, r0, #0
 8004906:	d001      	beq.n	800490c <main+0x50>
		if (DEBUG) {
			printf("stm32 reset with intent to sleep, time to sleep...zzz\r\n");
		}
		STM32_Stop();
 8004908:	f7ff fe88 	bl	800461c <STM32_Stop>
	}

	/* Initialize BQ State*/
	BQ769x2_ResetShutdownPin(&batt); // RST_SHUT pin set low just in case
 800490c:	4b98      	ldr	r3, [pc, #608]	@ (8004b70 <main+0x2b4>)
 800490e:	0018      	movs	r0, r3
 8004910:	f7fe ff4e 	bl	80037b0 <BQ769x2_ResetShutdownPin>
	BQ769x2_InitState(&batt, &hi2c1, BQ_DEV_ADDR, BQ_CRC_MODE, &htim2,
 8004914:	4997      	ldr	r1, [pc, #604]	@ (8004b74 <main+0x2b8>)
 8004916:	4896      	ldr	r0, [pc, #600]	@ (8004b70 <main+0x2b4>)
 8004918:	2310      	movs	r3, #16
 800491a:	9307      	str	r3, [sp, #28]
 800491c:	4b96      	ldr	r3, [pc, #600]	@ (8004b78 <main+0x2bc>)
 800491e:	9306      	str	r3, [sp, #24]
 8004920:	2308      	movs	r3, #8
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	4b94      	ldr	r3, [pc, #592]	@ (8004b78 <main+0x2bc>)
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	2302      	movs	r3, #2
 800492a:	9303      	str	r3, [sp, #12]
 800492c:	23a0      	movs	r3, #160	@ 0xa0
 800492e:	05db      	lsls	r3, r3, #23
 8004930:	9302      	str	r3, [sp, #8]
 8004932:	4b92      	ldr	r3, [pc, #584]	@ (8004b7c <main+0x2c0>)
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	4b8c      	ldr	r3, [pc, #560]	@ (8004b68 <main+0x2ac>)
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	2301      	movs	r3, #1
 800493c:	2210      	movs	r2, #16
 800493e:	f7fd ffcb 	bl	80028d8 <BQ769x2_InitState>
	ACTIVE_CELLS, RST_SHUT_PORT, RST_SHUT_PIN, CFETOFF_PORT, CFETOFF_PIN,
	DFETOFF_PORT, DFETOFF_PIN);

	delayMS(&htim2, 50); //Wait for everything to stabilize
 8004942:	4b89      	ldr	r3, [pc, #548]	@ (8004b68 <main+0x2ac>)
 8004944:	2132      	movs	r1, #50	@ 0x32
 8004946:	0018      	movs	r0, r3
 8004948:	f000 ff38 	bl	80057bc <delayMS>

	/* Init watchdog */
	if (WATCHDOG) {
		MX_IWDG_Init();
 800494c:	f000 faea 	bl	8004f24 <MX_IWDG_Init>
	if (RESET_3V3) {
		HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_SET);
		BQ769x2_Reset(&batt); //Use this for several reasons - the main reason is to kill the 3.3V rail and power cycle the STM32, which may be necessary if the programmer puts it into a state where it won't sleep properly
	}

	UART_WaitForCommand(); //Start UART Receiving
 8004950:	f7ff fb68 	bl	8004024 <UART_WaitForCommand>

	while (1) {

		/* USER CODE BEGIN 3 */
		BQ769x2_ForceDisableFETs(&batt); //disable FETs until we are getting communication from the BQ chip
 8004954:	4b86      	ldr	r3, [pc, #536]	@ (8004b70 <main+0x2b4>)
 8004956:	0018      	movs	r0, r3
 8004958:	f7fe feb2 	bl	80036c0 <BQ769x2_ForceDisableFETs>
		BQ769x2_SoftWake(&batt); //wiggle RST_SHUT to do a partial reset of the BQ chip. Not sure if this is necessary but it doesn't seem to hurt.
 800495c:	4b84      	ldr	r3, [pc, #528]	@ (8004b70 <main+0x2b4>)
 800495e:	0018      	movs	r0, r3
 8004960:	f7fe ffdb 	bl	800391a <BQ769x2_SoftWake>
			}
		}

		//Check for BQ state FULLACCESS, SEALED, or UNSEALED. Device must be connected and ACKing to get past this point.
		// This may take quite a few reads for the chip to wake up if it's the first time it's booting (I've seen 15 reads!)
		while (!BQ769x2_Ready(&batt)) {
 8004964:	e01c      	b.n	80049a0 <main+0xe4>
			if (DEBUG) {
				printf("bq not ready\r\n");
			}
			delayUS(&htim2, 1000);
 8004966:	23fa      	movs	r3, #250	@ 0xfa
 8004968:	009a      	lsls	r2, r3, #2
 800496a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b68 <main+0x2ac>)
 800496c:	0011      	movs	r1, r2
 800496e:	0018      	movs	r0, r3
 8004970:	f000 ff0f 	bl	8005792 <delayUS>
			if (state.RetryCount > RETRY_LIMIT) {
 8004974:	4b7d      	ldr	r3, [pc, #500]	@ (8004b6c <main+0x2b0>)
 8004976:	88db      	ldrh	r3, [r3, #6]
 8004978:	2b64      	cmp	r3, #100	@ 0x64
 800497a:	d90b      	bls.n	8004994 <main+0xd8>
				HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_SET);
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	0099      	lsls	r1, r3, #2
 8004980:	23a0      	movs	r3, #160	@ 0xa0
 8004982:	05db      	lsls	r3, r3, #23
 8004984:	2201      	movs	r2, #1
 8004986:	0018      	movs	r0, r3
 8004988:	f001 fe07 	bl	800659a <HAL_GPIO_WritePin>
				BQ769x2_Reset(&batt); //gotta reset the BQ and try again. This kills the 3V3 rail
 800498c:	4b78      	ldr	r3, [pc, #480]	@ (8004b70 <main+0x2b4>)
 800498e:	0018      	movs	r0, r3
 8004990:	f7fe ff80 	bl	8003894 <BQ769x2_Reset>
			}
			state.RetryCount++;
 8004994:	4b75      	ldr	r3, [pc, #468]	@ (8004b6c <main+0x2b0>)
 8004996:	88db      	ldrh	r3, [r3, #6]
 8004998:	3301      	adds	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	4b73      	ldr	r3, [pc, #460]	@ (8004b6c <main+0x2b0>)
 800499e:	80da      	strh	r2, [r3, #6]
		while (!BQ769x2_Ready(&batt)) {
 80049a0:	4b73      	ldr	r3, [pc, #460]	@ (8004b70 <main+0x2b4>)
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fe ff9c 	bl	80038e0 <BQ769x2_Ready>
 80049a8:	1e03      	subs	r3, r0, #0
 80049aa:	d0dc      	beq.n	8004966 <main+0xaa>
		};

		state.RetryCount = 0;
 80049ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004b6c <main+0x2b0>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	80da      	strh	r2, [r3, #6]

		//Wake up the device if it isn't already awake
		while (!BQ769x2_Wake(&batt)) {
 80049b2:	e01c      	b.n	80049ee <main+0x132>
			if (DEBUG) {
				printf("bq not awake\r\n");
			}
			delayUS(&htim2, 1000);
 80049b4:	23fa      	movs	r3, #250	@ 0xfa
 80049b6:	009a      	lsls	r2, r3, #2
 80049b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b68 <main+0x2ac>)
 80049ba:	0011      	movs	r1, r2
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 fee8 	bl	8005792 <delayUS>
			if (state.RetryCount > RETRY_LIMIT) {
 80049c2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b6c <main+0x2b0>)
 80049c4:	88db      	ldrh	r3, [r3, #6]
 80049c6:	2b64      	cmp	r3, #100	@ 0x64
 80049c8:	d90b      	bls.n	80049e2 <main+0x126>
				HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_SET);
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	0099      	lsls	r1, r3, #2
 80049ce:	23a0      	movs	r3, #160	@ 0xa0
 80049d0:	05db      	lsls	r3, r3, #23
 80049d2:	2201      	movs	r2, #1
 80049d4:	0018      	movs	r0, r3
 80049d6:	f001 fde0 	bl	800659a <HAL_GPIO_WritePin>
				BQ769x2_Reset(&batt); //gotta reset the BQ and try again. This kills the 3V3 rail
 80049da:	4b65      	ldr	r3, [pc, #404]	@ (8004b70 <main+0x2b4>)
 80049dc:	0018      	movs	r0, r3
 80049de:	f7fe ff59 	bl	8003894 <BQ769x2_Reset>
			}
			state.RetryCount++;
 80049e2:	4b62      	ldr	r3, [pc, #392]	@ (8004b6c <main+0x2b0>)
 80049e4:	88db      	ldrh	r3, [r3, #6]
 80049e6:	3301      	adds	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	4b60      	ldr	r3, [pc, #384]	@ (8004b6c <main+0x2b0>)
 80049ec:	80da      	strh	r2, [r3, #6]
		while (!BQ769x2_Wake(&batt)) {
 80049ee:	4b60      	ldr	r3, [pc, #384]	@ (8004b70 <main+0x2b4>)
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fe ff1b 	bl	800382c <BQ769x2_Wake>
 80049f6:	1e03      	subs	r3, r0, #0
 80049f8:	d0dc      	beq.n	80049b4 <main+0xf8>
		}

		state.RetryCount = 0;
 80049fa:	4b5c      	ldr	r3, [pc, #368]	@ (8004b6c <main+0x2b0>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	80da      	strh	r2, [r3, #6]

		//Initialize registers by calling BQ769x2_Init and then checking that the configuration was successful
		// BQ769x2 does a spot check of a register that should have been configured if BQ769x2_Init() was successful.
		while (!BQ769x2_Initialize(&batt)) {
 8004a00:	e015      	b.n	8004a2e <main+0x172>
			if (DEBUG) {
				printf("bq not configured\r\n");
			}
			if (state.RetryCount > RETRY_LIMIT) {
 8004a02:	4b5a      	ldr	r3, [pc, #360]	@ (8004b6c <main+0x2b0>)
 8004a04:	88db      	ldrh	r3, [r3, #6]
 8004a06:	2b64      	cmp	r3, #100	@ 0x64
 8004a08:	d90b      	bls.n	8004a22 <main+0x166>
				HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_SET);
 8004a0a:	2380      	movs	r3, #128	@ 0x80
 8004a0c:	0099      	lsls	r1, r3, #2
 8004a0e:	23a0      	movs	r3, #160	@ 0xa0
 8004a10:	05db      	lsls	r3, r3, #23
 8004a12:	2201      	movs	r2, #1
 8004a14:	0018      	movs	r0, r3
 8004a16:	f001 fdc0 	bl	800659a <HAL_GPIO_WritePin>
				BQ769x2_Reset(&batt); //gotta reset the BQ and try again. This kills the 3V3 rail
 8004a1a:	4b55      	ldr	r3, [pc, #340]	@ (8004b70 <main+0x2b4>)
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fe ff39 	bl	8003894 <BQ769x2_Reset>
			}
			state.RetryCount++;
 8004a22:	4b52      	ldr	r3, [pc, #328]	@ (8004b6c <main+0x2b0>)
 8004a24:	88db      	ldrh	r3, [r3, #6]
 8004a26:	3301      	adds	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	4b50      	ldr	r3, [pc, #320]	@ (8004b6c <main+0x2b0>)
 8004a2c:	80da      	strh	r2, [r3, #6]
		while (!BQ769x2_Initialize(&batt)) {
 8004a2e:	4b50      	ldr	r3, [pc, #320]	@ (8004b70 <main+0x2b4>)
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7fe fe1b 	bl	800366c <BQ769x2_Initialize>
 8004a36:	1e03      	subs	r3, r0, #0
 8004a38:	d0e3      	beq.n	8004a02 <main+0x146>
		}

		state.RetryCount = 0;
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b6c <main+0x2b0>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	80da      	strh	r2, [r3, #6]

		// get first ADC reading. Normal for this to take a few retries
		while (!BQ769x2_ReadBatteryData(&batt)) {
 8004a40:	e01b      	b.n	8004a7a <main+0x1be>
			if (state.RetryCount > RETRY_LIMIT) {
 8004a42:	4b4a      	ldr	r3, [pc, #296]	@ (8004b6c <main+0x2b0>)
 8004a44:	88db      	ldrh	r3, [r3, #6]
 8004a46:	2b64      	cmp	r3, #100	@ 0x64
 8004a48:	d90b      	bls.n	8004a62 <main+0x1a6>
				HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_SET);
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	0099      	lsls	r1, r3, #2
 8004a4e:	23a0      	movs	r3, #160	@ 0xa0
 8004a50:	05db      	lsls	r3, r3, #23
 8004a52:	2201      	movs	r2, #1
 8004a54:	0018      	movs	r0, r3
 8004a56:	f001 fda0 	bl	800659a <HAL_GPIO_WritePin>
				BQ769x2_Reset(&batt); //gotta reset the BQ and try again. This kills the 3V3 rail
 8004a5a:	4b45      	ldr	r3, [pc, #276]	@ (8004b70 <main+0x2b4>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fe ff19 	bl	8003894 <BQ769x2_Reset>
			}
			state.RetryCount++;
 8004a62:	4b42      	ldr	r3, [pc, #264]	@ (8004b6c <main+0x2b0>)
 8004a64:	88db      	ldrh	r3, [r3, #6]
 8004a66:	3301      	adds	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	4b40      	ldr	r3, [pc, #256]	@ (8004b6c <main+0x2b0>)
 8004a6c:	80da      	strh	r2, [r3, #6]
			delayUS(&htim2, 5000); //wait a bit for the ADC to finish measuring
 8004a6e:	4a44      	ldr	r2, [pc, #272]	@ (8004b80 <main+0x2c4>)
 8004a70:	4b3d      	ldr	r3, [pc, #244]	@ (8004b68 <main+0x2ac>)
 8004a72:	0011      	movs	r1, r2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 fe8c 	bl	8005792 <delayUS>
		while (!BQ769x2_ReadBatteryData(&batt)) {
 8004a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b70 <main+0x2b4>)
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff f92b 	bl	8003cd8 <BQ769x2_ReadBatteryData>
 8004a82:	1e03      	subs	r3, r0, #0
 8004a84:	d0dd      	beq.n	8004a42 <main+0x186>
		}

		state.RetryCount = 0;
 8004a86:	4b39      	ldr	r3, [pc, #228]	@ (8004b6c <main+0x2b0>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	80da      	strh	r2, [r3, #6]

		// check whether a charger >15V is connected and the button wasn't pressed during boot. If not, go back to sleep.
		if (!state.ButtonPressedDuringBoot && batt.Pack_Voltage < 15000) {
 8004a8c:	4b37      	ldr	r3, [pc, #220]	@ (8004b6c <main+0x2b0>)
 8004a8e:	7a5b      	ldrb	r3, [r3, #9]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <main+0x1e8>
 8004a94:	4b36      	ldr	r3, [pc, #216]	@ (8004b70 <main+0x2b4>)
 8004a96:	2260      	movs	r2, #96	@ 0x60
 8004a98:	5a9b      	ldrh	r3, [r3, r2]
 8004a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8004b84 <main+0x2c8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d801      	bhi.n	8004aa4 <main+0x1e8>
			if (DEBUG) {
				printf(
						"stm32 going back to sleep because user didn't press button and charger isn't connected...zzz\r\n");
			}
			Sleep();
 8004aa0:	f7ff feae 	bl	8004800 <Sleep>
				printf("\r\ncharger connected, time to allow FETs\r\n");
			}
		}

		//Enable FETs because the BQ chip is up and running
		BQ769x2_AllowFETs(&batt);
 8004aa4:	4b32      	ldr	r3, [pc, #200]	@ (8004b70 <main+0x2b4>)
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7fe fe23 	bl	80036f2 <BQ769x2_AllowFETs>

		//Start UART interrupt
		UART_WaitForCommand();
 8004aac:	f7ff faba 	bl	8004024 <UART_WaitForCommand>

		while (1) {

			//detect button press and take action if needed
			STM32_HandleButton();
 8004ab0:	f7ff fd42 	bl	8004538 <STM32_HandleButton>

			//Update FET registers and update LEDs
			BQ769x2_ReadFETStatus(&batt);
 8004ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8004b70 <main+0x2b4>)
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7fe fe3e 	bl	8003738 <BQ769x2_ReadFETStatus>
			if (LEDS) {
				STM32_UpdateFETLEDs();
			}

			//Handle sleep current and put battery to sleep if not much is going on
			STM32_HandleInactivity();
 8004abc:	f7ff fd72 	bl	80045a4 <STM32_HandleInactivity>

			//Useful for logging
			BQ769x2_CalcMinMaxCellV(&batt);
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b70 <main+0x2b4>)
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7ff f95a 	bl	8003d7c <BQ769x2_CalcMinMaxCellV>

			//Needed for battery status message 2
			BQ769x2_CalcMinMaxCellT(&batt);
 8004ac8:	4b29      	ldr	r3, [pc, #164]	@ (8004b70 <main+0x2b4>)
 8004aca:	0018      	movs	r0, r3
 8004acc:	f7ff f9aa 	bl	8003e24 <BQ769x2_CalcMinMaxCellT>

			//Print battery status over RS485 for debug
			BQ769x2_ReadBatteryStatus(&batt);
 8004ad0:	4b27      	ldr	r3, [pc, #156]	@ (8004b70 <main+0x2b4>)
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7fe ff88 	bl	80039e8 <BQ769x2_ReadBatteryStatus>
			if (DEBUG) {
				BQ769x2_PrintStatus(&batt);
			}

			//Get the latest data from the BQ chip
			if (BQ769x2_ReadBatteryData(&batt)) {
 8004ad8:	4b25      	ldr	r3, [pc, #148]	@ (8004b70 <main+0x2b4>)
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff f8fc 	bl	8003cd8 <BQ769x2_ReadBatteryData>
 8004ae0:	1e03      	subs	r3, r0, #0
 8004ae2:	d003      	beq.n	8004aec <main+0x230>
				state.RetryCount = 0;
 8004ae4:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <main+0x2b0>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	80da      	strh	r2, [r3, #6]
 8004aea:	e005      	b.n	8004af8 <main+0x23c>
			} else {
				state.RetryCount++;
 8004aec:	4b1f      	ldr	r3, [pc, #124]	@ (8004b6c <main+0x2b0>)
 8004aee:	88db      	ldrh	r3, [r3, #6]
 8004af0:	3301      	adds	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <main+0x2b0>)
 8004af6:	80da      	strh	r2, [r3, #6]
			}

			//Check for faults and trigger the LED if so
			if (BQ769x2_ReadSafetyStatus(&batt)) {
 8004af8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b70 <main+0x2b4>)
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fe ff90 	bl	8003a20 <BQ769x2_ReadSafetyStatus>
 8004b00:	1e03      	subs	r3, r0, #0
 8004b02:	d003      	beq.n	8004b0c <main+0x250>
				state.RetryCount = 0;
 8004b04:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <main+0x2b0>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	80da      	strh	r2, [r3, #6]
 8004b0a:	e005      	b.n	8004b18 <main+0x25c>
			} else {
				state.RetryCount++;
 8004b0c:	4b17      	ldr	r3, [pc, #92]	@ (8004b6c <main+0x2b0>)
 8004b0e:	88db      	ldrh	r3, [r3, #6]
 8004b10:	3301      	adds	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <main+0x2b0>)
 8004b16:	80da      	strh	r2, [r3, #6]

			//Set Fault LED
			if (LEDS && (batt.ProtectionsTriggered & 1)) {
				HAL_GPIO_WritePin(LED_BF_PORT, LED_BF_PIN, GPIO_PIN_SET);
			} else {
				HAL_GPIO_WritePin(LED_BF_PORT, LED_BF_PIN, GPIO_PIN_RESET);
 8004b18:	2380      	movs	r3, #128	@ 0x80
 8004b1a:	0059      	lsls	r1, r3, #1
 8004b1c:	23a0      	movs	r3, #160	@ 0xa0
 8004b1e:	05db      	lsls	r3, r3, #23
 8004b20:	2200      	movs	r2, #0
 8004b22:	0018      	movs	r0, r3
 8004b24:	f001 fd39 	bl	800659a <HAL_GPIO_WritePin>
			}

			//If there are too many failures, reset the BQ chip
			if (state.RetryCount > RETRY_LIMIT) {
 8004b28:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <main+0x2b0>)
 8004b2a:	88db      	ldrh	r3, [r3, #6]
 8004b2c:	2b64      	cmp	r3, #100	@ 0x64
 8004b2e:	d910      	bls.n	8004b52 <main+0x296>
				HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_SET);
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	0099      	lsls	r1, r3, #2
 8004b34:	23a0      	movs	r3, #160	@ 0xa0
 8004b36:	05db      	lsls	r3, r3, #23
 8004b38:	2201      	movs	r2, #1
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f001 fd2d 	bl	800659a <HAL_GPIO_WritePin>
				if (!BQ769x2_Reset(&batt)) {
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <main+0x2b4>)
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fe fea6 	bl	8003894 <BQ769x2_Reset>
 8004b48:	1e03      	subs	r3, r0, #0
 8004b4a:	d10a      	bne.n	8004b62 <main+0x2a6>
					Error_Handler(); //If we end up here, something is truly messed up
 8004b4c:	f000 fbce 	bl	80052ec <Error_Handler>
					//gotta reset the BQ and try again. This kills the 3V3 rail
				}
				break;
 8004b50:	e007      	b.n	8004b62 <main+0x2a6>
			}

			STM32_PetWatchdog();
 8004b52:	f7ff fce1 	bl	8004518 <STM32_PetWatchdog>
			delayMS(&htim2, 10);  // repeat loop every 20 ms
 8004b56:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <main+0x2ac>)
 8004b58:	210a      	movs	r1, #10
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f000 fe2e 	bl	80057bc <delayMS>
			STM32_HandleButton();
 8004b60:	e7a6      	b.n	8004ab0 <main+0x1f4>
				break;
 8004b62:	46c0      	nop			@ (mov r8, r8)
		BQ769x2_ForceDisableFETs(&batt); //disable FETs until we are getting communication from the BQ chip
 8004b64:	e6f6      	b.n	8004954 <main+0x98>
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	200002e0 	.word	0x200002e0
 8004b6c:	200003e0 	.word	0x200003e0
 8004b70:	200003ec 	.word	0x200003ec
 8004b74:	2000028c 	.word	0x2000028c
 8004b78:	50000400 	.word	0x50000400
 8004b7c:	0000aaff 	.word	0x0000aaff
 8004b80:	00001388 	.word	0x00001388
 8004b84:	00003a97 	.word	0x00003a97

08004b88 <__io_putchar>:
		}
	}
	/* USER CODE END 3 */
}

PUTCHAR_PROTOTYPE {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET); // Receive Off
 8004b90:	23a0      	movs	r3, #160	@ 0xa0
 8004b92:	05db      	lsls	r3, r3, #23
 8004b94:	2201      	movs	r2, #1
 8004b96:	2180      	movs	r1, #128	@ 0x80
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f001 fcfe 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(&htim2, 20);
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c08 <__io_putchar+0x80>)
 8004ba0:	2114      	movs	r1, #20
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 fdf5 	bl	8005792 <delayUS>
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_SET); // Transmit On
 8004ba8:	23a0      	movs	r3, #160	@ 0xa0
 8004baa:	05db      	lsls	r3, r3, #23
 8004bac:	2201      	movs	r2, #1
 8004bae:	2140      	movs	r1, #64	@ 0x40
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f001 fcf2 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(&htim2, 20);
 8004bb6:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <__io_putchar+0x80>)
 8004bb8:	2114      	movs	r1, #20
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fde9 	bl	8005792 <delayUS>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8004bc0:	4b12      	ldr	r3, [pc, #72]	@ (8004c0c <__io_putchar+0x84>)
 8004bc2:	1d39      	adds	r1, r7, #4
 8004bc4:	4812      	ldr	r0, [pc, #72]	@ (8004c10 <__io_putchar+0x88>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f003 ffe6 	bl	8008b98 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_RESET); //Transmit off
 8004bcc:	23a0      	movs	r3, #160	@ 0xa0
 8004bce:	05db      	lsls	r3, r3, #23
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2140      	movs	r1, #64	@ 0x40
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f001 fce0 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(&htim2, 20);
 8004bda:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <__io_putchar+0x80>)
 8004bdc:	2114      	movs	r1, #20
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 fdd7 	bl	8005792 <delayUS>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET); // Receive still off
 8004be4:	23a0      	movs	r3, #160	@ 0xa0
 8004be6:	05db      	lsls	r3, r3, #23
 8004be8:	2201      	movs	r2, #1
 8004bea:	2180      	movs	r1, #128	@ 0x80
 8004bec:	0018      	movs	r0, r3
 8004bee:	f001 fcd4 	bl	800659a <HAL_GPIO_WritePin>
	delayUS(&htim2, 20);
 8004bf2:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <__io_putchar+0x80>)
 8004bf4:	2114      	movs	r1, #20
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 fdcb 	bl	8005792 <delayUS>

	return ch;
 8004bfc:	687b      	ldr	r3, [r7, #4]
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	200002e0 	.word	0x200002e0
 8004c0c:	0000ffff 	.word	0x0000ffff
 8004c10:	20000320 	.word	0x20000320

08004c14 <EXTI0_1_IRQHandler_Config>:
/**
 * @brief  Configures EXTI Port A PIN 0 as an interrupt
 * @param  None
 * @retval None
 */
static void EXTI0_1_IRQHandler_Config(void) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOC clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004c1a:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <EXTI0_1_IRQHandler_Config+0x58>)
 8004c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1e:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <EXTI0_1_IRQHandler_Config+0x58>)
 8004c20:	2101      	movs	r1, #1
 8004c22:	430a      	orrs	r2, r1
 8004c24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c26:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <EXTI0_1_IRQHandler_Config+0x58>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]

	/* Configure PC.13 pin as input floating */
	GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8004c32:	1d3b      	adds	r3, r7, #4
 8004c34:	2284      	movs	r2, #132	@ 0x84
 8004c36:	0392      	lsls	r2, r2, #14
 8004c38:	605a      	str	r2, [r3, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8004c3a:	1d3b      	adds	r3, r7, #4
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	609a      	str	r2, [r3, #8]
	GPIO_InitStructure.Pin = GPIO_PIN_0;
 8004c40:	1d3b      	adds	r3, r7, #4
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004c46:	1d3a      	adds	r2, r7, #4
 8004c48:	23a0      	movs	r3, #160	@ 0xa0
 8004c4a:	05db      	lsls	r3, r3, #23
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f001 fa36 	bl	80060c0 <HAL_GPIO_Init>

	/* Enable and set EXTI lines 4 to 15 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 8004c54:	2200      	movs	r2, #0
 8004c56:	2102      	movs	r1, #2
 8004c58:	2005      	movs	r0, #5
 8004c5a:	f001 f967 	bl	8005f2c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004c5e:	2005      	movs	r0, #5
 8004c60:	f001 f979 	bl	8005f56 <HAL_NVIC_EnableIRQ>
}
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b006      	add	sp, #24
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000

08004c70 <EXTI2_3_IRQHandler_Config>:
/**
 * @brief  Configures EXTI Port B Pin 5 as an interrupt
 * @param  None
 * @retval None
 */
static void EXTI2_3_IRQHandler_Config(void) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOC clock */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004c76:	4b14      	ldr	r3, [pc, #80]	@ (8004cc8 <EXTI2_3_IRQHandler_Config+0x58>)
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	4b13      	ldr	r3, [pc, #76]	@ (8004cc8 <EXTI2_3_IRQHandler_Config+0x58>)
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c82:	4b11      	ldr	r3, [pc, #68]	@ (8004cc8 <EXTI2_3_IRQHandler_Config+0x58>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	2202      	movs	r2, #2
 8004c88:	4013      	ands	r3, r2
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]

	/* Configure PC.13 pin as input floating */
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8004c8e:	1d3b      	adds	r3, r7, #4
 8004c90:	2288      	movs	r2, #136	@ 0x88
 8004c92:	0352      	lsls	r2, r2, #13
 8004c94:	605a      	str	r2, [r3, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8004c96:	1d3b      	adds	r3, r7, #4
 8004c98:	2202      	movs	r2, #2
 8004c9a:	609a      	str	r2, [r3, #8]
	GPIO_InitStructure.Pin = GPIO_PIN_5;
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	4a09      	ldr	r2, [pc, #36]	@ (8004ccc <EXTI2_3_IRQHandler_Config+0x5c>)
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	0010      	movs	r0, r2
 8004caa:	f001 fa09 	bl	80060c0 <HAL_GPIO_Init>

	/* Enable and set EXTI lines 4 to 15 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	2006      	movs	r0, #6
 8004cb4:	f001 f93a 	bl	8005f2c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004cb8:	2006      	movs	r0, #6
 8004cba:	f001 f94c 	bl	8005f56 <HAL_NVIC_EnableIRQ>
}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b006      	add	sp, #24
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	50000400 	.word	0x50000400

08004cd0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b099      	sub	sp, #100	@ 0x64
 8004cd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004cd6:	242c      	movs	r4, #44	@ 0x2c
 8004cd8:	193b      	adds	r3, r7, r4
 8004cda:	0018      	movs	r0, r3
 8004cdc:	2334      	movs	r3, #52	@ 0x34
 8004cde:	001a      	movs	r2, r3
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	f006 f811 	bl	800ad08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004ce6:	2318      	movs	r3, #24
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	0018      	movs	r0, r3
 8004cec:	2314      	movs	r3, #20
 8004cee:	001a      	movs	r2, r3
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f006 f809 	bl	800ad08 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8004cf6:	003b      	movs	r3, r7
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	2318      	movs	r3, #24
 8004cfc:	001a      	movs	r2, r3
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f006 f802 	bl	800ad08 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d04:	4b29      	ldr	r3, [pc, #164]	@ (8004dac <SystemClock_Config+0xdc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a29      	ldr	r2, [pc, #164]	@ (8004db0 <SystemClock_Config+0xe0>)
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <SystemClock_Config+0xdc>)
 8004d0e:	2180      	movs	r1, #128	@ 0x80
 8004d10:	0109      	lsls	r1, r1, #4
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8004d16:	0021      	movs	r1, r4
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d1e:	187b      	adds	r3, r7, r1
 8004d20:	2201      	movs	r2, #1
 8004d22:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	2210      	movs	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	2200      	movs	r2, #0
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f002 fbeb 	bl	8007514 <HAL_RCC_OscConfig>
 8004d3e:	1e03      	subs	r3, r0, #0
 8004d40:	d001      	beq.n	8004d46 <SystemClock_Config+0x76>
		Error_Handler();
 8004d42:	f000 fad3 	bl	80052ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004d46:	2118      	movs	r1, #24
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	220f      	movs	r2, #15
 8004d4c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	2201      	movs	r2, #1
 8004d52:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	2200      	movs	r2, #0
 8004d64:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	2100      	movs	r1, #0
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f002 ff4e 	bl	8007c0c <HAL_RCC_ClockConfig>
 8004d70:	1e03      	subs	r3, r0, #0
 8004d72:	d001      	beq.n	8004d78 <SystemClock_Config+0xa8>
		Error_Handler();
 8004d74:	f000 faba 	bl	80052ec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8004d78:	003b      	movs	r3, r7
 8004d7a:	222a      	movs	r2, #42	@ 0x2a
 8004d7c:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8004d7e:	003b      	movs	r3, r7
 8004d80:	2208      	movs	r2, #8
 8004d82:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004d84:	003b      	movs	r3, r7
 8004d86:	2280      	movs	r2, #128	@ 0x80
 8004d88:	0192      	lsls	r2, r2, #6
 8004d8a:	611a      	str	r2, [r3, #16]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004d8c:	003b      	movs	r3, r7
 8004d8e:	2280      	movs	r2, #128	@ 0x80
 8004d90:	0292      	lsls	r2, r2, #10
 8004d92:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004d94:	003b      	movs	r3, r7
 8004d96:	0018      	movs	r0, r3
 8004d98:	f003 f95c 	bl	8008054 <HAL_RCCEx_PeriphCLKConfig>
 8004d9c:	1e03      	subs	r3, r0, #0
 8004d9e:	d001      	beq.n	8004da4 <SystemClock_Config+0xd4>
		Error_Handler();
 8004da0:	f000 faa4 	bl	80052ec <Error_Handler>
	}
}
 8004da4:	46c0      	nop			@ (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b019      	add	sp, #100	@ 0x64
 8004daa:	bd90      	pop	{r4, r7, pc}
 8004dac:	40007000 	.word	0x40007000
 8004db0:	ffffe7ff 	.word	0xffffe7ff

08004db4 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004dba:	003b      	movs	r3, r7
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	f005 ffa0 	bl	800ad08 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004dca:	4a2b      	ldr	r2, [pc, #172]	@ (8004e78 <MX_ADC_Init+0xc4>)
 8004dcc:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8004dce:	4b29      	ldr	r3, [pc, #164]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004dd4:	4b27      	ldr	r3, [pc, #156]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004dd6:	22c0      	movs	r2, #192	@ 0xc0
 8004dd8:	0612      	lsls	r2, r2, #24
 8004dda:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004ddc:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004de2:	4b24      	ldr	r3, [pc, #144]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004de8:	4b22      	ldr	r3, [pc, #136]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004dee:	4b21      	ldr	r3, [pc, #132]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8004df4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004df6:	2220      	movs	r2, #32
 8004df8:	2100      	movs	r1, #0
 8004dfa:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004dfe:	2221      	movs	r2, #33	@ 0x21
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e04:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e0c:	22c2      	movs	r2, #194	@ 0xc2
 8004e0e:	32ff      	adds	r2, #255	@ 0xff
 8004e10:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e14:	222c      	movs	r2, #44	@ 0x2c
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e1a:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004e20:	4b14      	ldr	r3, [pc, #80]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8004e26:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004e2c:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004e32:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 fdcc 	bl	80059d8 <HAL_ADC_Init>
 8004e40:	1e03      	subs	r3, r0, #0
 8004e42:	d001      	beq.n	8004e48 <MX_ADC_Init+0x94>
		Error_Handler();
 8004e44:	f000 fa52 	bl	80052ec <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8004e48:	003b      	movs	r3, r7
 8004e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e7c <MX_ADC_Init+0xc8>)
 8004e4c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004e4e:	003b      	movs	r3, r7
 8004e50:	2280      	movs	r2, #128	@ 0x80
 8004e52:	0152      	lsls	r2, r2, #5
 8004e54:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004e56:	003a      	movs	r2, r7
 8004e58:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <MX_ADC_Init+0xc0>)
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 ff2f 	bl	8005cc0 <HAL_ADC_ConfigChannel>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d001      	beq.n	8004e6a <MX_ADC_Init+0xb6>
		Error_Handler();
 8004e66:	f000 fa41 	bl	80052ec <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b002      	add	sp, #8
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	20000230 	.word	0x20000230
 8004e78:	40012400 	.word	0x40012400
 8004e7c:	14000020 	.word	0x14000020

08004e80 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004e84:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004e86:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef8 <MX_I2C1_Init+0x78>)
 8004e88:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300617;
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004efc <MX_I2C1_Init+0x7c>)
 8004e8e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004e90:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e96:	4b17      	ldr	r3, [pc, #92]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e9c:	4b15      	ldr	r3, [pc, #84]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8004ea2:	4b14      	ldr	r3, [pc, #80]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ea8:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004eae:	4b11      	ldr	r3, [pc, #68]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004eba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f001 fbaf 	bl	8006620 <HAL_I2C_Init>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d001      	beq.n	8004eca <MX_I2C1_Init+0x4a>
		Error_Handler();
 8004ec6:	f000 fa11 	bl	80052ec <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004ecc:	2100      	movs	r1, #0
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f002 f990 	bl	80071f4 <HAL_I2CEx_ConfigAnalogFilter>
 8004ed4:	1e03      	subs	r3, r0, #0
 8004ed6:	d001      	beq.n	8004edc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8004ed8:	f000 fa08 	bl	80052ec <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <MX_I2C1_Init+0x74>)
 8004ede:	2100      	movs	r1, #0
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f002 f9d3 	bl	800728c <HAL_I2CEx_ConfigDigitalFilter>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d001      	beq.n	8004eee <MX_I2C1_Init+0x6e>
		Error_Handler();
 8004eea:	f000 f9ff 	bl	80052ec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	2000028c 	.word	0x2000028c
 8004ef8:	40005400 	.word	0x40005400
 8004efc:	00300617 	.word	0x00300617

08004f00 <SystemPower_Config>:
 *            + No IWDG
 *            + Wakeup using EXTI Line (Key Button PC.13)
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	//GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable Ultra low power mode */
	HAL_PWREx_EnableUltraLowPower();
 8004f04:	f002 faf8 	bl	80074f8 <HAL_PWREx_EnableUltraLowPower>

	/* Enable the fast wake up from Ultra low power mode */
	HAL_PWREx_EnableFastWakeUp();
 8004f08:	f002 fae8 	bl	80074dc <HAL_PWREx_EnableFastWakeUp>

	/* Select HSI as system clock source after Wake Up from Stop mode */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI); //probably not necessary given reset upon resume from STOP
 8004f0c:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <SystemPower_Config+0x20>)
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	4b03      	ldr	r3, [pc, #12]	@ (8004f20 <SystemPower_Config+0x20>)
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	0209      	lsls	r1, r1, #8
 8004f16:	430a      	orrs	r2, r1
 8004f18:	60da      	str	r2, [r3, #12]
}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000

08004f24 <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <MX_IWDG_Init+0x34>)
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f5c <MX_IWDG_Init+0x38>)
 8004f2c:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <MX_IWDG_Init+0x34>)
 8004f30:	2202      	movs	r2, #2
 8004f32:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = 0xFFF;
 8004f34:	4b08      	ldr	r3, [pc, #32]	@ (8004f58 <MX_IWDG_Init+0x34>)
 8004f36:	4a0a      	ldr	r2, [pc, #40]	@ (8004f60 <MX_IWDG_Init+0x3c>)
 8004f38:	60da      	str	r2, [r3, #12]
	hiwdg.Init.Reload = 2300; //around 1 second with prescaler 16
 8004f3a:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <MX_IWDG_Init+0x34>)
 8004f3c:	4a09      	ldr	r2, [pc, #36]	@ (8004f64 <MX_IWDG_Init+0x40>)
 8004f3e:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <MX_IWDG_Init+0x34>)
 8004f42:	0018      	movs	r0, r3
 8004f44:	f002 f9ee 	bl	8007324 <HAL_IWDG_Init>
 8004f48:	1e03      	subs	r3, r0, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_IWDG_Init+0x2c>
		Error_Handler();
 8004f4c:	f000 f9ce 	bl	80052ec <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 8004f50:	46c0      	nop			@ (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	200003a8 	.word	0x200003a8
 8004f5c:	40003000 	.word	0x40003000
 8004f60:	00000fff 	.word	0x00000fff
 8004f64:	000008fc 	.word	0x000008fc

08004f68 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004f6e:	2308      	movs	r3, #8
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	0018      	movs	r0, r3
 8004f74:	2310      	movs	r3, #16
 8004f76:	001a      	movs	r2, r3
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f005 fec5 	bl	800ad08 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004f7e:	003b      	movs	r3, r7
 8004f80:	0018      	movs	r0, r3
 8004f82:	2308      	movs	r3, #8
 8004f84:	001a      	movs	r2, r3
 8004f86:	2100      	movs	r1, #0
 8004f88:	f005 febe 	bl	800ad08 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004f8e:	2280      	movs	r2, #128	@ 0x80
 8004f90:	05d2      	lsls	r2, r2, #23
 8004f92:	601a      	str	r2, [r3, #0]
	//htim2.Init.Prescaler = 31; for 32Mhz
	htim2.Init.Prescaler = 14; //for 16MHz
 8004f94:	4b1c      	ldr	r3, [pc, #112]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004f96:	220e      	movs	r2, #14
 8004f98:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8004fa0:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800500c <MX_TIM2_Init+0xa4>)
 8004fa4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa6:	4b18      	ldr	r3, [pc, #96]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fac:	4b16      	ldr	r3, [pc, #88]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004fb2:	4b15      	ldr	r3, [pc, #84]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f003 fad9 	bl	800856c <HAL_TIM_Base_Init>
 8004fba:	1e03      	subs	r3, r0, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8004fbe:	f000 f995 	bl	80052ec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fc2:	2108      	movs	r1, #8
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	2280      	movs	r2, #128	@ 0x80
 8004fc8:	0152      	lsls	r2, r2, #5
 8004fca:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004fcc:	187a      	adds	r2, r7, r1
 8004fce:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f003 fb46 	bl	8008664 <HAL_TIM_ConfigClockSource>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_TIM2_Init+0x78>
		Error_Handler();
 8004fdc:	f000 f986 	bl	80052ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fe0:	003b      	movs	r3, r7
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe6:	003b      	movs	r3, r7
 8004fe8:	2200      	movs	r2, #0
 8004fea:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8004fec:	003a      	movs	r2, r7
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <MX_TIM2_Init+0xa0>)
 8004ff0:	0011      	movs	r1, r2
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f003 fcee 	bl	80089d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ff8:	1e03      	subs	r3, r0, #0
 8004ffa:	d001      	beq.n	8005000 <MX_TIM2_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8004ffc:	f000 f976 	bl	80052ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b006      	add	sp, #24
 8005006:	bd80      	pop	{r7, pc}
 8005008:	200002e0 	.word	0x200002e0
 800500c:	0000ffff 	.word	0x0000ffff

08005010 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005014:	4b14      	ldr	r3, [pc, #80]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 8005016:	4a15      	ldr	r2, [pc, #84]	@ (800506c <MX_USART2_UART_Init+0x5c>)
 8005018:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800501a:	4b13      	ldr	r3, [pc, #76]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 800501c:	22e1      	movs	r2, #225	@ 0xe1
 800501e:	0252      	lsls	r2, r2, #9
 8005020:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005022:	4b11      	ldr	r3, [pc, #68]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 8005024:	2200      	movs	r2, #0
 8005026:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8005028:	4b0f      	ldr	r3, [pc, #60]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 800502a:	2200      	movs	r2, #0
 800502c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800502e:	4b0e      	ldr	r3, [pc, #56]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 8005030:	2200      	movs	r2, #0
 8005032:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8005034:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 8005036:	220c      	movs	r2, #12
 8005038:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800503a:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 800503c:	2200      	movs	r2, #0
 800503e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005040:	4b09      	ldr	r3, [pc, #36]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005046:	4b08      	ldr	r3, [pc, #32]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 8005048:	2200      	movs	r2, #0
 800504a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 800504e:	2200      	movs	r2, #0
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8005052:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <MX_USART2_UART_Init+0x58>)
 8005054:	0018      	movs	r0, r3
 8005056:	f003 fd0d 	bl	8008a74 <HAL_UART_Init>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d001      	beq.n	8005062 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800505e:	f000 f945 	bl	80052ec <Error_Handler>
	}

}
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000320 	.word	0x20000320
 800506c:	40004400 	.word	0x40004400

08005070 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8005074:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <MX_RTC_Init+0x4c>)
 8005076:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <MX_RTC_Init+0x50>)
 8005078:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800507a:	4b10      	ldr	r3, [pc, #64]	@ (80050bc <MX_RTC_Init+0x4c>)
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8005080:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <MX_RTC_Init+0x4c>)
 8005082:	227f      	movs	r2, #127	@ 0x7f
 8005084:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <MX_RTC_Init+0x4c>)
 8005088:	22ff      	movs	r2, #255	@ 0xff
 800508a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800508c:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <MX_RTC_Init+0x4c>)
 800508e:	2200      	movs	r2, #0
 8005090:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005092:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <MX_RTC_Init+0x4c>)
 8005094:	2200      	movs	r2, #0
 8005096:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005098:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <MX_RTC_Init+0x4c>)
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800509e:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <MX_RTC_Init+0x4c>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80050a4:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <MX_RTC_Init+0x4c>)
 80050a6:	0018      	movs	r0, r3
 80050a8:	f003 f900 	bl	80082ac <HAL_RTC_Init>
 80050ac:	1e03      	subs	r3, r0, #0
 80050ae:	d001      	beq.n	80050b4 <MX_RTC_Init+0x44>
		Error_Handler();
 80050b0:	f000 f91c 	bl	80052ec <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80050b4:	46c0      	nop			@ (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	200003b8 	.word	0x200003b8
 80050c0:	40002800 	.word	0x40002800

080050c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b089      	sub	sp, #36	@ 0x24
 80050c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80050ca:	240c      	movs	r4, #12
 80050cc:	193b      	adds	r3, r7, r4
 80050ce:	0018      	movs	r0, r3
 80050d0:	2314      	movs	r3, #20
 80050d2:	001a      	movs	r2, r3
 80050d4:	2100      	movs	r1, #0
 80050d6:	f005 fe17 	bl	800ad08 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80050da:	4b3d      	ldr	r3, [pc, #244]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 80050dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050de:	4b3c      	ldr	r3, [pc, #240]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 80050e0:	2104      	movs	r1, #4
 80050e2:	430a      	orrs	r2, r1
 80050e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050e6:	4b3a      	ldr	r3, [pc, #232]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	2204      	movs	r2, #4
 80050ec:	4013      	ands	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80050f2:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	4b36      	ldr	r3, [pc, #216]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 80050f8:	2101      	movs	r1, #1
 80050fa:	430a      	orrs	r2, r1
 80050fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050fe:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	2201      	movs	r2, #1
 8005104:	4013      	ands	r3, r2
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800510a:	4b31      	ldr	r3, [pc, #196]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 800510c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510e:	4b30      	ldr	r3, [pc, #192]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 8005110:	2102      	movs	r1, #2
 8005112:	430a      	orrs	r2, r1
 8005114:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005116:	4b2e      	ldr	r3, [pc, #184]	@ (80051d0 <MX_GPIO_Init+0x10c>)
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	2202      	movs	r2, #2
 800511c:	4013      	ands	r3, r2
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8005122:	492c      	ldr	r1, [pc, #176]	@ (80051d4 <MX_GPIO_Init+0x110>)
 8005124:	23a0      	movs	r3, #160	@ 0xa0
 8005126:	05db      	lsls	r3, r3, #23
 8005128:	2200      	movs	r2, #0
 800512a:	0018      	movs	r0, r3
 800512c:	f001 fa35 	bl	800659a <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8005130:	4b29      	ldr	r3, [pc, #164]	@ (80051d8 <MX_GPIO_Init+0x114>)
 8005132:	2200      	movs	r2, #0
 8005134:	211b      	movs	r1, #27
 8005136:	0018      	movs	r0, r3
 8005138:	f001 fa2f 	bl	800659a <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 800513c:	193b      	adds	r3, r7, r4
 800513e:	4a25      	ldr	r2, [pc, #148]	@ (80051d4 <MX_GPIO_Init+0x110>)
 8005140:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005142:	193b      	adds	r3, r7, r4
 8005144:	2201      	movs	r2, #1
 8005146:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	193b      	adds	r3, r7, r4
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514e:	193b      	adds	r3, r7, r4
 8005150:	2200      	movs	r2, #0
 8005152:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005154:	193a      	adds	r2, r7, r4
 8005156:	23a0      	movs	r3, #160	@ 0xa0
 8005158:	05db      	lsls	r3, r3, #23
 800515a:	0011      	movs	r1, r2
 800515c:	0018      	movs	r0, r3
 800515e:	f000 ffaf 	bl	80060c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4;
 8005162:	193b      	adds	r3, r7, r4
 8005164:	221b      	movs	r2, #27
 8005166:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005168:	193b      	adds	r3, r7, r4
 800516a:	2201      	movs	r2, #1
 800516c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	193b      	adds	r3, r7, r4
 8005170:	2200      	movs	r2, #0
 8005172:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005174:	193b      	adds	r3, r7, r4
 8005176:	2200      	movs	r2, #0
 8005178:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517a:	193b      	adds	r3, r7, r4
 800517c:	4a16      	ldr	r2, [pc, #88]	@ (80051d8 <MX_GPIO_Init+0x114>)
 800517e:	0019      	movs	r1, r3
 8005180:	0010      	movs	r0, r2
 8005182:	f000 ff9d 	bl	80060c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005186:	193b      	adds	r3, r7, r4
 8005188:	2220      	movs	r2, #32
 800518a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800518c:	193b      	adds	r3, r7, r4
 800518e:	2200      	movs	r2, #0
 8005190:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	193b      	adds	r3, r7, r4
 8005194:	2200      	movs	r2, #0
 8005196:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005198:	193b      	adds	r3, r7, r4
 800519a:	4a0f      	ldr	r2, [pc, #60]	@ (80051d8 <MX_GPIO_Init+0x114>)
 800519c:	0019      	movs	r1, r3
 800519e:	0010      	movs	r0, r2
 80051a0:	f000 ff8e 	bl	80060c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80051a4:	0021      	movs	r1, r4
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	2200      	movs	r2, #0
 80051b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	2201      	movs	r2, #1
 80051b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b8:	187a      	adds	r2, r7, r1
 80051ba:	23a0      	movs	r3, #160	@ 0xa0
 80051bc:	05db      	lsls	r3, r3, #23
 80051be:	0011      	movs	r1, r2
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 ff7d 	bl	80060c0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b009      	add	sp, #36	@ 0x24
 80051cc:	bd90      	pop	{r4, r7, pc}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	40021000 	.word	0x40021000
 80051d4:	000003c2 	.word	0x000003c2
 80051d8:	50000400 	.word	0x50000400

080051dc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

//receive commands, all of which should be 8 bytes long
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	000a      	movs	r2, r1
 80051e6:	1cbb      	adds	r3, r7, #2
 80051e8:	801a      	strh	r2, [r3, #0]
	if (!UartBusy) {
 80051ea:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <HAL_UARTEx_RxEventCallback+0x58>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11a      	bne.n	800522a <HAL_UARTEx_RxEventCallback+0x4e>
		UartBusy = SET;
 80051f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005234 <HAL_UARTEx_RxEventCallback+0x58>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE); //prevent interrupt from pre-empting responding and re-initialization
 80051fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005238 <HAL_UARTEx_RxEventCallback+0x5c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <HAL_UARTEx_RxEventCallback+0x5c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2120      	movs	r1, #32
 8005206:	438a      	bics	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
		if (Size == 8) {
 800520a:	1cbb      	adds	r3, r7, #2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d104      	bne.n	800521c <HAL_UARTEx_RxEventCallback+0x40>
			UART_Respond(UART_RxData, 8);
 8005212:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <HAL_UARTEx_RxEventCallback+0x60>)
 8005214:	2108      	movs	r1, #8
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff f8ac 	bl	8004374 <UART_Respond>
		}

		UartBusy = RESET;
 800521c:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_UARTEx_RxEventCallback+0x58>)
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
		THVD2410_Receive();
 8005222:	f7fe feeb 	bl	8003ffc <THVD2410_Receive>
		UART_WaitForCommand();
 8005226:	f7fe fefd 	bl	8004024 <UART_WaitForCommand>
	}
}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b002      	add	sp, #8
 8005230:	bd80      	pop	{r7, pc}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	200003dc 	.word	0x200003dc
 8005238:	20000320 	.word	0x20000320
 800523c:	20000474 	.word	0x20000474

08005240 <HAL_UART_ErrorCallback>:

/* Function handle UART errors. Tries to clear the error bit. If the error isn't one of these, then we reset the UART */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE); //disable interrupt
 8005248:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2120      	movs	r1, #32
 8005254:	438a      	bics	r2, r1
 8005256:	601a      	str	r2, [r3, #0]

	if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2284      	movs	r2, #132	@ 0x84
 800525c:	589b      	ldr	r3, [r3, r2]
 800525e:	2204      	movs	r2, #4
 8005260:	4013      	ands	r3, r2
 8005262:	d003      	beq.n	800526c <HAL_UART_ErrorCallback+0x2c>
		// frame error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_FEF);
 8005264:	4b1f      	ldr	r3, [pc, #124]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2202      	movs	r2, #2
 800526a:	621a      	str	r2, [r3, #32]
	}
	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2284      	movs	r2, #132	@ 0x84
 8005270:	589b      	ldr	r3, [r3, r2]
 8005272:	2208      	movs	r2, #8
 8005274:	4013      	ands	r3, r2
 8005276:	d003      	beq.n	8005280 <HAL_UART_ErrorCallback+0x40>
		// overrun error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_OREF);
 8005278:	4b1a      	ldr	r3, [pc, #104]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2208      	movs	r2, #8
 800527e:	621a      	str	r2, [r3, #32]
	}
	if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2284      	movs	r2, #132	@ 0x84
 8005284:	589b      	ldr	r3, [r3, r2]
 8005286:	2202      	movs	r2, #2
 8005288:	4013      	ands	r3, r2
 800528a:	d003      	beq.n	8005294 <HAL_UART_ErrorCallback+0x54>
		// overrun error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_NEF);
 800528c:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2204      	movs	r2, #4
 8005292:	621a      	str	r2, [r3, #32]
	}
	if (huart->ErrorCode & HAL_UART_ERROR_PE) {
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2284      	movs	r2, #132	@ 0x84
 8005298:	589b      	ldr	r3, [r3, r2]
 800529a:	2201      	movs	r2, #1
 800529c:	4013      	ands	r3, r2
 800529e:	d003      	beq.n	80052a8 <HAL_UART_ErrorCallback+0x68>
		// overrun error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_PEF);
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	621a      	str	r2, [r3, #32]
	}

	// if there are any remaining error codes, reset the UART peripheral
	if (!huart->ErrorCode) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2284      	movs	r2, #132	@ 0x84
 80052ac:	589b      	ldr	r3, [r3, r2]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_UART_ErrorCallback+0x92>
		//fully re-initialize uart. Slower, but we might need to recover from a new error
		if (HAL_UART_DeInit(&huart2) != HAL_OK) {
 80052b2:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 80052b4:	0018      	movs	r0, r3
 80052b6:	f003 fc31 	bl	8008b1c <HAL_UART_DeInit>
 80052ba:	1e03      	subs	r3, r0, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_UART_ErrorCallback+0x82>
			Error_Handler();
 80052be:	f000 f815 	bl	80052ec <Error_Handler>
		}
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <HAL_UART_ErrorCallback+0xa4>)
 80052c4:	0018      	movs	r0, r3
 80052c6:	f003 fbd5 	bl	8008a74 <HAL_UART_Init>
 80052ca:	1e03      	subs	r3, r0, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_UART_ErrorCallback+0x92>
			Error_Handler();
 80052ce:	f000 f80d 	bl	80052ec <Error_Handler>

		}
	}

	UartBusy = RESET;
 80052d2:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <HAL_UART_ErrorCallback+0xa8>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
	UART_WaitForCommand();
 80052d8:	f7fe fea4 	bl	8004024 <UART_WaitForCommand>
}
 80052dc:	46c0      	nop			@ (mov r8, r8)
 80052de:	46bd      	mov	sp, r7
 80052e0:	b002      	add	sp, #8
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000320 	.word	0x20000320
 80052e8:	200003dc 	.word	0x200003dc

080052ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80052f0:	b672      	cpsid	i
}
 80052f2:	46c0      	nop			@ (mov r8, r8)
	if (DEBUG) {
		STM32_BlinkForever(2000); //watchdog should be disabled in DEBUG mode, so this is OK.
	}

	//reset and hope things go better the next time around
	delayMS(&htim2, 1000); //wait a second
 80052f4:	23fa      	movs	r3, #250	@ 0xfa
 80052f6:	009a      	lsls	r2, r3, #2
 80052f8:	4b03      	ldr	r3, [pc, #12]	@ (8005308 <Error_Handler+0x1c>)
 80052fa:	0011      	movs	r1, r2
 80052fc:	0018      	movs	r0, r3
 80052fe:	f000 fa5d 	bl	80057bc <delayMS>
	while (1)
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	e7fd      	b.n	8005302 <Error_Handler+0x16>
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	200002e0 	.word	0x200002e0

0800530c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005310:	4b07      	ldr	r3, [pc, #28]	@ (8005330 <HAL_MspInit+0x24>)
 8005312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005314:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <HAL_MspInit+0x24>)
 8005316:	2101      	movs	r1, #1
 8005318:	430a      	orrs	r2, r1
 800531a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800531c:	4b04      	ldr	r3, [pc, #16]	@ (8005330 <HAL_MspInit+0x24>)
 800531e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005320:	4b03      	ldr	r3, [pc, #12]	@ (8005330 <HAL_MspInit+0x24>)
 8005322:	2180      	movs	r1, #128	@ 0x80
 8005324:	0549      	lsls	r1, r1, #21
 8005326:	430a      	orrs	r2, r1
 8005328:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000

08005334 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b089      	sub	sp, #36	@ 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800533c:	240c      	movs	r4, #12
 800533e:	193b      	adds	r3, r7, r4
 8005340:	0018      	movs	r0, r3
 8005342:	2314      	movs	r3, #20
 8005344:	001a      	movs	r2, r3
 8005346:	2100      	movs	r1, #0
 8005348:	f005 fcde 	bl	800ad08 <memset>
  if(hadc->Instance==ADC1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a14      	ldr	r2, [pc, #80]	@ (80053a4 <HAL_ADC_MspInit+0x70>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d122      	bne.n	800539c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005356:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <HAL_ADC_MspInit+0x74>)
 8005358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800535a:	4b13      	ldr	r3, [pc, #76]	@ (80053a8 <HAL_ADC_MspInit+0x74>)
 800535c:	2180      	movs	r1, #128	@ 0x80
 800535e:	0089      	lsls	r1, r1, #2
 8005360:	430a      	orrs	r2, r1
 8005362:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <HAL_ADC_MspInit+0x74>)
 8005366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005368:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <HAL_ADC_MspInit+0x74>)
 800536a:	2101      	movs	r1, #1
 800536c:	430a      	orrs	r2, r1
 800536e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005370:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <HAL_ADC_MspInit+0x74>)
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	2201      	movs	r2, #1
 8005376:	4013      	ands	r3, r2
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800537c:	193b      	adds	r3, r7, r4
 800537e:	2220      	movs	r2, #32
 8005380:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005382:	193b      	adds	r3, r7, r4
 8005384:	2203      	movs	r2, #3
 8005386:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	193b      	adds	r3, r7, r4
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538e:	193a      	adds	r2, r7, r4
 8005390:	23a0      	movs	r3, #160	@ 0xa0
 8005392:	05db      	lsls	r3, r3, #23
 8005394:	0011      	movs	r1, r2
 8005396:	0018      	movs	r0, r3
 8005398:	f000 fe92 	bl	80060c0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b009      	add	sp, #36	@ 0x24
 80053a2:	bd90      	pop	{r4, r7, pc}
 80053a4:	40012400 	.word	0x40012400
 80053a8:	40021000 	.word	0x40021000

080053ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b089      	sub	sp, #36	@ 0x24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b4:	240c      	movs	r4, #12
 80053b6:	193b      	adds	r3, r7, r4
 80053b8:	0018      	movs	r0, r3
 80053ba:	2314      	movs	r3, #20
 80053bc:	001a      	movs	r2, r3
 80053be:	2100      	movs	r1, #0
 80053c0:	f005 fca2 	bl	800ad08 <memset>
  if(hi2c->Instance==I2C1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a17      	ldr	r2, [pc, #92]	@ (8005428 <HAL_I2C_MspInit+0x7c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d128      	bne.n	8005420 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ce:	4b17      	ldr	r3, [pc, #92]	@ (800542c <HAL_I2C_MspInit+0x80>)
 80053d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d2:	4b16      	ldr	r3, [pc, #88]	@ (800542c <HAL_I2C_MspInit+0x80>)
 80053d4:	2102      	movs	r1, #2
 80053d6:	430a      	orrs	r2, r1
 80053d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80053da:	4b14      	ldr	r3, [pc, #80]	@ (800542c <HAL_I2C_MspInit+0x80>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	2202      	movs	r2, #2
 80053e0:	4013      	ands	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053e6:	0021      	movs	r1, r4
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	22c0      	movs	r2, #192	@ 0xc0
 80053ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	2212      	movs	r2, #18
 80053f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f4:	187b      	adds	r3, r7, r1
 80053f6:	2200      	movs	r2, #0
 80053f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053fa:	187b      	adds	r3, r7, r1
 80053fc:	2203      	movs	r2, #3
 80053fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005400:	187b      	adds	r3, r7, r1
 8005402:	2201      	movs	r2, #1
 8005404:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005406:	187b      	adds	r3, r7, r1
 8005408:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <HAL_I2C_MspInit+0x84>)
 800540a:	0019      	movs	r1, r3
 800540c:	0010      	movs	r0, r2
 800540e:	f000 fe57 	bl	80060c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005412:	4b06      	ldr	r3, [pc, #24]	@ (800542c <HAL_I2C_MspInit+0x80>)
 8005414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005416:	4b05      	ldr	r3, [pc, #20]	@ (800542c <HAL_I2C_MspInit+0x80>)
 8005418:	2180      	movs	r1, #128	@ 0x80
 800541a:	0389      	lsls	r1, r1, #14
 800541c:	430a      	orrs	r2, r1
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b009      	add	sp, #36	@ 0x24
 8005426:	bd90      	pop	{r4, r7, pc}
 8005428:	40005400 	.word	0x40005400
 800542c:	40021000 	.word	0x40021000
 8005430:	50000400 	.word	0x50000400

08005434 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a06      	ldr	r2, [pc, #24]	@ (800545c <HAL_RTC_MspInit+0x28>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d106      	bne.n	8005454 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005446:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <HAL_RTC_MspInit+0x2c>)
 8005448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800544a:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <HAL_RTC_MspInit+0x2c>)
 800544c:	2180      	movs	r1, #128	@ 0x80
 800544e:	02c9      	lsls	r1, r1, #11
 8005450:	430a      	orrs	r2, r1
 8005452:	651a      	str	r2, [r3, #80]	@ 0x50

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8005454:	46c0      	nop			@ (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40002800 	.word	0x40002800
 8005460:	40021000 	.word	0x40021000

08005464 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a06      	ldr	r2, [pc, #24]	@ (800548c <HAL_RTC_MspDeInit+0x28>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d105      	bne.n	8005482 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <HAL_RTC_MspDeInit+0x2c>)
 8005478:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800547a:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <HAL_RTC_MspDeInit+0x2c>)
 800547c:	4905      	ldr	r1, [pc, #20]	@ (8005494 <HAL_RTC_MspDeInit+0x30>)
 800547e:	400a      	ands	r2, r1
 8005480:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	46bd      	mov	sp, r7
 8005486:	b002      	add	sp, #8
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	40002800 	.word	0x40002800
 8005490:	40021000 	.word	0x40021000
 8005494:	fffbffff 	.word	0xfffbffff

08005498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2380      	movs	r3, #128	@ 0x80
 80054a6:	05db      	lsls	r3, r3, #23
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d105      	bne.n	80054b8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054ac:	4b04      	ldr	r3, [pc, #16]	@ (80054c0 <HAL_TIM_Base_MspInit+0x28>)
 80054ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b0:	4b03      	ldr	r3, [pc, #12]	@ (80054c0 <HAL_TIM_Base_MspInit+0x28>)
 80054b2:	2101      	movs	r1, #1
 80054b4:	430a      	orrs	r2, r1
 80054b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80054b8:	46c0      	nop			@ (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000

080054c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b089      	sub	sp, #36	@ 0x24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054cc:	240c      	movs	r4, #12
 80054ce:	193b      	adds	r3, r7, r4
 80054d0:	0018      	movs	r0, r3
 80054d2:	2314      	movs	r3, #20
 80054d4:	001a      	movs	r2, r3
 80054d6:	2100      	movs	r1, #0
 80054d8:	f005 fc16 	bl	800ad08 <memset>
  if(huart->Instance==USART2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <HAL_UART_MspInit+0x90>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d131      	bne.n	800554a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80054e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <HAL_UART_MspInit+0x94>)
 80054e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005558 <HAL_UART_MspInit+0x94>)
 80054ec:	2180      	movs	r1, #128	@ 0x80
 80054ee:	0289      	lsls	r1, r1, #10
 80054f0:	430a      	orrs	r2, r1
 80054f2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f4:	4b18      	ldr	r3, [pc, #96]	@ (8005558 <HAL_UART_MspInit+0x94>)
 80054f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f8:	4b17      	ldr	r3, [pc, #92]	@ (8005558 <HAL_UART_MspInit+0x94>)
 80054fa:	2101      	movs	r1, #1
 80054fc:	430a      	orrs	r2, r1
 80054fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005500:	4b15      	ldr	r3, [pc, #84]	@ (8005558 <HAL_UART_MspInit+0x94>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	2201      	movs	r2, #1
 8005506:	4013      	ands	r3, r2
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800550c:	0021      	movs	r1, r4
 800550e:	187b      	adds	r3, r7, r1
 8005510:	220c      	movs	r2, #12
 8005512:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005514:	187b      	adds	r3, r7, r1
 8005516:	2202      	movs	r2, #2
 8005518:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800551a:	187b      	adds	r3, r7, r1
 800551c:	2200      	movs	r2, #0
 800551e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005520:	187b      	adds	r3, r7, r1
 8005522:	2203      	movs	r2, #3
 8005524:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8005526:	187b      	adds	r3, r7, r1
 8005528:	2204      	movs	r2, #4
 800552a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800552c:	187a      	adds	r2, r7, r1
 800552e:	23a0      	movs	r3, #160	@ 0xa0
 8005530:	05db      	lsls	r3, r3, #23
 8005532:	0011      	movs	r1, r2
 8005534:	0018      	movs	r0, r3
 8005536:	f000 fdc3 	bl	80060c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0); //changed to 2 to match other function
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	201c      	movs	r0, #28
 8005540:	f000 fcf4 	bl	8005f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005544:	201c      	movs	r0, #28
 8005546:	f000 fd06 	bl	8005f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b009      	add	sp, #36	@ 0x24
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	40004400 	.word	0x40004400
 8005558:	40021000 	.word	0x40021000

0800555c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0a      	ldr	r2, [pc, #40]	@ (8005594 <HAL_UART_MspDeInit+0x38>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d10e      	bne.n	800558c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800556e:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <HAL_UART_MspDeInit+0x3c>)
 8005570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005572:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <HAL_UART_MspDeInit+0x3c>)
 8005574:	4909      	ldr	r1, [pc, #36]	@ (800559c <HAL_UART_MspDeInit+0x40>)
 8005576:	400a      	ands	r2, r1
 8005578:	639a      	str	r2, [r3, #56]	@ 0x38

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800557a:	23a0      	movs	r3, #160	@ 0xa0
 800557c:	05db      	lsls	r3, r3, #23
 800557e:	210c      	movs	r1, #12
 8005580:	0018      	movs	r0, r3
 8005582:	f000 ff13 	bl	80063ac <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005586:	201c      	movs	r0, #28
 8005588:	f000 fcf5 	bl	8005f76 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b002      	add	sp, #8
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40004400 	.word	0x40004400
 8005598:	40021000 	.word	0x40021000
 800559c:	fffdffff 	.word	0xfffdffff

080055a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	e7fd      	b.n	80055a4 <NMI_Handler+0x4>

080055a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//NVIC_SystemReset(); //reset on hard fault
  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	e7fd      	b.n	80055ac <HardFault_Handler+0x4>

080055b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055c8:	f000 f9ea 	bl	80059a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <USART2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055d8:	4b03      	ldr	r3, [pc, #12]	@ (80055e8 <USART2_IRQHandler+0x14>)
 80055da:	0018      	movs	r0, r3
 80055dc:	f003 fb7c 	bl	8008cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055e0:	46c0      	nop			@ (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	20000320 	.word	0x20000320

080055ec <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80055f0:	2001      	movs	r0, #1
 80055f2:	f000 ffef 	bl	80065d4 <HAL_GPIO_EXTI_IRQHandler>
	//EXTI->PR = EXTI_PR_PIF0;
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <EXTI2_3_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_3_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005600:	2020      	movs	r0, #32
 8005602:	f000 ffe7 	bl	80065d4 <HAL_GPIO_EXTI_IRQHandler>
	//EXTI->PR = EXTI_PR_PIF0;
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

}
 8005606:	46c0      	nop			@ (mov r8, r8)
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  return 1;
 8005610:	2301      	movs	r3, #1
}
 8005612:	0018      	movs	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <_kill>:

int _kill(int pid, int sig)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005622:	f005 fbcb 	bl	800adbc <__errno>
 8005626:	0003      	movs	r3, r0
 8005628:	2216      	movs	r2, #22
 800562a:	601a      	str	r2, [r3, #0]
  return -1;
 800562c:	2301      	movs	r3, #1
 800562e:	425b      	negs	r3, r3
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <_exit>:

void _exit (int status)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005640:	2301      	movs	r3, #1
 8005642:	425a      	negs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff ffe5 	bl	8005618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	e7fd      	b.n	800564e <_exit+0x16>

08005652 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e00a      	b.n	800567a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005664:	e000      	b.n	8005668 <_read+0x16>
 8005666:	bf00      	nop
 8005668:	0001      	movs	r1, r0
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	60ba      	str	r2, [r7, #8]
 8005670:	b2ca      	uxtb	r2, r1
 8005672:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3301      	adds	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	dbf0      	blt.n	8005664 <_read+0x12>
  }

  return len;
 8005682:	687b      	ldr	r3, [r7, #4]
}
 8005684:	0018      	movs	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	b006      	add	sp, #24
 800568a:	bd80      	pop	{r7, pc}

0800568c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e009      	b.n	80056b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	60ba      	str	r2, [r7, #8]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7ff fa6e 	bl	8004b88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	dbf1      	blt.n	800569e <_write+0x12>
  }
  return len;
 80056ba:	687b      	ldr	r3, [r7, #4]
}
 80056bc:	0018      	movs	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	b006      	add	sp, #24
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <_close>:

int _close(int file)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056cc:	2301      	movs	r3, #1
 80056ce:	425b      	negs	r3, r3
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b002      	add	sp, #8
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2280      	movs	r2, #128	@ 0x80
 80056e6:	0192      	lsls	r2, r2, #6
 80056e8:	605a      	str	r2, [r3, #4]
  return 0;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b002      	add	sp, #8
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <_isatty>:

int _isatty(int file)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80056fc:	2301      	movs	r3, #1
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b002      	add	sp, #8
 8005704:	bd80      	pop	{r7, pc}

08005706 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005712:	2300      	movs	r3, #0
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b004      	add	sp, #16
 800571a:	bd80      	pop	{r7, pc}

0800571c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005724:	4a14      	ldr	r2, [pc, #80]	@ (8005778 <_sbrk+0x5c>)
 8005726:	4b15      	ldr	r3, [pc, #84]	@ (800577c <_sbrk+0x60>)
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005730:	4b13      	ldr	r3, [pc, #76]	@ (8005780 <_sbrk+0x64>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005738:	4b11      	ldr	r3, [pc, #68]	@ (8005780 <_sbrk+0x64>)
 800573a:	4a12      	ldr	r2, [pc, #72]	@ (8005784 <_sbrk+0x68>)
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800573e:	4b10      	ldr	r3, [pc, #64]	@ (8005780 <_sbrk+0x64>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	429a      	cmp	r2, r3
 800574a:	d207      	bcs.n	800575c <_sbrk+0x40>
  {
      errno = ENOMEM;
 800574c:	f005 fb36 	bl	800adbc <__errno>
 8005750:	0003      	movs	r3, r0
 8005752:	220c      	movs	r2, #12
 8005754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005756:	2301      	movs	r3, #1
 8005758:	425b      	negs	r3, r3
 800575a:	e009      	b.n	8005770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800575c:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <_sbrk+0x64>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005762:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <_sbrk+0x64>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	18d2      	adds	r2, r2, r3
 800576a:	4b05      	ldr	r3, [pc, #20]	@ (8005780 <_sbrk+0x64>)
 800576c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800576e:	68fb      	ldr	r3, [r7, #12]
}
 8005770:	0018      	movs	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	b006      	add	sp, #24
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20002000 	.word	0x20002000
 800577c:	00000400 	.word	0x00000400
 8005780:	2000049c 	.word	0x2000049c
 8005784:	200005f0 	.word	0x200005f0

08005788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800578c:	46c0      	nop			@ (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <delayUS>:

#include "utils.h"
#include "stm32l0xx_hal.h"

void delayUS(TIM_HandleTypeDef* timer,uint32_t us) {   // Sets the delay in microseconds.
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(timer, 0);  // set the counter value a 0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < us);
 80057a4:	46c0      	nop			@ (mov r8, r8)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d8f9      	bhi.n	80057a6 <delayUS+0x14>
}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	46c0      	nop			@ (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b002      	add	sp, #8
 80057ba:	bd80      	pop	{r7, pc}

080057bc <delayMS>:

void delayMS(TIM_HandleTypeDef* timer,uint32_t ms) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < ms; i++) {
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e009      	b.n	80057e0 <delayMS+0x24>
		delayUS(timer,1000);
 80057cc:	23fa      	movs	r3, #250	@ 0xfa
 80057ce:	009a      	lsls	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	0011      	movs	r1, r2
 80057d4:	0018      	movs	r0, r3
 80057d6:	f7ff ffdc 	bl	8005792 <delayUS>
	for (int i = 0; i < ms; i++) {
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d8f1      	bhi.n	80057cc <delayMS+0x10>
	}
}
 80057e8:	46c0      	nop			@ (mov r8, r8)
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b004      	add	sp, #16
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <CopyArray>:

void CopyArray(uint8_t *source, uint8_t *dest, uint8_t count) {
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	1dfb      	adds	r3, r7, #7
 80057fe:	701a      	strb	r2, [r3, #0]
	uint8_t copyIndex = 0;
 8005800:	2117      	movs	r1, #23
 8005802:	187b      	adds	r3, r7, r1
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
	for (copyIndex = 0; copyIndex < count; copyIndex++) {
 8005808:	187b      	adds	r3, r7, r1
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e00f      	b.n	8005830 <CopyArray+0x3e>
		dest[copyIndex] = source[copyIndex];
 8005810:	2017      	movs	r0, #23
 8005812:	183b      	adds	r3, r7, r0
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	18d2      	adds	r2, r2, r3
 800581a:	183b      	adds	r3, r7, r0
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	18cb      	adds	r3, r1, r3
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	701a      	strb	r2, [r3, #0]
	for (copyIndex = 0; copyIndex < count; copyIndex++) {
 8005826:	183b      	adds	r3, r7, r0
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	183b      	adds	r3, r7, r0
 800582c:	3201      	adds	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	2317      	movs	r3, #23
 8005832:	18fa      	adds	r2, r7, r3
 8005834:	1dfb      	adds	r3, r7, #7
 8005836:	7812      	ldrb	r2, [r2, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3e8      	bcc.n	8005810 <CopyArray+0x1e>
	}
}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	46c0      	nop			@ (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b006      	add	sp, #24
 8005846:	bd80      	pop	{r7, pc}

08005848 <FloatToUInt32t>:
	returnFloat[3] = floatToConvert[0];

	return retVal;
}

uint32_t FloatToUInt32t(float n) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	return (uint32_t) (*(uint32_t*) &n);
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	0018      	movs	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	b002      	add	sp, #8
 800585a:	bd80      	pop	{r7, pc}

0800585c <FloatToInt8t>:

int8_t FloatToInt8t(float n) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	return (int8_t) (*(int8_t*) &n);
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b25b      	sxtb	r3, r3
}
 800586a:	0018      	movs	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	b002      	add	sp, #8
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005874:	4813      	ldr	r0, [pc, #76]	@ (80058c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005876:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005878:	f7ff ff86 	bl	8005788 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800587c:	4812      	ldr	r0, [pc, #72]	@ (80058c8 <LoopForever+0x6>)
    LDR R1, [R0]
 800587e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8005880:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8005882:	4a12      	ldr	r2, [pc, #72]	@ (80058cc <LoopForever+0xa>)
    CMP R1, R2
 8005884:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8005886:	d105      	bne.n	8005894 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8005888:	4811      	ldr	r0, [pc, #68]	@ (80058d0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800588a:	4912      	ldr	r1, [pc, #72]	@ (80058d4 <LoopForever+0x12>)
    STR R1, [R0]
 800588c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800588e:	4812      	ldr	r0, [pc, #72]	@ (80058d8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8005890:	4912      	ldr	r1, [pc, #72]	@ (80058dc <LoopForever+0x1a>)
    STR R1, [R0]
 8005892:	6001      	str	r1, [r0, #0]

08005894 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005894:	4812      	ldr	r0, [pc, #72]	@ (80058e0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8005896:	4913      	ldr	r1, [pc, #76]	@ (80058e4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8005898:	4a13      	ldr	r2, [pc, #76]	@ (80058e8 <LoopForever+0x26>)
  movs r3, #0
 800589a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800589c:	e002      	b.n	80058a4 <LoopCopyDataInit>

0800589e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800589e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058a2:	3304      	adds	r3, #4

080058a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058a8:	d3f9      	bcc.n	800589e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058aa:	4a10      	ldr	r2, [pc, #64]	@ (80058ec <LoopForever+0x2a>)
  ldr r4, =_ebss
 80058ac:	4c10      	ldr	r4, [pc, #64]	@ (80058f0 <LoopForever+0x2e>)
  movs r3, #0
 80058ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058b0:	e001      	b.n	80058b6 <LoopFillZerobss>

080058b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058b4:	3204      	adds	r2, #4

080058b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058b8:	d3fb      	bcc.n	80058b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058ba:	f005 fa85 	bl	800adc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058be:	f7fe fffd 	bl	80048bc <main>

080058c2 <LoopForever>:

LoopForever:
    b LoopForever
 80058c2:	e7fe      	b.n	80058c2 <LoopForever>
   ldr   r0, =_estack
 80058c4:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80058c8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80058cc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80058d0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80058d4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80058d8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80058dc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80058e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80058e8:	0800d130 	.word	0x0800d130
  ldr r2, =_sbss
 80058ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80058f0:	200005f0 	.word	0x200005f0

080058f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058f4:	e7fe      	b.n	80058f4 <ADC1_IRQHandler>
	...

080058f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058fe:	1dfb      	adds	r3, r7, #7
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005904:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <HAL_Init+0x3c>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <HAL_Init+0x3c>)
 800590a:	2140      	movs	r1, #64	@ 0x40
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005910:	2003      	movs	r0, #3
 8005912:	f000 f811 	bl	8005938 <HAL_InitTick>
 8005916:	1e03      	subs	r3, r0, #0
 8005918:	d003      	beq.n	8005922 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800591a:	1dfb      	adds	r3, r7, #7
 800591c:	2201      	movs	r2, #1
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e001      	b.n	8005926 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005922:	f7ff fcf3 	bl	800530c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005926:	1dfb      	adds	r3, r7, #7
 8005928:	781b      	ldrb	r3, [r3, #0]
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b002      	add	sp, #8
 8005930:	bd80      	pop	{r7, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	40022000 	.word	0x40022000

08005938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005938:	b590      	push	{r4, r7, lr}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005940:	4b14      	ldr	r3, [pc, #80]	@ (8005994 <HAL_InitTick+0x5c>)
 8005942:	681c      	ldr	r4, [r3, #0]
 8005944:	4b14      	ldr	r3, [pc, #80]	@ (8005998 <HAL_InitTick+0x60>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	0019      	movs	r1, r3
 800594a:	23fa      	movs	r3, #250	@ 0xfa
 800594c:	0098      	lsls	r0, r3, #2
 800594e:	f7fa fbf7 	bl	8000140 <__udivsi3>
 8005952:	0003      	movs	r3, r0
 8005954:	0019      	movs	r1, r3
 8005956:	0020      	movs	r0, r4
 8005958:	f7fa fbf2 	bl	8000140 <__udivsi3>
 800595c:	0003      	movs	r3, r0
 800595e:	0018      	movs	r0, r3
 8005960:	f000 fb19 	bl	8005f96 <HAL_SYSTICK_Config>
 8005964:	1e03      	subs	r3, r0, #0
 8005966:	d001      	beq.n	800596c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e00f      	b.n	800598c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d80b      	bhi.n	800598a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	2301      	movs	r3, #1
 8005976:	425b      	negs	r3, r3
 8005978:	2200      	movs	r2, #0
 800597a:	0018      	movs	r0, r3
 800597c:	f000 fad6 	bl	8005f2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005980:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_InitTick+0x64>)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b003      	add	sp, #12
 8005992:	bd90      	pop	{r4, r7, pc}
 8005994:	20000000 	.word	0x20000000
 8005998:	20000008 	.word	0x20000008
 800599c:	20000004 	.word	0x20000004

080059a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <HAL_IncTick+0x1c>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	001a      	movs	r2, r3
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_IncTick+0x20>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	18d2      	adds	r2, r2, r3
 80059b0:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <HAL_IncTick+0x20>)
 80059b2:	601a      	str	r2, [r3, #0]
}
 80059b4:	46c0      	nop			@ (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	20000008 	.word	0x20000008
 80059c0:	200004a0 	.word	0x200004a0

080059c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
	return uwTick;
 80059c8:	4b02      	ldr	r3, [pc, #8]	@ (80059d4 <HAL_GetTick+0x10>)
 80059ca:	681b      	ldr	r3, [r3, #0]
}
 80059cc:	0018      	movs	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			@ (mov r8, r8)
 80059d4:	200004a0 	.word	0x200004a0

080059d8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e159      	b.n	8005c9e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2250      	movs	r2, #80	@ 0x50
 80059fc:	2100      	movs	r1, #0
 80059fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7ff fc96 	bl	8005334 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d005      	beq.n	8005a20 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005a1e:	d00b      	beq.n	8005a38 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	2210      	movs	r2, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2250      	movs	r2, #80	@ 0x50
 8005a30:	2100      	movs	r1, #0
 8005a32:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e132      	b.n	8005c9e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3c:	4a9a      	ldr	r2, [pc, #616]	@ (8005ca8 <HAL_ADC_Init+0x2d0>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2202      	movs	r2, #2
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d108      	bne.n	8005a68 <HAL_ADC_Init+0x90>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_ADC_Init+0x90>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_ADC_Init+0x92>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d149      	bne.n	8005b02 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	23c0      	movs	r3, #192	@ 0xc0
 8005a74:	061b      	lsls	r3, r3, #24
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d00b      	beq.n	8005a92 <HAL_ADC_Init+0xba>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	2380      	movs	r3, #128	@ 0x80
 8005a80:	05db      	lsls	r3, r3, #23
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d005      	beq.n	8005a92 <HAL_ADC_Init+0xba>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	2380      	movs	r3, #128	@ 0x80
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d111      	bne.n	8005ab6 <HAL_ADC_Init+0xde>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	0092      	lsls	r2, r2, #2
 8005a9e:	0892      	lsrs	r2, r2, #2
 8005aa0:	611a      	str	r2, [r3, #16]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6919      	ldr	r1, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	611a      	str	r2, [r3, #16]
 8005ab4:	e014      	b.n	8005ae0 <HAL_ADC_Init+0x108>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	0092      	lsls	r2, r2, #2
 8005ac2:	0892      	lsrs	r2, r2, #2
 8005ac4:	611a      	str	r2, [r3, #16]
 8005ac6:	4b79      	ldr	r3, [pc, #484]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b78      	ldr	r3, [pc, #480]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005acc:	4978      	ldr	r1, [pc, #480]	@ (8005cb0 <HAL_ADC_Init+0x2d8>)
 8005ace:	400a      	ands	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	4b76      	ldr	r3, [pc, #472]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	4b74      	ldr	r3, [pc, #464]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005adc:	430a      	orrs	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2118      	movs	r1, #24
 8005aec:	438a      	bics	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68d9      	ldr	r1, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005b02:	4b6a      	ldr	r3, [pc, #424]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b69      	ldr	r3, [pc, #420]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005b08:	496a      	ldr	r1, [pc, #424]	@ (8005cb4 <HAL_ADC_Init+0x2dc>)
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8005b0e:	4b67      	ldr	r3, [pc, #412]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b16:	065a      	lsls	r2, r3, #25
 8005b18:	4b64      	ldr	r3, [pc, #400]	@ (8005cac <HAL_ADC_Init+0x2d4>)
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	2380      	movs	r3, #128	@ 0x80
 8005b26:	055b      	lsls	r3, r3, #21
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2180      	movs	r1, #128	@ 0x80
 8005b38:	0549      	lsls	r1, r1, #21
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	495b      	ldr	r1, [pc, #364]	@ (8005cb8 <HAL_ADC_Init+0x2e0>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68d9      	ldr	r1, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d101      	bne.n	8005b64 <HAL_ADC_Init+0x18c>
 8005b60:	2304      	movs	r3, #4
 8005b62:	e000      	b.n	8005b66 <HAL_ADC_Init+0x18e>
 8005b64:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005b66:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2020      	movs	r0, #32
 8005b6c:	5c1b      	ldrb	r3, [r3, r0]
 8005b6e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005b70:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	202c      	movs	r0, #44	@ 0x2c
 8005b76:	5c1b      	ldrb	r3, [r3, r0]
 8005b78:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005b7a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005b80:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005b88:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005b90:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b9e:	23c2      	movs	r3, #194	@ 0xc2
 8005ba0:	33ff      	adds	r3, #255	@ 0xff
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d00b      	beq.n	8005bbe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68d9      	ldr	r1, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2221      	movs	r2, #33	@ 0x21
 8005bc2:	5c9b      	ldrb	r3, [r3, r2]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d11a      	bne.n	8005bfe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	5c9b      	ldrb	r3, [r3, r2]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2180      	movs	r1, #128	@ 0x80
 8005bde:	0249      	lsls	r1, r1, #9
 8005be0:	430a      	orrs	r2, r1
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	e00b      	b.n	8005bfe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	2220      	movs	r2, #32
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d11f      	bne.n	8005c46 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	492a      	ldr	r1, [pc, #168]	@ (8005cbc <HAL_ADC_Init+0x2e4>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6919      	ldr	r1, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005c24:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8005c2a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2101      	movs	r1, #1
 8005c40:	430a      	orrs	r2, r1
 8005c42:	611a      	str	r2, [r3, #16]
 8005c44:	e00e      	b.n	8005c64 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d107      	bne.n	8005c64 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2101      	movs	r1, #1
 8005c60:	438a      	bics	r2, r1
 8005c62:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2107      	movs	r1, #7
 8005c70:	438a      	bics	r2, r1
 8005c72:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6959      	ldr	r1, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c90:	2203      	movs	r2, #3
 8005c92:	4393      	bics	r3, r2
 8005c94:	2201      	movs	r2, #1
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b002      	add	sp, #8
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	fffffefd 	.word	0xfffffefd
 8005cac:	40012708 	.word	0x40012708
 8005cb0:	ffc3ffff 	.word	0xffc3ffff
 8005cb4:	fdffffff 	.word	0xfdffffff
 8005cb8:	fffe0219 	.word	0xfffe0219
 8005cbc:	fffffc03 	.word	0xfffffc03

08005cc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2250      	movs	r2, #80	@ 0x50
 8005cce:	5c9b      	ldrb	r3, [r3, r2]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_ADC_ConfigChannel+0x18>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e050      	b.n	8005d7a <HAL_ADC_ConfigChannel+0xba>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2250      	movs	r2, #80	@ 0x50
 8005cdc:	2101      	movs	r1, #1
 8005cde:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2250      	movs	r2, #80	@ 0x50
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e03a      	b.n	8005d7a <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a1e      	ldr	r2, [pc, #120]	@ (8005d84 <HAL_ADC_ConfigChannel+0xc4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d018      	beq.n	8005d40 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	035b      	lsls	r3, r3, #13
 8005d1a:	0b5a      	lsrs	r2, r3, #13
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2380      	movs	r3, #128	@ 0x80
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d01f      	beq.n	8005d70 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8005d30:	4b15      	ldr	r3, [pc, #84]	@ (8005d88 <HAL_ADC_ConfigChannel+0xc8>)
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	4b14      	ldr	r3, [pc, #80]	@ (8005d88 <HAL_ADC_ConfigChannel+0xc8>)
 8005d36:	2180      	movs	r1, #128	@ 0x80
 8005d38:	03c9      	lsls	r1, r1, #15
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e017      	b.n	8005d70 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	035b      	lsls	r3, r3, #13
 8005d4c:	0b5b      	lsrs	r3, r3, #13
 8005d4e:	43d9      	mvns	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	400a      	ands	r2, r1
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	029b      	lsls	r3, r3, #10
 8005d60:	4013      	ands	r3, r2
 8005d62:	d005      	beq.n	8005d70 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8005d64:	4b08      	ldr	r3, [pc, #32]	@ (8005d88 <HAL_ADC_ConfigChannel+0xc8>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b07      	ldr	r3, [pc, #28]	@ (8005d88 <HAL_ADC_ConfigChannel+0xc8>)
 8005d6a:	4908      	ldr	r1, [pc, #32]	@ (8005d8c <HAL_ADC_ConfigChannel+0xcc>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2250      	movs	r2, #80	@ 0x50
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b002      	add	sp, #8
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	00001001 	.word	0x00001001
 8005d88:	40012708 	.word	0x40012708
 8005d8c:	ffbfffff 	.word	0xffbfffff

08005d90 <__NVIC_EnableIRQ>:
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	0002      	movs	r2, r0
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d9c:	1dfb      	adds	r3, r7, #7
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005da2:	d809      	bhi.n	8005db8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005da4:	1dfb      	adds	r3, r7, #7
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	001a      	movs	r2, r3
 8005daa:	231f      	movs	r3, #31
 8005dac:	401a      	ands	r2, r3
 8005dae:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <__NVIC_EnableIRQ+0x30>)
 8005db0:	2101      	movs	r1, #1
 8005db2:	4091      	lsls	r1, r2
 8005db4:	000a      	movs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	e000e100 	.word	0xe000e100

08005dc4 <__NVIC_DisableIRQ>:
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	0002      	movs	r2, r0
 8005dcc:	1dfb      	adds	r3, r7, #7
 8005dce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005dd0:	1dfb      	adds	r3, r7, #7
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dd6:	d810      	bhi.n	8005dfa <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dd8:	1dfb      	adds	r3, r7, #7
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	001a      	movs	r2, r3
 8005dde:	231f      	movs	r3, #31
 8005de0:	4013      	ands	r3, r2
 8005de2:	4908      	ldr	r1, [pc, #32]	@ (8005e04 <__NVIC_DisableIRQ+0x40>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	409a      	lsls	r2, r3
 8005de8:	0013      	movs	r3, r2
 8005dea:	2280      	movs	r2, #128	@ 0x80
 8005dec:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dee:	f3bf 8f4f 	dsb	sy
}
 8005df2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005df4:	f3bf 8f6f 	isb	sy
}
 8005df8:	46c0      	nop			@ (mov r8, r8)
}
 8005dfa:	46c0      	nop			@ (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b002      	add	sp, #8
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	e000e100 	.word	0xe000e100

08005e08 <__NVIC_SetPriority>:
{
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	0002      	movs	r2, r0
 8005e10:	6039      	str	r1, [r7, #0]
 8005e12:	1dfb      	adds	r3, r7, #7
 8005e14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005e16:	1dfb      	adds	r3, r7, #7
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e1c:	d828      	bhi.n	8005e70 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8005edc <__NVIC_SetPriority+0xd4>)
 8005e20:	1dfb      	adds	r3, r7, #7
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b25b      	sxtb	r3, r3
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	33c0      	adds	r3, #192	@ 0xc0
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	589b      	ldr	r3, [r3, r2]
 8005e2e:	1dfa      	adds	r2, r7, #7
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	0011      	movs	r1, r2
 8005e34:	2203      	movs	r2, #3
 8005e36:	400a      	ands	r2, r1
 8005e38:	00d2      	lsls	r2, r2, #3
 8005e3a:	21ff      	movs	r1, #255	@ 0xff
 8005e3c:	4091      	lsls	r1, r2
 8005e3e:	000a      	movs	r2, r1
 8005e40:	43d2      	mvns	r2, r2
 8005e42:	401a      	ands	r2, r3
 8005e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	019b      	lsls	r3, r3, #6
 8005e4a:	22ff      	movs	r2, #255	@ 0xff
 8005e4c:	401a      	ands	r2, r3
 8005e4e:	1dfb      	adds	r3, r7, #7
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	0018      	movs	r0, r3
 8005e54:	2303      	movs	r3, #3
 8005e56:	4003      	ands	r3, r0
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e5c:	481f      	ldr	r0, [pc, #124]	@ (8005edc <__NVIC_SetPriority+0xd4>)
 8005e5e:	1dfb      	adds	r3, r7, #7
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	089b      	lsrs	r3, r3, #2
 8005e66:	430a      	orrs	r2, r1
 8005e68:	33c0      	adds	r3, #192	@ 0xc0
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	501a      	str	r2, [r3, r0]
}
 8005e6e:	e031      	b.n	8005ed4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e70:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee0 <__NVIC_SetPriority+0xd8>)
 8005e72:	1dfb      	adds	r3, r7, #7
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	0019      	movs	r1, r3
 8005e78:	230f      	movs	r3, #15
 8005e7a:	400b      	ands	r3, r1
 8005e7c:	3b08      	subs	r3, #8
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	3306      	adds	r3, #6
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	18d3      	adds	r3, r2, r3
 8005e86:	3304      	adds	r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	1dfa      	adds	r2, r7, #7
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	0011      	movs	r1, r2
 8005e90:	2203      	movs	r2, #3
 8005e92:	400a      	ands	r2, r1
 8005e94:	00d2      	lsls	r2, r2, #3
 8005e96:	21ff      	movs	r1, #255	@ 0xff
 8005e98:	4091      	lsls	r1, r2
 8005e9a:	000a      	movs	r2, r1
 8005e9c:	43d2      	mvns	r2, r2
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	019b      	lsls	r3, r3, #6
 8005ea6:	22ff      	movs	r2, #255	@ 0xff
 8005ea8:	401a      	ands	r2, r3
 8005eaa:	1dfb      	adds	r3, r7, #7
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	4003      	ands	r3, r0
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005eb8:	4809      	ldr	r0, [pc, #36]	@ (8005ee0 <__NVIC_SetPriority+0xd8>)
 8005eba:	1dfb      	adds	r3, r7, #7
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	001c      	movs	r4, r3
 8005ec0:	230f      	movs	r3, #15
 8005ec2:	4023      	ands	r3, r4
 8005ec4:	3b08      	subs	r3, #8
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	3306      	adds	r3, #6
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	18c3      	adds	r3, r0, r3
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	46c0      	nop			@ (mov r8, r8)
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b003      	add	sp, #12
 8005eda:	bd90      	pop	{r4, r7, pc}
 8005edc:	e000e100 	.word	0xe000e100
 8005ee0:	e000ed00 	.word	0xe000ed00

08005ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1e5a      	subs	r2, r3, #1
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	045b      	lsls	r3, r3, #17
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d301      	bcc.n	8005efc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e010      	b.n	8005f1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005efc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <SysTick_Config+0x44>)
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	3a01      	subs	r2, #1
 8005f02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f04:	2301      	movs	r3, #1
 8005f06:	425b      	negs	r3, r3
 8005f08:	2103      	movs	r1, #3
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f7ff ff7c 	bl	8005e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f10:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <SysTick_Config+0x44>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f16:	4b04      	ldr	r3, [pc, #16]	@ (8005f28 <SysTick_Config+0x44>)
 8005f18:	2207      	movs	r2, #7
 8005f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	0018      	movs	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b002      	add	sp, #8
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	e000e010 	.word	0xe000e010

08005f2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
 8005f36:	210f      	movs	r1, #15
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	1c02      	adds	r2, r0, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	0011      	movs	r1, r2
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f7ff ff5d 	bl	8005e08 <__NVIC_SetPriority>
}
 8005f4e:	46c0      	nop			@ (mov r8, r8)
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b004      	add	sp, #16
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	0002      	movs	r2, r0
 8005f5e:	1dfb      	adds	r3, r7, #7
 8005f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f62:	1dfb      	adds	r3, r7, #7
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f7ff ff11 	bl	8005d90 <__NVIC_EnableIRQ>
}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b002      	add	sp, #8
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	0002      	movs	r2, r0
 8005f7e:	1dfb      	adds	r3, r7, #7
 8005f80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005f82:	1dfb      	adds	r3, r7, #7
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	b25b      	sxtb	r3, r3
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7ff ff1b 	bl	8005dc4 <__NVIC_DisableIRQ>
}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b002      	add	sp, #8
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7ff ff9f 	bl	8005ee4 <SysTick_Config>
 8005fa6:	0003      	movs	r3, r0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	230f      	movs	r3, #15
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2225      	movs	r2, #37	@ 0x25
 8005fc4:	5c9b      	ldrb	r3, [r3, r2]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d008      	beq.n	8005fde <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2204      	movs	r2, #4
 8005fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2224      	movs	r2, #36	@ 0x24
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e024      	b.n	8006028 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	210e      	movs	r1, #14
 8005fea:	438a      	bics	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	438a      	bics	r2, r1
 8005ffc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006002:	221c      	movs	r2, #28
 8006004:	401a      	ands	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	2101      	movs	r1, #1
 800600c:	4091      	lsls	r1, r2
 800600e:	000a      	movs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2225      	movs	r2, #37	@ 0x25
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2224      	movs	r2, #36	@ 0x24
 800601e:	2100      	movs	r1, #0
 8006020:	5499      	strb	r1, [r3, r2]

    return status;
 8006022:	230f      	movs	r3, #15
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b004      	add	sp, #16
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	210f      	movs	r1, #15
 800603a:	187b      	adds	r3, r7, r1
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2225      	movs	r2, #37	@ 0x25
 8006044:	5c9b      	ldrb	r3, [r3, r2]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d006      	beq.n	800605a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2204      	movs	r2, #4
 8006050:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006052:	187b      	adds	r3, r7, r1
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e02a      	b.n	80060b0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	210e      	movs	r1, #14
 8006066:	438a      	bics	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2101      	movs	r1, #1
 8006076:	438a      	bics	r2, r1
 8006078:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	221c      	movs	r2, #28
 8006080:	401a      	ands	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	2101      	movs	r1, #1
 8006088:	4091      	lsls	r1, r2
 800608a:	000a      	movs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2225      	movs	r2, #37	@ 0x25
 8006092:	2101      	movs	r1, #1
 8006094:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2224      	movs	r2, #36	@ 0x24
 800609a:	2100      	movs	r1, #0
 800609c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	0010      	movs	r0, r2
 80060ae:	4798      	blx	r3
    }
  }
  return status;
 80060b0:	230f      	movs	r3, #15
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	781b      	ldrb	r3, [r3, #0]
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80060d6:	e14f      	b.n	8006378 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2101      	movs	r1, #1
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4091      	lsls	r1, r2
 80060e2:	000a      	movs	r2, r1
 80060e4:	4013      	ands	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d100      	bne.n	80060f0 <HAL_GPIO_Init+0x30>
 80060ee:	e140      	b.n	8006372 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2203      	movs	r2, #3
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d005      	beq.n	8006108 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2203      	movs	r2, #3
 8006102:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006104:	2b02      	cmp	r3, #2
 8006106:	d130      	bne.n	800616a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	2203      	movs	r2, #3
 8006114:	409a      	lsls	r2, r3
 8006116:	0013      	movs	r3, r2
 8006118:	43da      	mvns	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4013      	ands	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	0013      	movs	r3, r2
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800613e:	2201      	movs	r2, #1
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	409a      	lsls	r2, r3
 8006144:	0013      	movs	r3, r2
 8006146:	43da      	mvns	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4013      	ands	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	2201      	movs	r2, #1
 8006156:	401a      	ands	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	409a      	lsls	r2, r3
 800615c:	0013      	movs	r3, r2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2203      	movs	r2, #3
 8006170:	4013      	ands	r3, r2
 8006172:	2b03      	cmp	r3, #3
 8006174:	d017      	beq.n	80061a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	2203      	movs	r2, #3
 8006182:	409a      	lsls	r2, r3
 8006184:	0013      	movs	r3, r2
 8006186:	43da      	mvns	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4013      	ands	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	409a      	lsls	r2, r3
 8006198:	0013      	movs	r3, r2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2203      	movs	r2, #3
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d123      	bne.n	80061fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	08da      	lsrs	r2, r3, #3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3208      	adds	r2, #8
 80061ba:	0092      	lsls	r2, r2, #2
 80061bc:	58d3      	ldr	r3, [r2, r3]
 80061be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2207      	movs	r2, #7
 80061c4:	4013      	ands	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	220f      	movs	r2, #15
 80061ca:	409a      	lsls	r2, r3
 80061cc:	0013      	movs	r3, r2
 80061ce:	43da      	mvns	r2, r3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4013      	ands	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2107      	movs	r1, #7
 80061de:	400b      	ands	r3, r1
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	409a      	lsls	r2, r3
 80061e4:	0013      	movs	r3, r2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	08da      	lsrs	r2, r3, #3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3208      	adds	r2, #8
 80061f4:	0092      	lsls	r2, r2, #2
 80061f6:	6939      	ldr	r1, [r7, #16]
 80061f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	2203      	movs	r2, #3
 8006206:	409a      	lsls	r2, r3
 8006208:	0013      	movs	r3, r2
 800620a:	43da      	mvns	r2, r3
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4013      	ands	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2203      	movs	r2, #3
 8006218:	401a      	ands	r2, r3
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	409a      	lsls	r2, r3
 8006220:	0013      	movs	r3, r2
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	23c0      	movs	r3, #192	@ 0xc0
 8006234:	029b      	lsls	r3, r3, #10
 8006236:	4013      	ands	r3, r2
 8006238:	d100      	bne.n	800623c <HAL_GPIO_Init+0x17c>
 800623a:	e09a      	b.n	8006372 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800623c:	4b54      	ldr	r3, [pc, #336]	@ (8006390 <HAL_GPIO_Init+0x2d0>)
 800623e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006240:	4b53      	ldr	r3, [pc, #332]	@ (8006390 <HAL_GPIO_Init+0x2d0>)
 8006242:	2101      	movs	r1, #1
 8006244:	430a      	orrs	r2, r1
 8006246:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006248:	4a52      	ldr	r2, [pc, #328]	@ (8006394 <HAL_GPIO_Init+0x2d4>)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	089b      	lsrs	r3, r3, #2
 800624e:	3302      	adds	r3, #2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	589b      	ldr	r3, [r3, r2]
 8006254:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2203      	movs	r2, #3
 800625a:	4013      	ands	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	220f      	movs	r2, #15
 8006260:	409a      	lsls	r2, r3
 8006262:	0013      	movs	r3, r2
 8006264:	43da      	mvns	r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4013      	ands	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	23a0      	movs	r3, #160	@ 0xa0
 8006270:	05db      	lsls	r3, r3, #23
 8006272:	429a      	cmp	r2, r3
 8006274:	d019      	beq.n	80062aa <HAL_GPIO_Init+0x1ea>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a47      	ldr	r2, [pc, #284]	@ (8006398 <HAL_GPIO_Init+0x2d8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <HAL_GPIO_Init+0x1e6>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a46      	ldr	r2, [pc, #280]	@ (800639c <HAL_GPIO_Init+0x2dc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00d      	beq.n	80062a2 <HAL_GPIO_Init+0x1e2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a45      	ldr	r2, [pc, #276]	@ (80063a0 <HAL_GPIO_Init+0x2e0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <HAL_GPIO_Init+0x1de>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a44      	ldr	r2, [pc, #272]	@ (80063a4 <HAL_GPIO_Init+0x2e4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_GPIO_Init+0x1da>
 8006296:	2305      	movs	r3, #5
 8006298:	e008      	b.n	80062ac <HAL_GPIO_Init+0x1ec>
 800629a:	2306      	movs	r3, #6
 800629c:	e006      	b.n	80062ac <HAL_GPIO_Init+0x1ec>
 800629e:	2303      	movs	r3, #3
 80062a0:	e004      	b.n	80062ac <HAL_GPIO_Init+0x1ec>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e002      	b.n	80062ac <HAL_GPIO_Init+0x1ec>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <HAL_GPIO_Init+0x1ec>
 80062aa:	2300      	movs	r3, #0
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	2103      	movs	r1, #3
 80062b0:	400a      	ands	r2, r1
 80062b2:	0092      	lsls	r2, r2, #2
 80062b4:	4093      	lsls	r3, r2
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062bc:	4935      	ldr	r1, [pc, #212]	@ (8006394 <HAL_GPIO_Init+0x2d4>)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	3302      	adds	r3, #2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062ca:	4b37      	ldr	r3, [pc, #220]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	43da      	mvns	r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4013      	ands	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	2380      	movs	r3, #128	@ 0x80
 80062e0:	035b      	lsls	r3, r3, #13
 80062e2:	4013      	ands	r3, r2
 80062e4:	d003      	beq.n	80062ee <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80062ee:	4b2e      	ldr	r3, [pc, #184]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80062f4:	4b2c      	ldr	r3, [pc, #176]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	43da      	mvns	r2, r3
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4013      	ands	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	2380      	movs	r3, #128	@ 0x80
 800630a:	039b      	lsls	r3, r3, #14
 800630c:	4013      	ands	r3, r2
 800630e:	d003      	beq.n	8006318 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006318:	4b23      	ldr	r3, [pc, #140]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800631e:	4b22      	ldr	r3, [pc, #136]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	43da      	mvns	r2, r3
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4013      	ands	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	2380      	movs	r3, #128	@ 0x80
 8006334:	029b      	lsls	r3, r3, #10
 8006336:	4013      	ands	r3, r2
 8006338:	d003      	beq.n	8006342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006342:	4b19      	ldr	r3, [pc, #100]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006348:	4b17      	ldr	r3, [pc, #92]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	43da      	mvns	r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4013      	ands	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	2380      	movs	r3, #128	@ 0x80
 800635e:	025b      	lsls	r3, r3, #9
 8006360:	4013      	ands	r3, r2
 8006362:	d003      	beq.n	800636c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800636c:	4b0e      	ldr	r3, [pc, #56]	@ (80063a8 <HAL_GPIO_Init+0x2e8>)
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	3301      	adds	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	40da      	lsrs	r2, r3
 8006380:	1e13      	subs	r3, r2, #0
 8006382:	d000      	beq.n	8006386 <HAL_GPIO_Init+0x2c6>
 8006384:	e6a8      	b.n	80060d8 <HAL_GPIO_Init+0x18>
  }
}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	46c0      	nop			@ (mov r8, r8)
 800638a:	46bd      	mov	sp, r7
 800638c:	b006      	add	sp, #24
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40021000 	.word	0x40021000
 8006394:	40010000 	.word	0x40010000
 8006398:	50000400 	.word	0x50000400
 800639c:	50000800 	.word	0x50000800
 80063a0:	50000c00 	.word	0x50000c00
 80063a4:	50001c00 	.word	0x50001c00
 80063a8:	40010400 	.word	0x40010400

080063ac <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80063c2:	e0b6      	b.n	8006532 <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80063c4:	2201      	movs	r2, #1
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	409a      	lsls	r2, r3
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	4013      	ands	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d100      	bne.n	80063d8 <HAL_GPIO_DeInit+0x2c>
 80063d6:	e0a9      	b.n	800652c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80063d8:	4a5b      	ldr	r2, [pc, #364]	@ (8006548 <HAL_GPIO_DeInit+0x19c>)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	089b      	lsrs	r3, r3, #2
 80063de:	3302      	adds	r3, #2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	589b      	ldr	r3, [r3, r2]
 80063e4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2203      	movs	r2, #3
 80063ea:	4013      	ands	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	220f      	movs	r2, #15
 80063f0:	409a      	lsls	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	23a0      	movs	r3, #160	@ 0xa0
 80063fc:	05db      	lsls	r3, r3, #23
 80063fe:	429a      	cmp	r2, r3
 8006400:	d019      	beq.n	8006436 <HAL_GPIO_DeInit+0x8a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a51      	ldr	r2, [pc, #324]	@ (800654c <HAL_GPIO_DeInit+0x1a0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_GPIO_DeInit+0x86>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a50      	ldr	r2, [pc, #320]	@ (8006550 <HAL_GPIO_DeInit+0x1a4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00d      	beq.n	800642e <HAL_GPIO_DeInit+0x82>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a4f      	ldr	r2, [pc, #316]	@ (8006554 <HAL_GPIO_DeInit+0x1a8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <HAL_GPIO_DeInit+0x7e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a4e      	ldr	r2, [pc, #312]	@ (8006558 <HAL_GPIO_DeInit+0x1ac>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d101      	bne.n	8006426 <HAL_GPIO_DeInit+0x7a>
 8006422:	2305      	movs	r3, #5
 8006424:	e008      	b.n	8006438 <HAL_GPIO_DeInit+0x8c>
 8006426:	2306      	movs	r3, #6
 8006428:	e006      	b.n	8006438 <HAL_GPIO_DeInit+0x8c>
 800642a:	2303      	movs	r3, #3
 800642c:	e004      	b.n	8006438 <HAL_GPIO_DeInit+0x8c>
 800642e:	2302      	movs	r3, #2
 8006430:	e002      	b.n	8006438 <HAL_GPIO_DeInit+0x8c>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_GPIO_DeInit+0x8c>
 8006436:	2300      	movs	r3, #0
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	2103      	movs	r1, #3
 800643c:	400a      	ands	r2, r1
 800643e:	0092      	lsls	r2, r2, #2
 8006440:	4093      	lsls	r3, r2
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	429a      	cmp	r2, r3
 8006446:	d132      	bne.n	80064ae <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006448:	4b44      	ldr	r3, [pc, #272]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	43d9      	mvns	r1, r3
 8006450:	4b42      	ldr	r3, [pc, #264]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 8006452:	400a      	ands	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006456:	4b41      	ldr	r3, [pc, #260]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	43d9      	mvns	r1, r3
 800645e:	4b3f      	ldr	r3, [pc, #252]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 8006460:	400a      	ands	r2, r1
 8006462:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006464:	4b3d      	ldr	r3, [pc, #244]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	43d9      	mvns	r1, r3
 800646c:	4b3b      	ldr	r3, [pc, #236]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 800646e:	400a      	ands	r2, r1
 8006470:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006472:	4b3a      	ldr	r3, [pc, #232]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	43d9      	mvns	r1, r3
 800647a:	4b38      	ldr	r3, [pc, #224]	@ (800655c <HAL_GPIO_DeInit+0x1b0>)
 800647c:	400a      	ands	r2, r1
 800647e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2203      	movs	r2, #3
 8006484:	4013      	ands	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	220f      	movs	r2, #15
 800648a:	409a      	lsls	r2, r3
 800648c:	0013      	movs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <HAL_GPIO_DeInit+0x19c>)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	3302      	adds	r3, #2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	589a      	ldr	r2, [r3, r2]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	43d9      	mvns	r1, r3
 80064a0:	4829      	ldr	r0, [pc, #164]	@ (8006548 <HAL_GPIO_DeInit+0x19c>)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	089b      	lsrs	r3, r3, #2
 80064a6:	400a      	ands	r2, r1
 80064a8:	3302      	adds	r3, #2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	2103      	movs	r1, #3
 80064b8:	4099      	lsls	r1, r3
 80064ba:	000b      	movs	r3, r1
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	08da      	lsrs	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3208      	adds	r2, #8
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	58d3      	ldr	r3, [r2, r3]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	2107      	movs	r1, #7
 80064d2:	400a      	ands	r2, r1
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	210f      	movs	r1, #15
 80064d8:	4091      	lsls	r1, r2
 80064da:	000a      	movs	r2, r1
 80064dc:	43d1      	mvns	r1, r2
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	08d2      	lsrs	r2, r2, #3
 80064e2:	4019      	ands	r1, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3208      	adds	r2, #8
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	0052      	lsls	r2, r2, #1
 80064f4:	2103      	movs	r1, #3
 80064f6:	4091      	lsls	r1, r2
 80064f8:	000a      	movs	r2, r1
 80064fa:	43d2      	mvns	r2, r2
 80064fc:	401a      	ands	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2101      	movs	r1, #1
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4091      	lsls	r1, r2
 800650c:	000a      	movs	r2, r1
 800650e:	43d2      	mvns	r2, r2
 8006510:	401a      	ands	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	0052      	lsls	r2, r2, #1
 800651e:	2103      	movs	r1, #3
 8006520:	4091      	lsls	r1, r2
 8006522:	000a      	movs	r2, r1
 8006524:	43d2      	mvns	r2, r2
 8006526:	401a      	ands	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3301      	adds	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	40da      	lsrs	r2, r3
 8006538:	1e13      	subs	r3, r2, #0
 800653a:	d000      	beq.n	800653e <HAL_GPIO_DeInit+0x192>
 800653c:	e742      	b.n	80063c4 <HAL_GPIO_DeInit+0x18>
  }
}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	46c0      	nop			@ (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b006      	add	sp, #24
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40010000 	.word	0x40010000
 800654c:	50000400 	.word	0x50000400
 8006550:	50000800 	.word	0x50000800
 8006554:	50000c00 	.word	0x50000c00
 8006558:	50001c00 	.word	0x50001c00
 800655c:	40010400 	.word	0x40010400

08006560 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	000a      	movs	r2, r1
 800656a:	1cbb      	adds	r3, r7, #2
 800656c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	1cba      	adds	r2, r7, #2
 8006574:	8812      	ldrh	r2, [r2, #0]
 8006576:	4013      	ands	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800657a:	230f      	movs	r3, #15
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e003      	b.n	800658c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006584:	230f      	movs	r3, #15
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800658c:	230f      	movs	r3, #15
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	781b      	ldrb	r3, [r3, #0]
}
 8006592:	0018      	movs	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	b004      	add	sp, #16
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	0008      	movs	r0, r1
 80065a4:	0011      	movs	r1, r2
 80065a6:	1cbb      	adds	r3, r7, #2
 80065a8:	1c02      	adds	r2, r0, #0
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	1c7b      	adds	r3, r7, #1
 80065ae:	1c0a      	adds	r2, r1, #0
 80065b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065b2:	1c7b      	adds	r3, r7, #1
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065ba:	1cbb      	adds	r3, r7, #2
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80065c2:	e003      	b.n	80065cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80065c4:	1cbb      	adds	r3, r7, #2
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065cc:	46c0      	nop			@ (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	0002      	movs	r2, r0
 80065dc:	1dbb      	adds	r3, r7, #6
 80065de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	1dba      	adds	r2, r7, #6
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	4013      	ands	r3, r2
 80065ea:	d008      	beq.n	80065fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065ec:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80065ee:	1dba      	adds	r2, r7, #6
 80065f0:	8812      	ldrh	r2, [r2, #0]
 80065f2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065f4:	1dbb      	adds	r3, r7, #6
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f000 f807 	bl	800660c <HAL_GPIO_EXTI_Callback>
  }
}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	46bd      	mov	sp, r7
 8006602:	b002      	add	sp, #8
 8006604:	bd80      	pop	{r7, pc}
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	40010400 	.word	0x40010400

0800660c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	0002      	movs	r2, r0
 8006614:	1dbb      	adds	r3, r7, #6
 8006616:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006618:	46c0      	nop			@ (mov r8, r8)
 800661a:	46bd      	mov	sp, r7
 800661c:	b002      	add	sp, #8
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e082      	b.n	8006738 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2241      	movs	r2, #65	@ 0x41
 8006636:	5c9b      	ldrb	r3, [r3, r2]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d107      	bne.n	800664e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2240      	movs	r2, #64	@ 0x40
 8006642:	2100      	movs	r1, #0
 8006644:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	0018      	movs	r0, r3
 800664a:	f7fe feaf 	bl	80053ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2241      	movs	r2, #65	@ 0x41
 8006652:	2124      	movs	r1, #36	@ 0x24
 8006654:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2101      	movs	r1, #1
 8006662:	438a      	bics	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4934      	ldr	r1, [pc, #208]	@ (8006740 <HAL_I2C_Init+0x120>)
 8006670:	400a      	ands	r2, r1
 8006672:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4931      	ldr	r1, [pc, #196]	@ (8006744 <HAL_I2C_Init+0x124>)
 8006680:	400a      	ands	r2, r1
 8006682:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d108      	bne.n	800669e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2180      	movs	r1, #128	@ 0x80
 8006696:	0209      	lsls	r1, r1, #8
 8006698:	430a      	orrs	r2, r1
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	e007      	b.n	80066ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2184      	movs	r1, #132	@ 0x84
 80066a8:	0209      	lsls	r1, r1, #8
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d104      	bne.n	80066c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2280      	movs	r2, #128	@ 0x80
 80066bc:	0112      	lsls	r2, r2, #4
 80066be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	491f      	ldr	r1, [pc, #124]	@ (8006748 <HAL_I2C_Init+0x128>)
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	491a      	ldr	r1, [pc, #104]	@ (8006744 <HAL_I2C_Init+0x124>)
 80066dc:	400a      	ands	r2, r1
 80066de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69d9      	ldr	r1, [r3, #28]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2101      	movs	r1, #1
 8006716:	430a      	orrs	r2, r1
 8006718:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2241      	movs	r2, #65	@ 0x41
 8006724:	2120      	movs	r1, #32
 8006726:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2242      	movs	r2, #66	@ 0x42
 8006732:	2100      	movs	r1, #0
 8006734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	0018      	movs	r0, r3
 800673a:	46bd      	mov	sp, r7
 800673c:	b002      	add	sp, #8
 800673e:	bd80      	pop	{r7, pc}
 8006740:	f0ffffff 	.word	0xf0ffffff
 8006744:	ffff7fff 	.word	0xffff7fff
 8006748:	02008000 	.word	0x02008000

0800674c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b089      	sub	sp, #36	@ 0x24
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	000c      	movs	r4, r1
 8006756:	0010      	movs	r0, r2
 8006758:	0019      	movs	r1, r3
 800675a:	230a      	movs	r3, #10
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	1c22      	adds	r2, r4, #0
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	2308      	movs	r3, #8
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	1c02      	adds	r2, r0, #0
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	1dbb      	adds	r3, r7, #6
 800676c:	1c0a      	adds	r2, r1, #0
 800676e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2241      	movs	r2, #65	@ 0x41
 8006774:	5c9b      	ldrb	r3, [r3, r2]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b20      	cmp	r3, #32
 800677a:	d000      	beq.n	800677e <HAL_I2C_Mem_Write+0x32>
 800677c:	e10c      	b.n	8006998 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <HAL_I2C_Mem_Write+0x42>
 8006784:	232c      	movs	r3, #44	@ 0x2c
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2280      	movs	r2, #128	@ 0x80
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e0ff      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2240      	movs	r2, #64	@ 0x40
 800679e:	5c9b      	ldrb	r3, [r3, r2]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_I2C_Mem_Write+0x5c>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e0f8      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2240      	movs	r2, #64	@ 0x40
 80067ac:	2101      	movs	r1, #1
 80067ae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067b0:	f7ff f908 	bl	80059c4 <HAL_GetTick>
 80067b4:	0003      	movs	r3, r0
 80067b6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067b8:	2380      	movs	r3, #128	@ 0x80
 80067ba:	0219      	lsls	r1, r3, #8
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	2319      	movs	r3, #25
 80067c4:	2201      	movs	r2, #1
 80067c6:	f000 fb0b 	bl	8006de0 <I2C_WaitOnFlagUntilTimeout>
 80067ca:	1e03      	subs	r3, r0, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0e3      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2241      	movs	r2, #65	@ 0x41
 80067d6:	2121      	movs	r1, #33	@ 0x21
 80067d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2242      	movs	r2, #66	@ 0x42
 80067de:	2140      	movs	r1, #64	@ 0x40
 80067e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	222c      	movs	r2, #44	@ 0x2c
 80067f2:	18ba      	adds	r2, r7, r2
 80067f4:	8812      	ldrh	r2, [r2, #0]
 80067f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067fe:	1dbb      	adds	r3, r7, #6
 8006800:	881c      	ldrh	r4, [r3, #0]
 8006802:	2308      	movs	r3, #8
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	881a      	ldrh	r2, [r3, #0]
 8006808:	230a      	movs	r3, #10
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	8819      	ldrh	r1, [r3, #0]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	0023      	movs	r3, r4
 800681a:	f000 f9f9 	bl	8006c10 <I2C_RequestMemoryWrite>
 800681e:	1e03      	subs	r3, r0, #0
 8006820:	d005      	beq.n	800682e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2240      	movs	r2, #64	@ 0x40
 8006826:	2100      	movs	r1, #0
 8006828:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e0b5      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006832:	b29b      	uxth	r3, r3
 8006834:	2bff      	cmp	r3, #255	@ 0xff
 8006836:	d911      	bls.n	800685c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	22ff      	movs	r2, #255	@ 0xff
 800683c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006842:	b2da      	uxtb	r2, r3
 8006844:	2380      	movs	r3, #128	@ 0x80
 8006846:	045c      	lsls	r4, r3, #17
 8006848:	230a      	movs	r3, #10
 800684a:	18fb      	adds	r3, r7, r3
 800684c:	8819      	ldrh	r1, [r3, #0]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	2300      	movs	r3, #0
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	0023      	movs	r3, r4
 8006856:	f000 fc93 	bl	8007180 <I2C_TransferConfig>
 800685a:	e012      	b.n	8006882 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800686a:	b2da      	uxtb	r2, r3
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	049c      	lsls	r4, r3, #18
 8006870:	230a      	movs	r3, #10
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	8819      	ldrh	r1, [r3, #0]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	2300      	movs	r3, #0
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	0023      	movs	r3, r4
 800687e:	f000 fc7f 	bl	8007180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	0018      	movs	r0, r3
 800688a:	f000 faf7 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 800688e:	1e03      	subs	r3, r0, #0
 8006890:	d001      	beq.n	8006896 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e081      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03a      	beq.n	8006946 <HAL_I2C_Mem_Write+0x1fa>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d136      	bne.n	8006946 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	0013      	movs	r3, r2
 80068e2:	2200      	movs	r2, #0
 80068e4:	2180      	movs	r1, #128	@ 0x80
 80068e6:	f000 fa7b 	bl	8006de0 <I2C_WaitOnFlagUntilTimeout>
 80068ea:	1e03      	subs	r3, r0, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e053      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2bff      	cmp	r3, #255	@ 0xff
 80068fa:	d911      	bls.n	8006920 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	22ff      	movs	r2, #255	@ 0xff
 8006900:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006906:	b2da      	uxtb	r2, r3
 8006908:	2380      	movs	r3, #128	@ 0x80
 800690a:	045c      	lsls	r4, r3, #17
 800690c:	230a      	movs	r3, #10
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	8819      	ldrh	r1, [r3, #0]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	2300      	movs	r3, #0
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	0023      	movs	r3, r4
 800691a:	f000 fc31 	bl	8007180 <I2C_TransferConfig>
 800691e:	e012      	b.n	8006946 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692e:	b2da      	uxtb	r2, r3
 8006930:	2380      	movs	r3, #128	@ 0x80
 8006932:	049c      	lsls	r4, r3, #18
 8006934:	230a      	movs	r3, #10
 8006936:	18fb      	adds	r3, r7, r3
 8006938:	8819      	ldrh	r1, [r3, #0]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	2300      	movs	r3, #0
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	0023      	movs	r3, r4
 8006942:	f000 fc1d 	bl	8007180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d198      	bne.n	8006882 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	0018      	movs	r0, r3
 8006958:	f000 fad6 	bl	8006f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 800695c:	1e03      	subs	r3, r0, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e01a      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2220      	movs	r2, #32
 800696a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	490b      	ldr	r1, [pc, #44]	@ (80069a4 <HAL_I2C_Mem_Write+0x258>)
 8006978:	400a      	ands	r2, r1
 800697a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2241      	movs	r2, #65	@ 0x41
 8006980:	2120      	movs	r1, #32
 8006982:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2242      	movs	r2, #66	@ 0x42
 8006988:	2100      	movs	r1, #0
 800698a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2240      	movs	r2, #64	@ 0x40
 8006990:	2100      	movs	r1, #0
 8006992:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	0018      	movs	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	b007      	add	sp, #28
 80069a0:	bd90      	pop	{r4, r7, pc}
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	fe00e800 	.word	0xfe00e800

080069a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b089      	sub	sp, #36	@ 0x24
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	000c      	movs	r4, r1
 80069b2:	0010      	movs	r0, r2
 80069b4:	0019      	movs	r1, r3
 80069b6:	230a      	movs	r3, #10
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	1c22      	adds	r2, r4, #0
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	2308      	movs	r3, #8
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	1c02      	adds	r2, r0, #0
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	1dbb      	adds	r3, r7, #6
 80069c8:	1c0a      	adds	r2, r1, #0
 80069ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2241      	movs	r2, #65	@ 0x41
 80069d0:	5c9b      	ldrb	r3, [r3, r2]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d000      	beq.n	80069da <HAL_I2C_Mem_Read+0x32>
 80069d8:	e110      	b.n	8006bfc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <HAL_I2C_Mem_Read+0x42>
 80069e0:	232c      	movs	r3, #44	@ 0x2c
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2280      	movs	r2, #128	@ 0x80
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e103      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2240      	movs	r2, #64	@ 0x40
 80069fa:	5c9b      	ldrb	r3, [r3, r2]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_I2C_Mem_Read+0x5c>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e0fc      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2240      	movs	r2, #64	@ 0x40
 8006a08:	2101      	movs	r1, #1
 8006a0a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a0c:	f7fe ffda 	bl	80059c4 <HAL_GetTick>
 8006a10:	0003      	movs	r3, r0
 8006a12:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a14:	2380      	movs	r3, #128	@ 0x80
 8006a16:	0219      	lsls	r1, r3, #8
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2319      	movs	r3, #25
 8006a20:	2201      	movs	r2, #1
 8006a22:	f000 f9dd 	bl	8006de0 <I2C_WaitOnFlagUntilTimeout>
 8006a26:	1e03      	subs	r3, r0, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e0e7      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2241      	movs	r2, #65	@ 0x41
 8006a32:	2122      	movs	r1, #34	@ 0x22
 8006a34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2242      	movs	r2, #66	@ 0x42
 8006a3a:	2140      	movs	r1, #64	@ 0x40
 8006a3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	222c      	movs	r2, #44	@ 0x2c
 8006a4e:	18ba      	adds	r2, r7, r2
 8006a50:	8812      	ldrh	r2, [r2, #0]
 8006a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a5a:	1dbb      	adds	r3, r7, #6
 8006a5c:	881c      	ldrh	r4, [r3, #0]
 8006a5e:	2308      	movs	r3, #8
 8006a60:	18fb      	adds	r3, r7, r3
 8006a62:	881a      	ldrh	r2, [r3, #0]
 8006a64:	230a      	movs	r3, #10
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	8819      	ldrh	r1, [r3, #0]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	0023      	movs	r3, r4
 8006a76:	f000 f92f 	bl	8006cd8 <I2C_RequestMemoryRead>
 8006a7a:	1e03      	subs	r3, r0, #0
 8006a7c:	d005      	beq.n	8006a8a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2240      	movs	r2, #64	@ 0x40
 8006a82:	2100      	movs	r1, #0
 8006a84:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e0b9      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2bff      	cmp	r3, #255	@ 0xff
 8006a92:	d911      	bls.n	8006ab8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	22ff      	movs	r2, #255	@ 0xff
 8006a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	2380      	movs	r3, #128	@ 0x80
 8006aa2:	045c      	lsls	r4, r3, #17
 8006aa4:	230a      	movs	r3, #10
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	8819      	ldrh	r1, [r3, #0]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	4b56      	ldr	r3, [pc, #344]	@ (8006c08 <HAL_I2C_Mem_Read+0x260>)
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	0023      	movs	r3, r4
 8006ab2:	f000 fb65 	bl	8007180 <I2C_TransferConfig>
 8006ab6:	e012      	b.n	8006ade <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	2380      	movs	r3, #128	@ 0x80
 8006aca:	049c      	lsls	r4, r3, #18
 8006acc:	230a      	movs	r3, #10
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	8819      	ldrh	r1, [r3, #0]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8006c08 <HAL_I2C_Mem_Read+0x260>)
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	0023      	movs	r3, r4
 8006ada:	f000 fb51 	bl	8007180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	0013      	movs	r3, r2
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2104      	movs	r1, #4
 8006aec:	f000 f978 	bl	8006de0 <I2C_WaitOnFlagUntilTimeout>
 8006af0:	1e03      	subs	r3, r0, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e082      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d03a      	beq.n	8006baa <HAL_I2C_Mem_Read+0x202>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d136      	bne.n	8006baa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	0013      	movs	r3, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	2180      	movs	r1, #128	@ 0x80
 8006b4a:	f000 f949 	bl	8006de0 <I2C_WaitOnFlagUntilTimeout>
 8006b4e:	1e03      	subs	r3, r0, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e053      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2bff      	cmp	r3, #255	@ 0xff
 8006b5e:	d911      	bls.n	8006b84 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	22ff      	movs	r2, #255	@ 0xff
 8006b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	2380      	movs	r3, #128	@ 0x80
 8006b6e:	045c      	lsls	r4, r3, #17
 8006b70:	230a      	movs	r3, #10
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	8819      	ldrh	r1, [r3, #0]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	0023      	movs	r3, r4
 8006b7e:	f000 faff 	bl	8007180 <I2C_TransferConfig>
 8006b82:	e012      	b.n	8006baa <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	2380      	movs	r3, #128	@ 0x80
 8006b96:	049c      	lsls	r4, r3, #18
 8006b98:	230a      	movs	r3, #10
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	8819      	ldrh	r1, [r3, #0]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	0023      	movs	r3, r4
 8006ba6:	f000 faeb 	bl	8007180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d194      	bne.n	8006ade <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f000 f9a4 	bl	8006f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e01a      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	490c      	ldr	r1, [pc, #48]	@ (8006c0c <HAL_I2C_Mem_Read+0x264>)
 8006bdc:	400a      	ands	r2, r1
 8006bde:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2241      	movs	r2, #65	@ 0x41
 8006be4:	2120      	movs	r1, #32
 8006be6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2242      	movs	r2, #66	@ 0x42
 8006bec:	2100      	movs	r1, #0
 8006bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2240      	movs	r2, #64	@ 0x40
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e000      	b.n	8006bfe <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8006bfc:	2302      	movs	r3, #2
  }
}
 8006bfe:	0018      	movs	r0, r3
 8006c00:	46bd      	mov	sp, r7
 8006c02:	b007      	add	sp, #28
 8006c04:	bd90      	pop	{r4, r7, pc}
 8006c06:	46c0      	nop			@ (mov r8, r8)
 8006c08:	80002400 	.word	0x80002400
 8006c0c:	fe00e800 	.word	0xfe00e800

08006c10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c10:	b5b0      	push	{r4, r5, r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	000c      	movs	r4, r1
 8006c1a:	0010      	movs	r0, r2
 8006c1c:	0019      	movs	r1, r3
 8006c1e:	250a      	movs	r5, #10
 8006c20:	197b      	adds	r3, r7, r5
 8006c22:	1c22      	adds	r2, r4, #0
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	2308      	movs	r3, #8
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	1c02      	adds	r2, r0, #0
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	1dbb      	adds	r3, r7, #6
 8006c30:	1c0a      	adds	r2, r1, #0
 8006c32:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c34:	1dbb      	adds	r3, r7, #6
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	2380      	movs	r3, #128	@ 0x80
 8006c3c:	045c      	lsls	r4, r3, #17
 8006c3e:	197b      	adds	r3, r7, r5
 8006c40:	8819      	ldrh	r1, [r3, #0]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	4b23      	ldr	r3, [pc, #140]	@ (8006cd4 <I2C_RequestMemoryWrite+0xc4>)
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	0023      	movs	r3, r4
 8006c4a:	f000 fa99 	bl	8007180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 f911 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c5a:	1e03      	subs	r3, r0, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e033      	b.n	8006cca <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c62:	1dbb      	adds	r3, r7, #6
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d107      	bne.n	8006c7a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c78:	e019      	b.n	8006cae <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	18fb      	adds	r3, r7, r3
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	0a1b      	lsrs	r3, r3, #8
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c8e:	6a39      	ldr	r1, [r7, #32]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 f8f2 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c98:	1e03      	subs	r3, r0, #0
 8006c9a:	d001      	beq.n	8006ca0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e014      	b.n	8006cca <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006cae:	6a3a      	ldr	r2, [r7, #32]
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	0013      	movs	r3, r2
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2180      	movs	r1, #128	@ 0x80
 8006cbc:	f000 f890 	bl	8006de0 <I2C_WaitOnFlagUntilTimeout>
 8006cc0:	1e03      	subs	r3, r0, #0
 8006cc2:	d001      	beq.n	8006cc8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	0018      	movs	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	b004      	add	sp, #16
 8006cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	80002000 	.word	0x80002000

08006cd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006cd8:	b5b0      	push	{r4, r5, r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	000c      	movs	r4, r1
 8006ce2:	0010      	movs	r0, r2
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	250a      	movs	r5, #10
 8006ce8:	197b      	adds	r3, r7, r5
 8006cea:	1c22      	adds	r2, r4, #0
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	2308      	movs	r3, #8
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	1c02      	adds	r2, r0, #0
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	1dbb      	adds	r3, r7, #6
 8006cf8:	1c0a      	adds	r2, r1, #0
 8006cfa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006cfc:	1dbb      	adds	r3, r7, #6
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	197b      	adds	r3, r7, r5
 8006d04:	8819      	ldrh	r1, [r3, #0]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	4b23      	ldr	r3, [pc, #140]	@ (8006d98 <I2C_RequestMemoryRead+0xc0>)
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f000 fa37 	bl	8007180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d14:	6a39      	ldr	r1, [r7, #32]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f000 f8af 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d1e:	1e03      	subs	r3, r0, #0
 8006d20:	d001      	beq.n	8006d26 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e033      	b.n	8006d8e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d26:	1dbb      	adds	r3, r7, #6
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d107      	bne.n	8006d3e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d2e:	2308      	movs	r3, #8
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d3c:	e019      	b.n	8006d72 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d3e:	2308      	movs	r3, #8
 8006d40:	18fb      	adds	r3, r7, r3
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d52:	6a39      	ldr	r1, [r7, #32]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f000 f890 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d5c:	1e03      	subs	r3, r0, #0
 8006d5e:	d001      	beq.n	8006d64 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e014      	b.n	8006d8e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d64:	2308      	movs	r3, #8
 8006d66:	18fb      	adds	r3, r7, r3
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d72:	6a3a      	ldr	r2, [r7, #32]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	0013      	movs	r3, r2
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2140      	movs	r1, #64	@ 0x40
 8006d80:	f000 f82e 	bl	8006de0 <I2C_WaitOnFlagUntilTimeout>
 8006d84:	1e03      	subs	r3, r0, #0
 8006d86:	d001      	beq.n	8006d8c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	0018      	movs	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b004      	add	sp, #16
 8006d94:	bdb0      	pop	{r4, r5, r7, pc}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	80002000 	.word	0x80002000

08006d9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	2202      	movs	r2, #2
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d103      	bne.n	8006dba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2200      	movs	r2, #0
 8006db8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d007      	beq.n	8006dd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	619a      	str	r2, [r3, #24]
  }
}
 8006dd8:	46c0      	nop			@ (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	1dfb      	adds	r3, r7, #7
 8006dee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006df0:	e030      	b.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	d02d      	beq.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df8:	f7fe fde4 	bl	80059c4 <HAL_GetTick>
 8006dfc:	0002      	movs	r2, r0
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d302      	bcc.n	8006e0e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d122      	bne.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	4013      	ands	r3, r2
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	425a      	negs	r2, r3
 8006e1e:	4153      	adcs	r3, r2
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	001a      	movs	r2, r3
 8006e24:	1dfb      	adds	r3, r7, #7
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d113      	bne.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e30:	2220      	movs	r2, #32
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2241      	movs	r2, #65	@ 0x41
 8006e3c:	2120      	movs	r1, #32
 8006e3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2242      	movs	r2, #66	@ 0x42
 8006e44:	2100      	movs	r1, #0
 8006e46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2240      	movs	r2, #64	@ 0x40
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e00f      	b.n	8006e74 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	425a      	negs	r2, r3
 8006e64:	4153      	adcs	r3, r2
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	001a      	movs	r2, r3
 8006e6a:	1dfb      	adds	r3, r7, #7
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d0bf      	beq.n	8006df2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	0018      	movs	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	b004      	add	sp, #16
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e88:	e032      	b.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 f87d 	bl	8006f90 <I2C_IsErrorOccurred>
 8006e96:	1e03      	subs	r3, r0, #0
 8006e98:	d001      	beq.n	8006e9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e030      	b.n	8006f00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	d025      	beq.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea4:	f7fe fd8e 	bl	80059c4 <HAL_GetTick>
 8006ea8:	0002      	movs	r2, r0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d302      	bcc.n	8006eba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d11a      	bne.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d013      	beq.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ecc:	2220      	movs	r2, #32
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2241      	movs	r2, #65	@ 0x41
 8006ed8:	2120      	movs	r1, #32
 8006eda:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2242      	movs	r2, #66	@ 0x42
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2240      	movs	r2, #64	@ 0x40
 8006ee8:	2100      	movs	r1, #0
 8006eea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e007      	b.n	8006f00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d1c5      	bne.n	8006e8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	0018      	movs	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b004      	add	sp, #16
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f14:	e02f      	b.n	8006f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 f837 	bl	8006f90 <I2C_IsErrorOccurred>
 8006f22:	1e03      	subs	r3, r0, #0
 8006f24:	d001      	beq.n	8006f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e02d      	b.n	8006f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2a:	f7fe fd4b 	bl	80059c4 <HAL_GetTick>
 8006f2e:	0002      	movs	r2, r0
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d302      	bcc.n	8006f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11a      	bne.n	8006f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2220      	movs	r2, #32
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d013      	beq.n	8006f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	2220      	movs	r2, #32
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2241      	movs	r2, #65	@ 0x41
 8006f5e:	2120      	movs	r1, #32
 8006f60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2242      	movs	r2, #66	@ 0x42
 8006f66:	2100      	movs	r1, #0
 8006f68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2240      	movs	r2, #64	@ 0x40
 8006f6e:	2100      	movs	r1, #0
 8006f70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e007      	b.n	8006f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d1c8      	bne.n	8006f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	0018      	movs	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b004      	add	sp, #16
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	@ 0x28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9c:	2327      	movs	r3, #39	@ 0x27
 8006f9e:	18fb      	adds	r3, r7, r3
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d100      	bne.n	8006fbe <I2C_IsErrorOccurred+0x2e>
 8006fbc:	e079      	b.n	80070b2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fc6:	e057      	b.n	8007078 <I2C_IsErrorOccurred+0xe8>
 8006fc8:	2227      	movs	r2, #39	@ 0x27
 8006fca:	18bb      	adds	r3, r7, r2
 8006fcc:	18ba      	adds	r2, r7, r2
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	d04f      	beq.n	8007078 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fd8:	f7fe fcf4 	bl	80059c4 <HAL_GetTick>
 8006fdc:	0002      	movs	r2, r0
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d302      	bcc.n	8006fee <I2C_IsErrorOccurred+0x5e>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d144      	bne.n	8007078 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	2380      	movs	r3, #128	@ 0x80
 8006ff6:	01db      	lsls	r3, r3, #7
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ffc:	2013      	movs	r0, #19
 8006ffe:	183b      	adds	r3, r7, r0
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	2142      	movs	r1, #66	@ 0x42
 8007004:	5c52      	ldrb	r2, [r2, r1]
 8007006:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	2380      	movs	r3, #128	@ 0x80
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	401a      	ands	r2, r3
 8007014:	2380      	movs	r3, #128	@ 0x80
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	429a      	cmp	r2, r3
 800701a:	d126      	bne.n	800706a <I2C_IsErrorOccurred+0xda>
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	2380      	movs	r3, #128	@ 0x80
 8007020:	01db      	lsls	r3, r3, #7
 8007022:	429a      	cmp	r2, r3
 8007024:	d021      	beq.n	800706a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007026:	183b      	adds	r3, r7, r0
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b20      	cmp	r3, #32
 800702c:	d01d      	beq.n	800706a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2180      	movs	r1, #128	@ 0x80
 800703a:	01c9      	lsls	r1, r1, #7
 800703c:	430a      	orrs	r2, r1
 800703e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007040:	f7fe fcc0 	bl	80059c4 <HAL_GetTick>
 8007044:	0003      	movs	r3, r0
 8007046:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007048:	e00f      	b.n	800706a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800704a:	f7fe fcbb 	bl	80059c4 <HAL_GetTick>
 800704e:	0002      	movs	r2, r0
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b19      	cmp	r3, #25
 8007056:	d908      	bls.n	800706a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2220      	movs	r2, #32
 800705c:	4313      	orrs	r3, r2
 800705e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007060:	2327      	movs	r3, #39	@ 0x27
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]

              break;
 8007068:	e006      	b.n	8007078 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2220      	movs	r2, #32
 8007072:	4013      	ands	r3, r2
 8007074:	2b20      	cmp	r3, #32
 8007076:	d1e8      	bne.n	800704a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	2220      	movs	r2, #32
 8007080:	4013      	ands	r3, r2
 8007082:	2b20      	cmp	r3, #32
 8007084:	d004      	beq.n	8007090 <I2C_IsErrorOccurred+0x100>
 8007086:	2327      	movs	r3, #39	@ 0x27
 8007088:	18fb      	adds	r3, r7, r3
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d09b      	beq.n	8006fc8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007090:	2327      	movs	r3, #39	@ 0x27
 8007092:	18fb      	adds	r3, r7, r3
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2220      	movs	r2, #32
 80070a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2204      	movs	r2, #4
 80070a6:	4313      	orrs	r3, r2
 80070a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80070aa:	2327      	movs	r3, #39	@ 0x27
 80070ac:	18fb      	adds	r3, r7, r3
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	2380      	movs	r3, #128	@ 0x80
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4013      	ands	r3, r2
 80070c2:	d00c      	beq.n	80070de <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2201      	movs	r2, #1
 80070c8:	4313      	orrs	r3, r2
 80070ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2280      	movs	r2, #128	@ 0x80
 80070d2:	0052      	lsls	r2, r2, #1
 80070d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070d6:	2327      	movs	r3, #39	@ 0x27
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	2201      	movs	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	2380      	movs	r3, #128	@ 0x80
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4013      	ands	r3, r2
 80070e6:	d00c      	beq.n	8007102 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	2208      	movs	r2, #8
 80070ec:	4313      	orrs	r3, r2
 80070ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2280      	movs	r2, #128	@ 0x80
 80070f6:	00d2      	lsls	r2, r2, #3
 80070f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070fa:	2327      	movs	r3, #39	@ 0x27
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	2201      	movs	r2, #1
 8007100:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	2380      	movs	r3, #128	@ 0x80
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4013      	ands	r3, r2
 800710a:	d00c      	beq.n	8007126 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	2202      	movs	r2, #2
 8007110:	4313      	orrs	r3, r2
 8007112:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2280      	movs	r2, #128	@ 0x80
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800711e:	2327      	movs	r3, #39	@ 0x27
 8007120:	18fb      	adds	r3, r7, r3
 8007122:	2201      	movs	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007126:	2327      	movs	r3, #39	@ 0x27
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01d      	beq.n	800716c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	0018      	movs	r0, r3
 8007134:	f7ff fe32 	bl	8006d9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	490e      	ldr	r1, [pc, #56]	@ (800717c <I2C_IsErrorOccurred+0x1ec>)
 8007144:	400a      	ands	r2, r1
 8007146:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	431a      	orrs	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2241      	movs	r2, #65	@ 0x41
 8007158:	2120      	movs	r1, #32
 800715a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2242      	movs	r2, #66	@ 0x42
 8007160:	2100      	movs	r1, #0
 8007162:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2240      	movs	r2, #64	@ 0x40
 8007168:	2100      	movs	r1, #0
 800716a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800716c:	2327      	movs	r3, #39	@ 0x27
 800716e:	18fb      	adds	r3, r7, r3
 8007170:	781b      	ldrb	r3, [r3, #0]
}
 8007172:	0018      	movs	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	b00a      	add	sp, #40	@ 0x28
 8007178:	bd80      	pop	{r7, pc}
 800717a:	46c0      	nop			@ (mov r8, r8)
 800717c:	fe00e800 	.word	0xfe00e800

08007180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007180:	b590      	push	{r4, r7, lr}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	0008      	movs	r0, r1
 800718a:	0011      	movs	r1, r2
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	240a      	movs	r4, #10
 8007190:	193b      	adds	r3, r7, r4
 8007192:	1c02      	adds	r2, r0, #0
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	2009      	movs	r0, #9
 8007198:	183b      	adds	r3, r7, r0
 800719a:	1c0a      	adds	r2, r1, #0
 800719c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800719e:	193b      	adds	r3, r7, r4
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	059b      	lsls	r3, r3, #22
 80071a4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	0419      	lsls	r1, r3, #16
 80071ac:	23ff      	movs	r3, #255	@ 0xff
 80071ae:	041b      	lsls	r3, r3, #16
 80071b0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071b2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	4313      	orrs	r3, r2
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ca:	0d51      	lsrs	r1, r2, #21
 80071cc:	2280      	movs	r2, #128	@ 0x80
 80071ce:	00d2      	lsls	r2, r2, #3
 80071d0:	400a      	ands	r2, r1
 80071d2:	4907      	ldr	r1, [pc, #28]	@ (80071f0 <I2C_TransferConfig+0x70>)
 80071d4:	430a      	orrs	r2, r1
 80071d6:	43d2      	mvns	r2, r2
 80071d8:	401a      	ands	r2, r3
 80071da:	0011      	movs	r1, r2
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	46bd      	mov	sp, r7
 80071ea:	b007      	add	sp, #28
 80071ec:	bd90      	pop	{r4, r7, pc}
 80071ee:	46c0      	nop			@ (mov r8, r8)
 80071f0:	03ff63ff 	.word	0x03ff63ff

080071f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2241      	movs	r2, #65	@ 0x41
 8007202:	5c9b      	ldrb	r3, [r3, r2]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b20      	cmp	r3, #32
 8007208:	d138      	bne.n	800727c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2240      	movs	r2, #64	@ 0x40
 800720e:	5c9b      	ldrb	r3, [r3, r2]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007214:	2302      	movs	r3, #2
 8007216:	e032      	b.n	800727e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2240      	movs	r2, #64	@ 0x40
 800721c:	2101      	movs	r1, #1
 800721e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2241      	movs	r2, #65	@ 0x41
 8007224:	2124      	movs	r1, #36	@ 0x24
 8007226:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2101      	movs	r1, #1
 8007234:	438a      	bics	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4911      	ldr	r1, [pc, #68]	@ (8007288 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007244:	400a      	ands	r2, r1
 8007246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6819      	ldr	r1, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2101      	movs	r1, #1
 8007264:	430a      	orrs	r2, r1
 8007266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2241      	movs	r2, #65	@ 0x41
 800726c:	2120      	movs	r1, #32
 800726e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2240      	movs	r2, #64	@ 0x40
 8007274:	2100      	movs	r1, #0
 8007276:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	e000      	b.n	800727e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800727c:	2302      	movs	r3, #2
  }
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b002      	add	sp, #8
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	ffffefff 	.word	0xffffefff

0800728c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2241      	movs	r2, #65	@ 0x41
 800729a:	5c9b      	ldrb	r3, [r3, r2]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d139      	bne.n	8007316 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2240      	movs	r2, #64	@ 0x40
 80072a6:	5c9b      	ldrb	r3, [r3, r2]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e033      	b.n	8007318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2240      	movs	r2, #64	@ 0x40
 80072b4:	2101      	movs	r1, #1
 80072b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2241      	movs	r2, #65	@ 0x41
 80072bc:	2124      	movs	r1, #36	@ 0x24
 80072be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2101      	movs	r1, #1
 80072cc:	438a      	bics	r2, r1
 80072ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4a11      	ldr	r2, [pc, #68]	@ (8007320 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80072dc:	4013      	ands	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2101      	movs	r1, #1
 80072fe:	430a      	orrs	r2, r1
 8007300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2241      	movs	r2, #65	@ 0x41
 8007306:	2120      	movs	r1, #32
 8007308:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2240      	movs	r2, #64	@ 0x40
 800730e:	2100      	movs	r1, #0
 8007310:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e000      	b.n	8007318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b004      	add	sp, #16
 800731e:	bd80      	pop	{r7, pc}
 8007320:	fffff0ff 	.word	0xfffff0ff

08007324 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e03d      	b.n	80073b2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a20      	ldr	r2, [pc, #128]	@ (80073bc <HAL_IWDG_Init+0x98>)
 800733c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1f      	ldr	r2, [pc, #124]	@ (80073c0 <HAL_IWDG_Init+0x9c>)
 8007344:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6852      	ldr	r2, [r2, #4]
 800734e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6892      	ldr	r2, [r2, #8]
 8007358:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800735a:	f7fe fb33 	bl	80059c4 <HAL_GetTick>
 800735e:	0003      	movs	r3, r0
 8007360:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007362:	e00e      	b.n	8007382 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007364:	f7fe fb2e 	bl	80059c4 <HAL_GetTick>
 8007368:	0002      	movs	r2, r0
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007370:	d907      	bls.n	8007382 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2207      	movs	r2, #7
 800737a:	4013      	ands	r3, r2
 800737c:	d001      	beq.n	8007382 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e017      	b.n	80073b2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2207      	movs	r2, #7
 800738a:	4013      	ands	r3, r2
 800738c:	d1ea      	bne.n	8007364 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d005      	beq.n	80073a8 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68d2      	ldr	r2, [r2, #12]
 80073a4:	611a      	str	r2, [r3, #16]
 80073a6:	e003      	b.n	80073b0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a05      	ldr	r2, [pc, #20]	@ (80073c4 <HAL_IWDG_Init+0xa0>)
 80073ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	0018      	movs	r0, r3
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b004      	add	sp, #16
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	0000cccc 	.word	0x0000cccc
 80073c0:	00005555 	.word	0x00005555
 80073c4:	0000aaaa 	.word	0x0000aaaa

080073c8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a03      	ldr	r2, [pc, #12]	@ (80073e4 <HAL_IWDG_Refresh+0x1c>)
 80073d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	0018      	movs	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	b002      	add	sp, #8
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	0000aaaa 	.word	0x0000aaaa

080073e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ec:	4b04      	ldr	r3, [pc, #16]	@ (8007400 <HAL_PWR_EnableBkUpAccess+0x18>)
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	4b03      	ldr	r3, [pc, #12]	@ (8007400 <HAL_PWR_EnableBkUpAccess+0x18>)
 80073f2:	2180      	movs	r1, #128	@ 0x80
 80073f4:	0049      	lsls	r1, r1, #1
 80073f6:	430a      	orrs	r2, r1
 80073f8:	601a      	str	r2, [r3, #0]
}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40007000 	.word	0x40007000

08007404 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8007408:	4b04      	ldr	r3, [pc, #16]	@ (800741c <HAL_PWR_DisableBkUpAccess+0x18>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b03      	ldr	r3, [pc, #12]	@ (800741c <HAL_PWR_DisableBkUpAccess+0x18>)
 800740e:	4904      	ldr	r1, [pc, #16]	@ (8007420 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007410:	400a      	ands	r2, r1
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	46c0      	nop			@ (mov r8, r8)
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	46c0      	nop			@ (mov r8, r8)
 800741c:	40007000 	.word	0x40007000
 8007420:	fffffeff 	.word	0xfffffeff

08007424 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	000a      	movs	r2, r1
 800742e:	1cfb      	adds	r3, r7, #3
 8007430:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8007436:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <HAL_PWR_EnterSTOPMode+0xa8>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	2380      	movs	r3, #128	@ 0x80
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4013      	ands	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8007442:	4b23      	ldr	r3, [pc, #140]	@ (80074d0 <HAL_PWR_EnterSTOPMode+0xac>)
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	2201      	movs	r2, #1
 8007448:	4013      	ands	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d008      	beq.n	8007464 <HAL_PWR_EnterSTOPMode+0x40>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8007458:	4b1c      	ldr	r3, [pc, #112]	@ (80074cc <HAL_PWR_EnterSTOPMode+0xa8>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	4b1b      	ldr	r3, [pc, #108]	@ (80074cc <HAL_PWR_EnterSTOPMode+0xa8>)
 800745e:	491d      	ldr	r1, [pc, #116]	@ (80074d4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8007460:	400a      	ands	r2, r1
 8007462:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007464:	4b19      	ldr	r3, [pc, #100]	@ (80074cc <HAL_PWR_EnterSTOPMode+0xa8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2203      	movs	r2, #3
 800746e:	4393      	bics	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800747a:	4b14      	ldr	r3, [pc, #80]	@ (80074cc <HAL_PWR_EnterSTOPMode+0xa8>)
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007480:	4b15      	ldr	r3, [pc, #84]	@ (80074d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	4b14      	ldr	r3, [pc, #80]	@ (80074d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8007486:	2104      	movs	r1, #4
 8007488:	430a      	orrs	r2, r1
 800748a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800748c:	1cfb      	adds	r3, r7, #3
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007494:	bf30      	wfi
 8007496:	e002      	b.n	800749e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007498:	bf40      	sev
    __WFE();
 800749a:	bf20      	wfe
    __WFE();
 800749c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800749e:	4b0e      	ldr	r3, [pc, #56]	@ (80074d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80074a4:	2104      	movs	r1, #4
 80074a6:	438a      	bics	r2, r1
 80074a8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <HAL_PWR_EnterSTOPMode+0xa0>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d006      	beq.n	80074c4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80074b6:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <HAL_PWR_EnterSTOPMode+0xa8>)
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	4b04      	ldr	r3, [pc, #16]	@ (80074cc <HAL_PWR_EnterSTOPMode+0xa8>)
 80074bc:	2180      	movs	r1, #128	@ 0x80
 80074be:	0089      	lsls	r1, r1, #2
 80074c0:	430a      	orrs	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]
  }
}
 80074c4:	46c0      	nop			@ (mov r8, r8)
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b006      	add	sp, #24
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40007000 	.word	0x40007000
 80074d0:	40010000 	.word	0x40010000
 80074d4:	fffffdff 	.word	0xfffffdff
 80074d8:	e000ed00 	.word	0xe000ed00

080074dc <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80074e0:	4b04      	ldr	r3, [pc, #16]	@ (80074f4 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4b03      	ldr	r3, [pc, #12]	@ (80074f4 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80074e6:	2180      	movs	r1, #128	@ 0x80
 80074e8:	00c9      	lsls	r1, r1, #3
 80074ea:	430a      	orrs	r2, r1
 80074ec:	601a      	str	r2, [r3, #0]
}
 80074ee:	46c0      	nop			@ (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40007000 	.word	0x40007000

080074f8 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80074fc:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	4b03      	ldr	r3, [pc, #12]	@ (8007510 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8007502:	2180      	movs	r1, #128	@ 0x80
 8007504:	0089      	lsls	r1, r1, #2
 8007506:	430a      	orrs	r2, r1
 8007508:	601a      	str	r2, [r3, #0]
}
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40007000 	.word	0x40007000

08007514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007514:	b5b0      	push	{r4, r5, r7, lr}
 8007516:	b08a      	sub	sp, #40	@ 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f000 fb6c 	bl	8007c00 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007528:	4bc8      	ldr	r3, [pc, #800]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	220c      	movs	r2, #12
 800752e:	4013      	ands	r3, r2
 8007530:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007532:	4bc6      	ldr	r3, [pc, #792]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	2380      	movs	r3, #128	@ 0x80
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	4013      	ands	r3, r2
 800753c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2201      	movs	r2, #1
 8007544:	4013      	ands	r3, r2
 8007546:	d100      	bne.n	800754a <HAL_RCC_OscConfig+0x36>
 8007548:	e07d      	b.n	8007646 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2b08      	cmp	r3, #8
 800754e:	d007      	beq.n	8007560 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	2b0c      	cmp	r3, #12
 8007554:	d112      	bne.n	800757c <HAL_RCC_OscConfig+0x68>
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	2380      	movs	r3, #128	@ 0x80
 800755a:	025b      	lsls	r3, r3, #9
 800755c:	429a      	cmp	r2, r3
 800755e:	d10d      	bne.n	800757c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007560:	4bba      	ldr	r3, [pc, #744]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	2380      	movs	r3, #128	@ 0x80
 8007566:	029b      	lsls	r3, r3, #10
 8007568:	4013      	ands	r3, r2
 800756a:	d100      	bne.n	800756e <HAL_RCC_OscConfig+0x5a>
 800756c:	e06a      	b.n	8007644 <HAL_RCC_OscConfig+0x130>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d166      	bne.n	8007644 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f000 fb42 	bl	8007c00 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	2380      	movs	r3, #128	@ 0x80
 8007582:	025b      	lsls	r3, r3, #9
 8007584:	429a      	cmp	r2, r3
 8007586:	d107      	bne.n	8007598 <HAL_RCC_OscConfig+0x84>
 8007588:	4bb0      	ldr	r3, [pc, #704]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	4baf      	ldr	r3, [pc, #700]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800758e:	2180      	movs	r1, #128	@ 0x80
 8007590:	0249      	lsls	r1, r1, #9
 8007592:	430a      	orrs	r2, r1
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e027      	b.n	80075e8 <HAL_RCC_OscConfig+0xd4>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	23a0      	movs	r3, #160	@ 0xa0
 800759e:	02db      	lsls	r3, r3, #11
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d10e      	bne.n	80075c2 <HAL_RCC_OscConfig+0xae>
 80075a4:	4ba9      	ldr	r3, [pc, #676]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	4ba8      	ldr	r3, [pc, #672]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075aa:	2180      	movs	r1, #128	@ 0x80
 80075ac:	02c9      	lsls	r1, r1, #11
 80075ae:	430a      	orrs	r2, r1
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	4ba6      	ldr	r3, [pc, #664]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	4ba5      	ldr	r3, [pc, #660]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075b8:	2180      	movs	r1, #128	@ 0x80
 80075ba:	0249      	lsls	r1, r1, #9
 80075bc:	430a      	orrs	r2, r1
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e012      	b.n	80075e8 <HAL_RCC_OscConfig+0xd4>
 80075c2:	4ba2      	ldr	r3, [pc, #648]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4ba1      	ldr	r3, [pc, #644]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075c8:	49a1      	ldr	r1, [pc, #644]	@ (8007850 <HAL_RCC_OscConfig+0x33c>)
 80075ca:	400a      	ands	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	4b9f      	ldr	r3, [pc, #636]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	2380      	movs	r3, #128	@ 0x80
 80075d4:	025b      	lsls	r3, r3, #9
 80075d6:	4013      	ands	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4b9b      	ldr	r3, [pc, #620]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4b9a      	ldr	r3, [pc, #616]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80075e2:	499c      	ldr	r1, [pc, #624]	@ (8007854 <HAL_RCC_OscConfig+0x340>)
 80075e4:	400a      	ands	r2, r1
 80075e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d014      	beq.n	800761a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f0:	f7fe f9e8 	bl	80059c4 <HAL_GetTick>
 80075f4:	0003      	movs	r3, r0
 80075f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075f8:	e008      	b.n	800760c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075fa:	f7fe f9e3 	bl	80059c4 <HAL_GetTick>
 80075fe:	0002      	movs	r2, r0
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b64      	cmp	r3, #100	@ 0x64
 8007606:	d901      	bls.n	800760c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e2f9      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800760c:	4b8f      	ldr	r3, [pc, #572]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	2380      	movs	r3, #128	@ 0x80
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	4013      	ands	r3, r2
 8007616:	d0f0      	beq.n	80075fa <HAL_RCC_OscConfig+0xe6>
 8007618:	e015      	b.n	8007646 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761a:	f7fe f9d3 	bl	80059c4 <HAL_GetTick>
 800761e:	0003      	movs	r3, r0
 8007620:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007624:	f7fe f9ce 	bl	80059c4 <HAL_GetTick>
 8007628:	0002      	movs	r2, r0
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b64      	cmp	r3, #100	@ 0x64
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e2e4      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007636:	4b85      	ldr	r3, [pc, #532]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	2380      	movs	r3, #128	@ 0x80
 800763c:	029b      	lsls	r3, r3, #10
 800763e:	4013      	ands	r3, r2
 8007640:	d1f0      	bne.n	8007624 <HAL_RCC_OscConfig+0x110>
 8007642:	e000      	b.n	8007646 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007644:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2202      	movs	r2, #2
 800764c:	4013      	ands	r3, r2
 800764e:	d100      	bne.n	8007652 <HAL_RCC_OscConfig+0x13e>
 8007650:	e099      	b.n	8007786 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	2220      	movs	r2, #32
 800765c:	4013      	ands	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007660:	4b7a      	ldr	r3, [pc, #488]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b79      	ldr	r3, [pc, #484]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007666:	2120      	movs	r1, #32
 8007668:	430a      	orrs	r2, r1
 800766a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	2220      	movs	r2, #32
 8007670:	4393      	bics	r3, r2
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b04      	cmp	r3, #4
 8007678:	d005      	beq.n	8007686 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2b0c      	cmp	r3, #12
 800767e:	d13e      	bne.n	80076fe <HAL_RCC_OscConfig+0x1ea>
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d13b      	bne.n	80076fe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007686:	4b71      	ldr	r3, [pc, #452]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2204      	movs	r2, #4
 800768c:	4013      	ands	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_RCC_OscConfig+0x186>
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e2b2      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800769a:	4b6c      	ldr	r3, [pc, #432]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	4a6e      	ldr	r2, [pc, #440]	@ (8007858 <HAL_RCC_OscConfig+0x344>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	0019      	movs	r1, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	021a      	lsls	r2, r3, #8
 80076aa:	4b68      	ldr	r3, [pc, #416]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80076b0:	4b66      	ldr	r3, [pc, #408]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2209      	movs	r2, #9
 80076b6:	4393      	bics	r3, r2
 80076b8:	0019      	movs	r1, r3
 80076ba:	4b64      	ldr	r3, [pc, #400]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80076bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076be:	430a      	orrs	r2, r1
 80076c0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076c2:	f000 fbeb 	bl	8007e9c <HAL_RCC_GetSysClockFreq>
 80076c6:	0001      	movs	r1, r0
 80076c8:	4b60      	ldr	r3, [pc, #384]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	091b      	lsrs	r3, r3, #4
 80076ce:	220f      	movs	r2, #15
 80076d0:	4013      	ands	r3, r2
 80076d2:	4a62      	ldr	r2, [pc, #392]	@ (800785c <HAL_RCC_OscConfig+0x348>)
 80076d4:	5cd3      	ldrb	r3, [r2, r3]
 80076d6:	000a      	movs	r2, r1
 80076d8:	40da      	lsrs	r2, r3
 80076da:	4b61      	ldr	r3, [pc, #388]	@ (8007860 <HAL_RCC_OscConfig+0x34c>)
 80076dc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80076de:	4b61      	ldr	r3, [pc, #388]	@ (8007864 <HAL_RCC_OscConfig+0x350>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2513      	movs	r5, #19
 80076e4:	197c      	adds	r4, r7, r5
 80076e6:	0018      	movs	r0, r3
 80076e8:	f7fe f926 	bl	8005938 <HAL_InitTick>
 80076ec:	0003      	movs	r3, r0
 80076ee:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80076f0:	197b      	adds	r3, r7, r5
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d046      	beq.n	8007786 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80076f8:	197b      	adds	r3, r7, r5
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	e280      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d027      	beq.n	8007754 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007704:	4b51      	ldr	r3, [pc, #324]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2209      	movs	r2, #9
 800770a:	4393      	bics	r3, r2
 800770c:	0019      	movs	r1, r3
 800770e:	4b4f      	ldr	r3, [pc, #316]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007712:	430a      	orrs	r2, r1
 8007714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007716:	f7fe f955 	bl	80059c4 <HAL_GetTick>
 800771a:	0003      	movs	r3, r0
 800771c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007720:	f7fe f950 	bl	80059c4 <HAL_GetTick>
 8007724:	0002      	movs	r2, r0
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e266      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007732:	4b46      	ldr	r3, [pc, #280]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2204      	movs	r2, #4
 8007738:	4013      	ands	r3, r2
 800773a:	d0f1      	beq.n	8007720 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773c:	4b43      	ldr	r3, [pc, #268]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	4a45      	ldr	r2, [pc, #276]	@ (8007858 <HAL_RCC_OscConfig+0x344>)
 8007742:	4013      	ands	r3, r2
 8007744:	0019      	movs	r1, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	021a      	lsls	r2, r3, #8
 800774c:	4b3f      	ldr	r3, [pc, #252]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	e018      	b.n	8007786 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007754:	4b3d      	ldr	r3, [pc, #244]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4b3c      	ldr	r3, [pc, #240]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800775a:	2101      	movs	r1, #1
 800775c:	438a      	bics	r2, r1
 800775e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007760:	f7fe f930 	bl	80059c4 <HAL_GetTick>
 8007764:	0003      	movs	r3, r0
 8007766:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007768:	e008      	b.n	800777c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800776a:	f7fe f92b 	bl	80059c4 <HAL_GetTick>
 800776e:	0002      	movs	r2, r0
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d901      	bls.n	800777c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e241      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800777c:	4b33      	ldr	r3, [pc, #204]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2204      	movs	r2, #4
 8007782:	4013      	ands	r3, r2
 8007784:	d1f1      	bne.n	800776a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	4013      	ands	r3, r2
 800778e:	d100      	bne.n	8007792 <HAL_RCC_OscConfig+0x27e>
 8007790:	e0a1      	b.n	80078d6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d140      	bne.n	800781a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007798:	4b2c      	ldr	r3, [pc, #176]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	2380      	movs	r3, #128	@ 0x80
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4013      	ands	r3, r2
 80077a2:	d005      	beq.n	80077b0 <HAL_RCC_OscConfig+0x29c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e227      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077b0:	4b26      	ldr	r3, [pc, #152]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007868 <HAL_RCC_OscConfig+0x354>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	0019      	movs	r1, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	4b23      	ldr	r3, [pc, #140]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077c4:	4b21      	ldr	r3, [pc, #132]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	0a19      	lsrs	r1, r3, #8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	061a      	lsls	r2, r3, #24
 80077d2:	4b1e      	ldr	r3, [pc, #120]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80077d4:	430a      	orrs	r2, r1
 80077d6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	0b5b      	lsrs	r3, r3, #13
 80077de:	3301      	adds	r3, #1
 80077e0:	2280      	movs	r2, #128	@ 0x80
 80077e2:	0212      	lsls	r2, r2, #8
 80077e4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80077e6:	4b19      	ldr	r3, [pc, #100]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	091b      	lsrs	r3, r3, #4
 80077ec:	210f      	movs	r1, #15
 80077ee:	400b      	ands	r3, r1
 80077f0:	491a      	ldr	r1, [pc, #104]	@ (800785c <HAL_RCC_OscConfig+0x348>)
 80077f2:	5ccb      	ldrb	r3, [r1, r3]
 80077f4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80077f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007860 <HAL_RCC_OscConfig+0x34c>)
 80077f8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80077fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <HAL_RCC_OscConfig+0x350>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2513      	movs	r5, #19
 8007800:	197c      	adds	r4, r7, r5
 8007802:	0018      	movs	r0, r3
 8007804:	f7fe f898 	bl	8005938 <HAL_InitTick>
 8007808:	0003      	movs	r3, r0
 800780a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800780c:	197b      	adds	r3, r7, r5
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d060      	beq.n	80078d6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8007814:	197b      	adds	r3, r7, r5
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	e1f2      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d03f      	beq.n	80078a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007822:	4b0a      	ldr	r3, [pc, #40]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b09      	ldr	r3, [pc, #36]	@ (800784c <HAL_RCC_OscConfig+0x338>)
 8007828:	2180      	movs	r1, #128	@ 0x80
 800782a:	0049      	lsls	r1, r1, #1
 800782c:	430a      	orrs	r2, r1
 800782e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007830:	f7fe f8c8 	bl	80059c4 <HAL_GetTick>
 8007834:	0003      	movs	r3, r0
 8007836:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007838:	e018      	b.n	800786c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800783a:	f7fe f8c3 	bl	80059c4 <HAL_GetTick>
 800783e:	0002      	movs	r2, r0
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d911      	bls.n	800786c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e1d9      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
 800784c:	40021000 	.word	0x40021000
 8007850:	fffeffff 	.word	0xfffeffff
 8007854:	fffbffff 	.word	0xfffbffff
 8007858:	ffffe0ff 	.word	0xffffe0ff
 800785c:	0800cd40 	.word	0x0800cd40
 8007860:	20000000 	.word	0x20000000
 8007864:	20000004 	.word	0x20000004
 8007868:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800786c:	4bc9      	ldr	r3, [pc, #804]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	2380      	movs	r3, #128	@ 0x80
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4013      	ands	r3, r2
 8007876:	d0e0      	beq.n	800783a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007878:	4bc6      	ldr	r3, [pc, #792]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4ac6      	ldr	r2, [pc, #792]	@ (8007b98 <HAL_RCC_OscConfig+0x684>)
 800787e:	4013      	ands	r3, r2
 8007880:	0019      	movs	r1, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1a      	ldr	r2, [r3, #32]
 8007886:	4bc3      	ldr	r3, [pc, #780]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800788c:	4bc1      	ldr	r3, [pc, #772]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	0a19      	lsrs	r1, r3, #8
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	061a      	lsls	r2, r3, #24
 800789a:	4bbe      	ldr	r3, [pc, #760]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 800789c:	430a      	orrs	r2, r1
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	e019      	b.n	80078d6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80078a2:	4bbc      	ldr	r3, [pc, #752]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4bbb      	ldr	r3, [pc, #748]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80078a8:	49bc      	ldr	r1, [pc, #752]	@ (8007b9c <HAL_RCC_OscConfig+0x688>)
 80078aa:	400a      	ands	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ae:	f7fe f889 	bl	80059c4 <HAL_GetTick>
 80078b2:	0003      	movs	r3, r0
 80078b4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078b8:	f7fe f884 	bl	80059c4 <HAL_GetTick>
 80078bc:	0002      	movs	r2, r0
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e19a      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80078ca:	4bb2      	ldr	r3, [pc, #712]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	2380      	movs	r3, #128	@ 0x80
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4013      	ands	r3, r2
 80078d4:	d1f0      	bne.n	80078b8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2208      	movs	r2, #8
 80078dc:	4013      	ands	r3, r2
 80078de:	d036      	beq.n	800794e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d019      	beq.n	800791c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078e8:	4baa      	ldr	r3, [pc, #680]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80078ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078ec:	4ba9      	ldr	r3, [pc, #676]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80078ee:	2101      	movs	r1, #1
 80078f0:	430a      	orrs	r2, r1
 80078f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078f4:	f7fe f866 	bl	80059c4 <HAL_GetTick>
 80078f8:	0003      	movs	r3, r0
 80078fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078fe:	f7fe f861 	bl	80059c4 <HAL_GetTick>
 8007902:	0002      	movs	r2, r0
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e177      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007910:	4ba0      	ldr	r3, [pc, #640]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007914:	2202      	movs	r2, #2
 8007916:	4013      	ands	r3, r2
 8007918:	d0f1      	beq.n	80078fe <HAL_RCC_OscConfig+0x3ea>
 800791a:	e018      	b.n	800794e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800791c:	4b9d      	ldr	r3, [pc, #628]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 800791e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007920:	4b9c      	ldr	r3, [pc, #624]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007922:	2101      	movs	r1, #1
 8007924:	438a      	bics	r2, r1
 8007926:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007928:	f7fe f84c 	bl	80059c4 <HAL_GetTick>
 800792c:	0003      	movs	r3, r0
 800792e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007932:	f7fe f847 	bl	80059c4 <HAL_GetTick>
 8007936:	0002      	movs	r2, r0
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e15d      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007944:	4b93      	ldr	r3, [pc, #588]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007948:	2202      	movs	r2, #2
 800794a:	4013      	ands	r3, r2
 800794c:	d1f1      	bne.n	8007932 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2204      	movs	r2, #4
 8007954:	4013      	ands	r3, r2
 8007956:	d100      	bne.n	800795a <HAL_RCC_OscConfig+0x446>
 8007958:	e0ae      	b.n	8007ab8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800795a:	2023      	movs	r0, #35	@ 0x23
 800795c:	183b      	adds	r3, r7, r0
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007962:	4b8c      	ldr	r3, [pc, #560]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007966:	2380      	movs	r3, #128	@ 0x80
 8007968:	055b      	lsls	r3, r3, #21
 800796a:	4013      	ands	r3, r2
 800796c:	d109      	bne.n	8007982 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800796e:	4b89      	ldr	r3, [pc, #548]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007972:	4b88      	ldr	r3, [pc, #544]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007974:	2180      	movs	r1, #128	@ 0x80
 8007976:	0549      	lsls	r1, r1, #21
 8007978:	430a      	orrs	r2, r1
 800797a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800797c:	183b      	adds	r3, r7, r0
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007982:	4b87      	ldr	r3, [pc, #540]	@ (8007ba0 <HAL_RCC_OscConfig+0x68c>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	2380      	movs	r3, #128	@ 0x80
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	4013      	ands	r3, r2
 800798c:	d11a      	bne.n	80079c4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800798e:	4b84      	ldr	r3, [pc, #528]	@ (8007ba0 <HAL_RCC_OscConfig+0x68c>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b83      	ldr	r3, [pc, #524]	@ (8007ba0 <HAL_RCC_OscConfig+0x68c>)
 8007994:	2180      	movs	r1, #128	@ 0x80
 8007996:	0049      	lsls	r1, r1, #1
 8007998:	430a      	orrs	r2, r1
 800799a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800799c:	f7fe f812 	bl	80059c4 <HAL_GetTick>
 80079a0:	0003      	movs	r3, r0
 80079a2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079a6:	f7fe f80d 	bl	80059c4 <HAL_GetTick>
 80079aa:	0002      	movs	r2, r0
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b64      	cmp	r3, #100	@ 0x64
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e123      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079b8:	4b79      	ldr	r3, [pc, #484]	@ (8007ba0 <HAL_RCC_OscConfig+0x68c>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	2380      	movs	r3, #128	@ 0x80
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	4013      	ands	r3, r2
 80079c2:	d0f0      	beq.n	80079a6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	2380      	movs	r3, #128	@ 0x80
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d107      	bne.n	80079e0 <HAL_RCC_OscConfig+0x4cc>
 80079d0:	4b70      	ldr	r3, [pc, #448]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80079d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079d4:	4b6f      	ldr	r3, [pc, #444]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80079d6:	2180      	movs	r1, #128	@ 0x80
 80079d8:	0049      	lsls	r1, r1, #1
 80079da:	430a      	orrs	r2, r1
 80079dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80079de:	e031      	b.n	8007a44 <HAL_RCC_OscConfig+0x530>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10c      	bne.n	8007a02 <HAL_RCC_OscConfig+0x4ee>
 80079e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80079ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079ec:	4b69      	ldr	r3, [pc, #420]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80079ee:	496b      	ldr	r1, [pc, #428]	@ (8007b9c <HAL_RCC_OscConfig+0x688>)
 80079f0:	400a      	ands	r2, r1
 80079f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80079f4:	4b67      	ldr	r3, [pc, #412]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80079f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079f8:	4b66      	ldr	r3, [pc, #408]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 80079fa:	496a      	ldr	r1, [pc, #424]	@ (8007ba4 <HAL_RCC_OscConfig+0x690>)
 80079fc:	400a      	ands	r2, r1
 80079fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a00:	e020      	b.n	8007a44 <HAL_RCC_OscConfig+0x530>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	23a0      	movs	r3, #160	@ 0xa0
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d10e      	bne.n	8007a2c <HAL_RCC_OscConfig+0x518>
 8007a0e:	4b61      	ldr	r3, [pc, #388]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a12:	4b60      	ldr	r3, [pc, #384]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a14:	2180      	movs	r1, #128	@ 0x80
 8007a16:	00c9      	lsls	r1, r1, #3
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a1c:	4b5d      	ldr	r3, [pc, #372]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a20:	4b5c      	ldr	r3, [pc, #368]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a22:	2180      	movs	r1, #128	@ 0x80
 8007a24:	0049      	lsls	r1, r1, #1
 8007a26:	430a      	orrs	r2, r1
 8007a28:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a2a:	e00b      	b.n	8007a44 <HAL_RCC_OscConfig+0x530>
 8007a2c:	4b59      	ldr	r3, [pc, #356]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a30:	4b58      	ldr	r3, [pc, #352]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a32:	495a      	ldr	r1, [pc, #360]	@ (8007b9c <HAL_RCC_OscConfig+0x688>)
 8007a34:	400a      	ands	r2, r1
 8007a36:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a38:	4b56      	ldr	r3, [pc, #344]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a3c:	4b55      	ldr	r3, [pc, #340]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a3e:	4959      	ldr	r1, [pc, #356]	@ (8007ba4 <HAL_RCC_OscConfig+0x690>)
 8007a40:	400a      	ands	r2, r1
 8007a42:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d015      	beq.n	8007a78 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4c:	f7fd ffba 	bl	80059c4 <HAL_GetTick>
 8007a50:	0003      	movs	r3, r0
 8007a52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a54:	e009      	b.n	8007a6a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a56:	f7fd ffb5 	bl	80059c4 <HAL_GetTick>
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	4a51      	ldr	r2, [pc, #324]	@ (8007ba8 <HAL_RCC_OscConfig+0x694>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e0ca      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a6e:	2380      	movs	r3, #128	@ 0x80
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4013      	ands	r3, r2
 8007a74:	d0ef      	beq.n	8007a56 <HAL_RCC_OscConfig+0x542>
 8007a76:	e014      	b.n	8007aa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a78:	f7fd ffa4 	bl	80059c4 <HAL_GetTick>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a80:	e009      	b.n	8007a96 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a82:	f7fd ff9f 	bl	80059c4 <HAL_GetTick>
 8007a86:	0002      	movs	r2, r0
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	4a46      	ldr	r2, [pc, #280]	@ (8007ba8 <HAL_RCC_OscConfig+0x694>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e0b4      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a96:	4b3f      	ldr	r3, [pc, #252]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007a98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a9a:	2380      	movs	r3, #128	@ 0x80
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d1ef      	bne.n	8007a82 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007aa2:	2323      	movs	r3, #35	@ 0x23
 8007aa4:	18fb      	adds	r3, r7, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d105      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aac:	4b39      	ldr	r3, [pc, #228]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ab0:	4b38      	ldr	r3, [pc, #224]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007ab2:	493e      	ldr	r1, [pc, #248]	@ (8007bac <HAL_RCC_OscConfig+0x698>)
 8007ab4:	400a      	ands	r2, r1
 8007ab6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d100      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x5ae>
 8007ac0:	e09d      	b.n	8007bfe <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	2b0c      	cmp	r3, #12
 8007ac6:	d100      	bne.n	8007aca <HAL_RCC_OscConfig+0x5b6>
 8007ac8:	e076      	b.n	8007bb8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d145      	bne.n	8007b5e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ad2:	4b30      	ldr	r3, [pc, #192]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007ad8:	4935      	ldr	r1, [pc, #212]	@ (8007bb0 <HAL_RCC_OscConfig+0x69c>)
 8007ada:	400a      	ands	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ade:	f7fd ff71 	bl	80059c4 <HAL_GetTick>
 8007ae2:	0003      	movs	r3, r0
 8007ae4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ae8:	f7fd ff6c 	bl	80059c4 <HAL_GetTick>
 8007aec:	0002      	movs	r2, r0
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e082      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007afa:	4b26      	ldr	r3, [pc, #152]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	2380      	movs	r3, #128	@ 0x80
 8007b00:	049b      	lsls	r3, r3, #18
 8007b02:	4013      	ands	r3, r2
 8007b04:	d1f0      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b06:	4b23      	ldr	r3, [pc, #140]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb4 <HAL_RCC_OscConfig+0x6a0>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	0019      	movs	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	4b1c      	ldr	r3, [pc, #112]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b22:	430a      	orrs	r2, r1
 8007b24:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b26:	4b1b      	ldr	r3, [pc, #108]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b2c:	2180      	movs	r1, #128	@ 0x80
 8007b2e:	0449      	lsls	r1, r1, #17
 8007b30:	430a      	orrs	r2, r1
 8007b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b34:	f7fd ff46 	bl	80059c4 <HAL_GetTick>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b3e:	f7fd ff41 	bl	80059c4 <HAL_GetTick>
 8007b42:	0002      	movs	r2, r0
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e057      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007b50:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	2380      	movs	r3, #128	@ 0x80
 8007b56:	049b      	lsls	r3, r3, #18
 8007b58:	4013      	ands	r3, r2
 8007b5a:	d0f0      	beq.n	8007b3e <HAL_RCC_OscConfig+0x62a>
 8007b5c:	e04f      	b.n	8007bfe <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b0c      	ldr	r3, [pc, #48]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b64:	4912      	ldr	r1, [pc, #72]	@ (8007bb0 <HAL_RCC_OscConfig+0x69c>)
 8007b66:	400a      	ands	r2, r1
 8007b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6a:	f7fd ff2b 	bl	80059c4 <HAL_GetTick>
 8007b6e:	0003      	movs	r3, r0
 8007b70:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b74:	f7fd ff26 	bl	80059c4 <HAL_GetTick>
 8007b78:	0002      	movs	r2, r0
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e03c      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007b86:	4b03      	ldr	r3, [pc, #12]	@ (8007b94 <HAL_RCC_OscConfig+0x680>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	2380      	movs	r3, #128	@ 0x80
 8007b8c:	049b      	lsls	r3, r3, #18
 8007b8e:	4013      	ands	r3, r2
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x660>
 8007b92:	e034      	b.n	8007bfe <HAL_RCC_OscConfig+0x6ea>
 8007b94:	40021000 	.word	0x40021000
 8007b98:	ffff1fff 	.word	0xffff1fff
 8007b9c:	fffffeff 	.word	0xfffffeff
 8007ba0:	40007000 	.word	0x40007000
 8007ba4:	fffffbff 	.word	0xfffffbff
 8007ba8:	00001388 	.word	0x00001388
 8007bac:	efffffff 	.word	0xefffffff
 8007bb0:	feffffff 	.word	0xfeffffff
 8007bb4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e01d      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007bc4:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <HAL_RCC_OscConfig+0x6f4>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	2380      	movs	r3, #128	@ 0x80
 8007bce:	025b      	lsls	r3, r3, #9
 8007bd0:	401a      	ands	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d10f      	bne.n	8007bfa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	23f0      	movs	r3, #240	@ 0xf0
 8007bde:	039b      	lsls	r3, r3, #14
 8007be0:	401a      	ands	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d107      	bne.n	8007bfa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	23c0      	movs	r3, #192	@ 0xc0
 8007bee:	041b      	lsls	r3, r3, #16
 8007bf0:	401a      	ands	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d001      	beq.n	8007bfe <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b00a      	add	sp, #40	@ 0x28
 8007c06:	bdb0      	pop	{r4, r5, r7, pc}
 8007c08:	40021000 	.word	0x40021000

08007c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c0c:	b5b0      	push	{r4, r5, r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e128      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c20:	4b96      	ldr	r3, [pc, #600]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2201      	movs	r2, #1
 8007c26:	4013      	ands	r3, r2
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d91e      	bls.n	8007c6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c2e:	4b93      	ldr	r3, [pc, #588]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2201      	movs	r2, #1
 8007c34:	4393      	bics	r3, r2
 8007c36:	0019      	movs	r1, r3
 8007c38:	4b90      	ldr	r3, [pc, #576]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c40:	f7fd fec0 	bl	80059c4 <HAL_GetTick>
 8007c44:	0003      	movs	r3, r0
 8007c46:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c48:	e009      	b.n	8007c5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c4a:	f7fd febb 	bl	80059c4 <HAL_GetTick>
 8007c4e:	0002      	movs	r2, r0
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	4a8a      	ldr	r2, [pc, #552]	@ (8007e80 <HAL_RCC_ClockConfig+0x274>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e109      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c5e:	4b87      	ldr	r3, [pc, #540]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2201      	movs	r2, #1
 8007c64:	4013      	ands	r3, r2
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d1ee      	bne.n	8007c4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2202      	movs	r2, #2
 8007c72:	4013      	ands	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c76:	4b83      	ldr	r3, [pc, #524]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	22f0      	movs	r2, #240	@ 0xf0
 8007c7c:	4393      	bics	r3, r2
 8007c7e:	0019      	movs	r1, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	4b7f      	ldr	r3, [pc, #508]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007c86:	430a      	orrs	r2, r1
 8007c88:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4013      	ands	r3, r2
 8007c92:	d100      	bne.n	8007c96 <HAL_RCC_ClockConfig+0x8a>
 8007c94:	e089      	b.n	8007daa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d107      	bne.n	8007cae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c9e:	4b79      	ldr	r3, [pc, #484]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	2380      	movs	r3, #128	@ 0x80
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	d120      	bne.n	8007cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e0e1      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d107      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cb6:	4b73      	ldr	r3, [pc, #460]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	2380      	movs	r3, #128	@ 0x80
 8007cbc:	049b      	lsls	r3, r3, #18
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d114      	bne.n	8007cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e0d5      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d106      	bne.n	8007cdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cce:	4b6d      	ldr	r3, [pc, #436]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2204      	movs	r2, #4
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	d109      	bne.n	8007cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0ca      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007cdc:	4b69      	ldr	r3, [pc, #420]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	2380      	movs	r3, #128	@ 0x80
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	d101      	bne.n	8007cec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0c2      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cec:	4b65      	ldr	r3, [pc, #404]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	4393      	bics	r3, r2
 8007cf4:	0019      	movs	r1, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	4b62      	ldr	r3, [pc, #392]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d00:	f7fd fe60 	bl	80059c4 <HAL_GetTick>
 8007d04:	0003      	movs	r3, r0
 8007d06:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d111      	bne.n	8007d34 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d10:	e009      	b.n	8007d26 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d12:	f7fd fe57 	bl	80059c4 <HAL_GetTick>
 8007d16:	0002      	movs	r2, r0
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	4a58      	ldr	r2, [pc, #352]	@ (8007e80 <HAL_RCC_ClockConfig+0x274>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e0a5      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d26:	4b57      	ldr	r3, [pc, #348]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	220c      	movs	r2, #12
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d1ef      	bne.n	8007d12 <HAL_RCC_ClockConfig+0x106>
 8007d32:	e03a      	b.n	8007daa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d111      	bne.n	8007d60 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d3c:	e009      	b.n	8007d52 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d3e:	f7fd fe41 	bl	80059c4 <HAL_GetTick>
 8007d42:	0002      	movs	r2, r0
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	4a4d      	ldr	r2, [pc, #308]	@ (8007e80 <HAL_RCC_ClockConfig+0x274>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e08f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d52:	4b4c      	ldr	r3, [pc, #304]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	220c      	movs	r2, #12
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b0c      	cmp	r3, #12
 8007d5c:	d1ef      	bne.n	8007d3e <HAL_RCC_ClockConfig+0x132>
 8007d5e:	e024      	b.n	8007daa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d11b      	bne.n	8007da0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d68:	e009      	b.n	8007d7e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d6a:	f7fd fe2b 	bl	80059c4 <HAL_GetTick>
 8007d6e:	0002      	movs	r2, r0
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	4a42      	ldr	r2, [pc, #264]	@ (8007e80 <HAL_RCC_ClockConfig+0x274>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e079      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d7e:	4b41      	ldr	r3, [pc, #260]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	220c      	movs	r2, #12
 8007d84:	4013      	ands	r3, r2
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d1ef      	bne.n	8007d6a <HAL_RCC_ClockConfig+0x15e>
 8007d8a:	e00e      	b.n	8007daa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d8c:	f7fd fe1a 	bl	80059c4 <HAL_GetTick>
 8007d90:	0002      	movs	r2, r0
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	4a3a      	ldr	r2, [pc, #232]	@ (8007e80 <HAL_RCC_ClockConfig+0x274>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e068      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007da0:	4b38      	ldr	r3, [pc, #224]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	220c      	movs	r2, #12
 8007da6:	4013      	ands	r3, r2
 8007da8:	d1f0      	bne.n	8007d8c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007daa:	4b34      	ldr	r3, [pc, #208]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2201      	movs	r2, #1
 8007db0:	4013      	ands	r3, r2
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d21e      	bcs.n	8007df6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007db8:	4b30      	ldr	r3, [pc, #192]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	4393      	bics	r3, r2
 8007dc0:	0019      	movs	r1, r3
 8007dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007dca:	f7fd fdfb 	bl	80059c4 <HAL_GetTick>
 8007dce:	0003      	movs	r3, r0
 8007dd0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd2:	e009      	b.n	8007de8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dd4:	f7fd fdf6 	bl	80059c4 <HAL_GetTick>
 8007dd8:	0002      	movs	r2, r0
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	4a28      	ldr	r2, [pc, #160]	@ (8007e80 <HAL_RCC_ClockConfig+0x274>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e044      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de8:	4b24      	ldr	r3, [pc, #144]	@ (8007e7c <HAL_RCC_ClockConfig+0x270>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2201      	movs	r2, #1
 8007dee:	4013      	ands	r3, r2
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d1ee      	bne.n	8007dd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	d009      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e00:	4b20      	ldr	r3, [pc, #128]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	4a20      	ldr	r2, [pc, #128]	@ (8007e88 <HAL_RCC_ClockConfig+0x27c>)
 8007e06:	4013      	ands	r3, r2
 8007e08:	0019      	movs	r1, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007e10:	430a      	orrs	r2, r1
 8007e12:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d00a      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e1e:	4b19      	ldr	r3, [pc, #100]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	4a1a      	ldr	r2, [pc, #104]	@ (8007e8c <HAL_RCC_ClockConfig+0x280>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	0019      	movs	r1, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	00da      	lsls	r2, r3, #3
 8007e2e:	4b15      	ldr	r3, [pc, #84]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007e30:	430a      	orrs	r2, r1
 8007e32:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e34:	f000 f832 	bl	8007e9c <HAL_RCC_GetSysClockFreq>
 8007e38:	0001      	movs	r1, r0
 8007e3a:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <HAL_RCC_ClockConfig+0x278>)
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	220f      	movs	r2, #15
 8007e42:	4013      	ands	r3, r2
 8007e44:	4a12      	ldr	r2, [pc, #72]	@ (8007e90 <HAL_RCC_ClockConfig+0x284>)
 8007e46:	5cd3      	ldrb	r3, [r2, r3]
 8007e48:	000a      	movs	r2, r1
 8007e4a:	40da      	lsrs	r2, r3
 8007e4c:	4b11      	ldr	r3, [pc, #68]	@ (8007e94 <HAL_RCC_ClockConfig+0x288>)
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e50:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <HAL_RCC_ClockConfig+0x28c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	250b      	movs	r5, #11
 8007e56:	197c      	adds	r4, r7, r5
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f7fd fd6d 	bl	8005938 <HAL_InitTick>
 8007e5e:	0003      	movs	r3, r0
 8007e60:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007e62:	197b      	adds	r3, r7, r5
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8007e6a:	197b      	adds	r3, r7, r5
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	e000      	b.n	8007e72 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	0018      	movs	r0, r3
 8007e74:	46bd      	mov	sp, r7
 8007e76:	b004      	add	sp, #16
 8007e78:	bdb0      	pop	{r4, r5, r7, pc}
 8007e7a:	46c0      	nop			@ (mov r8, r8)
 8007e7c:	40022000 	.word	0x40022000
 8007e80:	00001388 	.word	0x00001388
 8007e84:	40021000 	.word	0x40021000
 8007e88:	fffff8ff 	.word	0xfffff8ff
 8007e8c:	ffffc7ff 	.word	0xffffc7ff
 8007e90:	0800cd40 	.word	0x0800cd40
 8007e94:	20000000 	.word	0x20000000
 8007e98:	20000004 	.word	0x20000004

08007e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e9c:	b5b0      	push	{r4, r5, r7, lr}
 8007e9e:	b08e      	sub	sp, #56	@ 0x38
 8007ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8007ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eaa:	230c      	movs	r3, #12
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b0c      	cmp	r3, #12
 8007eb0:	d014      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0x40>
 8007eb2:	d900      	bls.n	8007eb6 <HAL_RCC_GetSysClockFreq+0x1a>
 8007eb4:	e07b      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x112>
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d002      	beq.n	8007ec0 <HAL_RCC_GetSysClockFreq+0x24>
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d00b      	beq.n	8007ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007ebe:	e076      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007ec0:	4b44      	ldr	r3, [pc, #272]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2210      	movs	r2, #16
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	d002      	beq.n	8007ed0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007eca:	4b43      	ldr	r3, [pc, #268]	@ (8007fd8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007ecc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007ece:	e07c      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007ed0:	4b42      	ldr	r3, [pc, #264]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0x140>)
 8007ed2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007ed4:	e079      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007ed6:	4b42      	ldr	r3, [pc, #264]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x144>)
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007eda:	e076      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	0c9a      	lsrs	r2, r3, #18
 8007ee0:	230f      	movs	r3, #15
 8007ee2:	401a      	ands	r2, r3
 8007ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x148>)
 8007ee6:	5c9b      	ldrb	r3, [r3, r2]
 8007ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eec:	0d9a      	lsrs	r2, r3, #22
 8007eee:	2303      	movs	r3, #3
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ef6:	4b37      	ldr	r3, [pc, #220]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	2380      	movs	r3, #128	@ 0x80
 8007efc:	025b      	lsls	r3, r3, #9
 8007efe:	4013      	ands	r3, r2
 8007f00:	d01a      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	4a35      	ldr	r2, [pc, #212]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x144>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	69b8      	ldr	r0, [r7, #24]
 8007f10:	69f9      	ldr	r1, [r7, #28]
 8007f12:	f7f8 fb23 	bl	800055c <__aeabi_lmul>
 8007f16:	0002      	movs	r2, r0
 8007f18:	000b      	movs	r3, r1
 8007f1a:	0010      	movs	r0, r2
 8007f1c:	0019      	movs	r1, r3
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	2300      	movs	r3, #0
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f7f8 faf7 	bl	800051c <__aeabi_uldivmod>
 8007f2e:	0002      	movs	r2, r0
 8007f30:	000b      	movs	r3, r1
 8007f32:	0013      	movs	r3, r2
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f36:	e037      	b.n	8007fa8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007f38:	4b26      	ldr	r3, [pc, #152]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2210      	movs	r2, #16
 8007f3e:	4013      	ands	r3, r2
 8007f40:	d01a      	beq.n	8007f78 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f44:	60bb      	str	r3, [r7, #8]
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	4a23      	ldr	r2, [pc, #140]	@ (8007fd8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	68b8      	ldr	r0, [r7, #8]
 8007f50:	68f9      	ldr	r1, [r7, #12]
 8007f52:	f7f8 fb03 	bl	800055c <__aeabi_lmul>
 8007f56:	0002      	movs	r2, r0
 8007f58:	000b      	movs	r3, r1
 8007f5a:	0010      	movs	r0, r2
 8007f5c:	0019      	movs	r1, r3
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	603b      	str	r3, [r7, #0]
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f7f8 fad7 	bl	800051c <__aeabi_uldivmod>
 8007f6e:	0002      	movs	r2, r0
 8007f70:	000b      	movs	r3, r1
 8007f72:	0013      	movs	r3, r2
 8007f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f76:	e017      	b.n	8007fa8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	0019      	movs	r1, r3
 8007f80:	4a16      	ldr	r2, [pc, #88]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0x140>)
 8007f82:	2300      	movs	r3, #0
 8007f84:	f7f8 faea 	bl	800055c <__aeabi_lmul>
 8007f88:	0002      	movs	r2, r0
 8007f8a:	000b      	movs	r3, r1
 8007f8c:	0010      	movs	r0, r2
 8007f8e:	0019      	movs	r1, r3
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	001c      	movs	r4, r3
 8007f94:	2300      	movs	r3, #0
 8007f96:	001d      	movs	r5, r3
 8007f98:	0022      	movs	r2, r4
 8007f9a:	002b      	movs	r3, r5
 8007f9c:	f7f8 fabe 	bl	800051c <__aeabi_uldivmod>
 8007fa0:	0002      	movs	r2, r0
 8007fa2:	000b      	movs	r3, r1
 8007fa4:	0013      	movs	r3, r2
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007faa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007fac:	e00d      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007fae:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	0b5b      	lsrs	r3, r3, #13
 8007fb4:	2207      	movs	r2, #7
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	2280      	movs	r2, #128	@ 0x80
 8007fc0:	0212      	lsls	r2, r2, #8
 8007fc2:	409a      	lsls	r2, r3
 8007fc4:	0013      	movs	r3, r2
 8007fc6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007fc8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8007fcc:	0018      	movs	r0, r3
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b00e      	add	sp, #56	@ 0x38
 8007fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8007fd4:	40021000 	.word	0x40021000
 8007fd8:	003d0900 	.word	0x003d0900
 8007fdc:	00f42400 	.word	0x00f42400
 8007fe0:	007a1200 	.word	0x007a1200
 8007fe4:	0800cd58 	.word	0x0800cd58

08007fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fec:	4b02      	ldr	r3, [pc, #8]	@ (8007ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8007fee:	681b      	ldr	r3, [r3, #0]
}
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	20000000 	.word	0x20000000

08007ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008000:	f7ff fff2 	bl	8007fe8 <HAL_RCC_GetHCLKFreq>
 8008004:	0001      	movs	r1, r0
 8008006:	4b06      	ldr	r3, [pc, #24]	@ (8008020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	2207      	movs	r2, #7
 800800e:	4013      	ands	r3, r2
 8008010:	4a04      	ldr	r2, [pc, #16]	@ (8008024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008012:	5cd3      	ldrb	r3, [r2, r3]
 8008014:	40d9      	lsrs	r1, r3
 8008016:	000b      	movs	r3, r1
}
 8008018:	0018      	movs	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			@ (mov r8, r8)
 8008020:	40021000 	.word	0x40021000
 8008024:	0800cd50 	.word	0x0800cd50

08008028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800802c:	f7ff ffdc 	bl	8007fe8 <HAL_RCC_GetHCLKFreq>
 8008030:	0001      	movs	r1, r0
 8008032:	4b06      	ldr	r3, [pc, #24]	@ (800804c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	0adb      	lsrs	r3, r3, #11
 8008038:	2207      	movs	r2, #7
 800803a:	4013      	ands	r3, r2
 800803c:	4a04      	ldr	r2, [pc, #16]	@ (8008050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800803e:	5cd3      	ldrb	r3, [r2, r3]
 8008040:	40d9      	lsrs	r1, r3
 8008042:	000b      	movs	r3, r1
}
 8008044:	0018      	movs	r0, r3
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	46c0      	nop			@ (mov r8, r8)
 800804c:	40021000 	.word	0x40021000
 8008050:	0800cd50 	.word	0x0800cd50

08008054 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800805c:	2017      	movs	r0, #23
 800805e:	183b      	adds	r3, r7, r0
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2220      	movs	r2, #32
 800806a:	4013      	ands	r3, r2
 800806c:	d100      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800806e:	e0c7      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008070:	4b84      	ldr	r3, [pc, #528]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008074:	2380      	movs	r3, #128	@ 0x80
 8008076:	055b      	lsls	r3, r3, #21
 8008078:	4013      	ands	r3, r2
 800807a:	d109      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800807c:	4b81      	ldr	r3, [pc, #516]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800807e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008080:	4b80      	ldr	r3, [pc, #512]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008082:	2180      	movs	r1, #128	@ 0x80
 8008084:	0549      	lsls	r1, r1, #21
 8008086:	430a      	orrs	r2, r1
 8008088:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800808a:	183b      	adds	r3, r7, r0
 800808c:	2201      	movs	r2, #1
 800808e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008090:	4b7d      	ldr	r3, [pc, #500]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	2380      	movs	r3, #128	@ 0x80
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	4013      	ands	r3, r2
 800809a:	d11a      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800809c:	4b7a      	ldr	r3, [pc, #488]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	4b79      	ldr	r3, [pc, #484]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80080a2:	2180      	movs	r1, #128	@ 0x80
 80080a4:	0049      	lsls	r1, r1, #1
 80080a6:	430a      	orrs	r2, r1
 80080a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080aa:	f7fd fc8b 	bl	80059c4 <HAL_GetTick>
 80080ae:	0003      	movs	r3, r0
 80080b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080b2:	e008      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080b4:	f7fd fc86 	bl	80059c4 <HAL_GetTick>
 80080b8:	0002      	movs	r2, r0
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b64      	cmp	r3, #100	@ 0x64
 80080c0:	d901      	bls.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e0d9      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080c6:	4b70      	ldr	r3, [pc, #448]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	2380      	movs	r3, #128	@ 0x80
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	4013      	ands	r3, r2
 80080d0:	d0f0      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80080d2:	4b6c      	ldr	r3, [pc, #432]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	23c0      	movs	r3, #192	@ 0xc0
 80080d8:	039b      	lsls	r3, r3, #14
 80080da:	4013      	ands	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	23c0      	movs	r3, #192	@ 0xc0
 80080e4:	039b      	lsls	r3, r3, #14
 80080e6:	4013      	ands	r3, r2
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d013      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	23c0      	movs	r3, #192	@ 0xc0
 80080f4:	029b      	lsls	r3, r3, #10
 80080f6:	401a      	ands	r2, r3
 80080f8:	23c0      	movs	r3, #192	@ 0xc0
 80080fa:	029b      	lsls	r3, r3, #10
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d10a      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008100:	4b60      	ldr	r3, [pc, #384]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	2380      	movs	r3, #128	@ 0x80
 8008106:	029b      	lsls	r3, r3, #10
 8008108:	401a      	ands	r2, r3
 800810a:	2380      	movs	r3, #128	@ 0x80
 800810c:	029b      	lsls	r3, r3, #10
 800810e:	429a      	cmp	r2, r3
 8008110:	d101      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e0b1      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008116:	4b5b      	ldr	r3, [pc, #364]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008118:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800811a:	23c0      	movs	r3, #192	@ 0xc0
 800811c:	029b      	lsls	r3, r3, #10
 800811e:	4013      	ands	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d03b      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	23c0      	movs	r3, #192	@ 0xc0
 800812e:	029b      	lsls	r3, r3, #10
 8008130:	4013      	ands	r3, r2
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	429a      	cmp	r2, r3
 8008136:	d033      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2220      	movs	r2, #32
 800813e:	4013      	ands	r3, r2
 8008140:	d02e      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008142:	4b50      	ldr	r3, [pc, #320]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008146:	4a51      	ldr	r2, [pc, #324]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8008148:	4013      	ands	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800814c:	4b4d      	ldr	r3, [pc, #308]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800814e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008150:	4b4c      	ldr	r3, [pc, #304]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008152:	2180      	movs	r1, #128	@ 0x80
 8008154:	0309      	lsls	r1, r1, #12
 8008156:	430a      	orrs	r2, r1
 8008158:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800815a:	4b4a      	ldr	r3, [pc, #296]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800815c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800815e:	4b49      	ldr	r3, [pc, #292]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008160:	494b      	ldr	r1, [pc, #300]	@ (8008290 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8008162:	400a      	ands	r2, r1
 8008164:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008166:	4b47      	ldr	r3, [pc, #284]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	2380      	movs	r3, #128	@ 0x80
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4013      	ands	r3, r2
 8008174:	d014      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008176:	f7fd fc25 	bl	80059c4 <HAL_GetTick>
 800817a:	0003      	movs	r3, r0
 800817c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800817e:	e009      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008180:	f7fd fc20 	bl	80059c4 <HAL_GetTick>
 8008184:	0002      	movs	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	4a42      	ldr	r2, [pc, #264]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d901      	bls.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e072      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008194:	4b3b      	ldr	r3, [pc, #236]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008198:	2380      	movs	r3, #128	@ 0x80
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4013      	ands	r3, r2
 800819e:	d0ef      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2220      	movs	r2, #32
 80081a6:	4013      	ands	r3, r2
 80081a8:	d01f      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	23c0      	movs	r3, #192	@ 0xc0
 80081b0:	029b      	lsls	r3, r3, #10
 80081b2:	401a      	ands	r2, r3
 80081b4:	23c0      	movs	r3, #192	@ 0xc0
 80081b6:	029b      	lsls	r3, r3, #10
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d10c      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80081bc:	4b31      	ldr	r3, [pc, #196]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a35      	ldr	r2, [pc, #212]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	0019      	movs	r1, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	23c0      	movs	r3, #192	@ 0xc0
 80081cc:	039b      	lsls	r3, r3, #14
 80081ce:	401a      	ands	r2, r3
 80081d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081d2:	430a      	orrs	r2, r1
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	4b2b      	ldr	r3, [pc, #172]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	23c0      	movs	r3, #192	@ 0xc0
 80081e0:	029b      	lsls	r3, r3, #10
 80081e2:	401a      	ands	r2, r3
 80081e4:	4b27      	ldr	r3, [pc, #156]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081e6:	430a      	orrs	r2, r1
 80081e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80081ea:	2317      	movs	r3, #23
 80081ec:	18fb      	adds	r3, r7, r3
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d105      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081f4:	4b23      	ldr	r3, [pc, #140]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f8:	4b22      	ldr	r3, [pc, #136]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081fa:	4928      	ldr	r1, [pc, #160]	@ (800829c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80081fc:	400a      	ands	r2, r1
 80081fe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2202      	movs	r2, #2
 8008206:	4013      	ands	r3, r2
 8008208:	d009      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800820a:	4b1e      	ldr	r3, [pc, #120]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800820c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820e:	220c      	movs	r2, #12
 8008210:	4393      	bics	r3, r2
 8008212:	0019      	movs	r1, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	4b1a      	ldr	r3, [pc, #104]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800821a:	430a      	orrs	r2, r1
 800821c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2204      	movs	r2, #4
 8008224:	4013      	ands	r3, r2
 8008226:	d009      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008228:	4b16      	ldr	r3, [pc, #88]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800822a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800822c:	4a1c      	ldr	r2, [pc, #112]	@ (80082a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800822e:	4013      	ands	r3, r2
 8008230:	0019      	movs	r1, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008238:	430a      	orrs	r2, r1
 800823a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2208      	movs	r2, #8
 8008242:	4013      	ands	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008246:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800824a:	4a16      	ldr	r2, [pc, #88]	@ (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800824c:	4013      	ands	r3, r2
 800824e:	0019      	movs	r1, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008256:	430a      	orrs	r2, r1
 8008258:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2280      	movs	r2, #128	@ 0x80
 8008260:	4013      	ands	r3, r2
 8008262:	d009      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008264:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008268:	4a0f      	ldr	r2, [pc, #60]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800826a:	4013      	ands	r3, r2
 800826c:	0019      	movs	r1, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695a      	ldr	r2, [r3, #20]
 8008272:	4b04      	ldr	r3, [pc, #16]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008274:	430a      	orrs	r2, r1
 8008276:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	b006      	add	sp, #24
 8008280:	bd80      	pop	{r7, pc}
 8008282:	46c0      	nop			@ (mov r8, r8)
 8008284:	40021000 	.word	0x40021000
 8008288:	40007000 	.word	0x40007000
 800828c:	fffcffff 	.word	0xfffcffff
 8008290:	fff7ffff 	.word	0xfff7ffff
 8008294:	00001388 	.word	0x00001388
 8008298:	ffcfffff 	.word	0xffcfffff
 800829c:	efffffff 	.word	0xefffffff
 80082a0:	fffff3ff 	.word	0xfffff3ff
 80082a4:	ffffcfff 	.word	0xffffcfff
 80082a8:	fff3ffff 	.word	0xfff3ffff

080082ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082ac:	b5b0      	push	{r4, r5, r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082b4:	230f      	movs	r3, #15
 80082b6:	18fb      	adds	r3, r7, r3
 80082b8:	2201      	movs	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e088      	b.n	80083d8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2221      	movs	r2, #33	@ 0x21
 80082ca:	5c9b      	ldrb	r3, [r3, r2]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d107      	bne.n	80082e2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	2100      	movs	r1, #0
 80082d8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	0018      	movs	r0, r3
 80082de:	f7fd f8a9 	bl	8005434 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2221      	movs	r2, #33	@ 0x21
 80082e6:	2102      	movs	r1, #2
 80082e8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2210      	movs	r2, #16
 80082f2:	4013      	ands	r3, r2
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d05f      	beq.n	80083b8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	22ca      	movs	r2, #202	@ 0xca
 80082fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2253      	movs	r2, #83	@ 0x53
 8008306:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008308:	250f      	movs	r5, #15
 800830a:	197c      	adds	r4, r7, r5
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	0018      	movs	r0, r3
 8008310:	f000 f890 	bl	8008434 <RTC_EnterInitMode>
 8008314:	0003      	movs	r3, r0
 8008316:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8008318:	0028      	movs	r0, r5
 800831a:	183b      	adds	r3, r7, r0
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d12c      	bne.n	800837c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	492c      	ldr	r1, [pc, #176]	@ (80083e0 <HAL_RTC_Init+0x134>)
 800832e:	400a      	ands	r2, r1
 8008330:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6899      	ldr	r1, [r3, #8]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68d2      	ldr	r2, [r2, #12]
 8008358:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6919      	ldr	r1, [r3, #16]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	041a      	lsls	r2, r3, #16
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800836e:	183c      	adds	r4, r7, r0
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0018      	movs	r0, r3
 8008374:	f000 f8a2 	bl	80084bc <RTC_ExitInitMode>
 8008378:	0003      	movs	r3, r0
 800837a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800837c:	230f      	movs	r3, #15
 800837e:	18fb      	adds	r3, r7, r3
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d113      	bne.n	80083ae <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2103      	movs	r1, #3
 8008392:	438a      	bics	r2, r1
 8008394:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	69da      	ldr	r2, [r3, #28]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	22ff      	movs	r2, #255	@ 0xff
 80083b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80083b6:	e003      	b.n	80083c0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80083b8:	230f      	movs	r3, #15
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80083c0:	230f      	movs	r3, #15
 80083c2:	18fb      	adds	r3, r7, r3
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d103      	bne.n	80083d2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2221      	movs	r2, #33	@ 0x21
 80083ce:	2101      	movs	r1, #1
 80083d0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80083d2:	230f      	movs	r3, #15
 80083d4:	18fb      	adds	r3, r7, r3
 80083d6:	781b      	ldrb	r3, [r3, #0]
}
 80083d8:	0018      	movs	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	b004      	add	sp, #16
 80083de:	bdb0      	pop	{r4, r5, r7, pc}
 80083e0:	ff8fffbf 	.word	0xff8fffbf

080083e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0e      	ldr	r2, [pc, #56]	@ (8008430 <HAL_RTC_WaitForSynchro+0x4c>)
 80083f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083f8:	f7fd fae4 	bl	80059c4 <HAL_GetTick>
 80083fc:	0003      	movs	r3, r0
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008400:	e00a      	b.n	8008418 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008402:	f7fd fadf 	bl	80059c4 <HAL_GetTick>
 8008406:	0002      	movs	r2, r0
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	1ad2      	subs	r2, r2, r3
 800840c:	23fa      	movs	r3, #250	@ 0xfa
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	429a      	cmp	r2, r3
 8008412:	d901      	bls.n	8008418 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e006      	b.n	8008426 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	4013      	ands	r3, r2
 8008422:	d0ee      	beq.n	8008402 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	0018      	movs	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	b004      	add	sp, #16
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	00017f5f 	.word	0x00017f5f

08008434 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008440:	230f      	movs	r3, #15
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	2200      	movs	r2, #0
 8008446:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2240      	movs	r2, #64	@ 0x40
 8008450:	4013      	ands	r3, r2
 8008452:	d12c      	bne.n	80084ae <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2180      	movs	r1, #128	@ 0x80
 8008460:	430a      	orrs	r2, r1
 8008462:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008464:	f7fd faae 	bl	80059c4 <HAL_GetTick>
 8008468:	0003      	movs	r3, r0
 800846a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800846c:	e014      	b.n	8008498 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800846e:	f7fd faa9 	bl	80059c4 <HAL_GetTick>
 8008472:	0002      	movs	r2, r0
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	1ad2      	subs	r2, r2, r3
 8008478:	200f      	movs	r0, #15
 800847a:	183b      	adds	r3, r7, r0
 800847c:	1839      	adds	r1, r7, r0
 800847e:	7809      	ldrb	r1, [r1, #0]
 8008480:	7019      	strb	r1, [r3, #0]
 8008482:	23fa      	movs	r3, #250	@ 0xfa
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	429a      	cmp	r2, r3
 8008488:	d906      	bls.n	8008498 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2221      	movs	r2, #33	@ 0x21
 800848e:	2104      	movs	r1, #4
 8008490:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8008492:	183b      	adds	r3, r7, r0
 8008494:	2201      	movs	r2, #1
 8008496:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2240      	movs	r2, #64	@ 0x40
 80084a0:	4013      	ands	r3, r2
 80084a2:	d104      	bne.n	80084ae <RTC_EnterInitMode+0x7a>
 80084a4:	230f      	movs	r3, #15
 80084a6:	18fb      	adds	r3, r7, r3
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d1df      	bne.n	800846e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80084ae:	230f      	movs	r3, #15
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	781b      	ldrb	r3, [r3, #0]
}
 80084b4:	0018      	movs	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b004      	add	sp, #16
 80084ba:	bd80      	pop	{r7, pc}

080084bc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c4:	240f      	movs	r4, #15
 80084c6:	193b      	adds	r3, r7, r4
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2180      	movs	r1, #128	@ 0x80
 80084d8:	438a      	bics	r2, r1
 80084da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2220      	movs	r2, #32
 80084e4:	4013      	ands	r3, r2
 80084e6:	d10c      	bne.n	8008502 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	0018      	movs	r0, r3
 80084ec:	f7ff ff7a 	bl	80083e4 <HAL_RTC_WaitForSynchro>
 80084f0:	1e03      	subs	r3, r0, #0
 80084f2:	d006      	beq.n	8008502 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2221      	movs	r2, #33	@ 0x21
 80084f8:	2104      	movs	r1, #4
 80084fa:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80084fc:	193b      	adds	r3, r7, r4
 80084fe:	2201      	movs	r2, #1
 8008500:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008502:	230f      	movs	r3, #15
 8008504:	18fb      	adds	r3, r7, r3
 8008506:	781b      	ldrb	r3, [r3, #0]
}
 8008508:	0018      	movs	r0, r3
 800850a:	46bd      	mov	sp, r7
 800850c:	b005      	add	sp, #20
 800850e:	bd90      	pop	{r4, r7, pc}

08008510 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3350      	adds	r3, #80	@ 0x50
 8008526:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	18d3      	adds	r3, r2, r3
 8008530:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]
}
 8008538:	46c0      	nop			@ (mov r8, r8)
 800853a:	46bd      	mov	sp, r7
 800853c:	b006      	add	sp, #24
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3350      	adds	r3, #80	@ 0x50
 8008554:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	18d3      	adds	r3, r2, r3
 800855e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
}
 8008564:	0018      	movs	r0, r3
 8008566:	46bd      	mov	sp, r7
 8008568:	b004      	add	sp, #16
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e032      	b.n	80085e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2239      	movs	r2, #57	@ 0x39
 8008582:	5c9b      	ldrb	r3, [r3, r2]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d107      	bne.n	800859a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2238      	movs	r2, #56	@ 0x38
 800858e:	2100      	movs	r1, #0
 8008590:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	0018      	movs	r0, r3
 8008596:	f7fc ff7f 	bl	8005498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2239      	movs	r2, #57	@ 0x39
 800859e:	2102      	movs	r1, #2
 80085a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3304      	adds	r3, #4
 80085aa:	0019      	movs	r1, r3
 80085ac:	0010      	movs	r0, r2
 80085ae:	f000 f92d 	bl	800880c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	223e      	movs	r2, #62	@ 0x3e
 80085b6:	2101      	movs	r1, #1
 80085b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	223a      	movs	r2, #58	@ 0x3a
 80085be:	2101      	movs	r1, #1
 80085c0:	5499      	strb	r1, [r3, r2]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	223b      	movs	r2, #59	@ 0x3b
 80085c6:	2101      	movs	r1, #1
 80085c8:	5499      	strb	r1, [r3, r2]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	223c      	movs	r2, #60	@ 0x3c
 80085ce:	2101      	movs	r1, #1
 80085d0:	5499      	strb	r1, [r3, r2]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	223d      	movs	r2, #61	@ 0x3d
 80085d6:	2101      	movs	r1, #1
 80085d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2239      	movs	r2, #57	@ 0x39
 80085de:	2101      	movs	r1, #1
 80085e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	0018      	movs	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b002      	add	sp, #8
 80085ea:	bd80      	pop	{r7, pc}

080085ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2239      	movs	r2, #57	@ 0x39
 80085f8:	5c9b      	ldrb	r3, [r3, r2]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d001      	beq.n	8008604 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e029      	b.n	8008658 <HAL_TIM_Base_Start+0x6c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2239      	movs	r2, #57	@ 0x39
 8008608:	2102      	movs	r1, #2
 800860a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	2380      	movs	r3, #128	@ 0x80
 8008612:	05db      	lsls	r3, r3, #23
 8008614:	429a      	cmp	r2, r3
 8008616:	d004      	beq.n	8008622 <HAL_TIM_Base_Start+0x36>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a10      	ldr	r2, [pc, #64]	@ (8008660 <HAL_TIM_Base_Start+0x74>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d111      	bne.n	8008646 <HAL_TIM_Base_Start+0x5a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2207      	movs	r2, #7
 800862a:	4013      	ands	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b06      	cmp	r3, #6
 8008632:	d010      	beq.n	8008656 <HAL_TIM_Base_Start+0x6a>
    {
      __HAL_TIM_ENABLE(htim);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2101      	movs	r1, #1
 8008640:	430a      	orrs	r2, r1
 8008642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008644:	e007      	b.n	8008656 <HAL_TIM_Base_Start+0x6a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2101      	movs	r1, #1
 8008652:	430a      	orrs	r2, r1
 8008654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	0018      	movs	r0, r3
 800865a:	46bd      	mov	sp, r7
 800865c:	b004      	add	sp, #16
 800865e:	bd80      	pop	{r7, pc}
 8008660:	40010800 	.word	0x40010800

08008664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	230f      	movs	r3, #15
 8008670:	18fb      	adds	r3, r7, r3
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2238      	movs	r2, #56	@ 0x38
 800867a:	5c9b      	ldrb	r3, [r3, r2]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIM_ConfigClockSource+0x20>
 8008680:	2302      	movs	r3, #2
 8008682:	e0bc      	b.n	80087fe <HAL_TIM_ConfigClockSource+0x19a>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2238      	movs	r2, #56	@ 0x38
 8008688:	2101      	movs	r1, #1
 800868a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2239      	movs	r2, #57	@ 0x39
 8008690:	2102      	movs	r1, #2
 8008692:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2277      	movs	r2, #119	@ 0x77
 80086a0:	4393      	bics	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4a58      	ldr	r2, [pc, #352]	@ (8008808 <HAL_TIM_ConfigClockSource+0x1a4>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2280      	movs	r2, #128	@ 0x80
 80086ba:	0192      	lsls	r2, r2, #6
 80086bc:	4293      	cmp	r3, r2
 80086be:	d040      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0xde>
 80086c0:	2280      	movs	r2, #128	@ 0x80
 80086c2:	0192      	lsls	r2, r2, #6
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d900      	bls.n	80086ca <HAL_TIM_ConfigClockSource+0x66>
 80086c8:	e088      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 80086ca:	2280      	movs	r2, #128	@ 0x80
 80086cc:	0152      	lsls	r2, r2, #5
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d100      	bne.n	80086d4 <HAL_TIM_ConfigClockSource+0x70>
 80086d2:	e088      	b.n	80087e6 <HAL_TIM_ConfigClockSource+0x182>
 80086d4:	2280      	movs	r2, #128	@ 0x80
 80086d6:	0152      	lsls	r2, r2, #5
 80086d8:	4293      	cmp	r3, r2
 80086da:	d900      	bls.n	80086de <HAL_TIM_ConfigClockSource+0x7a>
 80086dc:	e07e      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 80086de:	2b70      	cmp	r3, #112	@ 0x70
 80086e0:	d018      	beq.n	8008714 <HAL_TIM_ConfigClockSource+0xb0>
 80086e2:	d900      	bls.n	80086e6 <HAL_TIM_ConfigClockSource+0x82>
 80086e4:	e07a      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 80086e6:	2b60      	cmp	r3, #96	@ 0x60
 80086e8:	d04f      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x126>
 80086ea:	d900      	bls.n	80086ee <HAL_TIM_ConfigClockSource+0x8a>
 80086ec:	e076      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 80086ee:	2b50      	cmp	r3, #80	@ 0x50
 80086f0:	d03b      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x106>
 80086f2:	d900      	bls.n	80086f6 <HAL_TIM_ConfigClockSource+0x92>
 80086f4:	e072      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 80086f6:	2b40      	cmp	r3, #64	@ 0x40
 80086f8:	d057      	beq.n	80087aa <HAL_TIM_ConfigClockSource+0x146>
 80086fa:	d900      	bls.n	80086fe <HAL_TIM_ConfigClockSource+0x9a>
 80086fc:	e06e      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 80086fe:	2b30      	cmp	r3, #48	@ 0x30
 8008700:	d063      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x166>
 8008702:	d86b      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 8008704:	2b20      	cmp	r3, #32
 8008706:	d060      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x166>
 8008708:	d868      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d05d      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x166>
 800870e:	2b10      	cmp	r3, #16
 8008710:	d05b      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x166>
 8008712:	e063      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008724:	f000 f936 	bl	8008994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2277      	movs	r2, #119	@ 0x77
 8008734:	4313      	orrs	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	609a      	str	r2, [r3, #8]
      break;
 8008740:	e052      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008752:	f000 f91f 	bl	8008994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2180      	movs	r1, #128	@ 0x80
 8008762:	01c9      	lsls	r1, r1, #7
 8008764:	430a      	orrs	r2, r1
 8008766:	609a      	str	r2, [r3, #8]
      break;
 8008768:	e03e      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008776:	001a      	movs	r2, r3
 8008778:	f000 f892 	bl	80088a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2150      	movs	r1, #80	@ 0x50
 8008782:	0018      	movs	r0, r3
 8008784:	f000 f8ec 	bl	8008960 <TIM_ITRx_SetConfig>
      break;
 8008788:	e02e      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008796:	001a      	movs	r2, r3
 8008798:	f000 f8b0 	bl	80088fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2160      	movs	r1, #96	@ 0x60
 80087a2:	0018      	movs	r0, r3
 80087a4:	f000 f8dc 	bl	8008960 <TIM_ITRx_SetConfig>
      break;
 80087a8:	e01e      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087b6:	001a      	movs	r2, r3
 80087b8:	f000 f872 	bl	80088a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2140      	movs	r1, #64	@ 0x40
 80087c2:	0018      	movs	r0, r3
 80087c4:	f000 f8cc 	bl	8008960 <TIM_ITRx_SetConfig>
      break;
 80087c8:	e00e      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	0019      	movs	r1, r3
 80087d4:	0010      	movs	r0, r2
 80087d6:	f000 f8c3 	bl	8008960 <TIM_ITRx_SetConfig>
      break;
 80087da:	e005      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80087dc:	230f      	movs	r3, #15
 80087de:	18fb      	adds	r3, r7, r3
 80087e0:	2201      	movs	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
      break;
 80087e4:	e000      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80087e6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2239      	movs	r2, #57	@ 0x39
 80087ec:	2101      	movs	r1, #1
 80087ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2238      	movs	r2, #56	@ 0x38
 80087f4:	2100      	movs	r1, #0
 80087f6:	5499      	strb	r1, [r3, r2]

  return status;
 80087f8:	230f      	movs	r3, #15
 80087fa:	18fb      	adds	r3, r7, r3
 80087fc:	781b      	ldrb	r3, [r3, #0]
}
 80087fe:	0018      	movs	r0, r3
 8008800:	46bd      	mov	sp, r7
 8008802:	b004      	add	sp, #16
 8008804:	bd80      	pop	{r7, pc}
 8008806:	46c0      	nop			@ (mov r8, r8)
 8008808:	ffff00ff 	.word	0xffff00ff

0800880c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	2380      	movs	r3, #128	@ 0x80
 8008820:	05db      	lsls	r3, r3, #23
 8008822:	429a      	cmp	r2, r3
 8008824:	d003      	beq.n	800882e <TIM_Base_SetConfig+0x22>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a1b      	ldr	r2, [pc, #108]	@ (8008898 <TIM_Base_SetConfig+0x8c>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d108      	bne.n	8008840 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2270      	movs	r2, #112	@ 0x70
 8008832:	4393      	bics	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	2380      	movs	r3, #128	@ 0x80
 8008844:	05db      	lsls	r3, r3, #23
 8008846:	429a      	cmp	r2, r3
 8008848:	d003      	beq.n	8008852 <TIM_Base_SetConfig+0x46>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a12      	ldr	r2, [pc, #72]	@ (8008898 <TIM_Base_SetConfig+0x8c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d108      	bne.n	8008864 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a11      	ldr	r2, [pc, #68]	@ (800889c <TIM_Base_SetConfig+0x90>)
 8008856:	4013      	ands	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2280      	movs	r2, #128	@ 0x80
 8008868:	4393      	bics	r3, r2
 800886a:	001a      	movs	r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689a      	ldr	r2, [r3, #8]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	615a      	str	r2, [r3, #20]
}
 8008890:	46c0      	nop			@ (mov r8, r8)
 8008892:	46bd      	mov	sp, r7
 8008894:	b004      	add	sp, #16
 8008896:	bd80      	pop	{r7, pc}
 8008898:	40010800 	.word	0x40010800
 800889c:	fffffcff 	.word	0xfffffcff

080088a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	2201      	movs	r2, #1
 80088b8:	4393      	bics	r3, r2
 80088ba:	001a      	movs	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	22f0      	movs	r2, #240	@ 0xf0
 80088ca:	4393      	bics	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	220a      	movs	r2, #10
 80088dc:	4393      	bics	r3, r2
 80088de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	46c0      	nop			@ (mov r8, r8)
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b006      	add	sp, #24
 80088fa:	bd80      	pop	{r7, pc}

080088fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	2210      	movs	r2, #16
 800890e:	4393      	bics	r3, r2
 8008910:	001a      	movs	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	4a0d      	ldr	r2, [pc, #52]	@ (800895c <TIM_TI2_ConfigInputStage+0x60>)
 8008926:	4013      	ands	r3, r2
 8008928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	031b      	lsls	r3, r3, #12
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	22a0      	movs	r2, #160	@ 0xa0
 8008938:	4393      	bics	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	621a      	str	r2, [r3, #32]
}
 8008952:	46c0      	nop			@ (mov r8, r8)
 8008954:	46bd      	mov	sp, r7
 8008956:	b006      	add	sp, #24
 8008958:	bd80      	pop	{r7, pc}
 800895a:	46c0      	nop			@ (mov r8, r8)
 800895c:	ffff0fff 	.word	0xffff0fff

08008960 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2270      	movs	r2, #112	@ 0x70
 8008974:	4393      	bics	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	2207      	movs	r2, #7
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	609a      	str	r2, [r3, #8]
}
 800898a:	46c0      	nop			@ (mov r8, r8)
 800898c:	46bd      	mov	sp, r7
 800898e:	b004      	add	sp, #16
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4a09      	ldr	r2, [pc, #36]	@ (80089d0 <TIM_ETR_SetConfig+0x3c>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	021a      	lsls	r2, r3, #8
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	609a      	str	r2, [r3, #8]
}
 80089c8:	46c0      	nop			@ (mov r8, r8)
 80089ca:	46bd      	mov	sp, r7
 80089cc:	b006      	add	sp, #24
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	ffff00ff 	.word	0xffff00ff

080089d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2238      	movs	r2, #56	@ 0x38
 80089e2:	5c9b      	ldrb	r3, [r3, r2]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e03d      	b.n	8008a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2238      	movs	r2, #56	@ 0x38
 80089f0:	2101      	movs	r1, #1
 80089f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2239      	movs	r2, #57	@ 0x39
 80089f8:	2102      	movs	r1, #2
 80089fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2270      	movs	r2, #112	@ 0x70
 8008a10:	4393      	bics	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	2380      	movs	r3, #128	@ 0x80
 8008a2c:	05db      	lsls	r3, r3, #23
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d004      	beq.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a0e      	ldr	r2, [pc, #56]	@ (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d10c      	bne.n	8008a56 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2280      	movs	r2, #128	@ 0x80
 8008a40:	4393      	bics	r3, r2
 8008a42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2239      	movs	r2, #57	@ 0x39
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2238      	movs	r2, #56	@ 0x38
 8008a62:	2100      	movs	r1, #0
 8008a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	0018      	movs	r0, r3
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b004      	add	sp, #16
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40010800 	.word	0x40010800

08008a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e044      	b.n	8008b10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d107      	bne.n	8008a9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2278      	movs	r2, #120	@ 0x78
 8008a92:	2100      	movs	r1, #0
 8008a94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f7fc fd13 	bl	80054c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2224      	movs	r2, #36	@ 0x24
 8008aa2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2101      	movs	r1, #1
 8008ab0:	438a      	bics	r2, r1
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f000 fc00 	bl	80092bc <UART_SetConfig>
 8008abc:	0003      	movs	r3, r0
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e024      	b.n	8008b10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f000 fe3d 	bl	8009750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	490d      	ldr	r1, [pc, #52]	@ (8008b18 <HAL_UART_Init+0xa4>)
 8008ae2:	400a      	ands	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	212a      	movs	r1, #42	@ 0x2a
 8008af2:	438a      	bics	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2101      	movs	r1, #1
 8008b02:	430a      	orrs	r2, r1
 8008b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f000 fed5 	bl	80098b8 <UART_CheckIdleState>
 8008b0e:	0003      	movs	r3, r0
}
 8008b10:	0018      	movs	r0, r3
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b002      	add	sp, #8
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	ffffb7ff 	.word	0xffffb7ff

08008b1c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e030      	b.n	8008b90 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2224      	movs	r2, #36	@ 0x24
 8008b32:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2101      	movs	r1, #1
 8008b40:	438a      	bics	r2, r1
 8008b42:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2200      	movs	r2, #0
 8008b52:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f7fc fcfc 	bl	800555c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2284      	movs	r2, #132	@ 0x84
 8008b68:	2100      	movs	r1, #0
 8008b6a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2280      	movs	r2, #128	@ 0x80
 8008b76:	2100      	movs	r1, #0
 8008b78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2278      	movs	r2, #120	@ 0x78
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	0018      	movs	r0, r3
 8008b92:	46bd      	mov	sp, r7
 8008b94:	b002      	add	sp, #8
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	@ 0x28
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	1dbb      	adds	r3, r7, #6
 8008ba6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d000      	beq.n	8008bb2 <HAL_UART_Transmit+0x1a>
 8008bb0:	e08c      	b.n	8008ccc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <HAL_UART_Transmit+0x28>
 8008bb8:	1dbb      	adds	r3, r7, #6
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e084      	b.n	8008cce <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	2380      	movs	r3, #128	@ 0x80
 8008bca:	015b      	lsls	r3, r3, #5
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d109      	bne.n	8008be4 <HAL_UART_Transmit+0x4c>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d105      	bne.n	8008be4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4013      	ands	r3, r2
 8008bde:	d001      	beq.n	8008be4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e074      	b.n	8008cce <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2284      	movs	r2, #132	@ 0x84
 8008be8:	2100      	movs	r1, #0
 8008bea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2221      	movs	r2, #33	@ 0x21
 8008bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bf2:	f7fc fee7 	bl	80059c4 <HAL_GetTick>
 8008bf6:	0003      	movs	r3, r0
 8008bf8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	1dba      	adds	r2, r7, #6
 8008bfe:	2150      	movs	r1, #80	@ 0x50
 8008c00:	8812      	ldrh	r2, [r2, #0]
 8008c02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	1dba      	adds	r2, r7, #6
 8008c08:	2152      	movs	r1, #82	@ 0x52
 8008c0a:	8812      	ldrh	r2, [r2, #0]
 8008c0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	2380      	movs	r3, #128	@ 0x80
 8008c14:	015b      	lsls	r3, r3, #5
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d108      	bne.n	8008c2c <HAL_UART_Transmit+0x94>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d104      	bne.n	8008c2c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	e003      	b.n	8008c34 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c34:	e02f      	b.n	8008c96 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	0013      	movs	r3, r2
 8008c40:	2200      	movs	r2, #0
 8008c42:	2180      	movs	r1, #128	@ 0x80
 8008c44:	f000 fee0 	bl	8009a08 <UART_WaitOnFlagUntilTimeout>
 8008c48:	1e03      	subs	r3, r0, #0
 8008c4a:	d004      	beq.n	8008c56 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e03b      	b.n	8008cce <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10b      	bne.n	8008c74 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	001a      	movs	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	05d2      	lsls	r2, r2, #23
 8008c68:	0dd2      	lsrs	r2, r2, #23
 8008c6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	3302      	adds	r3, #2
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	e007      	b.n	8008c84 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	3301      	adds	r3, #1
 8008c82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2252      	movs	r2, #82	@ 0x52
 8008c88:	5a9b      	ldrh	r3, [r3, r2]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b299      	uxth	r1, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2252      	movs	r2, #82	@ 0x52
 8008c94:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2252      	movs	r2, #82	@ 0x52
 8008c9a:	5a9b      	ldrh	r3, [r3, r2]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1c9      	bne.n	8008c36 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	0013      	movs	r3, r2
 8008cac:	2200      	movs	r2, #0
 8008cae:	2140      	movs	r1, #64	@ 0x40
 8008cb0:	f000 feaa 	bl	8009a08 <UART_WaitOnFlagUntilTimeout>
 8008cb4:	1e03      	subs	r3, r0, #0
 8008cb6:	d004      	beq.n	8008cc2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e005      	b.n	8008cce <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e000      	b.n	8008cce <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
  }
}
 8008cce:	0018      	movs	r0, r3
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	b008      	add	sp, #32
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cd8:	b590      	push	{r4, r7, lr}
 8008cda:	b0ab      	sub	sp, #172	@ 0xac
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	22a4      	movs	r2, #164	@ 0xa4
 8008ce8:	18b9      	adds	r1, r7, r2
 8008cea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	20a0      	movs	r0, #160	@ 0xa0
 8008cf4:	1839      	adds	r1, r7, r0
 8008cf6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	219c      	movs	r1, #156	@ 0x9c
 8008d00:	1879      	adds	r1, r7, r1
 8008d02:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d04:	0011      	movs	r1, r2
 8008d06:	18bb      	adds	r3, r7, r2
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a99      	ldr	r2, [pc, #612]	@ (8008f70 <HAL_UART_IRQHandler+0x298>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2298      	movs	r2, #152	@ 0x98
 8008d10:	18bc      	adds	r4, r7, r2
 8008d12:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008d14:	18bb      	adds	r3, r7, r2
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d114      	bne.n	8008d46 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2220      	movs	r2, #32
 8008d22:	4013      	ands	r3, r2
 8008d24:	d00f      	beq.n	8008d46 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d26:	183b      	adds	r3, r7, r0
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	d00a      	beq.n	8008d46 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d100      	bne.n	8008d3a <HAL_UART_IRQHandler+0x62>
 8008d38:	e2a0      	b.n	800927c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	0010      	movs	r0, r2
 8008d42:	4798      	blx	r3
      }
      return;
 8008d44:	e29a      	b.n	800927c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d46:	2398      	movs	r3, #152	@ 0x98
 8008d48:	18fb      	adds	r3, r7, r3
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d100      	bne.n	8008d52 <HAL_UART_IRQHandler+0x7a>
 8008d50:	e114      	b.n	8008f7c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008d52:	239c      	movs	r3, #156	@ 0x9c
 8008d54:	18fb      	adds	r3, r7, r3
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	d106      	bne.n	8008d6c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008d5e:	23a0      	movs	r3, #160	@ 0xa0
 8008d60:	18fb      	adds	r3, r7, r3
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a83      	ldr	r2, [pc, #524]	@ (8008f74 <HAL_UART_IRQHandler+0x29c>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	d100      	bne.n	8008d6c <HAL_UART_IRQHandler+0x94>
 8008d6a:	e107      	b.n	8008f7c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d6c:	23a4      	movs	r3, #164	@ 0xa4
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2201      	movs	r2, #1
 8008d74:	4013      	ands	r3, r2
 8008d76:	d012      	beq.n	8008d9e <HAL_UART_IRQHandler+0xc6>
 8008d78:	23a0      	movs	r3, #160	@ 0xa0
 8008d7a:	18fb      	adds	r3, r7, r3
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	2380      	movs	r3, #128	@ 0x80
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	4013      	ands	r3, r2
 8008d84:	d00b      	beq.n	8008d9e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2284      	movs	r2, #132	@ 0x84
 8008d92:	589b      	ldr	r3, [r3, r2]
 8008d94:	2201      	movs	r2, #1
 8008d96:	431a      	orrs	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2184      	movs	r1, #132	@ 0x84
 8008d9c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d9e:	23a4      	movs	r3, #164	@ 0xa4
 8008da0:	18fb      	adds	r3, r7, r3
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2202      	movs	r2, #2
 8008da6:	4013      	ands	r3, r2
 8008da8:	d011      	beq.n	8008dce <HAL_UART_IRQHandler+0xf6>
 8008daa:	239c      	movs	r3, #156	@ 0x9c
 8008dac:	18fb      	adds	r3, r7, r3
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2201      	movs	r2, #1
 8008db2:	4013      	ands	r3, r2
 8008db4:	d00b      	beq.n	8008dce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2284      	movs	r2, #132	@ 0x84
 8008dc2:	589b      	ldr	r3, [r3, r2]
 8008dc4:	2204      	movs	r2, #4
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2184      	movs	r1, #132	@ 0x84
 8008dcc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dce:	23a4      	movs	r3, #164	@ 0xa4
 8008dd0:	18fb      	adds	r3, r7, r3
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	d011      	beq.n	8008dfe <HAL_UART_IRQHandler+0x126>
 8008dda:	239c      	movs	r3, #156	@ 0x9c
 8008ddc:	18fb      	adds	r3, r7, r3
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2201      	movs	r2, #1
 8008de2:	4013      	ands	r3, r2
 8008de4:	d00b      	beq.n	8008dfe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2204      	movs	r2, #4
 8008dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2284      	movs	r2, #132	@ 0x84
 8008df2:	589b      	ldr	r3, [r3, r2]
 8008df4:	2202      	movs	r2, #2
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2184      	movs	r1, #132	@ 0x84
 8008dfc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dfe:	23a4      	movs	r3, #164	@ 0xa4
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2208      	movs	r2, #8
 8008e06:	4013      	ands	r3, r2
 8008e08:	d017      	beq.n	8008e3a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e0a:	23a0      	movs	r3, #160	@ 0xa0
 8008e0c:	18fb      	adds	r3, r7, r3
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2220      	movs	r2, #32
 8008e12:	4013      	ands	r3, r2
 8008e14:	d105      	bne.n	8008e22 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008e16:	239c      	movs	r3, #156	@ 0x9c
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e20:	d00b      	beq.n	8008e3a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2208      	movs	r2, #8
 8008e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2284      	movs	r2, #132	@ 0x84
 8008e2e:	589b      	ldr	r3, [r3, r2]
 8008e30:	2208      	movs	r2, #8
 8008e32:	431a      	orrs	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2184      	movs	r1, #132	@ 0x84
 8008e38:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e3a:	23a4      	movs	r3, #164	@ 0xa4
 8008e3c:	18fb      	adds	r3, r7, r3
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	2380      	movs	r3, #128	@ 0x80
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	4013      	ands	r3, r2
 8008e46:	d013      	beq.n	8008e70 <HAL_UART_IRQHandler+0x198>
 8008e48:	23a0      	movs	r3, #160	@ 0xa0
 8008e4a:	18fb      	adds	r3, r7, r3
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	2380      	movs	r3, #128	@ 0x80
 8008e50:	04db      	lsls	r3, r3, #19
 8008e52:	4013      	ands	r3, r2
 8008e54:	d00c      	beq.n	8008e70 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2280      	movs	r2, #128	@ 0x80
 8008e5c:	0112      	lsls	r2, r2, #4
 8008e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2284      	movs	r2, #132	@ 0x84
 8008e64:	589b      	ldr	r3, [r3, r2]
 8008e66:	2220      	movs	r2, #32
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2184      	movs	r1, #132	@ 0x84
 8008e6e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2284      	movs	r2, #132	@ 0x84
 8008e74:	589b      	ldr	r3, [r3, r2]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d100      	bne.n	8008e7c <HAL_UART_IRQHandler+0x1a4>
 8008e7a:	e201      	b.n	8009280 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e7c:	23a4      	movs	r3, #164	@ 0xa4
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2220      	movs	r2, #32
 8008e84:	4013      	ands	r3, r2
 8008e86:	d00e      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e88:	23a0      	movs	r3, #160	@ 0xa0
 8008e8a:	18fb      	adds	r3, r7, r3
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	4013      	ands	r3, r2
 8008e92:	d008      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	0010      	movs	r0, r2
 8008ea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2284      	movs	r2, #132	@ 0x84
 8008eaa:	589b      	ldr	r3, [r3, r2]
 8008eac:	2194      	movs	r1, #148	@ 0x94
 8008eae:	187a      	adds	r2, r7, r1
 8008eb0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2240      	movs	r2, #64	@ 0x40
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b40      	cmp	r3, #64	@ 0x40
 8008ebe:	d004      	beq.n	8008eca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ec0:	187b      	adds	r3, r7, r1
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2228      	movs	r2, #40	@ 0x28
 8008ec6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ec8:	d047      	beq.n	8008f5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f000 fecf 	bl	8009c70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	2240      	movs	r2, #64	@ 0x40
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b40      	cmp	r3, #64	@ 0x40
 8008ede:	d137      	bne.n	8008f50 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008ee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee8:	2090      	movs	r0, #144	@ 0x90
 8008eea:	183a      	adds	r2, r7, r0
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	2301      	movs	r3, #1
 8008ef0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ef4:	f383 8810 	msr	PRIMASK, r3
}
 8008ef8:	46c0      	nop			@ (mov r8, r8)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2140      	movs	r1, #64	@ 0x40
 8008f06:	438a      	bics	r2, r1
 8008f08:	609a      	str	r2, [r3, #8]
 8008f0a:	183b      	adds	r3, r7, r0
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f12:	f383 8810 	msr	PRIMASK, r3
}
 8008f16:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d012      	beq.n	8008f46 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f24:	4a14      	ldr	r2, [pc, #80]	@ (8008f78 <HAL_UART_IRQHandler+0x2a0>)
 8008f26:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f7fd f87f 	bl	8006030 <HAL_DMA_Abort_IT>
 8008f32:	1e03      	subs	r3, r0, #0
 8008f34:	d01a      	beq.n	8008f6c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f40:	0018      	movs	r0, r3
 8008f42:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f44:	e012      	b.n	8008f6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7fc f979 	bl	8005240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4e:	e00d      	b.n	8008f6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	0018      	movs	r0, r3
 8008f54:	f7fc f974 	bl	8005240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	e008      	b.n	8008f6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f7fc f96f 	bl	8005240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2284      	movs	r2, #132	@ 0x84
 8008f66:	2100      	movs	r1, #0
 8008f68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008f6a:	e189      	b.n	8009280 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6c:	46c0      	nop			@ (mov r8, r8)
    return;
 8008f6e:	e187      	b.n	8009280 <HAL_UART_IRQHandler+0x5a8>
 8008f70:	0000080f 	.word	0x0000080f
 8008f74:	04000120 	.word	0x04000120
 8008f78:	08009d39 	.word	0x08009d39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d000      	beq.n	8008f86 <HAL_UART_IRQHandler+0x2ae>
 8008f84:	e13b      	b.n	80091fe <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f86:	23a4      	movs	r3, #164	@ 0xa4
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2210      	movs	r2, #16
 8008f8e:	4013      	ands	r3, r2
 8008f90:	d100      	bne.n	8008f94 <HAL_UART_IRQHandler+0x2bc>
 8008f92:	e134      	b.n	80091fe <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f94:	23a0      	movs	r3, #160	@ 0xa0
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	d100      	bne.n	8008fa2 <HAL_UART_IRQHandler+0x2ca>
 8008fa0:	e12d      	b.n	80091fe <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2210      	movs	r2, #16
 8008fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	2240      	movs	r2, #64	@ 0x40
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	2b40      	cmp	r3, #64	@ 0x40
 8008fb6:	d000      	beq.n	8008fba <HAL_UART_IRQHandler+0x2e2>
 8008fb8:	e0a1      	b.n	80090fe <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	217e      	movs	r1, #126	@ 0x7e
 8008fc4:	187b      	adds	r3, r7, r1
 8008fc6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008fc8:	187b      	adds	r3, r7, r1
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d100      	bne.n	8008fd2 <HAL_UART_IRQHandler+0x2fa>
 8008fd0:	e158      	b.n	8009284 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2258      	movs	r2, #88	@ 0x58
 8008fd6:	5a9b      	ldrh	r3, [r3, r2]
 8008fd8:	187a      	adds	r2, r7, r1
 8008fda:	8812      	ldrh	r2, [r2, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d300      	bcc.n	8008fe2 <HAL_UART_IRQHandler+0x30a>
 8008fe0:	e150      	b.n	8009284 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	187a      	adds	r2, r7, r1
 8008fe6:	215a      	movs	r1, #90	@ 0x5a
 8008fe8:	8812      	ldrh	r2, [r2, #0]
 8008fea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	d16f      	bne.n	80090da <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8008ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009002:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009004:	2301      	movs	r3, #1
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900a:	f383 8810 	msr	PRIMASK, r3
}
 800900e:	46c0      	nop			@ (mov r8, r8)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	499e      	ldr	r1, [pc, #632]	@ (8009294 <HAL_UART_IRQHandler+0x5bc>)
 800901c:	400a      	ands	r2, r1
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009022:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009026:	f383 8810 	msr	PRIMASK, r3
}
 800902a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902c:	f3ef 8310 	mrs	r3, PRIMASK
 8009030:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009034:	677b      	str	r3, [r7, #116]	@ 0x74
 8009036:	2301      	movs	r3, #1
 8009038:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800903c:	f383 8810 	msr	PRIMASK, r3
}
 8009040:	46c0      	nop			@ (mov r8, r8)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2101      	movs	r1, #1
 800904e:	438a      	bics	r2, r1
 8009050:	609a      	str	r2, [r3, #8]
 8009052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009054:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009058:	f383 8810 	msr	PRIMASK, r3
}
 800905c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800905e:	f3ef 8310 	mrs	r3, PRIMASK
 8009062:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	673b      	str	r3, [r7, #112]	@ 0x70
 8009068:	2301      	movs	r3, #1
 800906a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800906c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800906e:	f383 8810 	msr	PRIMASK, r3
}
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2140      	movs	r1, #64	@ 0x40
 8009080:	438a      	bics	r2, r1
 8009082:	609a      	str	r2, [r3, #8]
 8009084:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009086:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800908a:	f383 8810 	msr	PRIMASK, r3
}
 800908e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2280      	movs	r2, #128	@ 0x80
 8009094:	2120      	movs	r1, #32
 8009096:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800909e:	f3ef 8310 	mrs	r3, PRIMASK
 80090a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80090a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090a8:	2301      	movs	r3, #1
 80090aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090ae:	f383 8810 	msr	PRIMASK, r3
}
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2110      	movs	r1, #16
 80090c0:	438a      	bics	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090ca:	f383 8810 	msr	PRIMASK, r3
}
 80090ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7fc ff6b 	bl	8005fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2258      	movs	r2, #88	@ 0x58
 80090e4:	5a9a      	ldrh	r2, [r3, r2]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	215a      	movs	r1, #90	@ 0x5a
 80090ea:	5a5b      	ldrh	r3, [r3, r1]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0011      	movs	r1, r2
 80090f6:	0018      	movs	r0, r3
 80090f8:	f7fc f870 	bl	80051dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090fc:	e0c2      	b.n	8009284 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2258      	movs	r2, #88	@ 0x58
 8009102:	5a99      	ldrh	r1, [r3, r2]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	225a      	movs	r2, #90	@ 0x5a
 8009108:	5a9b      	ldrh	r3, [r3, r2]
 800910a:	b29a      	uxth	r2, r3
 800910c:	208e      	movs	r0, #142	@ 0x8e
 800910e:	183b      	adds	r3, r7, r0
 8009110:	1a8a      	subs	r2, r1, r2
 8009112:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	225a      	movs	r2, #90	@ 0x5a
 8009118:	5a9b      	ldrh	r3, [r3, r2]
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d100      	bne.n	8009122 <HAL_UART_IRQHandler+0x44a>
 8009120:	e0b2      	b.n	8009288 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009122:	183b      	adds	r3, r7, r0
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d100      	bne.n	800912c <HAL_UART_IRQHandler+0x454>
 800912a:	e0ad      	b.n	8009288 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800912c:	f3ef 8310 	mrs	r3, PRIMASK
 8009130:	60fb      	str	r3, [r7, #12]
  return(result);
 8009132:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009134:	2488      	movs	r4, #136	@ 0x88
 8009136:	193a      	adds	r2, r7, r4
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	2301      	movs	r3, #1
 800913c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f383 8810 	msr	PRIMASK, r3
}
 8009144:	46c0      	nop			@ (mov r8, r8)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4951      	ldr	r1, [pc, #324]	@ (8009298 <HAL_UART_IRQHandler+0x5c0>)
 8009152:	400a      	ands	r2, r1
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	193b      	adds	r3, r7, r4
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f383 8810 	msr	PRIMASK, r3
}
 8009162:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009164:	f3ef 8310 	mrs	r3, PRIMASK
 8009168:	61bb      	str	r3, [r7, #24]
  return(result);
 800916a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800916c:	2484      	movs	r4, #132	@ 0x84
 800916e:	193a      	adds	r2, r7, r4
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	2301      	movs	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f383 8810 	msr	PRIMASK, r3
}
 800917c:	46c0      	nop			@ (mov r8, r8)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2101      	movs	r1, #1
 800918a:	438a      	bics	r2, r1
 800918c:	609a      	str	r2, [r3, #8]
 800918e:	193b      	adds	r3, r7, r4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	f383 8810 	msr	PRIMASK, r3
}
 800919a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2280      	movs	r2, #128	@ 0x80
 80091a0:	2120      	movs	r1, #32
 80091a2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b0:	f3ef 8310 	mrs	r3, PRIMASK
 80091b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b8:	2480      	movs	r4, #128	@ 0x80
 80091ba:	193a      	adds	r2, r7, r4
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	2301      	movs	r3, #1
 80091c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c4:	f383 8810 	msr	PRIMASK, r3
}
 80091c8:	46c0      	nop			@ (mov r8, r8)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2110      	movs	r1, #16
 80091d6:	438a      	bics	r2, r1
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	193b      	adds	r3, r7, r4
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e2:	f383 8810 	msr	PRIMASK, r3
}
 80091e6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091ee:	183b      	adds	r3, r7, r0
 80091f0:	881a      	ldrh	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	0011      	movs	r1, r2
 80091f6:	0018      	movs	r0, r3
 80091f8:	f7fb fff0 	bl	80051dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091fc:	e044      	b.n	8009288 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091fe:	23a4      	movs	r3, #164	@ 0xa4
 8009200:	18fb      	adds	r3, r7, r3
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	2380      	movs	r3, #128	@ 0x80
 8009206:	035b      	lsls	r3, r3, #13
 8009208:	4013      	ands	r3, r2
 800920a:	d010      	beq.n	800922e <HAL_UART_IRQHandler+0x556>
 800920c:	239c      	movs	r3, #156	@ 0x9c
 800920e:	18fb      	adds	r3, r7, r3
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	2380      	movs	r3, #128	@ 0x80
 8009214:	03db      	lsls	r3, r3, #15
 8009216:	4013      	ands	r3, r2
 8009218:	d009      	beq.n	800922e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2280      	movs	r2, #128	@ 0x80
 8009220:	0352      	lsls	r2, r2, #13
 8009222:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	0018      	movs	r0, r3
 8009228:	f000 ff8c 	bl	800a144 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800922c:	e02f      	b.n	800928e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800922e:	23a4      	movs	r3, #164	@ 0xa4
 8009230:	18fb      	adds	r3, r7, r3
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2280      	movs	r2, #128	@ 0x80
 8009236:	4013      	ands	r3, r2
 8009238:	d00f      	beq.n	800925a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800923a:	23a0      	movs	r3, #160	@ 0xa0
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2280      	movs	r2, #128	@ 0x80
 8009242:	4013      	ands	r3, r2
 8009244:	d009      	beq.n	800925a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d01e      	beq.n	800928c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	0010      	movs	r0, r2
 8009256:	4798      	blx	r3
    }
    return;
 8009258:	e018      	b.n	800928c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800925a:	23a4      	movs	r3, #164	@ 0xa4
 800925c:	18fb      	adds	r3, r7, r3
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2240      	movs	r2, #64	@ 0x40
 8009262:	4013      	ands	r3, r2
 8009264:	d013      	beq.n	800928e <HAL_UART_IRQHandler+0x5b6>
 8009266:	23a0      	movs	r3, #160	@ 0xa0
 8009268:	18fb      	adds	r3, r7, r3
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2240      	movs	r2, #64	@ 0x40
 800926e:	4013      	ands	r3, r2
 8009270:	d00d      	beq.n	800928e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	0018      	movs	r0, r3
 8009276:	f000 fd76 	bl	8009d66 <UART_EndTransmit_IT>
    return;
 800927a:	e008      	b.n	800928e <HAL_UART_IRQHandler+0x5b6>
      return;
 800927c:	46c0      	nop			@ (mov r8, r8)
 800927e:	e006      	b.n	800928e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009280:	46c0      	nop			@ (mov r8, r8)
 8009282:	e004      	b.n	800928e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009284:	46c0      	nop			@ (mov r8, r8)
 8009286:	e002      	b.n	800928e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009288:	46c0      	nop			@ (mov r8, r8)
 800928a:	e000      	b.n	800928e <HAL_UART_IRQHandler+0x5b6>
    return;
 800928c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800928e:	46bd      	mov	sp, r7
 8009290:	b02b      	add	sp, #172	@ 0xac
 8009292:	bd90      	pop	{r4, r7, pc}
 8009294:	fffffeff 	.word	0xfffffeff
 8009298:	fffffedf 	.word	0xfffffedf

0800929c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092a4:	46c0      	nop			@ (mov r8, r8)
 80092a6:	46bd      	mov	sp, r7
 80092a8:	b002      	add	sp, #8
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80092b4:	46c0      	nop			@ (mov r8, r8)
 80092b6:	46bd      	mov	sp, r7
 80092b8:	b002      	add	sp, #8
 80092ba:	bd80      	pop	{r7, pc}

080092bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092bc:	b5b0      	push	{r4, r5, r7, lr}
 80092be:	b08e      	sub	sp, #56	@ 0x38
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092c4:	231a      	movs	r3, #26
 80092c6:	2218      	movs	r2, #24
 80092c8:	189b      	adds	r3, r3, r2
 80092ca:	19db      	adds	r3, r3, r7
 80092cc:	2200      	movs	r2, #0
 80092ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	431a      	orrs	r2, r3
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	431a      	orrs	r2, r3
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4ab4      	ldr	r2, [pc, #720]	@ (80095c0 <UART_SetConfig+0x304>)
 80092f0:	4013      	ands	r3, r2
 80092f2:	0019      	movs	r1, r3
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092fa:	430a      	orrs	r2, r1
 80092fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	4aaf      	ldr	r2, [pc, #700]	@ (80095c4 <UART_SetConfig+0x308>)
 8009306:	4013      	ands	r3, r2
 8009308:	0019      	movs	r1, r3
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4aa9      	ldr	r2, [pc, #676]	@ (80095c8 <UART_SetConfig+0x30c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d004      	beq.n	8009330 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800932c:	4313      	orrs	r3, r2
 800932e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	4aa5      	ldr	r2, [pc, #660]	@ (80095cc <UART_SetConfig+0x310>)
 8009338:	4013      	ands	r3, r2
 800933a:	0019      	movs	r1, r3
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009342:	430a      	orrs	r2, r1
 8009344:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4aa1      	ldr	r2, [pc, #644]	@ (80095d0 <UART_SetConfig+0x314>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d131      	bne.n	80093b4 <UART_SetConfig+0xf8>
 8009350:	4ba0      	ldr	r3, [pc, #640]	@ (80095d4 <UART_SetConfig+0x318>)
 8009352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009354:	220c      	movs	r2, #12
 8009356:	4013      	ands	r3, r2
 8009358:	2b0c      	cmp	r3, #12
 800935a:	d01d      	beq.n	8009398 <UART_SetConfig+0xdc>
 800935c:	d823      	bhi.n	80093a6 <UART_SetConfig+0xea>
 800935e:	2b08      	cmp	r3, #8
 8009360:	d00c      	beq.n	800937c <UART_SetConfig+0xc0>
 8009362:	d820      	bhi.n	80093a6 <UART_SetConfig+0xea>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <UART_SetConfig+0xb2>
 8009368:	2b04      	cmp	r3, #4
 800936a:	d00e      	beq.n	800938a <UART_SetConfig+0xce>
 800936c:	e01b      	b.n	80093a6 <UART_SetConfig+0xea>
 800936e:	231b      	movs	r3, #27
 8009370:	2218      	movs	r2, #24
 8009372:	189b      	adds	r3, r3, r2
 8009374:	19db      	adds	r3, r3, r7
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	e065      	b.n	8009448 <UART_SetConfig+0x18c>
 800937c:	231b      	movs	r3, #27
 800937e:	2218      	movs	r2, #24
 8009380:	189b      	adds	r3, r3, r2
 8009382:	19db      	adds	r3, r3, r7
 8009384:	2202      	movs	r2, #2
 8009386:	701a      	strb	r2, [r3, #0]
 8009388:	e05e      	b.n	8009448 <UART_SetConfig+0x18c>
 800938a:	231b      	movs	r3, #27
 800938c:	2218      	movs	r2, #24
 800938e:	189b      	adds	r3, r3, r2
 8009390:	19db      	adds	r3, r3, r7
 8009392:	2204      	movs	r2, #4
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	e057      	b.n	8009448 <UART_SetConfig+0x18c>
 8009398:	231b      	movs	r3, #27
 800939a:	2218      	movs	r2, #24
 800939c:	189b      	adds	r3, r3, r2
 800939e:	19db      	adds	r3, r3, r7
 80093a0:	2208      	movs	r2, #8
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	e050      	b.n	8009448 <UART_SetConfig+0x18c>
 80093a6:	231b      	movs	r3, #27
 80093a8:	2218      	movs	r2, #24
 80093aa:	189b      	adds	r3, r3, r2
 80093ac:	19db      	adds	r3, r3, r7
 80093ae:	2210      	movs	r2, #16
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	e049      	b.n	8009448 <UART_SetConfig+0x18c>
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a83      	ldr	r2, [pc, #524]	@ (80095c8 <UART_SetConfig+0x30c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d13e      	bne.n	800943c <UART_SetConfig+0x180>
 80093be:	4b85      	ldr	r3, [pc, #532]	@ (80095d4 <UART_SetConfig+0x318>)
 80093c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093c2:	23c0      	movs	r3, #192	@ 0xc0
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	4013      	ands	r3, r2
 80093c8:	22c0      	movs	r2, #192	@ 0xc0
 80093ca:	0112      	lsls	r2, r2, #4
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d027      	beq.n	8009420 <UART_SetConfig+0x164>
 80093d0:	22c0      	movs	r2, #192	@ 0xc0
 80093d2:	0112      	lsls	r2, r2, #4
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d82a      	bhi.n	800942e <UART_SetConfig+0x172>
 80093d8:	2280      	movs	r2, #128	@ 0x80
 80093da:	0112      	lsls	r2, r2, #4
 80093dc:	4293      	cmp	r3, r2
 80093de:	d011      	beq.n	8009404 <UART_SetConfig+0x148>
 80093e0:	2280      	movs	r2, #128	@ 0x80
 80093e2:	0112      	lsls	r2, r2, #4
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d822      	bhi.n	800942e <UART_SetConfig+0x172>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <UART_SetConfig+0x13a>
 80093ec:	2280      	movs	r2, #128	@ 0x80
 80093ee:	00d2      	lsls	r2, r2, #3
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00e      	beq.n	8009412 <UART_SetConfig+0x156>
 80093f4:	e01b      	b.n	800942e <UART_SetConfig+0x172>
 80093f6:	231b      	movs	r3, #27
 80093f8:	2218      	movs	r2, #24
 80093fa:	189b      	adds	r3, r3, r2
 80093fc:	19db      	adds	r3, r3, r7
 80093fe:	2200      	movs	r2, #0
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e021      	b.n	8009448 <UART_SetConfig+0x18c>
 8009404:	231b      	movs	r3, #27
 8009406:	2218      	movs	r2, #24
 8009408:	189b      	adds	r3, r3, r2
 800940a:	19db      	adds	r3, r3, r7
 800940c:	2202      	movs	r2, #2
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	e01a      	b.n	8009448 <UART_SetConfig+0x18c>
 8009412:	231b      	movs	r3, #27
 8009414:	2218      	movs	r2, #24
 8009416:	189b      	adds	r3, r3, r2
 8009418:	19db      	adds	r3, r3, r7
 800941a:	2204      	movs	r2, #4
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	e013      	b.n	8009448 <UART_SetConfig+0x18c>
 8009420:	231b      	movs	r3, #27
 8009422:	2218      	movs	r2, #24
 8009424:	189b      	adds	r3, r3, r2
 8009426:	19db      	adds	r3, r3, r7
 8009428:	2208      	movs	r2, #8
 800942a:	701a      	strb	r2, [r3, #0]
 800942c:	e00c      	b.n	8009448 <UART_SetConfig+0x18c>
 800942e:	231b      	movs	r3, #27
 8009430:	2218      	movs	r2, #24
 8009432:	189b      	adds	r3, r3, r2
 8009434:	19db      	adds	r3, r3, r7
 8009436:	2210      	movs	r2, #16
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	e005      	b.n	8009448 <UART_SetConfig+0x18c>
 800943c:	231b      	movs	r3, #27
 800943e:	2218      	movs	r2, #24
 8009440:	189b      	adds	r3, r3, r2
 8009442:	19db      	adds	r3, r3, r7
 8009444:	2210      	movs	r2, #16
 8009446:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a5e      	ldr	r2, [pc, #376]	@ (80095c8 <UART_SetConfig+0x30c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d000      	beq.n	8009454 <UART_SetConfig+0x198>
 8009452:	e084      	b.n	800955e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009454:	231b      	movs	r3, #27
 8009456:	2218      	movs	r2, #24
 8009458:	189b      	adds	r3, r3, r2
 800945a:	19db      	adds	r3, r3, r7
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b08      	cmp	r3, #8
 8009460:	d01d      	beq.n	800949e <UART_SetConfig+0x1e2>
 8009462:	dc20      	bgt.n	80094a6 <UART_SetConfig+0x1ea>
 8009464:	2b04      	cmp	r3, #4
 8009466:	d015      	beq.n	8009494 <UART_SetConfig+0x1d8>
 8009468:	dc1d      	bgt.n	80094a6 <UART_SetConfig+0x1ea>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <UART_SetConfig+0x1b8>
 800946e:	2b02      	cmp	r3, #2
 8009470:	d005      	beq.n	800947e <UART_SetConfig+0x1c2>
 8009472:	e018      	b.n	80094a6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009474:	f7fe fdc2 	bl	8007ffc <HAL_RCC_GetPCLK1Freq>
 8009478:	0003      	movs	r3, r0
 800947a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800947c:	e01c      	b.n	80094b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800947e:	4b55      	ldr	r3, [pc, #340]	@ (80095d4 <UART_SetConfig+0x318>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2210      	movs	r2, #16
 8009484:	4013      	ands	r3, r2
 8009486:	d002      	beq.n	800948e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009488:	4b53      	ldr	r3, [pc, #332]	@ (80095d8 <UART_SetConfig+0x31c>)
 800948a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800948c:	e014      	b.n	80094b8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800948e:	4b53      	ldr	r3, [pc, #332]	@ (80095dc <UART_SetConfig+0x320>)
 8009490:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009492:	e011      	b.n	80094b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009494:	f7fe fd02 	bl	8007e9c <HAL_RCC_GetSysClockFreq>
 8009498:	0003      	movs	r3, r0
 800949a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800949c:	e00c      	b.n	80094b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800949e:	2380      	movs	r3, #128	@ 0x80
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80094a4:	e008      	b.n	80094b8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80094aa:	231a      	movs	r3, #26
 80094ac:	2218      	movs	r2, #24
 80094ae:	189b      	adds	r3, r3, r2
 80094b0:	19db      	adds	r3, r3, r7
 80094b2:	2201      	movs	r2, #1
 80094b4:	701a      	strb	r2, [r3, #0]
        break;
 80094b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d100      	bne.n	80094c0 <UART_SetConfig+0x204>
 80094be:	e12f      	b.n	8009720 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	0013      	movs	r3, r2
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	189b      	adds	r3, r3, r2
 80094ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d305      	bcc.n	80094dc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80094d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094d8:	429a      	cmp	r2, r3
 80094da:	d906      	bls.n	80094ea <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80094dc:	231a      	movs	r3, #26
 80094de:	2218      	movs	r2, #24
 80094e0:	189b      	adds	r3, r3, r2
 80094e2:	19db      	adds	r3, r3, r7
 80094e4:	2201      	movs	r2, #1
 80094e6:	701a      	strb	r2, [r3, #0]
 80094e8:	e11a      	b.n	8009720 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80094ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	6939      	ldr	r1, [r7, #16]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	000b      	movs	r3, r1
 80094f8:	0e1b      	lsrs	r3, r3, #24
 80094fa:	0010      	movs	r0, r2
 80094fc:	0205      	lsls	r5, r0, #8
 80094fe:	431d      	orrs	r5, r3
 8009500:	000b      	movs	r3, r1
 8009502:	021c      	lsls	r4, r3, #8
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	085b      	lsrs	r3, r3, #1
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68b8      	ldr	r0, [r7, #8]
 8009512:	68f9      	ldr	r1, [r7, #12]
 8009514:	1900      	adds	r0, r0, r4
 8009516:	4169      	adcs	r1, r5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	2300      	movs	r3, #0
 8009520:	607b      	str	r3, [r7, #4]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f7f6 fff9 	bl	800051c <__aeabi_uldivmod>
 800952a:	0002      	movs	r2, r0
 800952c:	000b      	movs	r3, r1
 800952e:	0013      	movs	r3, r2
 8009530:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009534:	23c0      	movs	r3, #192	@ 0xc0
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	429a      	cmp	r2, r3
 800953a:	d309      	bcc.n	8009550 <UART_SetConfig+0x294>
 800953c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800953e:	2380      	movs	r3, #128	@ 0x80
 8009540:	035b      	lsls	r3, r3, #13
 8009542:	429a      	cmp	r2, r3
 8009544:	d204      	bcs.n	8009550 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800954c:	60da      	str	r2, [r3, #12]
 800954e:	e0e7      	b.n	8009720 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8009550:	231a      	movs	r3, #26
 8009552:	2218      	movs	r2, #24
 8009554:	189b      	adds	r3, r3, r2
 8009556:	19db      	adds	r3, r3, r7
 8009558:	2201      	movs	r2, #1
 800955a:	701a      	strb	r2, [r3, #0]
 800955c:	e0e0      	b.n	8009720 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	69da      	ldr	r2, [r3, #28]
 8009562:	2380      	movs	r3, #128	@ 0x80
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	429a      	cmp	r2, r3
 8009568:	d000      	beq.n	800956c <UART_SetConfig+0x2b0>
 800956a:	e082      	b.n	8009672 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800956c:	231b      	movs	r3, #27
 800956e:	2218      	movs	r2, #24
 8009570:	189b      	adds	r3, r3, r2
 8009572:	19db      	adds	r3, r3, r7
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b08      	cmp	r3, #8
 8009578:	d834      	bhi.n	80095e4 <UART_SetConfig+0x328>
 800957a:	009a      	lsls	r2, r3, #2
 800957c:	4b18      	ldr	r3, [pc, #96]	@ (80095e0 <UART_SetConfig+0x324>)
 800957e:	18d3      	adds	r3, r2, r3
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009584:	f7fe fd3a 	bl	8007ffc <HAL_RCC_GetPCLK1Freq>
 8009588:	0003      	movs	r3, r0
 800958a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800958c:	e033      	b.n	80095f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800958e:	f7fe fd4b 	bl	8008028 <HAL_RCC_GetPCLK2Freq>
 8009592:	0003      	movs	r3, r0
 8009594:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009596:	e02e      	b.n	80095f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009598:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <UART_SetConfig+0x318>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2210      	movs	r2, #16
 800959e:	4013      	ands	r3, r2
 80095a0:	d002      	beq.n	80095a8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80095a2:	4b0d      	ldr	r3, [pc, #52]	@ (80095d8 <UART_SetConfig+0x31c>)
 80095a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095a6:	e026      	b.n	80095f6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80095a8:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <UART_SetConfig+0x320>)
 80095aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80095ac:	e023      	b.n	80095f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095ae:	f7fe fc75 	bl	8007e9c <HAL_RCC_GetSysClockFreq>
 80095b2:	0003      	movs	r3, r0
 80095b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80095b6:	e01e      	b.n	80095f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095b8:	2380      	movs	r3, #128	@ 0x80
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80095be:	e01a      	b.n	80095f6 <UART_SetConfig+0x33a>
 80095c0:	efff69f3 	.word	0xefff69f3
 80095c4:	ffffcfff 	.word	0xffffcfff
 80095c8:	40004800 	.word	0x40004800
 80095cc:	fffff4ff 	.word	0xfffff4ff
 80095d0:	40004400 	.word	0x40004400
 80095d4:	40021000 	.word	0x40021000
 80095d8:	003d0900 	.word	0x003d0900
 80095dc:	00f42400 	.word	0x00f42400
 80095e0:	0800cd64 	.word	0x0800cd64
      default:
        pclk = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80095e8:	231a      	movs	r3, #26
 80095ea:	2218      	movs	r2, #24
 80095ec:	189b      	adds	r3, r3, r2
 80095ee:	19db      	adds	r3, r3, r7
 80095f0:	2201      	movs	r2, #1
 80095f2:	701a      	strb	r2, [r3, #0]
        break;
 80095f4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d100      	bne.n	80095fe <UART_SetConfig+0x342>
 80095fc:	e090      	b.n	8009720 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80095fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009600:	005a      	lsls	r2, r3, #1
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	085b      	lsrs	r3, r3, #1
 8009608:	18d2      	adds	r2, r2, r3
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	0019      	movs	r1, r3
 8009610:	0010      	movs	r0, r2
 8009612:	f7f6 fd95 	bl	8000140 <__udivsi3>
 8009616:	0003      	movs	r3, r0
 8009618:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	2b0f      	cmp	r3, #15
 800961e:	d921      	bls.n	8009664 <UART_SetConfig+0x3a8>
 8009620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009622:	2380      	movs	r3, #128	@ 0x80
 8009624:	025b      	lsls	r3, r3, #9
 8009626:	429a      	cmp	r2, r3
 8009628:	d21c      	bcs.n	8009664 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	b29a      	uxth	r2, r3
 800962e:	200e      	movs	r0, #14
 8009630:	2418      	movs	r4, #24
 8009632:	1903      	adds	r3, r0, r4
 8009634:	19db      	adds	r3, r3, r7
 8009636:	210f      	movs	r1, #15
 8009638:	438a      	bics	r2, r1
 800963a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800963c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963e:	085b      	lsrs	r3, r3, #1
 8009640:	b29b      	uxth	r3, r3
 8009642:	2207      	movs	r2, #7
 8009644:	4013      	ands	r3, r2
 8009646:	b299      	uxth	r1, r3
 8009648:	1903      	adds	r3, r0, r4
 800964a:	19db      	adds	r3, r3, r7
 800964c:	1902      	adds	r2, r0, r4
 800964e:	19d2      	adds	r2, r2, r7
 8009650:	8812      	ldrh	r2, [r2, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	1902      	adds	r2, r0, r4
 800965c:	19d2      	adds	r2, r2, r7
 800965e:	8812      	ldrh	r2, [r2, #0]
 8009660:	60da      	str	r2, [r3, #12]
 8009662:	e05d      	b.n	8009720 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8009664:	231a      	movs	r3, #26
 8009666:	2218      	movs	r2, #24
 8009668:	189b      	adds	r3, r3, r2
 800966a:	19db      	adds	r3, r3, r7
 800966c:	2201      	movs	r2, #1
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	e056      	b.n	8009720 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009672:	231b      	movs	r3, #27
 8009674:	2218      	movs	r2, #24
 8009676:	189b      	adds	r3, r3, r2
 8009678:	19db      	adds	r3, r3, r7
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2b08      	cmp	r3, #8
 800967e:	d822      	bhi.n	80096c6 <UART_SetConfig+0x40a>
 8009680:	009a      	lsls	r2, r3, #2
 8009682:	4b2f      	ldr	r3, [pc, #188]	@ (8009740 <UART_SetConfig+0x484>)
 8009684:	18d3      	adds	r3, r2, r3
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800968a:	f7fe fcb7 	bl	8007ffc <HAL_RCC_GetPCLK1Freq>
 800968e:	0003      	movs	r3, r0
 8009690:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009692:	e021      	b.n	80096d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009694:	f7fe fcc8 	bl	8008028 <HAL_RCC_GetPCLK2Freq>
 8009698:	0003      	movs	r3, r0
 800969a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800969c:	e01c      	b.n	80096d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800969e:	4b29      	ldr	r3, [pc, #164]	@ (8009744 <UART_SetConfig+0x488>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2210      	movs	r2, #16
 80096a4:	4013      	ands	r3, r2
 80096a6:	d002      	beq.n	80096ae <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80096a8:	4b27      	ldr	r3, [pc, #156]	@ (8009748 <UART_SetConfig+0x48c>)
 80096aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096ac:	e014      	b.n	80096d8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80096ae:	4b27      	ldr	r3, [pc, #156]	@ (800974c <UART_SetConfig+0x490>)
 80096b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80096b2:	e011      	b.n	80096d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096b4:	f7fe fbf2 	bl	8007e9c <HAL_RCC_GetSysClockFreq>
 80096b8:	0003      	movs	r3, r0
 80096ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80096bc:	e00c      	b.n	80096d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096be:	2380      	movs	r3, #128	@ 0x80
 80096c0:	021b      	lsls	r3, r3, #8
 80096c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80096c4:	e008      	b.n	80096d8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80096ca:	231a      	movs	r3, #26
 80096cc:	2218      	movs	r2, #24
 80096ce:	189b      	adds	r3, r3, r2
 80096d0:	19db      	adds	r3, r3, r7
 80096d2:	2201      	movs	r2, #1
 80096d4:	701a      	strb	r2, [r3, #0]
        break;
 80096d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80096d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d020      	beq.n	8009720 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	085a      	lsrs	r2, r3, #1
 80096e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e6:	18d2      	adds	r2, r2, r3
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	0019      	movs	r1, r3
 80096ee:	0010      	movs	r0, r2
 80096f0:	f7f6 fd26 	bl	8000140 <__udivsi3>
 80096f4:	0003      	movs	r3, r0
 80096f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fa:	2b0f      	cmp	r3, #15
 80096fc:	d90a      	bls.n	8009714 <UART_SetConfig+0x458>
 80096fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009700:	2380      	movs	r3, #128	@ 0x80
 8009702:	025b      	lsls	r3, r3, #9
 8009704:	429a      	cmp	r2, r3
 8009706:	d205      	bcs.n	8009714 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	b29a      	uxth	r2, r3
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	e005      	b.n	8009720 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8009714:	231a      	movs	r3, #26
 8009716:	2218      	movs	r2, #24
 8009718:	189b      	adds	r3, r3, r2
 800971a:	19db      	adds	r3, r3, r7
 800971c:	2201      	movs	r2, #1
 800971e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	2200      	movs	r2, #0
 8009724:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	2200      	movs	r2, #0
 800972a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800972c:	231a      	movs	r3, #26
 800972e:	2218      	movs	r2, #24
 8009730:	189b      	adds	r3, r3, r2
 8009732:	19db      	adds	r3, r3, r7
 8009734:	781b      	ldrb	r3, [r3, #0]
}
 8009736:	0018      	movs	r0, r3
 8009738:	46bd      	mov	sp, r7
 800973a:	b00e      	add	sp, #56	@ 0x38
 800973c:	bdb0      	pop	{r4, r5, r7, pc}
 800973e:	46c0      	nop			@ (mov r8, r8)
 8009740:	0800cd88 	.word	0x0800cd88
 8009744:	40021000 	.word	0x40021000
 8009748:	003d0900 	.word	0x003d0900
 800974c:	00f42400 	.word	0x00f42400

08009750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800975c:	2201      	movs	r2, #1
 800975e:	4013      	ands	r3, r2
 8009760:	d00b      	beq.n	800977a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4a4a      	ldr	r2, [pc, #296]	@ (8009894 <UART_AdvFeatureConfig+0x144>)
 800976a:	4013      	ands	r3, r2
 800976c:	0019      	movs	r1, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977e:	2202      	movs	r2, #2
 8009780:	4013      	ands	r3, r2
 8009782:	d00b      	beq.n	800979c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	4a43      	ldr	r2, [pc, #268]	@ (8009898 <UART_AdvFeatureConfig+0x148>)
 800978c:	4013      	ands	r3, r2
 800978e:	0019      	movs	r1, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	2204      	movs	r2, #4
 80097a2:	4013      	ands	r3, r2
 80097a4:	d00b      	beq.n	80097be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	4a3b      	ldr	r2, [pc, #236]	@ (800989c <UART_AdvFeatureConfig+0x14c>)
 80097ae:	4013      	ands	r3, r2
 80097b0:	0019      	movs	r1, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c2:	2208      	movs	r2, #8
 80097c4:	4013      	ands	r3, r2
 80097c6:	d00b      	beq.n	80097e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	4a34      	ldr	r2, [pc, #208]	@ (80098a0 <UART_AdvFeatureConfig+0x150>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	0019      	movs	r1, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e4:	2210      	movs	r2, #16
 80097e6:	4013      	ands	r3, r2
 80097e8:	d00b      	beq.n	8009802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	4a2c      	ldr	r2, [pc, #176]	@ (80098a4 <UART_AdvFeatureConfig+0x154>)
 80097f2:	4013      	ands	r3, r2
 80097f4:	0019      	movs	r1, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009806:	2220      	movs	r2, #32
 8009808:	4013      	ands	r3, r2
 800980a:	d00b      	beq.n	8009824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	4a25      	ldr	r2, [pc, #148]	@ (80098a8 <UART_AdvFeatureConfig+0x158>)
 8009814:	4013      	ands	r3, r2
 8009816:	0019      	movs	r1, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009828:	2240      	movs	r2, #64	@ 0x40
 800982a:	4013      	ands	r3, r2
 800982c:	d01d      	beq.n	800986a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	4a1d      	ldr	r2, [pc, #116]	@ (80098ac <UART_AdvFeatureConfig+0x15c>)
 8009836:	4013      	ands	r3, r2
 8009838:	0019      	movs	r1, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800984a:	2380      	movs	r3, #128	@ 0x80
 800984c:	035b      	lsls	r3, r3, #13
 800984e:	429a      	cmp	r2, r3
 8009850:	d10b      	bne.n	800986a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	4a15      	ldr	r2, [pc, #84]	@ (80098b0 <UART_AdvFeatureConfig+0x160>)
 800985a:	4013      	ands	r3, r2
 800985c:	0019      	movs	r1, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986e:	2280      	movs	r2, #128	@ 0x80
 8009870:	4013      	ands	r3, r2
 8009872:	d00b      	beq.n	800988c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	4a0e      	ldr	r2, [pc, #56]	@ (80098b4 <UART_AdvFeatureConfig+0x164>)
 800987c:	4013      	ands	r3, r2
 800987e:	0019      	movs	r1, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	605a      	str	r2, [r3, #4]
  }
}
 800988c:	46c0      	nop			@ (mov r8, r8)
 800988e:	46bd      	mov	sp, r7
 8009890:	b002      	add	sp, #8
 8009892:	bd80      	pop	{r7, pc}
 8009894:	fffdffff 	.word	0xfffdffff
 8009898:	fffeffff 	.word	0xfffeffff
 800989c:	fffbffff 	.word	0xfffbffff
 80098a0:	ffff7fff 	.word	0xffff7fff
 80098a4:	ffffefff 	.word	0xffffefff
 80098a8:	ffffdfff 	.word	0xffffdfff
 80098ac:	ffefffff 	.word	0xffefffff
 80098b0:	ff9fffff 	.word	0xff9fffff
 80098b4:	fff7ffff 	.word	0xfff7ffff

080098b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b092      	sub	sp, #72	@ 0x48
 80098bc:	af02      	add	r7, sp, #8
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2284      	movs	r2, #132	@ 0x84
 80098c4:	2100      	movs	r1, #0
 80098c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098c8:	f7fc f87c 	bl	80059c4 <HAL_GetTick>
 80098cc:	0003      	movs	r3, r0
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2208      	movs	r2, #8
 80098d8:	4013      	ands	r3, r2
 80098da:	2b08      	cmp	r3, #8
 80098dc:	d12c      	bne.n	8009938 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e0:	2280      	movs	r2, #128	@ 0x80
 80098e2:	0391      	lsls	r1, r2, #14
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4a46      	ldr	r2, [pc, #280]	@ (8009a00 <UART_CheckIdleState+0x148>)
 80098e8:	9200      	str	r2, [sp, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f000 f88c 	bl	8009a08 <UART_WaitOnFlagUntilTimeout>
 80098f0:	1e03      	subs	r3, r0, #0
 80098f2:	d021      	beq.n	8009938 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f4:	f3ef 8310 	mrs	r3, PRIMASK
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80098fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098fe:	2301      	movs	r3, #1
 8009900:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	f383 8810 	msr	PRIMASK, r3
}
 8009908:	46c0      	nop			@ (mov r8, r8)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2180      	movs	r1, #128	@ 0x80
 8009916:	438a      	bics	r2, r1
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800991e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009920:	f383 8810 	msr	PRIMASK, r3
}
 8009924:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2220      	movs	r2, #32
 800992a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2278      	movs	r2, #120	@ 0x78
 8009930:	2100      	movs	r1, #0
 8009932:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e05f      	b.n	80099f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2204      	movs	r2, #4
 8009940:	4013      	ands	r3, r2
 8009942:	2b04      	cmp	r3, #4
 8009944:	d146      	bne.n	80099d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009948:	2280      	movs	r2, #128	@ 0x80
 800994a:	03d1      	lsls	r1, r2, #15
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4a2c      	ldr	r2, [pc, #176]	@ (8009a00 <UART_CheckIdleState+0x148>)
 8009950:	9200      	str	r2, [sp, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	f000 f858 	bl	8009a08 <UART_WaitOnFlagUntilTimeout>
 8009958:	1e03      	subs	r3, r0, #0
 800995a:	d03b      	beq.n	80099d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800995c:	f3ef 8310 	mrs	r3, PRIMASK
 8009960:	60fb      	str	r3, [r7, #12]
  return(result);
 8009962:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009964:	637b      	str	r3, [r7, #52]	@ 0x34
 8009966:	2301      	movs	r3, #1
 8009968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f383 8810 	msr	PRIMASK, r3
}
 8009970:	46c0      	nop			@ (mov r8, r8)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4921      	ldr	r1, [pc, #132]	@ (8009a04 <UART_CheckIdleState+0x14c>)
 800997e:	400a      	ands	r2, r1
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f383 8810 	msr	PRIMASK, r3
}
 800998c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800998e:	f3ef 8310 	mrs	r3, PRIMASK
 8009992:	61bb      	str	r3, [r7, #24]
  return(result);
 8009994:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009996:	633b      	str	r3, [r7, #48]	@ 0x30
 8009998:	2301      	movs	r3, #1
 800999a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f383 8810 	msr	PRIMASK, r3
}
 80099a2:	46c0      	nop			@ (mov r8, r8)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2101      	movs	r1, #1
 80099b0:	438a      	bics	r2, r1
 80099b2:	609a      	str	r2, [r3, #8]
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	f383 8810 	msr	PRIMASK, r3
}
 80099be:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2280      	movs	r2, #128	@ 0x80
 80099c4:	2120      	movs	r1, #32
 80099c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2278      	movs	r2, #120	@ 0x78
 80099cc:	2100      	movs	r1, #0
 80099ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e011      	b.n	80099f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2280      	movs	r2, #128	@ 0x80
 80099de:	2120      	movs	r1, #32
 80099e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2278      	movs	r2, #120	@ 0x78
 80099f2:	2100      	movs	r1, #0
 80099f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	0018      	movs	r0, r3
 80099fa:	46bd      	mov	sp, r7
 80099fc:	b010      	add	sp, #64	@ 0x40
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	01ffffff 	.word	0x01ffffff
 8009a04:	fffffedf 	.word	0xfffffedf

08009a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	1dfb      	adds	r3, r7, #7
 8009a16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a18:	e04b      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	d048      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a20:	f7fb ffd0 	bl	80059c4 <HAL_GetTick>
 8009a24:	0002      	movs	r2, r0
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d302      	bcc.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e04b      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2204      	movs	r2, #4
 8009a42:	4013      	ands	r3, r2
 8009a44:	d035      	beq.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	4013      	ands	r3, r2
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d111      	bne.n	8009a78 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2208      	movs	r2, #8
 8009a5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f000 f906 	bl	8009c70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2284      	movs	r2, #132	@ 0x84
 8009a68:	2108      	movs	r1, #8
 8009a6a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2278      	movs	r2, #120	@ 0x78
 8009a70:	2100      	movs	r1, #0
 8009a72:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e02c      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69da      	ldr	r2, [r3, #28]
 8009a7e:	2380      	movs	r3, #128	@ 0x80
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	401a      	ands	r2, r3
 8009a84:	2380      	movs	r3, #128	@ 0x80
 8009a86:	011b      	lsls	r3, r3, #4
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d112      	bne.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2280      	movs	r2, #128	@ 0x80
 8009a92:	0112      	lsls	r2, r2, #4
 8009a94:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f000 f8e9 	bl	8009c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2284      	movs	r2, #132	@ 0x84
 8009aa2:	2120      	movs	r1, #32
 8009aa4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2278      	movs	r2, #120	@ 0x78
 8009aaa:	2100      	movs	r1, #0
 8009aac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e00f      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	4013      	ands	r3, r2
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	425a      	negs	r2, r3
 8009ac2:	4153      	adcs	r3, r2
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	1dfb      	adds	r3, r7, #7
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d0a4      	beq.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	b004      	add	sp, #16
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b090      	sub	sp, #64	@ 0x40
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	1dbb      	adds	r3, r7, #6
 8009ae8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	1dba      	adds	r2, r7, #6
 8009af4:	2158      	movs	r1, #88	@ 0x58
 8009af6:	8812      	ldrh	r2, [r2, #0]
 8009af8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	1dba      	adds	r2, r7, #6
 8009afe:	215a      	movs	r1, #90	@ 0x5a
 8009b00:	8812      	ldrh	r2, [r2, #0]
 8009b02:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	2380      	movs	r3, #128	@ 0x80
 8009b10:	015b      	lsls	r3, r3, #5
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d10d      	bne.n	8009b32 <UART_Start_Receive_IT+0x56>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <UART_Start_Receive_IT+0x4c>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	225c      	movs	r2, #92	@ 0x5c
 8009b22:	4950      	ldr	r1, [pc, #320]	@ (8009c64 <UART_Start_Receive_IT+0x188>)
 8009b24:	5299      	strh	r1, [r3, r2]
 8009b26:	e02e      	b.n	8009b86 <UART_Start_Receive_IT+0xaa>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	225c      	movs	r2, #92	@ 0x5c
 8009b2c:	21ff      	movs	r1, #255	@ 0xff
 8009b2e:	5299      	strh	r1, [r3, r2]
 8009b30:	e029      	b.n	8009b86 <UART_Start_Receive_IT+0xaa>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10d      	bne.n	8009b56 <UART_Start_Receive_IT+0x7a>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d104      	bne.n	8009b4c <UART_Start_Receive_IT+0x70>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	225c      	movs	r2, #92	@ 0x5c
 8009b46:	21ff      	movs	r1, #255	@ 0xff
 8009b48:	5299      	strh	r1, [r3, r2]
 8009b4a:	e01c      	b.n	8009b86 <UART_Start_Receive_IT+0xaa>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	225c      	movs	r2, #92	@ 0x5c
 8009b50:	217f      	movs	r1, #127	@ 0x7f
 8009b52:	5299      	strh	r1, [r3, r2]
 8009b54:	e017      	b.n	8009b86 <UART_Start_Receive_IT+0xaa>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	2380      	movs	r3, #128	@ 0x80
 8009b5c:	055b      	lsls	r3, r3, #21
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d10d      	bne.n	8009b7e <UART_Start_Receive_IT+0xa2>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <UART_Start_Receive_IT+0x98>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	225c      	movs	r2, #92	@ 0x5c
 8009b6e:	217f      	movs	r1, #127	@ 0x7f
 8009b70:	5299      	strh	r1, [r3, r2]
 8009b72:	e008      	b.n	8009b86 <UART_Start_Receive_IT+0xaa>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	225c      	movs	r2, #92	@ 0x5c
 8009b78:	213f      	movs	r1, #63	@ 0x3f
 8009b7a:	5299      	strh	r1, [r3, r2]
 8009b7c:	e003      	b.n	8009b86 <UART_Start_Receive_IT+0xaa>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	225c      	movs	r2, #92	@ 0x5c
 8009b82:	2100      	movs	r1, #0
 8009b84:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2284      	movs	r2, #132	@ 0x84
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2280      	movs	r2, #128	@ 0x80
 8009b92:	2122      	movs	r1, #34	@ 0x22
 8009b94:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b96:	f3ef 8310 	mrs	r3, PRIMASK
 8009b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba6:	f383 8810 	msr	PRIMASK, r3
}
 8009baa:	46c0      	nop			@ (mov r8, r8)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	609a      	str	r2, [r3, #8]
 8009bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc2:	f383 8810 	msr	PRIMASK, r3
}
 8009bc6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	2380      	movs	r3, #128	@ 0x80
 8009bce:	015b      	lsls	r3, r3, #5
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d107      	bne.n	8009be4 <UART_Start_Receive_IT+0x108>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4a22      	ldr	r2, [pc, #136]	@ (8009c68 <UART_Start_Receive_IT+0x18c>)
 8009be0:	669a      	str	r2, [r3, #104]	@ 0x68
 8009be2:	e002      	b.n	8009bea <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4a21      	ldr	r2, [pc, #132]	@ (8009c6c <UART_Start_Receive_IT+0x190>)
 8009be8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d019      	beq.n	8009c26 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8009bf6:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bf8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	f383 8810 	msr	PRIMASK, r3
}
 8009c06:	46c0      	nop			@ (mov r8, r8)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2190      	movs	r1, #144	@ 0x90
 8009c14:	0049      	lsls	r1, r1, #1
 8009c16:	430a      	orrs	r2, r1
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c20:	f383 8810 	msr	PRIMASK, r3
}
 8009c24:	e018      	b.n	8009c58 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c26:	f3ef 8310 	mrs	r3, PRIMASK
 8009c2a:	613b      	str	r3, [r7, #16]
  return(result);
 8009c2c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c30:	2301      	movs	r3, #1
 8009c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f383 8810 	msr	PRIMASK, r3
}
 8009c3a:	46c0      	nop			@ (mov r8, r8)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2120      	movs	r1, #32
 8009c48:	430a      	orrs	r2, r1
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f383 8810 	msr	PRIMASK, r3
}
 8009c56:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	b010      	add	sp, #64	@ 0x40
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	000001ff 	.word	0x000001ff
 8009c68:	08009f81 	.word	0x08009f81
 8009c6c:	08009dbd 	.word	0x08009dbd

08009c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08e      	sub	sp, #56	@ 0x38
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c78:	f3ef 8310 	mrs	r3, PRIMASK
 8009c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c82:	2301      	movs	r3, #1
 8009c84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	f383 8810 	msr	PRIMASK, r3
}
 8009c8c:	46c0      	nop			@ (mov r8, r8)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4926      	ldr	r1, [pc, #152]	@ (8009d34 <UART_EndRxTransfer+0xc4>)
 8009c9a:	400a      	ands	r2, r1
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f383 8810 	msr	PRIMASK, r3
}
 8009ca8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009caa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cae:	623b      	str	r3, [r7, #32]
  return(result);
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	f383 8810 	msr	PRIMASK, r3
}
 8009cbe:	46c0      	nop			@ (mov r8, r8)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2101      	movs	r1, #1
 8009ccc:	438a      	bics	r2, r1
 8009cce:	609a      	str	r2, [r3, #8]
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	f383 8810 	msr	PRIMASK, r3
}
 8009cda:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d118      	bne.n	8009d16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ce8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cee:	2301      	movs	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f383 8810 	msr	PRIMASK, r3
}
 8009cf8:	46c0      	nop			@ (mov r8, r8)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2110      	movs	r1, #16
 8009d06:	438a      	bics	r2, r1
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f383 8810 	msr	PRIMASK, r3
}
 8009d14:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2280      	movs	r2, #128	@ 0x80
 8009d1a:	2120      	movs	r1, #32
 8009d1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009d2a:	46c0      	nop			@ (mov r8, r8)
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	b00e      	add	sp, #56	@ 0x38
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	46c0      	nop			@ (mov r8, r8)
 8009d34:	fffffedf 	.word	0xfffffedf

08009d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	225a      	movs	r2, #90	@ 0x5a
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2252      	movs	r2, #82	@ 0x52
 8009d52:	2100      	movs	r1, #0
 8009d54:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	0018      	movs	r0, r3
 8009d5a:	f7fb fa71 	bl	8005240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d5e:	46c0      	nop			@ (mov r8, r8)
 8009d60:	46bd      	mov	sp, r7
 8009d62:	b004      	add	sp, #16
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b086      	sub	sp, #24
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8009d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d74:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	2301      	movs	r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f383 8810 	msr	PRIMASK, r3
}
 8009d82:	46c0      	nop			@ (mov r8, r8)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2140      	movs	r1, #64	@ 0x40
 8009d90:	438a      	bics	r2, r1
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f383 8810 	msr	PRIMASK, r3
}
 8009d9e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	0018      	movs	r0, r3
 8009db0:	f7ff fa74 	bl	800929c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009db4:	46c0      	nop			@ (mov r8, r8)
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b006      	add	sp, #24
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b094      	sub	sp, #80	@ 0x50
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009dc4:	204e      	movs	r0, #78	@ 0x4e
 8009dc6:	183b      	adds	r3, r7, r0
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	215c      	movs	r1, #92	@ 0x5c
 8009dcc:	5a52      	ldrh	r2, [r2, r1]
 8009dce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2280      	movs	r2, #128	@ 0x80
 8009dd4:	589b      	ldr	r3, [r3, r2]
 8009dd6:	2b22      	cmp	r3, #34	@ 0x22
 8009dd8:	d000      	beq.n	8009ddc <UART_RxISR_8BIT+0x20>
 8009dda:	e0bf      	b.n	8009f5c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009de2:	214c      	movs	r1, #76	@ 0x4c
 8009de4:	187b      	adds	r3, r7, r1
 8009de6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009de8:	187b      	adds	r3, r7, r1
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	183b      	adds	r3, r7, r0
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	b2d9      	uxtb	r1, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df8:	400a      	ands	r2, r1
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	225a      	movs	r2, #90	@ 0x5a
 8009e0c:	5a9b      	ldrh	r3, [r3, r2]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b299      	uxth	r1, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	225a      	movs	r2, #90	@ 0x5a
 8009e18:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	225a      	movs	r2, #90	@ 0x5a
 8009e1e:	5a9b      	ldrh	r3, [r3, r2]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d000      	beq.n	8009e28 <UART_RxISR_8BIT+0x6c>
 8009e26:	e0a1      	b.n	8009f6c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e28:	f3ef 8310 	mrs	r3, PRIMASK
 8009e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e32:	2301      	movs	r3, #1
 8009e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e38:	f383 8810 	msr	PRIMASK, r3
}
 8009e3c:	46c0      	nop			@ (mov r8, r8)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	494a      	ldr	r1, [pc, #296]	@ (8009f74 <UART_RxISR_8BIT+0x1b8>)
 8009e4a:	400a      	ands	r2, r1
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e54:	f383 8810 	msr	PRIMASK, r3
}
 8009e58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e62:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e64:	2301      	movs	r3, #1
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6a:	f383 8810 	msr	PRIMASK, r3
}
 8009e6e:	46c0      	nop			@ (mov r8, r8)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	438a      	bics	r2, r1
 8009e7e:	609a      	str	r2, [r3, #8]
 8009e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e82:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	f383 8810 	msr	PRIMASK, r3
}
 8009e8a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2280      	movs	r2, #128	@ 0x80
 8009e90:	2120      	movs	r1, #32
 8009e92:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a34      	ldr	r2, [pc, #208]	@ (8009f78 <UART_RxISR_8BIT+0x1bc>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d01f      	beq.n	8009eea <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	2380      	movs	r3, #128	@ 0x80
 8009eb2:	041b      	lsls	r3, r3, #16
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	d018      	beq.n	8009eea <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8009ebc:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ebe:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	f383 8810 	msr	PRIMASK, r3
}
 8009ecc:	46c0      	nop			@ (mov r8, r8)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4928      	ldr	r1, [pc, #160]	@ (8009f7c <UART_RxISR_8BIT+0x1c0>)
 8009eda:	400a      	ands	r2, r1
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ee0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	f383 8810 	msr	PRIMASK, r3
}
 8009ee8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d12f      	bne.n	8009f52 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8009efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efe:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f02:	2301      	movs	r3, #1
 8009f04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f383 8810 	msr	PRIMASK, r3
}
 8009f0c:	46c0      	nop			@ (mov r8, r8)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2110      	movs	r1, #16
 8009f1a:	438a      	bics	r2, r1
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f383 8810 	msr	PRIMASK, r3
}
 8009f28:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	2210      	movs	r2, #16
 8009f32:	4013      	ands	r3, r2
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d103      	bne.n	8009f40 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2210      	movs	r2, #16
 8009f3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2258      	movs	r2, #88	@ 0x58
 8009f44:	5a9a      	ldrh	r2, [r3, r2]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	0011      	movs	r1, r2
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7fb f946 	bl	80051dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f50:	e00c      	b.n	8009f6c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	0018      	movs	r0, r3
 8009f56:	f7ff f9a9 	bl	80092ac <HAL_UART_RxCpltCallback>
}
 8009f5a:	e007      	b.n	8009f6c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	699a      	ldr	r2, [r3, #24]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2108      	movs	r1, #8
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	619a      	str	r2, [r3, #24]
}
 8009f6c:	46c0      	nop			@ (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b014      	add	sp, #80	@ 0x50
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	fffffedf 	.word	0xfffffedf
 8009f78:	40004800 	.word	0x40004800
 8009f7c:	fbffffff 	.word	0xfbffffff

08009f80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b094      	sub	sp, #80	@ 0x50
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f88:	204e      	movs	r0, #78	@ 0x4e
 8009f8a:	183b      	adds	r3, r7, r0
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	215c      	movs	r1, #92	@ 0x5c
 8009f90:	5a52      	ldrh	r2, [r2, r1]
 8009f92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2280      	movs	r2, #128	@ 0x80
 8009f98:	589b      	ldr	r3, [r3, r2]
 8009f9a:	2b22      	cmp	r3, #34	@ 0x22
 8009f9c:	d000      	beq.n	8009fa0 <UART_RxISR_16BIT+0x20>
 8009f9e:	e0bf      	b.n	800a120 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fa6:	214c      	movs	r1, #76	@ 0x4c
 8009fa8:	187b      	adds	r3, r7, r1
 8009faa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8009fb2:	187b      	adds	r3, r7, r1
 8009fb4:	183a      	adds	r2, r7, r0
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	8812      	ldrh	r2, [r2, #0]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fc6:	1c9a      	adds	r2, r3, #2
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	225a      	movs	r2, #90	@ 0x5a
 8009fd0:	5a9b      	ldrh	r3, [r3, r2]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b299      	uxth	r1, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	225a      	movs	r2, #90	@ 0x5a
 8009fdc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	225a      	movs	r2, #90	@ 0x5a
 8009fe2:	5a9b      	ldrh	r3, [r3, r2]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d000      	beq.n	8009fec <UART_RxISR_16BIT+0x6c>
 8009fea:	e0a1      	b.n	800a130 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fec:	f3ef 8310 	mrs	r3, PRIMASK
 8009ff0:	623b      	str	r3, [r7, #32]
  return(result);
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	f383 8810 	msr	PRIMASK, r3
}
 800a000:	46c0      	nop			@ (mov r8, r8)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	494a      	ldr	r1, [pc, #296]	@ (800a138 <UART_RxISR_16BIT+0x1b8>)
 800a00e:	400a      	ands	r2, r1
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a014:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	f383 8810 	msr	PRIMASK, r3
}
 800a01c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a01e:	f3ef 8310 	mrs	r3, PRIMASK
 800a022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800a024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a026:	643b      	str	r3, [r7, #64]	@ 0x40
 800a028:	2301      	movs	r3, #1
 800a02a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	f383 8810 	msr	PRIMASK, r3
}
 800a032:	46c0      	nop			@ (mov r8, r8)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2101      	movs	r1, #1
 800a040:	438a      	bics	r2, r1
 800a042:	609a      	str	r2, [r3, #8]
 800a044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a046:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04a:	f383 8810 	msr	PRIMASK, r3
}
 800a04e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2280      	movs	r2, #128	@ 0x80
 800a054:	2120      	movs	r1, #32
 800a056:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a34      	ldr	r2, [pc, #208]	@ (800a13c <UART_RxISR_16BIT+0x1bc>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d01f      	beq.n	800a0ae <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	2380      	movs	r3, #128	@ 0x80
 800a076:	041b      	lsls	r3, r3, #16
 800a078:	4013      	ands	r3, r2
 800a07a:	d018      	beq.n	800a0ae <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a07c:	f3ef 8310 	mrs	r3, PRIMASK
 800a080:	617b      	str	r3, [r7, #20]
  return(result);
 800a082:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a086:	2301      	movs	r3, #1
 800a088:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	f383 8810 	msr	PRIMASK, r3
}
 800a090:	46c0      	nop			@ (mov r8, r8)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4928      	ldr	r1, [pc, #160]	@ (800a140 <UART_RxISR_16BIT+0x1c0>)
 800a09e:	400a      	ands	r2, r1
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	f383 8810 	msr	PRIMASK, r3
}
 800a0ac:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d12f      	bne.n	800a116 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0c2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f383 8810 	msr	PRIMASK, r3
}
 800a0d0:	46c0      	nop			@ (mov r8, r8)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2110      	movs	r1, #16
 800a0de:	438a      	bics	r2, r1
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f383 8810 	msr	PRIMASK, r3
}
 800a0ec:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	69db      	ldr	r3, [r3, #28]
 800a0f4:	2210      	movs	r2, #16
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	2b10      	cmp	r3, #16
 800a0fa:	d103      	bne.n	800a104 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2210      	movs	r2, #16
 800a102:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2258      	movs	r2, #88	@ 0x58
 800a108:	5a9a      	ldrh	r2, [r3, r2]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	0011      	movs	r1, r2
 800a10e:	0018      	movs	r0, r3
 800a110:	f7fb f864 	bl	80051dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a114:	e00c      	b.n	800a130 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	0018      	movs	r0, r3
 800a11a:	f7ff f8c7 	bl	80092ac <HAL_UART_RxCpltCallback>
}
 800a11e:	e007      	b.n	800a130 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699a      	ldr	r2, [r3, #24]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2108      	movs	r1, #8
 800a12c:	430a      	orrs	r2, r1
 800a12e:	619a      	str	r2, [r3, #24]
}
 800a130:	46c0      	nop			@ (mov r8, r8)
 800a132:	46bd      	mov	sp, r7
 800a134:	b014      	add	sp, #80	@ 0x50
 800a136:	bd80      	pop	{r7, pc}
 800a138:	fffffedf 	.word	0xfffffedf
 800a13c:	40004800 	.word	0x40004800
 800a140:	fbffffff 	.word	0xfbffffff

0800a144 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a14c:	46c0      	nop			@ (mov r8, r8)
 800a14e:	46bd      	mov	sp, r7
 800a150:	b002      	add	sp, #8
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a154:	b5b0      	push	{r4, r5, r7, lr}
 800a156:	b08a      	sub	sp, #40	@ 0x28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	1dbb      	adds	r3, r7, #6
 800a160:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2280      	movs	r2, #128	@ 0x80
 800a166:	589b      	ldr	r3, [r3, r2]
 800a168:	2b20      	cmp	r3, #32
 800a16a:	d156      	bne.n	800a21a <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800a172:	1dbb      	adds	r3, r7, #6
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e04e      	b.n	800a21c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	2380      	movs	r3, #128	@ 0x80
 800a184:	015b      	lsls	r3, r3, #5
 800a186:	429a      	cmp	r2, r3
 800a188:	d109      	bne.n	800a19e <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d105      	bne.n	800a19e <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2201      	movs	r2, #1
 800a196:	4013      	ands	r3, r2
 800a198:	d001      	beq.n	800a19e <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e03e      	b.n	800a21c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a1aa:	2527      	movs	r5, #39	@ 0x27
 800a1ac:	197c      	adds	r4, r7, r5
 800a1ae:	1dbb      	adds	r3, r7, #6
 800a1b0:	881a      	ldrh	r2, [r3, #0]
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7ff fc90 	bl	8009adc <UART_Start_Receive_IT>
 800a1bc:	0003      	movs	r3, r0
 800a1be:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a1c0:	197b      	adds	r3, r7, r5
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d124      	bne.n	800a212 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d11c      	bne.n	800a20a <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2210      	movs	r2, #16
 800a1d6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a1de:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e0:	623b      	str	r3, [r7, #32]
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f383 8810 	msr	PRIMASK, r3
}
 800a1ec:	46c0      	nop			@ (mov r8, r8)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2110      	movs	r1, #16
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	f383 8810 	msr	PRIMASK, r3
}
 800a208:	e003      	b.n	800a212 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a20a:	2327      	movs	r3, #39	@ 0x27
 800a20c:	18fb      	adds	r3, r7, r3
 800a20e:	2201      	movs	r2, #1
 800a210:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a212:	2327      	movs	r3, #39	@ 0x27
 800a214:	18fb      	adds	r3, r7, r3
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	e000      	b.n	800a21c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a21a:	2302      	movs	r3, #2
  }
}
 800a21c:	0018      	movs	r0, r3
 800a21e:	46bd      	mov	sp, r7
 800a220:	b00a      	add	sp, #40	@ 0x28
 800a222:	bdb0      	pop	{r4, r5, r7, pc}

0800a224 <__cvt>:
 800a224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a226:	001f      	movs	r7, r3
 800a228:	2300      	movs	r3, #0
 800a22a:	0016      	movs	r6, r2
 800a22c:	b08b      	sub	sp, #44	@ 0x2c
 800a22e:	429f      	cmp	r7, r3
 800a230:	da04      	bge.n	800a23c <__cvt+0x18>
 800a232:	2180      	movs	r1, #128	@ 0x80
 800a234:	0609      	lsls	r1, r1, #24
 800a236:	187b      	adds	r3, r7, r1
 800a238:	001f      	movs	r7, r3
 800a23a:	232d      	movs	r3, #45	@ 0x2d
 800a23c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a23e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a240:	7013      	strb	r3, [r2, #0]
 800a242:	2320      	movs	r3, #32
 800a244:	2203      	movs	r2, #3
 800a246:	439d      	bics	r5, r3
 800a248:	2d46      	cmp	r5, #70	@ 0x46
 800a24a:	d007      	beq.n	800a25c <__cvt+0x38>
 800a24c:	002b      	movs	r3, r5
 800a24e:	3b45      	subs	r3, #69	@ 0x45
 800a250:	4259      	negs	r1, r3
 800a252:	414b      	adcs	r3, r1
 800a254:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a256:	3a01      	subs	r2, #1
 800a258:	18cb      	adds	r3, r1, r3
 800a25a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a25c:	ab09      	add	r3, sp, #36	@ 0x24
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	ab08      	add	r3, sp, #32
 800a262:	9303      	str	r3, [sp, #12]
 800a264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a266:	9200      	str	r2, [sp, #0]
 800a268:	9302      	str	r3, [sp, #8]
 800a26a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a26c:	0032      	movs	r2, r6
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	003b      	movs	r3, r7
 800a272:	f000 fe69 	bl	800af48 <_dtoa_r>
 800a276:	0004      	movs	r4, r0
 800a278:	2d47      	cmp	r5, #71	@ 0x47
 800a27a:	d11b      	bne.n	800a2b4 <__cvt+0x90>
 800a27c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a27e:	07db      	lsls	r3, r3, #31
 800a280:	d511      	bpl.n	800a2a6 <__cvt+0x82>
 800a282:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a284:	18c3      	adds	r3, r0, r3
 800a286:	9307      	str	r3, [sp, #28]
 800a288:	2200      	movs	r2, #0
 800a28a:	2300      	movs	r3, #0
 800a28c:	0030      	movs	r0, r6
 800a28e:	0039      	movs	r1, r7
 800a290:	f7f6 f8dc 	bl	800044c <__aeabi_dcmpeq>
 800a294:	2800      	cmp	r0, #0
 800a296:	d001      	beq.n	800a29c <__cvt+0x78>
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a29c:	2230      	movs	r2, #48	@ 0x30
 800a29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a0:	9907      	ldr	r1, [sp, #28]
 800a2a2:	428b      	cmp	r3, r1
 800a2a4:	d320      	bcc.n	800a2e8 <__cvt+0xc4>
 800a2a6:	0020      	movs	r0, r4
 800a2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a2ac:	1b1b      	subs	r3, r3, r4
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	b00b      	add	sp, #44	@ 0x2c
 800a2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2b6:	18c3      	adds	r3, r0, r3
 800a2b8:	9307      	str	r3, [sp, #28]
 800a2ba:	2d46      	cmp	r5, #70	@ 0x46
 800a2bc:	d1e4      	bne.n	800a288 <__cvt+0x64>
 800a2be:	7803      	ldrb	r3, [r0, #0]
 800a2c0:	2b30      	cmp	r3, #48	@ 0x30
 800a2c2:	d10c      	bne.n	800a2de <__cvt+0xba>
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	0030      	movs	r0, r6
 800a2ca:	0039      	movs	r1, r7
 800a2cc:	f7f6 f8be 	bl	800044c <__aeabi_dcmpeq>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d104      	bne.n	800a2de <__cvt+0xba>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a2d8:	1a9b      	subs	r3, r3, r2
 800a2da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2e0:	9a07      	ldr	r2, [sp, #28]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	18d3      	adds	r3, r2, r3
 800a2e6:	e7ce      	b.n	800a286 <__cvt+0x62>
 800a2e8:	1c59      	adds	r1, r3, #1
 800a2ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	e7d6      	b.n	800a29e <__cvt+0x7a>

0800a2f0 <__exponent>:
 800a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2f2:	232b      	movs	r3, #43	@ 0x2b
 800a2f4:	0005      	movs	r5, r0
 800a2f6:	000c      	movs	r4, r1
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	7002      	strb	r2, [r0, #0]
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	da01      	bge.n	800a304 <__exponent+0x14>
 800a300:	424c      	negs	r4, r1
 800a302:	3302      	adds	r3, #2
 800a304:	706b      	strb	r3, [r5, #1]
 800a306:	2c09      	cmp	r4, #9
 800a308:	dd2c      	ble.n	800a364 <__exponent+0x74>
 800a30a:	ab02      	add	r3, sp, #8
 800a30c:	1dde      	adds	r6, r3, #7
 800a30e:	0020      	movs	r0, r4
 800a310:	210a      	movs	r1, #10
 800a312:	f7f6 f885 	bl	8000420 <__aeabi_idivmod>
 800a316:	0037      	movs	r7, r6
 800a318:	3130      	adds	r1, #48	@ 0x30
 800a31a:	3e01      	subs	r6, #1
 800a31c:	0020      	movs	r0, r4
 800a31e:	7031      	strb	r1, [r6, #0]
 800a320:	210a      	movs	r1, #10
 800a322:	9401      	str	r4, [sp, #4]
 800a324:	f7f5 ff96 	bl	8000254 <__divsi3>
 800a328:	9b01      	ldr	r3, [sp, #4]
 800a32a:	0004      	movs	r4, r0
 800a32c:	2b63      	cmp	r3, #99	@ 0x63
 800a32e:	dcee      	bgt.n	800a30e <__exponent+0x1e>
 800a330:	1eba      	subs	r2, r7, #2
 800a332:	1ca8      	adds	r0, r5, #2
 800a334:	0001      	movs	r1, r0
 800a336:	0013      	movs	r3, r2
 800a338:	3430      	adds	r4, #48	@ 0x30
 800a33a:	7014      	strb	r4, [r2, #0]
 800a33c:	ac02      	add	r4, sp, #8
 800a33e:	3407      	adds	r4, #7
 800a340:	429c      	cmp	r4, r3
 800a342:	d80a      	bhi.n	800a35a <__exponent+0x6a>
 800a344:	2300      	movs	r3, #0
 800a346:	42a2      	cmp	r2, r4
 800a348:	d803      	bhi.n	800a352 <__exponent+0x62>
 800a34a:	3309      	adds	r3, #9
 800a34c:	aa02      	add	r2, sp, #8
 800a34e:	189b      	adds	r3, r3, r2
 800a350:	1bdb      	subs	r3, r3, r7
 800a352:	18c0      	adds	r0, r0, r3
 800a354:	1b40      	subs	r0, r0, r5
 800a356:	b005      	add	sp, #20
 800a358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a35a:	781c      	ldrb	r4, [r3, #0]
 800a35c:	3301      	adds	r3, #1
 800a35e:	700c      	strb	r4, [r1, #0]
 800a360:	3101      	adds	r1, #1
 800a362:	e7eb      	b.n	800a33c <__exponent+0x4c>
 800a364:	2330      	movs	r3, #48	@ 0x30
 800a366:	18e4      	adds	r4, r4, r3
 800a368:	70ab      	strb	r3, [r5, #2]
 800a36a:	1d28      	adds	r0, r5, #4
 800a36c:	70ec      	strb	r4, [r5, #3]
 800a36e:	e7f1      	b.n	800a354 <__exponent+0x64>

0800a370 <_printf_float>:
 800a370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a372:	b097      	sub	sp, #92	@ 0x5c
 800a374:	000d      	movs	r5, r1
 800a376:	920a      	str	r2, [sp, #40]	@ 0x28
 800a378:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a37a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a37c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a37e:	f000 fccb 	bl	800ad18 <_localeconv_r>
 800a382:	6803      	ldr	r3, [r0, #0]
 800a384:	0018      	movs	r0, r3
 800a386:	930d      	str	r3, [sp, #52]	@ 0x34
 800a388:	f7f5 febe 	bl	8000108 <strlen>
 800a38c:	2300      	movs	r3, #0
 800a38e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a390:	9314      	str	r3, [sp, #80]	@ 0x50
 800a392:	7e2b      	ldrb	r3, [r5, #24]
 800a394:	2207      	movs	r2, #7
 800a396:	930c      	str	r3, [sp, #48]	@ 0x30
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a39c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	05c9      	lsls	r1, r1, #23
 800a3a2:	d545      	bpl.n	800a430 <_printf_float+0xc0>
 800a3a4:	189b      	adds	r3, r3, r2
 800a3a6:	4393      	bics	r3, r2
 800a3a8:	001a      	movs	r2, r3
 800a3aa:	3208      	adds	r2, #8
 800a3ac:	6022      	str	r2, [r4, #0]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	681e      	ldr	r6, [r3, #0]
 800a3b2:	685f      	ldr	r7, [r3, #4]
 800a3b4:	007b      	lsls	r3, r7, #1
 800a3b6:	085b      	lsrs	r3, r3, #1
 800a3b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a3ba:	9610      	str	r6, [sp, #64]	@ 0x40
 800a3bc:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a3be:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a3c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a3c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a3c4:	4ba7      	ldr	r3, [pc, #668]	@ (800a664 <_printf_float+0x2f4>)
 800a3c6:	4252      	negs	r2, r2
 800a3c8:	f7f8 f8e0 	bl	800258c <__aeabi_dcmpun>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d131      	bne.n	800a434 <_printf_float+0xc4>
 800a3d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a3d2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	4ba3      	ldr	r3, [pc, #652]	@ (800a664 <_printf_float+0x2f4>)
 800a3d8:	4252      	negs	r2, r2
 800a3da:	f7f6 f847 	bl	800046c <__aeabi_dcmple>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d128      	bne.n	800a434 <_printf_float+0xc4>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	0030      	movs	r0, r6
 800a3e8:	0039      	movs	r1, r7
 800a3ea:	f7f6 f835 	bl	8000458 <__aeabi_dcmplt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d003      	beq.n	800a3fa <_printf_float+0x8a>
 800a3f2:	002b      	movs	r3, r5
 800a3f4:	222d      	movs	r2, #45	@ 0x2d
 800a3f6:	3343      	adds	r3, #67	@ 0x43
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3fc:	4f9a      	ldr	r7, [pc, #616]	@ (800a668 <_printf_float+0x2f8>)
 800a3fe:	2b47      	cmp	r3, #71	@ 0x47
 800a400:	d900      	bls.n	800a404 <_printf_float+0x94>
 800a402:	4f9a      	ldr	r7, [pc, #616]	@ (800a66c <_printf_float+0x2fc>)
 800a404:	2303      	movs	r3, #3
 800a406:	2400      	movs	r4, #0
 800a408:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a40a:	612b      	str	r3, [r5, #16]
 800a40c:	3301      	adds	r3, #1
 800a40e:	439a      	bics	r2, r3
 800a410:	602a      	str	r2, [r5, #0]
 800a412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a414:	0029      	movs	r1, r5
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a41a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a41c:	aa15      	add	r2, sp, #84	@ 0x54
 800a41e:	f000 f9e5 	bl	800a7ec <_printf_common>
 800a422:	3001      	adds	r0, #1
 800a424:	d000      	beq.n	800a428 <_printf_float+0xb8>
 800a426:	e09f      	b.n	800a568 <_printf_float+0x1f8>
 800a428:	2001      	movs	r0, #1
 800a42a:	4240      	negs	r0, r0
 800a42c:	b017      	add	sp, #92	@ 0x5c
 800a42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a430:	3307      	adds	r3, #7
 800a432:	e7b8      	b.n	800a3a6 <_printf_float+0x36>
 800a434:	0032      	movs	r2, r6
 800a436:	003b      	movs	r3, r7
 800a438:	0030      	movs	r0, r6
 800a43a:	0039      	movs	r1, r7
 800a43c:	f7f8 f8a6 	bl	800258c <__aeabi_dcmpun>
 800a440:	2800      	cmp	r0, #0
 800a442:	d00b      	beq.n	800a45c <_printf_float+0xec>
 800a444:	2f00      	cmp	r7, #0
 800a446:	da03      	bge.n	800a450 <_printf_float+0xe0>
 800a448:	002b      	movs	r3, r5
 800a44a:	222d      	movs	r2, #45	@ 0x2d
 800a44c:	3343      	adds	r3, #67	@ 0x43
 800a44e:	701a      	strb	r2, [r3, #0]
 800a450:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a452:	4f87      	ldr	r7, [pc, #540]	@ (800a670 <_printf_float+0x300>)
 800a454:	2b47      	cmp	r3, #71	@ 0x47
 800a456:	d9d5      	bls.n	800a404 <_printf_float+0x94>
 800a458:	4f86      	ldr	r7, [pc, #536]	@ (800a674 <_printf_float+0x304>)
 800a45a:	e7d3      	b.n	800a404 <_printf_float+0x94>
 800a45c:	2220      	movs	r2, #32
 800a45e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a460:	686b      	ldr	r3, [r5, #4]
 800a462:	4394      	bics	r4, r2
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	d146      	bne.n	800a4f6 <_printf_float+0x186>
 800a468:	3307      	adds	r3, #7
 800a46a:	606b      	str	r3, [r5, #4]
 800a46c:	2380      	movs	r3, #128	@ 0x80
 800a46e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	4313      	orrs	r3, r2
 800a474:	2200      	movs	r2, #0
 800a476:	602b      	str	r3, [r5, #0]
 800a478:	9206      	str	r2, [sp, #24]
 800a47a:	aa14      	add	r2, sp, #80	@ 0x50
 800a47c:	9205      	str	r2, [sp, #20]
 800a47e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a480:	a90a      	add	r1, sp, #40	@ 0x28
 800a482:	9204      	str	r2, [sp, #16]
 800a484:	aa13      	add	r2, sp, #76	@ 0x4c
 800a486:	9203      	str	r2, [sp, #12]
 800a488:	2223      	movs	r2, #35	@ 0x23
 800a48a:	1852      	adds	r2, r2, r1
 800a48c:	9202      	str	r2, [sp, #8]
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	686b      	ldr	r3, [r5, #4]
 800a492:	0032      	movs	r2, r6
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a498:	003b      	movs	r3, r7
 800a49a:	f7ff fec3 	bl	800a224 <__cvt>
 800a49e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a4a0:	0007      	movs	r7, r0
 800a4a2:	2c47      	cmp	r4, #71	@ 0x47
 800a4a4:	d12d      	bne.n	800a502 <_printf_float+0x192>
 800a4a6:	1cd3      	adds	r3, r2, #3
 800a4a8:	db02      	blt.n	800a4b0 <_printf_float+0x140>
 800a4aa:	686b      	ldr	r3, [r5, #4]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	dd48      	ble.n	800a542 <_printf_float+0x1d2>
 800a4b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a4b4:	3b02      	subs	r3, #2
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4ba:	0028      	movs	r0, r5
 800a4bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a4be:	3901      	subs	r1, #1
 800a4c0:	3050      	adds	r0, #80	@ 0x50
 800a4c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a4c4:	f7ff ff14 	bl	800a2f0 <__exponent>
 800a4c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a4ca:	0004      	movs	r4, r0
 800a4cc:	1813      	adds	r3, r2, r0
 800a4ce:	612b      	str	r3, [r5, #16]
 800a4d0:	2a01      	cmp	r2, #1
 800a4d2:	dc02      	bgt.n	800a4da <_printf_float+0x16a>
 800a4d4:	682a      	ldr	r2, [r5, #0]
 800a4d6:	07d2      	lsls	r2, r2, #31
 800a4d8:	d501      	bpl.n	800a4de <_printf_float+0x16e>
 800a4da:	3301      	adds	r3, #1
 800a4dc:	612b      	str	r3, [r5, #16]
 800a4de:	2323      	movs	r3, #35	@ 0x23
 800a4e0:	aa0a      	add	r2, sp, #40	@ 0x28
 800a4e2:	189b      	adds	r3, r3, r2
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d100      	bne.n	800a4ec <_printf_float+0x17c>
 800a4ea:	e792      	b.n	800a412 <_printf_float+0xa2>
 800a4ec:	002b      	movs	r3, r5
 800a4ee:	222d      	movs	r2, #45	@ 0x2d
 800a4f0:	3343      	adds	r3, #67	@ 0x43
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	e78d      	b.n	800a412 <_printf_float+0xa2>
 800a4f6:	2c47      	cmp	r4, #71	@ 0x47
 800a4f8:	d1b8      	bne.n	800a46c <_printf_float+0xfc>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1b6      	bne.n	800a46c <_printf_float+0xfc>
 800a4fe:	3301      	adds	r3, #1
 800a500:	e7b3      	b.n	800a46a <_printf_float+0xfa>
 800a502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a504:	0011      	movs	r1, r2
 800a506:	2b65      	cmp	r3, #101	@ 0x65
 800a508:	d9d7      	bls.n	800a4ba <_printf_float+0x14a>
 800a50a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a50c:	2b66      	cmp	r3, #102	@ 0x66
 800a50e:	d11a      	bne.n	800a546 <_printf_float+0x1d6>
 800a510:	686b      	ldr	r3, [r5, #4]
 800a512:	2a00      	cmp	r2, #0
 800a514:	dd09      	ble.n	800a52a <_printf_float+0x1ba>
 800a516:	612a      	str	r2, [r5, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <_printf_float+0x1b2>
 800a51c:	6829      	ldr	r1, [r5, #0]
 800a51e:	07c9      	lsls	r1, r1, #31
 800a520:	d50b      	bpl.n	800a53a <_printf_float+0x1ca>
 800a522:	3301      	adds	r3, #1
 800a524:	189b      	adds	r3, r3, r2
 800a526:	612b      	str	r3, [r5, #16]
 800a528:	e007      	b.n	800a53a <_printf_float+0x1ca>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <_printf_float+0x1c6>
 800a52e:	2201      	movs	r2, #1
 800a530:	6829      	ldr	r1, [r5, #0]
 800a532:	4211      	tst	r1, r2
 800a534:	d000      	beq.n	800a538 <_printf_float+0x1c8>
 800a536:	1c9a      	adds	r2, r3, #2
 800a538:	612a      	str	r2, [r5, #16]
 800a53a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a53c:	2400      	movs	r4, #0
 800a53e:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a540:	e7cd      	b.n	800a4de <_printf_float+0x16e>
 800a542:	2367      	movs	r3, #103	@ 0x67
 800a544:	930c      	str	r3, [sp, #48]	@ 0x30
 800a546:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a548:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a54a:	4299      	cmp	r1, r3
 800a54c:	db06      	blt.n	800a55c <_printf_float+0x1ec>
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	6129      	str	r1, [r5, #16]
 800a552:	07db      	lsls	r3, r3, #31
 800a554:	d5f1      	bpl.n	800a53a <_printf_float+0x1ca>
 800a556:	3101      	adds	r1, #1
 800a558:	6129      	str	r1, [r5, #16]
 800a55a:	e7ee      	b.n	800a53a <_printf_float+0x1ca>
 800a55c:	2201      	movs	r2, #1
 800a55e:	2900      	cmp	r1, #0
 800a560:	dce0      	bgt.n	800a524 <_printf_float+0x1b4>
 800a562:	1892      	adds	r2, r2, r2
 800a564:	1a52      	subs	r2, r2, r1
 800a566:	e7dd      	b.n	800a524 <_printf_float+0x1b4>
 800a568:	682a      	ldr	r2, [r5, #0]
 800a56a:	0553      	lsls	r3, r2, #21
 800a56c:	d408      	bmi.n	800a580 <_printf_float+0x210>
 800a56e:	692b      	ldr	r3, [r5, #16]
 800a570:	003a      	movs	r2, r7
 800a572:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a574:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a576:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a578:	47a0      	blx	r4
 800a57a:	3001      	adds	r0, #1
 800a57c:	d129      	bne.n	800a5d2 <_printf_float+0x262>
 800a57e:	e753      	b.n	800a428 <_printf_float+0xb8>
 800a580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a582:	2b65      	cmp	r3, #101	@ 0x65
 800a584:	d800      	bhi.n	800a588 <_printf_float+0x218>
 800a586:	e0da      	b.n	800a73e <_printf_float+0x3ce>
 800a588:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a58a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a58c:	2200      	movs	r2, #0
 800a58e:	2300      	movs	r3, #0
 800a590:	f7f5 ff5c 	bl	800044c <__aeabi_dcmpeq>
 800a594:	2800      	cmp	r0, #0
 800a596:	d033      	beq.n	800a600 <_printf_float+0x290>
 800a598:	2301      	movs	r3, #1
 800a59a:	4a37      	ldr	r2, [pc, #220]	@ (800a678 <_printf_float+0x308>)
 800a59c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a59e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a5a2:	47a0      	blx	r4
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d100      	bne.n	800a5aa <_printf_float+0x23a>
 800a5a8:	e73e      	b.n	800a428 <_printf_float+0xb8>
 800a5aa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a5ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5ae:	42b3      	cmp	r3, r6
 800a5b0:	db02      	blt.n	800a5b8 <_printf_float+0x248>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	07db      	lsls	r3, r3, #31
 800a5b6:	d50c      	bpl.n	800a5d2 <_printf_float+0x262>
 800a5b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a5ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5c2:	47a0      	blx	r4
 800a5c4:	2400      	movs	r4, #0
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d100      	bne.n	800a5cc <_printf_float+0x25c>
 800a5ca:	e72d      	b.n	800a428 <_printf_float+0xb8>
 800a5cc:	1e73      	subs	r3, r6, #1
 800a5ce:	42a3      	cmp	r3, r4
 800a5d0:	dc0a      	bgt.n	800a5e8 <_printf_float+0x278>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	079b      	lsls	r3, r3, #30
 800a5d6:	d500      	bpl.n	800a5da <_printf_float+0x26a>
 800a5d8:	e105      	b.n	800a7e6 <_printf_float+0x476>
 800a5da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a5dc:	68e8      	ldr	r0, [r5, #12]
 800a5de:	4298      	cmp	r0, r3
 800a5e0:	db00      	blt.n	800a5e4 <_printf_float+0x274>
 800a5e2:	e723      	b.n	800a42c <_printf_float+0xbc>
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	e721      	b.n	800a42c <_printf_float+0xbc>
 800a5e8:	002a      	movs	r2, r5
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a5f2:	321a      	adds	r2, #26
 800a5f4:	47b8      	blx	r7
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d100      	bne.n	800a5fc <_printf_float+0x28c>
 800a5fa:	e715      	b.n	800a428 <_printf_float+0xb8>
 800a5fc:	3401      	adds	r4, #1
 800a5fe:	e7e5      	b.n	800a5cc <_printf_float+0x25c>
 800a600:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a602:	2b00      	cmp	r3, #0
 800a604:	dc3a      	bgt.n	800a67c <_printf_float+0x30c>
 800a606:	2301      	movs	r3, #1
 800a608:	4a1b      	ldr	r2, [pc, #108]	@ (800a678 <_printf_float+0x308>)
 800a60a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a60c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a60e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a610:	47a0      	blx	r4
 800a612:	3001      	adds	r0, #1
 800a614:	d100      	bne.n	800a618 <_printf_float+0x2a8>
 800a616:	e707      	b.n	800a428 <_printf_float+0xb8>
 800a618:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a61a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a61c:	4333      	orrs	r3, r6
 800a61e:	d102      	bne.n	800a626 <_printf_float+0x2b6>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	07db      	lsls	r3, r3, #31
 800a624:	d5d5      	bpl.n	800a5d2 <_printf_float+0x262>
 800a626:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a628:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a62a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a62c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a62e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a630:	47a0      	blx	r4
 800a632:	2300      	movs	r3, #0
 800a634:	3001      	adds	r0, #1
 800a636:	d100      	bne.n	800a63a <_printf_float+0x2ca>
 800a638:	e6f6      	b.n	800a428 <_printf_float+0xb8>
 800a63a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a63c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a63e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a640:	425b      	negs	r3, r3
 800a642:	4293      	cmp	r3, r2
 800a644:	dc01      	bgt.n	800a64a <_printf_float+0x2da>
 800a646:	0033      	movs	r3, r6
 800a648:	e792      	b.n	800a570 <_printf_float+0x200>
 800a64a:	002a      	movs	r2, r5
 800a64c:	2301      	movs	r3, #1
 800a64e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a650:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a652:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a654:	321a      	adds	r2, #26
 800a656:	47a0      	blx	r4
 800a658:	3001      	adds	r0, #1
 800a65a:	d100      	bne.n	800a65e <_printf_float+0x2ee>
 800a65c:	e6e4      	b.n	800a428 <_printf_float+0xb8>
 800a65e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a660:	3301      	adds	r3, #1
 800a662:	e7ea      	b.n	800a63a <_printf_float+0x2ca>
 800a664:	7fefffff 	.word	0x7fefffff
 800a668:	0800cdac 	.word	0x0800cdac
 800a66c:	0800cdb0 	.word	0x0800cdb0
 800a670:	0800cdb4 	.word	0x0800cdb4
 800a674:	0800cdb8 	.word	0x0800cdb8
 800a678:	0800cdbc 	.word	0x0800cdbc
 800a67c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a67e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a680:	930c      	str	r3, [sp, #48]	@ 0x30
 800a682:	429e      	cmp	r6, r3
 800a684:	dd00      	ble.n	800a688 <_printf_float+0x318>
 800a686:	001e      	movs	r6, r3
 800a688:	2e00      	cmp	r6, #0
 800a68a:	dc31      	bgt.n	800a6f0 <_printf_float+0x380>
 800a68c:	43f3      	mvns	r3, r6
 800a68e:	2400      	movs	r4, #0
 800a690:	17db      	asrs	r3, r3, #31
 800a692:	4033      	ands	r3, r6
 800a694:	930e      	str	r3, [sp, #56]	@ 0x38
 800a696:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a69a:	1af3      	subs	r3, r6, r3
 800a69c:	42a3      	cmp	r3, r4
 800a69e:	dc30      	bgt.n	800a702 <_printf_float+0x392>
 800a6a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	dc38      	bgt.n	800a71a <_printf_float+0x3aa>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	07db      	lsls	r3, r3, #31
 800a6ac:	d435      	bmi.n	800a71a <_printf_float+0x3aa>
 800a6ae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a6b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a6b4:	1b9b      	subs	r3, r3, r6
 800a6b6:	1b14      	subs	r4, r2, r4
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	dd00      	ble.n	800a6be <_printf_float+0x34e>
 800a6bc:	001c      	movs	r4, r3
 800a6be:	2c00      	cmp	r4, #0
 800a6c0:	dc34      	bgt.n	800a72c <_printf_float+0x3bc>
 800a6c2:	43e3      	mvns	r3, r4
 800a6c4:	2600      	movs	r6, #0
 800a6c6:	17db      	asrs	r3, r3, #31
 800a6c8:	401c      	ands	r4, r3
 800a6ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	1b1b      	subs	r3, r3, r4
 800a6d2:	42b3      	cmp	r3, r6
 800a6d4:	dc00      	bgt.n	800a6d8 <_printf_float+0x368>
 800a6d6:	e77c      	b.n	800a5d2 <_printf_float+0x262>
 800a6d8:	002a      	movs	r2, r5
 800a6da:	2301      	movs	r3, #1
 800a6dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a6e2:	321a      	adds	r2, #26
 800a6e4:	47b8      	blx	r7
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d100      	bne.n	800a6ec <_printf_float+0x37c>
 800a6ea:	e69d      	b.n	800a428 <_printf_float+0xb8>
 800a6ec:	3601      	adds	r6, #1
 800a6ee:	e7ec      	b.n	800a6ca <_printf_float+0x35a>
 800a6f0:	0033      	movs	r3, r6
 800a6f2:	003a      	movs	r2, r7
 800a6f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a6fa:	47a0      	blx	r4
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	d1c5      	bne.n	800a68c <_printf_float+0x31c>
 800a700:	e692      	b.n	800a428 <_printf_float+0xb8>
 800a702:	002a      	movs	r2, r5
 800a704:	2301      	movs	r3, #1
 800a706:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a708:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a70a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a70c:	321a      	adds	r2, #26
 800a70e:	47b0      	blx	r6
 800a710:	3001      	adds	r0, #1
 800a712:	d100      	bne.n	800a716 <_printf_float+0x3a6>
 800a714:	e688      	b.n	800a428 <_printf_float+0xb8>
 800a716:	3401      	adds	r4, #1
 800a718:	e7bd      	b.n	800a696 <_printf_float+0x326>
 800a71a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a71e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a720:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a722:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a724:	47a0      	blx	r4
 800a726:	3001      	adds	r0, #1
 800a728:	d1c1      	bne.n	800a6ae <_printf_float+0x33e>
 800a72a:	e67d      	b.n	800a428 <_printf_float+0xb8>
 800a72c:	19ba      	adds	r2, r7, r6
 800a72e:	0023      	movs	r3, r4
 800a730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a734:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a736:	47b0      	blx	r6
 800a738:	3001      	adds	r0, #1
 800a73a:	d1c2      	bne.n	800a6c2 <_printf_float+0x352>
 800a73c:	e674      	b.n	800a428 <_printf_float+0xb8>
 800a73e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a740:	930c      	str	r3, [sp, #48]	@ 0x30
 800a742:	2b01      	cmp	r3, #1
 800a744:	dc02      	bgt.n	800a74c <_printf_float+0x3dc>
 800a746:	2301      	movs	r3, #1
 800a748:	421a      	tst	r2, r3
 800a74a:	d039      	beq.n	800a7c0 <_printf_float+0x450>
 800a74c:	2301      	movs	r3, #1
 800a74e:	003a      	movs	r2, r7
 800a750:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a754:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a756:	47b0      	blx	r6
 800a758:	3001      	adds	r0, #1
 800a75a:	d100      	bne.n	800a75e <_printf_float+0x3ee>
 800a75c:	e664      	b.n	800a428 <_printf_float+0xb8>
 800a75e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a760:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a762:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a764:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a766:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a768:	47b0      	blx	r6
 800a76a:	3001      	adds	r0, #1
 800a76c:	d100      	bne.n	800a770 <_printf_float+0x400>
 800a76e:	e65b      	b.n	800a428 <_printf_float+0xb8>
 800a770:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a772:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a774:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a776:	2200      	movs	r2, #0
 800a778:	3b01      	subs	r3, #1
 800a77a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a77c:	2300      	movs	r3, #0
 800a77e:	f7f5 fe65 	bl	800044c <__aeabi_dcmpeq>
 800a782:	2800      	cmp	r0, #0
 800a784:	d11a      	bne.n	800a7bc <_printf_float+0x44c>
 800a786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a788:	1c7a      	adds	r2, r7, #1
 800a78a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a78c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a78e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a790:	47b0      	blx	r6
 800a792:	3001      	adds	r0, #1
 800a794:	d10e      	bne.n	800a7b4 <_printf_float+0x444>
 800a796:	e647      	b.n	800a428 <_printf_float+0xb8>
 800a798:	002a      	movs	r2, r5
 800a79a:	2301      	movs	r3, #1
 800a79c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a79e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a7a2:	321a      	adds	r2, #26
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d100      	bne.n	800a7ac <_printf_float+0x43c>
 800a7aa:	e63d      	b.n	800a428 <_printf_float+0xb8>
 800a7ac:	3601      	adds	r6, #1
 800a7ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7b0:	429e      	cmp	r6, r3
 800a7b2:	dbf1      	blt.n	800a798 <_printf_float+0x428>
 800a7b4:	002a      	movs	r2, r5
 800a7b6:	0023      	movs	r3, r4
 800a7b8:	3250      	adds	r2, #80	@ 0x50
 800a7ba:	e6da      	b.n	800a572 <_printf_float+0x202>
 800a7bc:	2600      	movs	r6, #0
 800a7be:	e7f6      	b.n	800a7ae <_printf_float+0x43e>
 800a7c0:	003a      	movs	r2, r7
 800a7c2:	e7e2      	b.n	800a78a <_printf_float+0x41a>
 800a7c4:	002a      	movs	r2, r5
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a7ce:	3219      	adds	r2, #25
 800a7d0:	47b0      	blx	r6
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d100      	bne.n	800a7d8 <_printf_float+0x468>
 800a7d6:	e627      	b.n	800a428 <_printf_float+0xb8>
 800a7d8:	3401      	adds	r4, #1
 800a7da:	68eb      	ldr	r3, [r5, #12]
 800a7dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a7de:	1a9b      	subs	r3, r3, r2
 800a7e0:	42a3      	cmp	r3, r4
 800a7e2:	dcef      	bgt.n	800a7c4 <_printf_float+0x454>
 800a7e4:	e6f9      	b.n	800a5da <_printf_float+0x26a>
 800a7e6:	2400      	movs	r4, #0
 800a7e8:	e7f7      	b.n	800a7da <_printf_float+0x46a>
 800a7ea:	46c0      	nop			@ (mov r8, r8)

0800a7ec <_printf_common>:
 800a7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ee:	0016      	movs	r6, r2
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	688a      	ldr	r2, [r1, #8]
 800a7f4:	690b      	ldr	r3, [r1, #16]
 800a7f6:	000c      	movs	r4, r1
 800a7f8:	9000      	str	r0, [sp, #0]
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	da00      	bge.n	800a800 <_printf_common+0x14>
 800a7fe:	0013      	movs	r3, r2
 800a800:	0022      	movs	r2, r4
 800a802:	6033      	str	r3, [r6, #0]
 800a804:	3243      	adds	r2, #67	@ 0x43
 800a806:	7812      	ldrb	r2, [r2, #0]
 800a808:	2a00      	cmp	r2, #0
 800a80a:	d001      	beq.n	800a810 <_printf_common+0x24>
 800a80c:	3301      	adds	r3, #1
 800a80e:	6033      	str	r3, [r6, #0]
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	069b      	lsls	r3, r3, #26
 800a814:	d502      	bpl.n	800a81c <_printf_common+0x30>
 800a816:	6833      	ldr	r3, [r6, #0]
 800a818:	3302      	adds	r3, #2
 800a81a:	6033      	str	r3, [r6, #0]
 800a81c:	6822      	ldr	r2, [r4, #0]
 800a81e:	2306      	movs	r3, #6
 800a820:	0015      	movs	r5, r2
 800a822:	401d      	ands	r5, r3
 800a824:	421a      	tst	r2, r3
 800a826:	d027      	beq.n	800a878 <_printf_common+0x8c>
 800a828:	0023      	movs	r3, r4
 800a82a:	3343      	adds	r3, #67	@ 0x43
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	1e5a      	subs	r2, r3, #1
 800a830:	4193      	sbcs	r3, r2
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	0692      	lsls	r2, r2, #26
 800a836:	d430      	bmi.n	800a89a <_printf_common+0xae>
 800a838:	0022      	movs	r2, r4
 800a83a:	9901      	ldr	r1, [sp, #4]
 800a83c:	9800      	ldr	r0, [sp, #0]
 800a83e:	9d08      	ldr	r5, [sp, #32]
 800a840:	3243      	adds	r2, #67	@ 0x43
 800a842:	47a8      	blx	r5
 800a844:	3001      	adds	r0, #1
 800a846:	d025      	beq.n	800a894 <_printf_common+0xa8>
 800a848:	2206      	movs	r2, #6
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	2500      	movs	r5, #0
 800a84e:	4013      	ands	r3, r2
 800a850:	2b04      	cmp	r3, #4
 800a852:	d105      	bne.n	800a860 <_printf_common+0x74>
 800a854:	6833      	ldr	r3, [r6, #0]
 800a856:	68e5      	ldr	r5, [r4, #12]
 800a858:	1aed      	subs	r5, r5, r3
 800a85a:	43eb      	mvns	r3, r5
 800a85c:	17db      	asrs	r3, r3, #31
 800a85e:	401d      	ands	r5, r3
 800a860:	68a3      	ldr	r3, [r4, #8]
 800a862:	6922      	ldr	r2, [r4, #16]
 800a864:	4293      	cmp	r3, r2
 800a866:	dd01      	ble.n	800a86c <_printf_common+0x80>
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	18ed      	adds	r5, r5, r3
 800a86c:	2600      	movs	r6, #0
 800a86e:	42b5      	cmp	r5, r6
 800a870:	d120      	bne.n	800a8b4 <_printf_common+0xc8>
 800a872:	2000      	movs	r0, #0
 800a874:	e010      	b.n	800a898 <_printf_common+0xac>
 800a876:	3501      	adds	r5, #1
 800a878:	68e3      	ldr	r3, [r4, #12]
 800a87a:	6832      	ldr	r2, [r6, #0]
 800a87c:	1a9b      	subs	r3, r3, r2
 800a87e:	42ab      	cmp	r3, r5
 800a880:	ddd2      	ble.n	800a828 <_printf_common+0x3c>
 800a882:	0022      	movs	r2, r4
 800a884:	2301      	movs	r3, #1
 800a886:	9901      	ldr	r1, [sp, #4]
 800a888:	9800      	ldr	r0, [sp, #0]
 800a88a:	9f08      	ldr	r7, [sp, #32]
 800a88c:	3219      	adds	r2, #25
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	d1f0      	bne.n	800a876 <_printf_common+0x8a>
 800a894:	2001      	movs	r0, #1
 800a896:	4240      	negs	r0, r0
 800a898:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a89a:	2030      	movs	r0, #48	@ 0x30
 800a89c:	18e1      	adds	r1, r4, r3
 800a89e:	3143      	adds	r1, #67	@ 0x43
 800a8a0:	7008      	strb	r0, [r1, #0]
 800a8a2:	0021      	movs	r1, r4
 800a8a4:	1c5a      	adds	r2, r3, #1
 800a8a6:	3145      	adds	r1, #69	@ 0x45
 800a8a8:	7809      	ldrb	r1, [r1, #0]
 800a8aa:	18a2      	adds	r2, r4, r2
 800a8ac:	3243      	adds	r2, #67	@ 0x43
 800a8ae:	3302      	adds	r3, #2
 800a8b0:	7011      	strb	r1, [r2, #0]
 800a8b2:	e7c1      	b.n	800a838 <_printf_common+0x4c>
 800a8b4:	0022      	movs	r2, r4
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	9901      	ldr	r1, [sp, #4]
 800a8ba:	9800      	ldr	r0, [sp, #0]
 800a8bc:	9f08      	ldr	r7, [sp, #32]
 800a8be:	321a      	adds	r2, #26
 800a8c0:	47b8      	blx	r7
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d0e6      	beq.n	800a894 <_printf_common+0xa8>
 800a8c6:	3601      	adds	r6, #1
 800a8c8:	e7d1      	b.n	800a86e <_printf_common+0x82>
	...

0800a8cc <_printf_i>:
 800a8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ce:	b08b      	sub	sp, #44	@ 0x2c
 800a8d0:	9206      	str	r2, [sp, #24]
 800a8d2:	000a      	movs	r2, r1
 800a8d4:	3243      	adds	r2, #67	@ 0x43
 800a8d6:	9307      	str	r3, [sp, #28]
 800a8d8:	9005      	str	r0, [sp, #20]
 800a8da:	9203      	str	r2, [sp, #12]
 800a8dc:	7e0a      	ldrb	r2, [r1, #24]
 800a8de:	000c      	movs	r4, r1
 800a8e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8e2:	2a78      	cmp	r2, #120	@ 0x78
 800a8e4:	d809      	bhi.n	800a8fa <_printf_i+0x2e>
 800a8e6:	2a62      	cmp	r2, #98	@ 0x62
 800a8e8:	d80b      	bhi.n	800a902 <_printf_i+0x36>
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	d100      	bne.n	800a8f0 <_printf_i+0x24>
 800a8ee:	e0bc      	b.n	800aa6a <_printf_i+0x19e>
 800a8f0:	497b      	ldr	r1, [pc, #492]	@ (800aae0 <_printf_i+0x214>)
 800a8f2:	9104      	str	r1, [sp, #16]
 800a8f4:	2a58      	cmp	r2, #88	@ 0x58
 800a8f6:	d100      	bne.n	800a8fa <_printf_i+0x2e>
 800a8f8:	e090      	b.n	800aa1c <_printf_i+0x150>
 800a8fa:	0025      	movs	r5, r4
 800a8fc:	3542      	adds	r5, #66	@ 0x42
 800a8fe:	702a      	strb	r2, [r5, #0]
 800a900:	e022      	b.n	800a948 <_printf_i+0x7c>
 800a902:	0010      	movs	r0, r2
 800a904:	3863      	subs	r0, #99	@ 0x63
 800a906:	2815      	cmp	r0, #21
 800a908:	d8f7      	bhi.n	800a8fa <_printf_i+0x2e>
 800a90a:	f7f5 fc0f 	bl	800012c <__gnu_thumb1_case_shi>
 800a90e:	0016      	.short	0x0016
 800a910:	fff6001f 	.word	0xfff6001f
 800a914:	fff6fff6 	.word	0xfff6fff6
 800a918:	001ffff6 	.word	0x001ffff6
 800a91c:	fff6fff6 	.word	0xfff6fff6
 800a920:	fff6fff6 	.word	0xfff6fff6
 800a924:	003600a1 	.word	0x003600a1
 800a928:	fff60080 	.word	0xfff60080
 800a92c:	00b2fff6 	.word	0x00b2fff6
 800a930:	0036fff6 	.word	0x0036fff6
 800a934:	fff6fff6 	.word	0xfff6fff6
 800a938:	0084      	.short	0x0084
 800a93a:	0025      	movs	r5, r4
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	3542      	adds	r5, #66	@ 0x42
 800a940:	1d11      	adds	r1, r2, #4
 800a942:	6019      	str	r1, [r3, #0]
 800a944:	6813      	ldr	r3, [r2, #0]
 800a946:	702b      	strb	r3, [r5, #0]
 800a948:	2301      	movs	r3, #1
 800a94a:	e0a0      	b.n	800aa8e <_printf_i+0x1c2>
 800a94c:	6818      	ldr	r0, [r3, #0]
 800a94e:	6809      	ldr	r1, [r1, #0]
 800a950:	1d02      	adds	r2, r0, #4
 800a952:	060d      	lsls	r5, r1, #24
 800a954:	d50b      	bpl.n	800a96e <_printf_i+0xa2>
 800a956:	6806      	ldr	r6, [r0, #0]
 800a958:	601a      	str	r2, [r3, #0]
 800a95a:	2e00      	cmp	r6, #0
 800a95c:	da03      	bge.n	800a966 <_printf_i+0x9a>
 800a95e:	232d      	movs	r3, #45	@ 0x2d
 800a960:	9a03      	ldr	r2, [sp, #12]
 800a962:	4276      	negs	r6, r6
 800a964:	7013      	strb	r3, [r2, #0]
 800a966:	4b5e      	ldr	r3, [pc, #376]	@ (800aae0 <_printf_i+0x214>)
 800a968:	270a      	movs	r7, #10
 800a96a:	9304      	str	r3, [sp, #16]
 800a96c:	e018      	b.n	800a9a0 <_printf_i+0xd4>
 800a96e:	6806      	ldr	r6, [r0, #0]
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	0649      	lsls	r1, r1, #25
 800a974:	d5f1      	bpl.n	800a95a <_printf_i+0x8e>
 800a976:	b236      	sxth	r6, r6
 800a978:	e7ef      	b.n	800a95a <_printf_i+0x8e>
 800a97a:	6808      	ldr	r0, [r1, #0]
 800a97c:	6819      	ldr	r1, [r3, #0]
 800a97e:	c940      	ldmia	r1!, {r6}
 800a980:	0605      	lsls	r5, r0, #24
 800a982:	d402      	bmi.n	800a98a <_printf_i+0xbe>
 800a984:	0640      	lsls	r0, r0, #25
 800a986:	d500      	bpl.n	800a98a <_printf_i+0xbe>
 800a988:	b2b6      	uxth	r6, r6
 800a98a:	6019      	str	r1, [r3, #0]
 800a98c:	4b54      	ldr	r3, [pc, #336]	@ (800aae0 <_printf_i+0x214>)
 800a98e:	270a      	movs	r7, #10
 800a990:	9304      	str	r3, [sp, #16]
 800a992:	2a6f      	cmp	r2, #111	@ 0x6f
 800a994:	d100      	bne.n	800a998 <_printf_i+0xcc>
 800a996:	3f02      	subs	r7, #2
 800a998:	0023      	movs	r3, r4
 800a99a:	2200      	movs	r2, #0
 800a99c:	3343      	adds	r3, #67	@ 0x43
 800a99e:	701a      	strb	r2, [r3, #0]
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	60a3      	str	r3, [r4, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	db03      	blt.n	800a9b0 <_printf_i+0xe4>
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	6822      	ldr	r2, [r4, #0]
 800a9ac:	438a      	bics	r2, r1
 800a9ae:	6022      	str	r2, [r4, #0]
 800a9b0:	2e00      	cmp	r6, #0
 800a9b2:	d102      	bne.n	800a9ba <_printf_i+0xee>
 800a9b4:	9d03      	ldr	r5, [sp, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00c      	beq.n	800a9d4 <_printf_i+0x108>
 800a9ba:	9d03      	ldr	r5, [sp, #12]
 800a9bc:	0030      	movs	r0, r6
 800a9be:	0039      	movs	r1, r7
 800a9c0:	f7f5 fc44 	bl	800024c <__aeabi_uidivmod>
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	3d01      	subs	r5, #1
 800a9c8:	5c5b      	ldrb	r3, [r3, r1]
 800a9ca:	702b      	strb	r3, [r5, #0]
 800a9cc:	0033      	movs	r3, r6
 800a9ce:	0006      	movs	r6, r0
 800a9d0:	429f      	cmp	r7, r3
 800a9d2:	d9f3      	bls.n	800a9bc <_printf_i+0xf0>
 800a9d4:	2f08      	cmp	r7, #8
 800a9d6:	d109      	bne.n	800a9ec <_printf_i+0x120>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	07db      	lsls	r3, r3, #31
 800a9dc:	d506      	bpl.n	800a9ec <_printf_i+0x120>
 800a9de:	6862      	ldr	r2, [r4, #4]
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	dc02      	bgt.n	800a9ec <_printf_i+0x120>
 800a9e6:	2330      	movs	r3, #48	@ 0x30
 800a9e8:	3d01      	subs	r5, #1
 800a9ea:	702b      	strb	r3, [r5, #0]
 800a9ec:	9b03      	ldr	r3, [sp, #12]
 800a9ee:	1b5b      	subs	r3, r3, r5
 800a9f0:	6123      	str	r3, [r4, #16]
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	0021      	movs	r1, r4
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	9805      	ldr	r0, [sp, #20]
 800a9fa:	9b06      	ldr	r3, [sp, #24]
 800a9fc:	aa09      	add	r2, sp, #36	@ 0x24
 800a9fe:	f7ff fef5 	bl	800a7ec <_printf_common>
 800aa02:	3001      	adds	r0, #1
 800aa04:	d148      	bne.n	800aa98 <_printf_i+0x1cc>
 800aa06:	2001      	movs	r0, #1
 800aa08:	4240      	negs	r0, r0
 800aa0a:	b00b      	add	sp, #44	@ 0x2c
 800aa0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa0e:	2220      	movs	r2, #32
 800aa10:	6809      	ldr	r1, [r1, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	2278      	movs	r2, #120	@ 0x78
 800aa18:	4932      	ldr	r1, [pc, #200]	@ (800aae4 <_printf_i+0x218>)
 800aa1a:	9104      	str	r1, [sp, #16]
 800aa1c:	0021      	movs	r1, r4
 800aa1e:	3145      	adds	r1, #69	@ 0x45
 800aa20:	700a      	strb	r2, [r1, #0]
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	c940      	ldmia	r1!, {r6}
 800aa28:	0610      	lsls	r0, r2, #24
 800aa2a:	d402      	bmi.n	800aa32 <_printf_i+0x166>
 800aa2c:	0650      	lsls	r0, r2, #25
 800aa2e:	d500      	bpl.n	800aa32 <_printf_i+0x166>
 800aa30:	b2b6      	uxth	r6, r6
 800aa32:	6019      	str	r1, [r3, #0]
 800aa34:	07d3      	lsls	r3, r2, #31
 800aa36:	d502      	bpl.n	800aa3e <_printf_i+0x172>
 800aa38:	2320      	movs	r3, #32
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	d001      	beq.n	800aa46 <_printf_i+0x17a>
 800aa42:	2710      	movs	r7, #16
 800aa44:	e7a8      	b.n	800a998 <_printf_i+0xcc>
 800aa46:	2220      	movs	r2, #32
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	4393      	bics	r3, r2
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	e7f8      	b.n	800aa42 <_printf_i+0x176>
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	680d      	ldr	r5, [r1, #0]
 800aa54:	1d10      	adds	r0, r2, #4
 800aa56:	6949      	ldr	r1, [r1, #20]
 800aa58:	6018      	str	r0, [r3, #0]
 800aa5a:	6813      	ldr	r3, [r2, #0]
 800aa5c:	062e      	lsls	r6, r5, #24
 800aa5e:	d501      	bpl.n	800aa64 <_printf_i+0x198>
 800aa60:	6019      	str	r1, [r3, #0]
 800aa62:	e002      	b.n	800aa6a <_printf_i+0x19e>
 800aa64:	066d      	lsls	r5, r5, #25
 800aa66:	d5fb      	bpl.n	800aa60 <_printf_i+0x194>
 800aa68:	8019      	strh	r1, [r3, #0]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9d03      	ldr	r5, [sp, #12]
 800aa6e:	6123      	str	r3, [r4, #16]
 800aa70:	e7bf      	b.n	800a9f2 <_printf_i+0x126>
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	1d11      	adds	r1, r2, #4
 800aa76:	6019      	str	r1, [r3, #0]
 800aa78:	6815      	ldr	r5, [r2, #0]
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	0028      	movs	r0, r5
 800aa7e:	6862      	ldr	r2, [r4, #4]
 800aa80:	f000 f9c9 	bl	800ae16 <memchr>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d001      	beq.n	800aa8c <_printf_i+0x1c0>
 800aa88:	1b40      	subs	r0, r0, r5
 800aa8a:	6060      	str	r0, [r4, #4]
 800aa8c:	6863      	ldr	r3, [r4, #4]
 800aa8e:	6123      	str	r3, [r4, #16]
 800aa90:	2300      	movs	r3, #0
 800aa92:	9a03      	ldr	r2, [sp, #12]
 800aa94:	7013      	strb	r3, [r2, #0]
 800aa96:	e7ac      	b.n	800a9f2 <_printf_i+0x126>
 800aa98:	002a      	movs	r2, r5
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	9906      	ldr	r1, [sp, #24]
 800aa9e:	9805      	ldr	r0, [sp, #20]
 800aaa0:	9d07      	ldr	r5, [sp, #28]
 800aaa2:	47a8      	blx	r5
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d0ae      	beq.n	800aa06 <_printf_i+0x13a>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	079b      	lsls	r3, r3, #30
 800aaac:	d415      	bmi.n	800aada <_printf_i+0x20e>
 800aaae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab0:	68e0      	ldr	r0, [r4, #12]
 800aab2:	4298      	cmp	r0, r3
 800aab4:	daa9      	bge.n	800aa0a <_printf_i+0x13e>
 800aab6:	0018      	movs	r0, r3
 800aab8:	e7a7      	b.n	800aa0a <_printf_i+0x13e>
 800aaba:	0022      	movs	r2, r4
 800aabc:	2301      	movs	r3, #1
 800aabe:	9906      	ldr	r1, [sp, #24]
 800aac0:	9805      	ldr	r0, [sp, #20]
 800aac2:	9e07      	ldr	r6, [sp, #28]
 800aac4:	3219      	adds	r2, #25
 800aac6:	47b0      	blx	r6
 800aac8:	3001      	adds	r0, #1
 800aaca:	d09c      	beq.n	800aa06 <_printf_i+0x13a>
 800aacc:	3501      	adds	r5, #1
 800aace:	68e3      	ldr	r3, [r4, #12]
 800aad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	42ab      	cmp	r3, r5
 800aad6:	dcf0      	bgt.n	800aaba <_printf_i+0x1ee>
 800aad8:	e7e9      	b.n	800aaae <_printf_i+0x1e2>
 800aada:	2500      	movs	r5, #0
 800aadc:	e7f7      	b.n	800aace <_printf_i+0x202>
 800aade:	46c0      	nop			@ (mov r8, r8)
 800aae0:	0800cdbe 	.word	0x0800cdbe
 800aae4:	0800cdcf 	.word	0x0800cdcf

0800aae8 <std>:
 800aae8:	2300      	movs	r3, #0
 800aaea:	b510      	push	{r4, lr}
 800aaec:	0004      	movs	r4, r0
 800aaee:	6003      	str	r3, [r0, #0]
 800aaf0:	6043      	str	r3, [r0, #4]
 800aaf2:	6083      	str	r3, [r0, #8]
 800aaf4:	8181      	strh	r1, [r0, #12]
 800aaf6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aaf8:	81c2      	strh	r2, [r0, #14]
 800aafa:	6103      	str	r3, [r0, #16]
 800aafc:	6143      	str	r3, [r0, #20]
 800aafe:	6183      	str	r3, [r0, #24]
 800ab00:	0019      	movs	r1, r3
 800ab02:	2208      	movs	r2, #8
 800ab04:	305c      	adds	r0, #92	@ 0x5c
 800ab06:	f000 f8ff 	bl	800ad08 <memset>
 800ab0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab38 <std+0x50>)
 800ab0c:	6224      	str	r4, [r4, #32]
 800ab0e:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab10:	4b0a      	ldr	r3, [pc, #40]	@ (800ab3c <std+0x54>)
 800ab12:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab14:	4b0a      	ldr	r3, [pc, #40]	@ (800ab40 <std+0x58>)
 800ab16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab18:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <std+0x5c>)
 800ab1a:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab48 <std+0x60>)
 800ab1e:	429c      	cmp	r4, r3
 800ab20:	d005      	beq.n	800ab2e <std+0x46>
 800ab22:	4b0a      	ldr	r3, [pc, #40]	@ (800ab4c <std+0x64>)
 800ab24:	429c      	cmp	r4, r3
 800ab26:	d002      	beq.n	800ab2e <std+0x46>
 800ab28:	4b09      	ldr	r3, [pc, #36]	@ (800ab50 <std+0x68>)
 800ab2a:	429c      	cmp	r4, r3
 800ab2c:	d103      	bne.n	800ab36 <std+0x4e>
 800ab2e:	0020      	movs	r0, r4
 800ab30:	3058      	adds	r0, #88	@ 0x58
 800ab32:	f000 f96d 	bl	800ae10 <__retarget_lock_init_recursive>
 800ab36:	bd10      	pop	{r4, pc}
 800ab38:	0800ac71 	.word	0x0800ac71
 800ab3c:	0800ac99 	.word	0x0800ac99
 800ab40:	0800acd1 	.word	0x0800acd1
 800ab44:	0800acfd 	.word	0x0800acfd
 800ab48:	200004a4 	.word	0x200004a4
 800ab4c:	2000050c 	.word	0x2000050c
 800ab50:	20000574 	.word	0x20000574

0800ab54 <stdio_exit_handler>:
 800ab54:	b510      	push	{r4, lr}
 800ab56:	4a03      	ldr	r2, [pc, #12]	@ (800ab64 <stdio_exit_handler+0x10>)
 800ab58:	4903      	ldr	r1, [pc, #12]	@ (800ab68 <stdio_exit_handler+0x14>)
 800ab5a:	4804      	ldr	r0, [pc, #16]	@ (800ab6c <stdio_exit_handler+0x18>)
 800ab5c:	f000 f86c 	bl	800ac38 <_fwalk_sglue>
 800ab60:	bd10      	pop	{r4, pc}
 800ab62:	46c0      	nop			@ (mov r8, r8)
 800ab64:	2000000c 	.word	0x2000000c
 800ab68:	0800c819 	.word	0x0800c819
 800ab6c:	2000001c 	.word	0x2000001c

0800ab70 <cleanup_stdio>:
 800ab70:	6841      	ldr	r1, [r0, #4]
 800ab72:	4b0b      	ldr	r3, [pc, #44]	@ (800aba0 <cleanup_stdio+0x30>)
 800ab74:	b510      	push	{r4, lr}
 800ab76:	0004      	movs	r4, r0
 800ab78:	4299      	cmp	r1, r3
 800ab7a:	d001      	beq.n	800ab80 <cleanup_stdio+0x10>
 800ab7c:	f001 fe4c 	bl	800c818 <_fflush_r>
 800ab80:	68a1      	ldr	r1, [r4, #8]
 800ab82:	4b08      	ldr	r3, [pc, #32]	@ (800aba4 <cleanup_stdio+0x34>)
 800ab84:	4299      	cmp	r1, r3
 800ab86:	d002      	beq.n	800ab8e <cleanup_stdio+0x1e>
 800ab88:	0020      	movs	r0, r4
 800ab8a:	f001 fe45 	bl	800c818 <_fflush_r>
 800ab8e:	68e1      	ldr	r1, [r4, #12]
 800ab90:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <cleanup_stdio+0x38>)
 800ab92:	4299      	cmp	r1, r3
 800ab94:	d002      	beq.n	800ab9c <cleanup_stdio+0x2c>
 800ab96:	0020      	movs	r0, r4
 800ab98:	f001 fe3e 	bl	800c818 <_fflush_r>
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	46c0      	nop			@ (mov r8, r8)
 800aba0:	200004a4 	.word	0x200004a4
 800aba4:	2000050c 	.word	0x2000050c
 800aba8:	20000574 	.word	0x20000574

0800abac <global_stdio_init.part.0>:
 800abac:	b510      	push	{r4, lr}
 800abae:	4b09      	ldr	r3, [pc, #36]	@ (800abd4 <global_stdio_init.part.0+0x28>)
 800abb0:	4a09      	ldr	r2, [pc, #36]	@ (800abd8 <global_stdio_init.part.0+0x2c>)
 800abb2:	2104      	movs	r1, #4
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	4809      	ldr	r0, [pc, #36]	@ (800abdc <global_stdio_init.part.0+0x30>)
 800abb8:	2200      	movs	r2, #0
 800abba:	f7ff ff95 	bl	800aae8 <std>
 800abbe:	2201      	movs	r2, #1
 800abc0:	2109      	movs	r1, #9
 800abc2:	4807      	ldr	r0, [pc, #28]	@ (800abe0 <global_stdio_init.part.0+0x34>)
 800abc4:	f7ff ff90 	bl	800aae8 <std>
 800abc8:	2202      	movs	r2, #2
 800abca:	2112      	movs	r1, #18
 800abcc:	4805      	ldr	r0, [pc, #20]	@ (800abe4 <global_stdio_init.part.0+0x38>)
 800abce:	f7ff ff8b 	bl	800aae8 <std>
 800abd2:	bd10      	pop	{r4, pc}
 800abd4:	200005dc 	.word	0x200005dc
 800abd8:	0800ab55 	.word	0x0800ab55
 800abdc:	200004a4 	.word	0x200004a4
 800abe0:	2000050c 	.word	0x2000050c
 800abe4:	20000574 	.word	0x20000574

0800abe8 <__sfp_lock_acquire>:
 800abe8:	b510      	push	{r4, lr}
 800abea:	4802      	ldr	r0, [pc, #8]	@ (800abf4 <__sfp_lock_acquire+0xc>)
 800abec:	f000 f911 	bl	800ae12 <__retarget_lock_acquire_recursive>
 800abf0:	bd10      	pop	{r4, pc}
 800abf2:	46c0      	nop			@ (mov r8, r8)
 800abf4:	200005e5 	.word	0x200005e5

0800abf8 <__sfp_lock_release>:
 800abf8:	b510      	push	{r4, lr}
 800abfa:	4802      	ldr	r0, [pc, #8]	@ (800ac04 <__sfp_lock_release+0xc>)
 800abfc:	f000 f90a 	bl	800ae14 <__retarget_lock_release_recursive>
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	46c0      	nop			@ (mov r8, r8)
 800ac04:	200005e5 	.word	0x200005e5

0800ac08 <__sinit>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	0004      	movs	r4, r0
 800ac0c:	f7ff ffec 	bl	800abe8 <__sfp_lock_acquire>
 800ac10:	6a23      	ldr	r3, [r4, #32]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <__sinit+0x14>
 800ac16:	f7ff ffef 	bl	800abf8 <__sfp_lock_release>
 800ac1a:	bd10      	pop	{r4, pc}
 800ac1c:	4b04      	ldr	r3, [pc, #16]	@ (800ac30 <__sinit+0x28>)
 800ac1e:	6223      	str	r3, [r4, #32]
 800ac20:	4b04      	ldr	r3, [pc, #16]	@ (800ac34 <__sinit+0x2c>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1f6      	bne.n	800ac16 <__sinit+0xe>
 800ac28:	f7ff ffc0 	bl	800abac <global_stdio_init.part.0>
 800ac2c:	e7f3      	b.n	800ac16 <__sinit+0xe>
 800ac2e:	46c0      	nop			@ (mov r8, r8)
 800ac30:	0800ab71 	.word	0x0800ab71
 800ac34:	200005dc 	.word	0x200005dc

0800ac38 <_fwalk_sglue>:
 800ac38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac3a:	0014      	movs	r4, r2
 800ac3c:	2600      	movs	r6, #0
 800ac3e:	9000      	str	r0, [sp, #0]
 800ac40:	9101      	str	r1, [sp, #4]
 800ac42:	68a5      	ldr	r5, [r4, #8]
 800ac44:	6867      	ldr	r7, [r4, #4]
 800ac46:	3f01      	subs	r7, #1
 800ac48:	d504      	bpl.n	800ac54 <_fwalk_sglue+0x1c>
 800ac4a:	6824      	ldr	r4, [r4, #0]
 800ac4c:	2c00      	cmp	r4, #0
 800ac4e:	d1f8      	bne.n	800ac42 <_fwalk_sglue+0xa>
 800ac50:	0030      	movs	r0, r6
 800ac52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac54:	89ab      	ldrh	r3, [r5, #12]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d908      	bls.n	800ac6c <_fwalk_sglue+0x34>
 800ac5a:	220e      	movs	r2, #14
 800ac5c:	5eab      	ldrsh	r3, [r5, r2]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	d004      	beq.n	800ac6c <_fwalk_sglue+0x34>
 800ac62:	0029      	movs	r1, r5
 800ac64:	9800      	ldr	r0, [sp, #0]
 800ac66:	9b01      	ldr	r3, [sp, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4306      	orrs	r6, r0
 800ac6c:	3568      	adds	r5, #104	@ 0x68
 800ac6e:	e7ea      	b.n	800ac46 <_fwalk_sglue+0xe>

0800ac70 <__sread>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	000c      	movs	r4, r1
 800ac74:	250e      	movs	r5, #14
 800ac76:	5f49      	ldrsh	r1, [r1, r5]
 800ac78:	f000 f878 	bl	800ad6c <_read_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	db03      	blt.n	800ac88 <__sread+0x18>
 800ac80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac82:	181b      	adds	r3, r3, r0
 800ac84:	6563      	str	r3, [r4, #84]	@ 0x54
 800ac86:	bd70      	pop	{r4, r5, r6, pc}
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	4a02      	ldr	r2, [pc, #8]	@ (800ac94 <__sread+0x24>)
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	e7f9      	b.n	800ac86 <__sread+0x16>
 800ac92:	46c0      	nop			@ (mov r8, r8)
 800ac94:	ffffefff 	.word	0xffffefff

0800ac98 <__swrite>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	001f      	movs	r7, r3
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	0005      	movs	r5, r0
 800aca0:	000c      	movs	r4, r1
 800aca2:	0016      	movs	r6, r2
 800aca4:	05db      	lsls	r3, r3, #23
 800aca6:	d505      	bpl.n	800acb4 <__swrite+0x1c>
 800aca8:	230e      	movs	r3, #14
 800acaa:	5ec9      	ldrsh	r1, [r1, r3]
 800acac:	2200      	movs	r2, #0
 800acae:	2302      	movs	r3, #2
 800acb0:	f000 f848 	bl	800ad44 <_lseek_r>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	4a05      	ldr	r2, [pc, #20]	@ (800accc <__swrite+0x34>)
 800acb8:	0028      	movs	r0, r5
 800acba:	4013      	ands	r3, r2
 800acbc:	81a3      	strh	r3, [r4, #12]
 800acbe:	0032      	movs	r2, r6
 800acc0:	230e      	movs	r3, #14
 800acc2:	5ee1      	ldrsh	r1, [r4, r3]
 800acc4:	003b      	movs	r3, r7
 800acc6:	f000 f865 	bl	800ad94 <_write_r>
 800acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800accc:	ffffefff 	.word	0xffffefff

0800acd0 <__sseek>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	000c      	movs	r4, r1
 800acd4:	250e      	movs	r5, #14
 800acd6:	5f49      	ldrsh	r1, [r1, r5]
 800acd8:	f000 f834 	bl	800ad44 <_lseek_r>
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	1c42      	adds	r2, r0, #1
 800ace0:	d103      	bne.n	800acea <__sseek+0x1a>
 800ace2:	4a05      	ldr	r2, [pc, #20]	@ (800acf8 <__sseek+0x28>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	bd70      	pop	{r4, r5, r6, pc}
 800acea:	2280      	movs	r2, #128	@ 0x80
 800acec:	0152      	lsls	r2, r2, #5
 800acee:	4313      	orrs	r3, r2
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	6560      	str	r0, [r4, #84]	@ 0x54
 800acf4:	e7f8      	b.n	800ace8 <__sseek+0x18>
 800acf6:	46c0      	nop			@ (mov r8, r8)
 800acf8:	ffffefff 	.word	0xffffefff

0800acfc <__sclose>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	230e      	movs	r3, #14
 800ad00:	5ec9      	ldrsh	r1, [r1, r3]
 800ad02:	f000 f80d 	bl	800ad20 <_close_r>
 800ad06:	bd10      	pop	{r4, pc}

0800ad08 <memset>:
 800ad08:	0003      	movs	r3, r0
 800ad0a:	1882      	adds	r2, r0, r2
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d100      	bne.n	800ad12 <memset+0xa>
 800ad10:	4770      	bx	lr
 800ad12:	7019      	strb	r1, [r3, #0]
 800ad14:	3301      	adds	r3, #1
 800ad16:	e7f9      	b.n	800ad0c <memset+0x4>

0800ad18 <_localeconv_r>:
 800ad18:	4800      	ldr	r0, [pc, #0]	@ (800ad1c <_localeconv_r+0x4>)
 800ad1a:	4770      	bx	lr
 800ad1c:	20000158 	.word	0x20000158

0800ad20 <_close_r>:
 800ad20:	2300      	movs	r3, #0
 800ad22:	b570      	push	{r4, r5, r6, lr}
 800ad24:	4d06      	ldr	r5, [pc, #24]	@ (800ad40 <_close_r+0x20>)
 800ad26:	0004      	movs	r4, r0
 800ad28:	0008      	movs	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7fa fcca 	bl	80056c4 <_close>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d103      	bne.n	800ad3c <_close_r+0x1c>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d000      	beq.n	800ad3c <_close_r+0x1c>
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
 800ad3e:	46c0      	nop			@ (mov r8, r8)
 800ad40:	200005e0 	.word	0x200005e0

0800ad44 <_lseek_r>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	0004      	movs	r4, r0
 800ad48:	0008      	movs	r0, r1
 800ad4a:	0011      	movs	r1, r2
 800ad4c:	001a      	movs	r2, r3
 800ad4e:	2300      	movs	r3, #0
 800ad50:	4d05      	ldr	r5, [pc, #20]	@ (800ad68 <_lseek_r+0x24>)
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	f7fa fcd7 	bl	8005706 <_lseek>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d103      	bne.n	800ad64 <_lseek_r+0x20>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d000      	beq.n	800ad64 <_lseek_r+0x20>
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	bd70      	pop	{r4, r5, r6, pc}
 800ad66:	46c0      	nop			@ (mov r8, r8)
 800ad68:	200005e0 	.word	0x200005e0

0800ad6c <_read_r>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	0004      	movs	r4, r0
 800ad70:	0008      	movs	r0, r1
 800ad72:	0011      	movs	r1, r2
 800ad74:	001a      	movs	r2, r3
 800ad76:	2300      	movs	r3, #0
 800ad78:	4d05      	ldr	r5, [pc, #20]	@ (800ad90 <_read_r+0x24>)
 800ad7a:	602b      	str	r3, [r5, #0]
 800ad7c:	f7fa fc69 	bl	8005652 <_read>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d103      	bne.n	800ad8c <_read_r+0x20>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d000      	beq.n	800ad8c <_read_r+0x20>
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}
 800ad8e:	46c0      	nop			@ (mov r8, r8)
 800ad90:	200005e0 	.word	0x200005e0

0800ad94 <_write_r>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	0004      	movs	r4, r0
 800ad98:	0008      	movs	r0, r1
 800ad9a:	0011      	movs	r1, r2
 800ad9c:	001a      	movs	r2, r3
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4d05      	ldr	r5, [pc, #20]	@ (800adb8 <_write_r+0x24>)
 800ada2:	602b      	str	r3, [r5, #0]
 800ada4:	f7fa fc72 	bl	800568c <_write>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d103      	bne.n	800adb4 <_write_r+0x20>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d000      	beq.n	800adb4 <_write_r+0x20>
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	bd70      	pop	{r4, r5, r6, pc}
 800adb6:	46c0      	nop			@ (mov r8, r8)
 800adb8:	200005e0 	.word	0x200005e0

0800adbc <__errno>:
 800adbc:	4b01      	ldr	r3, [pc, #4]	@ (800adc4 <__errno+0x8>)
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	4770      	bx	lr
 800adc2:	46c0      	nop			@ (mov r8, r8)
 800adc4:	20000018 	.word	0x20000018

0800adc8 <__libc_init_array>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	2600      	movs	r6, #0
 800adcc:	4c0c      	ldr	r4, [pc, #48]	@ (800ae00 <__libc_init_array+0x38>)
 800adce:	4d0d      	ldr	r5, [pc, #52]	@ (800ae04 <__libc_init_array+0x3c>)
 800add0:	1b64      	subs	r4, r4, r5
 800add2:	10a4      	asrs	r4, r4, #2
 800add4:	42a6      	cmp	r6, r4
 800add6:	d109      	bne.n	800adec <__libc_init_array+0x24>
 800add8:	2600      	movs	r6, #0
 800adda:	f001 ff5f 	bl	800cc9c <_init>
 800adde:	4c0a      	ldr	r4, [pc, #40]	@ (800ae08 <__libc_init_array+0x40>)
 800ade0:	4d0a      	ldr	r5, [pc, #40]	@ (800ae0c <__libc_init_array+0x44>)
 800ade2:	1b64      	subs	r4, r4, r5
 800ade4:	10a4      	asrs	r4, r4, #2
 800ade6:	42a6      	cmp	r6, r4
 800ade8:	d105      	bne.n	800adf6 <__libc_init_array+0x2e>
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	00b3      	lsls	r3, r6, #2
 800adee:	58eb      	ldr	r3, [r5, r3]
 800adf0:	4798      	blx	r3
 800adf2:	3601      	adds	r6, #1
 800adf4:	e7ee      	b.n	800add4 <__libc_init_array+0xc>
 800adf6:	00b3      	lsls	r3, r6, #2
 800adf8:	58eb      	ldr	r3, [r5, r3]
 800adfa:	4798      	blx	r3
 800adfc:	3601      	adds	r6, #1
 800adfe:	e7f2      	b.n	800ade6 <__libc_init_array+0x1e>
 800ae00:	0800d128 	.word	0x0800d128
 800ae04:	0800d128 	.word	0x0800d128
 800ae08:	0800d12c 	.word	0x0800d12c
 800ae0c:	0800d128 	.word	0x0800d128

0800ae10 <__retarget_lock_init_recursive>:
 800ae10:	4770      	bx	lr

0800ae12 <__retarget_lock_acquire_recursive>:
 800ae12:	4770      	bx	lr

0800ae14 <__retarget_lock_release_recursive>:
 800ae14:	4770      	bx	lr

0800ae16 <memchr>:
 800ae16:	b2c9      	uxtb	r1, r1
 800ae18:	1882      	adds	r2, r0, r2
 800ae1a:	4290      	cmp	r0, r2
 800ae1c:	d101      	bne.n	800ae22 <memchr+0xc>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	4770      	bx	lr
 800ae22:	7803      	ldrb	r3, [r0, #0]
 800ae24:	428b      	cmp	r3, r1
 800ae26:	d0fb      	beq.n	800ae20 <memchr+0xa>
 800ae28:	3001      	adds	r0, #1
 800ae2a:	e7f6      	b.n	800ae1a <memchr+0x4>

0800ae2c <quorem>:
 800ae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2e:	6902      	ldr	r2, [r0, #16]
 800ae30:	690f      	ldr	r7, [r1, #16]
 800ae32:	b087      	sub	sp, #28
 800ae34:	0006      	movs	r6, r0
 800ae36:	000b      	movs	r3, r1
 800ae38:	2000      	movs	r0, #0
 800ae3a:	9102      	str	r1, [sp, #8]
 800ae3c:	42ba      	cmp	r2, r7
 800ae3e:	db6d      	blt.n	800af1c <quorem+0xf0>
 800ae40:	3f01      	subs	r7, #1
 800ae42:	00bc      	lsls	r4, r7, #2
 800ae44:	3314      	adds	r3, #20
 800ae46:	9305      	str	r3, [sp, #20]
 800ae48:	191b      	adds	r3, r3, r4
 800ae4a:	9303      	str	r3, [sp, #12]
 800ae4c:	0033      	movs	r3, r6
 800ae4e:	3314      	adds	r3, #20
 800ae50:	191c      	adds	r4, r3, r4
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	9304      	str	r3, [sp, #16]
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	9804      	ldr	r0, [sp, #16]
 800ae5c:	681d      	ldr	r5, [r3, #0]
 800ae5e:	3501      	adds	r5, #1
 800ae60:	0029      	movs	r1, r5
 800ae62:	f7f5 f96d 	bl	8000140 <__udivsi3>
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	9000      	str	r0, [sp, #0]
 800ae6a:	42ab      	cmp	r3, r5
 800ae6c:	d32b      	bcc.n	800aec6 <quorem+0x9a>
 800ae6e:	9b05      	ldr	r3, [sp, #20]
 800ae70:	9d01      	ldr	r5, [sp, #4]
 800ae72:	469c      	mov	ip, r3
 800ae74:	2300      	movs	r3, #0
 800ae76:	9305      	str	r3, [sp, #20]
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	4662      	mov	r2, ip
 800ae7c:	ca08      	ldmia	r2!, {r3}
 800ae7e:	6828      	ldr	r0, [r5, #0]
 800ae80:	4694      	mov	ip, r2
 800ae82:	9a00      	ldr	r2, [sp, #0]
 800ae84:	b299      	uxth	r1, r3
 800ae86:	4351      	muls	r1, r2
 800ae88:	9a05      	ldr	r2, [sp, #20]
 800ae8a:	0c1b      	lsrs	r3, r3, #16
 800ae8c:	1889      	adds	r1, r1, r2
 800ae8e:	9a00      	ldr	r2, [sp, #0]
 800ae90:	4353      	muls	r3, r2
 800ae92:	0c0a      	lsrs	r2, r1, #16
 800ae94:	189b      	adds	r3, r3, r2
 800ae96:	0c1a      	lsrs	r2, r3, #16
 800ae98:	b289      	uxth	r1, r1
 800ae9a:	9205      	str	r2, [sp, #20]
 800ae9c:	b282      	uxth	r2, r0
 800ae9e:	1a52      	subs	r2, r2, r1
 800aea0:	9904      	ldr	r1, [sp, #16]
 800aea2:	0c00      	lsrs	r0, r0, #16
 800aea4:	1852      	adds	r2, r2, r1
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	1411      	asrs	r1, r2, #16
 800aeaa:	1ac3      	subs	r3, r0, r3
 800aeac:	185b      	adds	r3, r3, r1
 800aeae:	1419      	asrs	r1, r3, #16
 800aeb0:	b292      	uxth	r2, r2
 800aeb2:	041b      	lsls	r3, r3, #16
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	9104      	str	r1, [sp, #16]
 800aeba:	c504      	stmia	r5!, {r2}
 800aebc:	4563      	cmp	r3, ip
 800aebe:	d2dc      	bcs.n	800ae7a <quorem+0x4e>
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d030      	beq.n	800af28 <quorem+0xfc>
 800aec6:	0030      	movs	r0, r6
 800aec8:	9902      	ldr	r1, [sp, #8]
 800aeca:	f001 f9c5 	bl	800c258 <__mcmp>
 800aece:	2800      	cmp	r0, #0
 800aed0:	db23      	blt.n	800af1a <quorem+0xee>
 800aed2:	0034      	movs	r4, r6
 800aed4:	2500      	movs	r5, #0
 800aed6:	9902      	ldr	r1, [sp, #8]
 800aed8:	3414      	adds	r4, #20
 800aeda:	3114      	adds	r1, #20
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	c901      	ldmia	r1!, {r0}
 800aee0:	9302      	str	r3, [sp, #8]
 800aee2:	466b      	mov	r3, sp
 800aee4:	891b      	ldrh	r3, [r3, #8]
 800aee6:	b282      	uxth	r2, r0
 800aee8:	1a9a      	subs	r2, r3, r2
 800aeea:	9b02      	ldr	r3, [sp, #8]
 800aeec:	1952      	adds	r2, r2, r5
 800aeee:	0c00      	lsrs	r0, r0, #16
 800aef0:	0c1b      	lsrs	r3, r3, #16
 800aef2:	1a1b      	subs	r3, r3, r0
 800aef4:	1410      	asrs	r0, r2, #16
 800aef6:	181b      	adds	r3, r3, r0
 800aef8:	141d      	asrs	r5, r3, #16
 800aefa:	b292      	uxth	r2, r2
 800aefc:	041b      	lsls	r3, r3, #16
 800aefe:	431a      	orrs	r2, r3
 800af00:	9b03      	ldr	r3, [sp, #12]
 800af02:	c404      	stmia	r4!, {r2}
 800af04:	428b      	cmp	r3, r1
 800af06:	d2e9      	bcs.n	800aedc <quorem+0xb0>
 800af08:	9a01      	ldr	r2, [sp, #4]
 800af0a:	00bb      	lsls	r3, r7, #2
 800af0c:	18d3      	adds	r3, r2, r3
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	2a00      	cmp	r2, #0
 800af12:	d013      	beq.n	800af3c <quorem+0x110>
 800af14:	9b00      	ldr	r3, [sp, #0]
 800af16:	3301      	adds	r3, #1
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	9800      	ldr	r0, [sp, #0]
 800af1c:	b007      	add	sp, #28
 800af1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <quorem+0x104>
 800af26:	3f01      	subs	r7, #1
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	3c04      	subs	r4, #4
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d3f7      	bcc.n	800af20 <quorem+0xf4>
 800af30:	6137      	str	r7, [r6, #16]
 800af32:	e7c8      	b.n	800aec6 <quorem+0x9a>
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	2a00      	cmp	r2, #0
 800af38:	d104      	bne.n	800af44 <quorem+0x118>
 800af3a:	3f01      	subs	r7, #1
 800af3c:	9a01      	ldr	r2, [sp, #4]
 800af3e:	3b04      	subs	r3, #4
 800af40:	429a      	cmp	r2, r3
 800af42:	d3f7      	bcc.n	800af34 <quorem+0x108>
 800af44:	6137      	str	r7, [r6, #16]
 800af46:	e7e5      	b.n	800af14 <quorem+0xe8>

0800af48 <_dtoa_r>:
 800af48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af4a:	0014      	movs	r4, r2
 800af4c:	001d      	movs	r5, r3
 800af4e:	69c6      	ldr	r6, [r0, #28]
 800af50:	b09d      	sub	sp, #116	@ 0x74
 800af52:	940a      	str	r4, [sp, #40]	@ 0x28
 800af54:	950b      	str	r5, [sp, #44]	@ 0x2c
 800af56:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800af58:	9003      	str	r0, [sp, #12]
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	d10f      	bne.n	800af7e <_dtoa_r+0x36>
 800af5e:	2010      	movs	r0, #16
 800af60:	f000 fe30 	bl	800bbc4 <malloc>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	1e02      	subs	r2, r0, #0
 800af68:	61d8      	str	r0, [r3, #28]
 800af6a:	d104      	bne.n	800af76 <_dtoa_r+0x2e>
 800af6c:	21ef      	movs	r1, #239	@ 0xef
 800af6e:	4bc7      	ldr	r3, [pc, #796]	@ (800b28c <_dtoa_r+0x344>)
 800af70:	48c7      	ldr	r0, [pc, #796]	@ (800b290 <_dtoa_r+0x348>)
 800af72:	f001 fd39 	bl	800c9e8 <__assert_func>
 800af76:	6046      	str	r6, [r0, #4]
 800af78:	6086      	str	r6, [r0, #8]
 800af7a:	6006      	str	r6, [r0, #0]
 800af7c:	60c6      	str	r6, [r0, #12]
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	6819      	ldr	r1, [r3, #0]
 800af84:	2900      	cmp	r1, #0
 800af86:	d00b      	beq.n	800afa0 <_dtoa_r+0x58>
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	2301      	movs	r3, #1
 800af8c:	4093      	lsls	r3, r2
 800af8e:	604a      	str	r2, [r1, #4]
 800af90:	608b      	str	r3, [r1, #8]
 800af92:	9803      	ldr	r0, [sp, #12]
 800af94:	f000 ff16 	bl	800bdc4 <_Bfree>
 800af98:	2200      	movs	r2, #0
 800af9a:	9b03      	ldr	r3, [sp, #12]
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	da1e      	bge.n	800afe2 <_dtoa_r+0x9a>
 800afa4:	2301      	movs	r3, #1
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	006b      	lsls	r3, r5, #1
 800afaa:	085b      	lsrs	r3, r3, #1
 800afac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800afb0:	4bb8      	ldr	r3, [pc, #736]	@ (800b294 <_dtoa_r+0x34c>)
 800afb2:	4ab8      	ldr	r2, [pc, #736]	@ (800b294 <_dtoa_r+0x34c>)
 800afb4:	403b      	ands	r3, r7
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d116      	bne.n	800afe8 <_dtoa_r+0xa0>
 800afba:	4bb7      	ldr	r3, [pc, #732]	@ (800b298 <_dtoa_r+0x350>)
 800afbc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800afbe:	6013      	str	r3, [r2, #0]
 800afc0:	033b      	lsls	r3, r7, #12
 800afc2:	0b1b      	lsrs	r3, r3, #12
 800afc4:	4323      	orrs	r3, r4
 800afc6:	d101      	bne.n	800afcc <_dtoa_r+0x84>
 800afc8:	f000 fd83 	bl	800bad2 <_dtoa_r+0xb8a>
 800afcc:	4bb3      	ldr	r3, [pc, #716]	@ (800b29c <_dtoa_r+0x354>)
 800afce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800afd0:	9308      	str	r3, [sp, #32]
 800afd2:	2a00      	cmp	r2, #0
 800afd4:	d002      	beq.n	800afdc <_dtoa_r+0x94>
 800afd6:	4bb2      	ldr	r3, [pc, #712]	@ (800b2a0 <_dtoa_r+0x358>)
 800afd8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	9808      	ldr	r0, [sp, #32]
 800afde:	b01d      	add	sp, #116	@ 0x74
 800afe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe2:	2300      	movs	r3, #0
 800afe4:	603b      	str	r3, [r7, #0]
 800afe6:	e7e2      	b.n	800afae <_dtoa_r+0x66>
 800afe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afec:	9212      	str	r2, [sp, #72]	@ 0x48
 800afee:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aff0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aff2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aff4:	2200      	movs	r2, #0
 800aff6:	2300      	movs	r3, #0
 800aff8:	f7f5 fa28 	bl	800044c <__aeabi_dcmpeq>
 800affc:	1e06      	subs	r6, r0, #0
 800affe:	d00b      	beq.n	800b018 <_dtoa_r+0xd0>
 800b000:	2301      	movs	r3, #1
 800b002:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <_dtoa_r+0xca>
 800b00c:	4ba5      	ldr	r3, [pc, #660]	@ (800b2a4 <_dtoa_r+0x35c>)
 800b00e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	4ba5      	ldr	r3, [pc, #660]	@ (800b2a8 <_dtoa_r+0x360>)
 800b014:	9308      	str	r3, [sp, #32]
 800b016:	e7e1      	b.n	800afdc <_dtoa_r+0x94>
 800b018:	ab1a      	add	r3, sp, #104	@ 0x68
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	9803      	ldr	r0, [sp, #12]
 800b022:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b026:	f001 f9cd 	bl	800c3c4 <__d2b>
 800b02a:	007a      	lsls	r2, r7, #1
 800b02c:	9005      	str	r0, [sp, #20]
 800b02e:	0d52      	lsrs	r2, r2, #21
 800b030:	d100      	bne.n	800b034 <_dtoa_r+0xec>
 800b032:	e07b      	b.n	800b12c <_dtoa_r+0x1e4>
 800b034:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b036:	9618      	str	r6, [sp, #96]	@ 0x60
 800b038:	0319      	lsls	r1, r3, #12
 800b03a:	4b9c      	ldr	r3, [pc, #624]	@ (800b2ac <_dtoa_r+0x364>)
 800b03c:	0b09      	lsrs	r1, r1, #12
 800b03e:	430b      	orrs	r3, r1
 800b040:	499b      	ldr	r1, [pc, #620]	@ (800b2b0 <_dtoa_r+0x368>)
 800b042:	1857      	adds	r7, r2, r1
 800b044:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b046:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b048:	0019      	movs	r1, r3
 800b04a:	2200      	movs	r2, #0
 800b04c:	4b99      	ldr	r3, [pc, #612]	@ (800b2b4 <_dtoa_r+0x36c>)
 800b04e:	f7f6 ff01 	bl	8001e54 <__aeabi_dsub>
 800b052:	4a99      	ldr	r2, [pc, #612]	@ (800b2b8 <_dtoa_r+0x370>)
 800b054:	4b99      	ldr	r3, [pc, #612]	@ (800b2bc <_dtoa_r+0x374>)
 800b056:	f7f6 fc35 	bl	80018c4 <__aeabi_dmul>
 800b05a:	4a99      	ldr	r2, [pc, #612]	@ (800b2c0 <_dtoa_r+0x378>)
 800b05c:	4b99      	ldr	r3, [pc, #612]	@ (800b2c4 <_dtoa_r+0x37c>)
 800b05e:	f7f5 fc89 	bl	8000974 <__aeabi_dadd>
 800b062:	0004      	movs	r4, r0
 800b064:	0038      	movs	r0, r7
 800b066:	000d      	movs	r5, r1
 800b068:	f7f7 faee 	bl	8002648 <__aeabi_i2d>
 800b06c:	4a96      	ldr	r2, [pc, #600]	@ (800b2c8 <_dtoa_r+0x380>)
 800b06e:	4b97      	ldr	r3, [pc, #604]	@ (800b2cc <_dtoa_r+0x384>)
 800b070:	f7f6 fc28 	bl	80018c4 <__aeabi_dmul>
 800b074:	0002      	movs	r2, r0
 800b076:	000b      	movs	r3, r1
 800b078:	0020      	movs	r0, r4
 800b07a:	0029      	movs	r1, r5
 800b07c:	f7f5 fc7a 	bl	8000974 <__aeabi_dadd>
 800b080:	0004      	movs	r4, r0
 800b082:	000d      	movs	r5, r1
 800b084:	f7f7 faa4 	bl	80025d0 <__aeabi_d2iz>
 800b088:	2200      	movs	r2, #0
 800b08a:	9004      	str	r0, [sp, #16]
 800b08c:	2300      	movs	r3, #0
 800b08e:	0020      	movs	r0, r4
 800b090:	0029      	movs	r1, r5
 800b092:	f7f5 f9e1 	bl	8000458 <__aeabi_dcmplt>
 800b096:	2800      	cmp	r0, #0
 800b098:	d00b      	beq.n	800b0b2 <_dtoa_r+0x16a>
 800b09a:	9804      	ldr	r0, [sp, #16]
 800b09c:	f7f7 fad4 	bl	8002648 <__aeabi_i2d>
 800b0a0:	002b      	movs	r3, r5
 800b0a2:	0022      	movs	r2, r4
 800b0a4:	f7f5 f9d2 	bl	800044c <__aeabi_dcmpeq>
 800b0a8:	4243      	negs	r3, r0
 800b0aa:	4158      	adcs	r0, r3
 800b0ac:	9b04      	ldr	r3, [sp, #16]
 800b0ae:	1a1b      	subs	r3, r3, r0
 800b0b0:	9304      	str	r3, [sp, #16]
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	2b16      	cmp	r3, #22
 800b0ba:	d810      	bhi.n	800b0de <_dtoa_r+0x196>
 800b0bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b0be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b0c0:	9a04      	ldr	r2, [sp, #16]
 800b0c2:	4b83      	ldr	r3, [pc, #524]	@ (800b2d0 <_dtoa_r+0x388>)
 800b0c4:	00d2      	lsls	r2, r2, #3
 800b0c6:	189b      	adds	r3, r3, r2
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f7f5 f9c4 	bl	8000458 <__aeabi_dcmplt>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d047      	beq.n	800b164 <_dtoa_r+0x21c>
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	9304      	str	r3, [sp, #16]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b0de:	2200      	movs	r2, #0
 800b0e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b0e2:	9206      	str	r2, [sp, #24]
 800b0e4:	1bdb      	subs	r3, r3, r7
 800b0e6:	1e5a      	subs	r2, r3, #1
 800b0e8:	d53e      	bpl.n	800b168 <_dtoa_r+0x220>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	9306      	str	r3, [sp, #24]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	930d      	str	r3, [sp, #52]	@ 0x34
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	db38      	blt.n	800b16c <_dtoa_r+0x224>
 800b0fa:	9a04      	ldr	r2, [sp, #16]
 800b0fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0fe:	4694      	mov	ip, r2
 800b100:	4463      	add	r3, ip
 800b102:	930d      	str	r3, [sp, #52]	@ 0x34
 800b104:	2300      	movs	r3, #0
 800b106:	9214      	str	r2, [sp, #80]	@ 0x50
 800b108:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b10a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b10c:	2401      	movs	r4, #1
 800b10e:	2b09      	cmp	r3, #9
 800b110:	d867      	bhi.n	800b1e2 <_dtoa_r+0x29a>
 800b112:	2b05      	cmp	r3, #5
 800b114:	dd02      	ble.n	800b11c <_dtoa_r+0x1d4>
 800b116:	2400      	movs	r4, #0
 800b118:	3b04      	subs	r3, #4
 800b11a:	9322      	str	r3, [sp, #136]	@ 0x88
 800b11c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b11e:	1e98      	subs	r0, r3, #2
 800b120:	2803      	cmp	r0, #3
 800b122:	d867      	bhi.n	800b1f4 <_dtoa_r+0x2ac>
 800b124:	f7f4 fff8 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b128:	5b383a2b 	.word	0x5b383a2b
 800b12c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b12e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b130:	18f6      	adds	r6, r6, r3
 800b132:	4b68      	ldr	r3, [pc, #416]	@ (800b2d4 <_dtoa_r+0x38c>)
 800b134:	18f2      	adds	r2, r6, r3
 800b136:	2a20      	cmp	r2, #32
 800b138:	dd0f      	ble.n	800b15a <_dtoa_r+0x212>
 800b13a:	2340      	movs	r3, #64	@ 0x40
 800b13c:	1a9b      	subs	r3, r3, r2
 800b13e:	409f      	lsls	r7, r3
 800b140:	4b65      	ldr	r3, [pc, #404]	@ (800b2d8 <_dtoa_r+0x390>)
 800b142:	0038      	movs	r0, r7
 800b144:	18f3      	adds	r3, r6, r3
 800b146:	40dc      	lsrs	r4, r3
 800b148:	4320      	orrs	r0, r4
 800b14a:	f7f7 faab 	bl	80026a4 <__aeabi_ui2d>
 800b14e:	2201      	movs	r2, #1
 800b150:	4b62      	ldr	r3, [pc, #392]	@ (800b2dc <_dtoa_r+0x394>)
 800b152:	1e77      	subs	r7, r6, #1
 800b154:	18cb      	adds	r3, r1, r3
 800b156:	9218      	str	r2, [sp, #96]	@ 0x60
 800b158:	e776      	b.n	800b048 <_dtoa_r+0x100>
 800b15a:	2320      	movs	r3, #32
 800b15c:	0020      	movs	r0, r4
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	4098      	lsls	r0, r3
 800b162:	e7f2      	b.n	800b14a <_dtoa_r+0x202>
 800b164:	9015      	str	r0, [sp, #84]	@ 0x54
 800b166:	e7ba      	b.n	800b0de <_dtoa_r+0x196>
 800b168:	920d      	str	r2, [sp, #52]	@ 0x34
 800b16a:	e7c3      	b.n	800b0f4 <_dtoa_r+0x1ac>
 800b16c:	9b06      	ldr	r3, [sp, #24]
 800b16e:	9a04      	ldr	r2, [sp, #16]
 800b170:	1a9b      	subs	r3, r3, r2
 800b172:	9306      	str	r3, [sp, #24]
 800b174:	4253      	negs	r3, r2
 800b176:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b178:	2300      	movs	r3, #0
 800b17a:	9314      	str	r3, [sp, #80]	@ 0x50
 800b17c:	e7c5      	b.n	800b10a <_dtoa_r+0x1c2>
 800b17e:	2300      	movs	r3, #0
 800b180:	9310      	str	r3, [sp, #64]	@ 0x40
 800b182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b184:	930e      	str	r3, [sp, #56]	@ 0x38
 800b186:	9309      	str	r3, [sp, #36]	@ 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dc13      	bgt.n	800b1b4 <_dtoa_r+0x26c>
 800b18c:	2301      	movs	r3, #1
 800b18e:	001a      	movs	r2, r3
 800b190:	930e      	str	r3, [sp, #56]	@ 0x38
 800b192:	9309      	str	r3, [sp, #36]	@ 0x24
 800b194:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b196:	e00d      	b.n	800b1b4 <_dtoa_r+0x26c>
 800b198:	2301      	movs	r3, #1
 800b19a:	e7f1      	b.n	800b180 <_dtoa_r+0x238>
 800b19c:	2300      	movs	r3, #0
 800b19e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1a2:	4694      	mov	ip, r2
 800b1a4:	9b04      	ldr	r3, [sp, #16]
 800b1a6:	4463      	add	r3, ip
 800b1a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	dc00      	bgt.n	800b1b4 <_dtoa_r+0x26c>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	9a03      	ldr	r2, [sp, #12]
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	69d0      	ldr	r0, [r2, #28]
 800b1ba:	2204      	movs	r2, #4
 800b1bc:	0015      	movs	r5, r2
 800b1be:	3514      	adds	r5, #20
 800b1c0:	429d      	cmp	r5, r3
 800b1c2:	d91b      	bls.n	800b1fc <_dtoa_r+0x2b4>
 800b1c4:	6041      	str	r1, [r0, #4]
 800b1c6:	9803      	ldr	r0, [sp, #12]
 800b1c8:	f000 fdb8 	bl	800bd3c <_Balloc>
 800b1cc:	9008      	str	r0, [sp, #32]
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d117      	bne.n	800b202 <_dtoa_r+0x2ba>
 800b1d2:	21b0      	movs	r1, #176	@ 0xb0
 800b1d4:	4b42      	ldr	r3, [pc, #264]	@ (800b2e0 <_dtoa_r+0x398>)
 800b1d6:	482e      	ldr	r0, [pc, #184]	@ (800b290 <_dtoa_r+0x348>)
 800b1d8:	9a08      	ldr	r2, [sp, #32]
 800b1da:	31ff      	adds	r1, #255	@ 0xff
 800b1dc:	e6c9      	b.n	800af72 <_dtoa_r+0x2a>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e7dd      	b.n	800b19e <_dtoa_r+0x256>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9410      	str	r4, [sp, #64]	@ 0x40
 800b1e6:	9322      	str	r3, [sp, #136]	@ 0x88
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	3313      	adds	r3, #19
 800b1f2:	e7cf      	b.n	800b194 <_dtoa_r+0x24c>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1f8:	3b02      	subs	r3, #2
 800b1fa:	e7f6      	b.n	800b1ea <_dtoa_r+0x2a2>
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	0052      	lsls	r2, r2, #1
 800b200:	e7dc      	b.n	800b1bc <_dtoa_r+0x274>
 800b202:	9b03      	ldr	r3, [sp, #12]
 800b204:	9a08      	ldr	r2, [sp, #32]
 800b206:	69db      	ldr	r3, [r3, #28]
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b20c:	2b0e      	cmp	r3, #14
 800b20e:	d900      	bls.n	800b212 <_dtoa_r+0x2ca>
 800b210:	e0d9      	b.n	800b3c6 <_dtoa_r+0x47e>
 800b212:	2c00      	cmp	r4, #0
 800b214:	d100      	bne.n	800b218 <_dtoa_r+0x2d0>
 800b216:	e0d6      	b.n	800b3c6 <_dtoa_r+0x47e>
 800b218:	9b04      	ldr	r3, [sp, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dd64      	ble.n	800b2e8 <_dtoa_r+0x3a0>
 800b21e:	210f      	movs	r1, #15
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	4b2b      	ldr	r3, [pc, #172]	@ (800b2d0 <_dtoa_r+0x388>)
 800b224:	400a      	ands	r2, r1
 800b226:	00d2      	lsls	r2, r2, #3
 800b228:	189b      	adds	r3, r3, r2
 800b22a:	681e      	ldr	r6, [r3, #0]
 800b22c:	685f      	ldr	r7, [r3, #4]
 800b22e:	9b04      	ldr	r3, [sp, #16]
 800b230:	2402      	movs	r4, #2
 800b232:	111d      	asrs	r5, r3, #4
 800b234:	05db      	lsls	r3, r3, #23
 800b236:	d50a      	bpl.n	800b24e <_dtoa_r+0x306>
 800b238:	4b2a      	ldr	r3, [pc, #168]	@ (800b2e4 <_dtoa_r+0x39c>)
 800b23a:	400d      	ands	r5, r1
 800b23c:	6a1a      	ldr	r2, [r3, #32]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b240:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b242:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b244:	f7f5 fefa 	bl	800103c <__aeabi_ddiv>
 800b248:	900a      	str	r0, [sp, #40]	@ 0x28
 800b24a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b24c:	3401      	adds	r4, #1
 800b24e:	4b25      	ldr	r3, [pc, #148]	@ (800b2e4 <_dtoa_r+0x39c>)
 800b250:	930c      	str	r3, [sp, #48]	@ 0x30
 800b252:	2d00      	cmp	r5, #0
 800b254:	d108      	bne.n	800b268 <_dtoa_r+0x320>
 800b256:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b258:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b25a:	0032      	movs	r2, r6
 800b25c:	003b      	movs	r3, r7
 800b25e:	f7f5 feed 	bl	800103c <__aeabi_ddiv>
 800b262:	900a      	str	r0, [sp, #40]	@ 0x28
 800b264:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b266:	e05a      	b.n	800b31e <_dtoa_r+0x3d6>
 800b268:	2301      	movs	r3, #1
 800b26a:	421d      	tst	r5, r3
 800b26c:	d009      	beq.n	800b282 <_dtoa_r+0x33a>
 800b26e:	18e4      	adds	r4, r4, r3
 800b270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b272:	0030      	movs	r0, r6
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	0039      	movs	r1, r7
 800b27a:	f7f6 fb23 	bl	80018c4 <__aeabi_dmul>
 800b27e:	0006      	movs	r6, r0
 800b280:	000f      	movs	r7, r1
 800b282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b284:	106d      	asrs	r5, r5, #1
 800b286:	3308      	adds	r3, #8
 800b288:	e7e2      	b.n	800b250 <_dtoa_r+0x308>
 800b28a:	46c0      	nop			@ (mov r8, r8)
 800b28c:	0800cded 	.word	0x0800cded
 800b290:	0800ce04 	.word	0x0800ce04
 800b294:	7ff00000 	.word	0x7ff00000
 800b298:	0000270f 	.word	0x0000270f
 800b29c:	0800cde9 	.word	0x0800cde9
 800b2a0:	0800cdec 	.word	0x0800cdec
 800b2a4:	0800cdbd 	.word	0x0800cdbd
 800b2a8:	0800cdbc 	.word	0x0800cdbc
 800b2ac:	3ff00000 	.word	0x3ff00000
 800b2b0:	fffffc01 	.word	0xfffffc01
 800b2b4:	3ff80000 	.word	0x3ff80000
 800b2b8:	636f4361 	.word	0x636f4361
 800b2bc:	3fd287a7 	.word	0x3fd287a7
 800b2c0:	8b60c8b3 	.word	0x8b60c8b3
 800b2c4:	3fc68a28 	.word	0x3fc68a28
 800b2c8:	509f79fb 	.word	0x509f79fb
 800b2cc:	3fd34413 	.word	0x3fd34413
 800b2d0:	0800cf00 	.word	0x0800cf00
 800b2d4:	00000432 	.word	0x00000432
 800b2d8:	00000412 	.word	0x00000412
 800b2dc:	fe100000 	.word	0xfe100000
 800b2e0:	0800ce5c 	.word	0x0800ce5c
 800b2e4:	0800ced8 	.word	0x0800ced8
 800b2e8:	9b04      	ldr	r3, [sp, #16]
 800b2ea:	2402      	movs	r4, #2
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d016      	beq.n	800b31e <_dtoa_r+0x3d6>
 800b2f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b2f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b2f4:	220f      	movs	r2, #15
 800b2f6:	425d      	negs	r5, r3
 800b2f8:	402a      	ands	r2, r5
 800b2fa:	4bd7      	ldr	r3, [pc, #860]	@ (800b658 <_dtoa_r+0x710>)
 800b2fc:	00d2      	lsls	r2, r2, #3
 800b2fe:	189b      	adds	r3, r3, r2
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f7f6 fade 	bl	80018c4 <__aeabi_dmul>
 800b308:	2701      	movs	r7, #1
 800b30a:	2300      	movs	r3, #0
 800b30c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b30e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b310:	4ed2      	ldr	r6, [pc, #840]	@ (800b65c <_dtoa_r+0x714>)
 800b312:	112d      	asrs	r5, r5, #4
 800b314:	2d00      	cmp	r5, #0
 800b316:	d000      	beq.n	800b31a <_dtoa_r+0x3d2>
 800b318:	e0ba      	b.n	800b490 <_dtoa_r+0x548>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1a1      	bne.n	800b262 <_dtoa_r+0x31a>
 800b31e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b320:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b322:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b324:	2b00      	cmp	r3, #0
 800b326:	d100      	bne.n	800b32a <_dtoa_r+0x3e2>
 800b328:	e0bd      	b.n	800b4a6 <_dtoa_r+0x55e>
 800b32a:	2200      	movs	r2, #0
 800b32c:	0030      	movs	r0, r6
 800b32e:	0039      	movs	r1, r7
 800b330:	4bcb      	ldr	r3, [pc, #812]	@ (800b660 <_dtoa_r+0x718>)
 800b332:	f7f5 f891 	bl	8000458 <__aeabi_dcmplt>
 800b336:	2800      	cmp	r0, #0
 800b338:	d100      	bne.n	800b33c <_dtoa_r+0x3f4>
 800b33a:	e0b4      	b.n	800b4a6 <_dtoa_r+0x55e>
 800b33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d100      	bne.n	800b344 <_dtoa_r+0x3fc>
 800b342:	e0b0      	b.n	800b4a6 <_dtoa_r+0x55e>
 800b344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd39      	ble.n	800b3be <_dtoa_r+0x476>
 800b34a:	9b04      	ldr	r3, [sp, #16]
 800b34c:	2200      	movs	r2, #0
 800b34e:	3b01      	subs	r3, #1
 800b350:	930c      	str	r3, [sp, #48]	@ 0x30
 800b352:	0030      	movs	r0, r6
 800b354:	4bc3      	ldr	r3, [pc, #780]	@ (800b664 <_dtoa_r+0x71c>)
 800b356:	0039      	movs	r1, r7
 800b358:	f7f6 fab4 	bl	80018c4 <__aeabi_dmul>
 800b35c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b35e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b362:	3401      	adds	r4, #1
 800b364:	0020      	movs	r0, r4
 800b366:	9311      	str	r3, [sp, #68]	@ 0x44
 800b368:	f7f7 f96e 	bl	8002648 <__aeabi_i2d>
 800b36c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b370:	f7f6 faa8 	bl	80018c4 <__aeabi_dmul>
 800b374:	4bbc      	ldr	r3, [pc, #752]	@ (800b668 <_dtoa_r+0x720>)
 800b376:	2200      	movs	r2, #0
 800b378:	f7f5 fafc 	bl	8000974 <__aeabi_dadd>
 800b37c:	4bbb      	ldr	r3, [pc, #748]	@ (800b66c <_dtoa_r+0x724>)
 800b37e:	0006      	movs	r6, r0
 800b380:	18cf      	adds	r7, r1, r3
 800b382:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b384:	2b00      	cmp	r3, #0
 800b386:	d000      	beq.n	800b38a <_dtoa_r+0x442>
 800b388:	e091      	b.n	800b4ae <_dtoa_r+0x566>
 800b38a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b38c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b38e:	2200      	movs	r2, #0
 800b390:	4bb7      	ldr	r3, [pc, #732]	@ (800b670 <_dtoa_r+0x728>)
 800b392:	f7f6 fd5f 	bl	8001e54 <__aeabi_dsub>
 800b396:	0032      	movs	r2, r6
 800b398:	003b      	movs	r3, r7
 800b39a:	0004      	movs	r4, r0
 800b39c:	000d      	movs	r5, r1
 800b39e:	f7f5 f86f 	bl	8000480 <__aeabi_dcmpgt>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d000      	beq.n	800b3a8 <_dtoa_r+0x460>
 800b3a6:	e29d      	b.n	800b8e4 <_dtoa_r+0x99c>
 800b3a8:	2180      	movs	r1, #128	@ 0x80
 800b3aa:	0609      	lsls	r1, r1, #24
 800b3ac:	187b      	adds	r3, r7, r1
 800b3ae:	0032      	movs	r2, r6
 800b3b0:	0020      	movs	r0, r4
 800b3b2:	0029      	movs	r1, r5
 800b3b4:	f7f5 f850 	bl	8000458 <__aeabi_dcmplt>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d000      	beq.n	800b3be <_dtoa_r+0x476>
 800b3bc:	e130      	b.n	800b620 <_dtoa_r+0x6d8>
 800b3be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3c0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b3c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3c6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	da00      	bge.n	800b3ce <_dtoa_r+0x486>
 800b3cc:	e177      	b.n	800b6be <_dtoa_r+0x776>
 800b3ce:	9a04      	ldr	r2, [sp, #16]
 800b3d0:	2a0e      	cmp	r2, #14
 800b3d2:	dd00      	ble.n	800b3d6 <_dtoa_r+0x48e>
 800b3d4:	e173      	b.n	800b6be <_dtoa_r+0x776>
 800b3d6:	4ba0      	ldr	r3, [pc, #640]	@ (800b658 <_dtoa_r+0x710>)
 800b3d8:	00d2      	lsls	r2, r2, #3
 800b3da:	189b      	adds	r3, r3, r2
 800b3dc:	685c      	ldr	r4, [r3, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	9306      	str	r3, [sp, #24]
 800b3e2:	9407      	str	r4, [sp, #28]
 800b3e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	da03      	bge.n	800b3f2 <_dtoa_r+0x4aa>
 800b3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dc00      	bgt.n	800b3f2 <_dtoa_r+0x4aa>
 800b3f0:	e106      	b.n	800b600 <_dtoa_r+0x6b8>
 800b3f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b3f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f8:	9d08      	ldr	r5, [sp, #32]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	195b      	adds	r3, r3, r5
 800b3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b400:	9a06      	ldr	r2, [sp, #24]
 800b402:	9b07      	ldr	r3, [sp, #28]
 800b404:	0030      	movs	r0, r6
 800b406:	0039      	movs	r1, r7
 800b408:	f7f5 fe18 	bl	800103c <__aeabi_ddiv>
 800b40c:	f7f7 f8e0 	bl	80025d0 <__aeabi_d2iz>
 800b410:	9009      	str	r0, [sp, #36]	@ 0x24
 800b412:	f7f7 f919 	bl	8002648 <__aeabi_i2d>
 800b416:	9a06      	ldr	r2, [sp, #24]
 800b418:	9b07      	ldr	r3, [sp, #28]
 800b41a:	f7f6 fa53 	bl	80018c4 <__aeabi_dmul>
 800b41e:	0002      	movs	r2, r0
 800b420:	000b      	movs	r3, r1
 800b422:	0030      	movs	r0, r6
 800b424:	0039      	movs	r1, r7
 800b426:	f7f6 fd15 	bl	8001e54 <__aeabi_dsub>
 800b42a:	002b      	movs	r3, r5
 800b42c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b42e:	3501      	adds	r5, #1
 800b430:	3230      	adds	r2, #48	@ 0x30
 800b432:	701a      	strb	r2, [r3, #0]
 800b434:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b436:	002c      	movs	r4, r5
 800b438:	429a      	cmp	r2, r3
 800b43a:	d000      	beq.n	800b43e <_dtoa_r+0x4f6>
 800b43c:	e131      	b.n	800b6a2 <_dtoa_r+0x75a>
 800b43e:	0002      	movs	r2, r0
 800b440:	000b      	movs	r3, r1
 800b442:	f7f5 fa97 	bl	8000974 <__aeabi_dadd>
 800b446:	9a06      	ldr	r2, [sp, #24]
 800b448:	9b07      	ldr	r3, [sp, #28]
 800b44a:	0006      	movs	r6, r0
 800b44c:	000f      	movs	r7, r1
 800b44e:	f7f5 f817 	bl	8000480 <__aeabi_dcmpgt>
 800b452:	2800      	cmp	r0, #0
 800b454:	d000      	beq.n	800b458 <_dtoa_r+0x510>
 800b456:	e10f      	b.n	800b678 <_dtoa_r+0x730>
 800b458:	9a06      	ldr	r2, [sp, #24]
 800b45a:	9b07      	ldr	r3, [sp, #28]
 800b45c:	0030      	movs	r0, r6
 800b45e:	0039      	movs	r1, r7
 800b460:	f7f4 fff4 	bl	800044c <__aeabi_dcmpeq>
 800b464:	2800      	cmp	r0, #0
 800b466:	d003      	beq.n	800b470 <_dtoa_r+0x528>
 800b468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b46a:	07dd      	lsls	r5, r3, #31
 800b46c:	d500      	bpl.n	800b470 <_dtoa_r+0x528>
 800b46e:	e103      	b.n	800b678 <_dtoa_r+0x730>
 800b470:	9905      	ldr	r1, [sp, #20]
 800b472:	9803      	ldr	r0, [sp, #12]
 800b474:	f000 fca6 	bl	800bdc4 <_Bfree>
 800b478:	2300      	movs	r3, #0
 800b47a:	7023      	strb	r3, [r4, #0]
 800b47c:	9b04      	ldr	r3, [sp, #16]
 800b47e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b480:	3301      	adds	r3, #1
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b486:	2b00      	cmp	r3, #0
 800b488:	d100      	bne.n	800b48c <_dtoa_r+0x544>
 800b48a:	e5a7      	b.n	800afdc <_dtoa_r+0x94>
 800b48c:	601c      	str	r4, [r3, #0]
 800b48e:	e5a5      	b.n	800afdc <_dtoa_r+0x94>
 800b490:	423d      	tst	r5, r7
 800b492:	d005      	beq.n	800b4a0 <_dtoa_r+0x558>
 800b494:	6832      	ldr	r2, [r6, #0]
 800b496:	6873      	ldr	r3, [r6, #4]
 800b498:	f7f6 fa14 	bl	80018c4 <__aeabi_dmul>
 800b49c:	003b      	movs	r3, r7
 800b49e:	3401      	adds	r4, #1
 800b4a0:	106d      	asrs	r5, r5, #1
 800b4a2:	3608      	adds	r6, #8
 800b4a4:	e736      	b.n	800b314 <_dtoa_r+0x3cc>
 800b4a6:	9b04      	ldr	r3, [sp, #16]
 800b4a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ac:	e75a      	b.n	800b364 <_dtoa_r+0x41c>
 800b4ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b4b0:	4b69      	ldr	r3, [pc, #420]	@ (800b658 <_dtoa_r+0x710>)
 800b4b2:	3a01      	subs	r2, #1
 800b4b4:	00d2      	lsls	r2, r2, #3
 800b4b6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b4b8:	189b      	adds	r3, r3, r2
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	d04c      	beq.n	800b55c <_dtoa_r+0x614>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	496b      	ldr	r1, [pc, #428]	@ (800b674 <_dtoa_r+0x72c>)
 800b4c6:	f7f5 fdb9 	bl	800103c <__aeabi_ddiv>
 800b4ca:	0032      	movs	r2, r6
 800b4cc:	003b      	movs	r3, r7
 800b4ce:	f7f6 fcc1 	bl	8001e54 <__aeabi_dsub>
 800b4d2:	9a08      	ldr	r2, [sp, #32]
 800b4d4:	0006      	movs	r6, r0
 800b4d6:	4694      	mov	ip, r2
 800b4d8:	000f      	movs	r7, r1
 800b4da:	9b08      	ldr	r3, [sp, #32]
 800b4dc:	9316      	str	r3, [sp, #88]	@ 0x58
 800b4de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4e0:	4463      	add	r3, ip
 800b4e2:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4e8:	f7f7 f872 	bl	80025d0 <__aeabi_d2iz>
 800b4ec:	0005      	movs	r5, r0
 800b4ee:	f7f7 f8ab 	bl	8002648 <__aeabi_i2d>
 800b4f2:	0002      	movs	r2, r0
 800b4f4:	000b      	movs	r3, r1
 800b4f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4fa:	f7f6 fcab 	bl	8001e54 <__aeabi_dsub>
 800b4fe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b500:	3530      	adds	r5, #48	@ 0x30
 800b502:	1c5c      	adds	r4, r3, #1
 800b504:	701d      	strb	r5, [r3, #0]
 800b506:	0032      	movs	r2, r6
 800b508:	003b      	movs	r3, r7
 800b50a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b50c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b50e:	f7f4 ffa3 	bl	8000458 <__aeabi_dcmplt>
 800b512:	2800      	cmp	r0, #0
 800b514:	d16a      	bne.n	800b5ec <_dtoa_r+0x6a4>
 800b516:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b518:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b51a:	2000      	movs	r0, #0
 800b51c:	4950      	ldr	r1, [pc, #320]	@ (800b660 <_dtoa_r+0x718>)
 800b51e:	f7f6 fc99 	bl	8001e54 <__aeabi_dsub>
 800b522:	0032      	movs	r2, r6
 800b524:	003b      	movs	r3, r7
 800b526:	f7f4 ff97 	bl	8000458 <__aeabi_dcmplt>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d000      	beq.n	800b530 <_dtoa_r+0x5e8>
 800b52e:	e0a5      	b.n	800b67c <_dtoa_r+0x734>
 800b530:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b532:	42a3      	cmp	r3, r4
 800b534:	d100      	bne.n	800b538 <_dtoa_r+0x5f0>
 800b536:	e742      	b.n	800b3be <_dtoa_r+0x476>
 800b538:	2200      	movs	r2, #0
 800b53a:	0030      	movs	r0, r6
 800b53c:	0039      	movs	r1, r7
 800b53e:	4b49      	ldr	r3, [pc, #292]	@ (800b664 <_dtoa_r+0x71c>)
 800b540:	f7f6 f9c0 	bl	80018c4 <__aeabi_dmul>
 800b544:	2200      	movs	r2, #0
 800b546:	0006      	movs	r6, r0
 800b548:	000f      	movs	r7, r1
 800b54a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b54c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b54e:	4b45      	ldr	r3, [pc, #276]	@ (800b664 <_dtoa_r+0x71c>)
 800b550:	f7f6 f9b8 	bl	80018c4 <__aeabi_dmul>
 800b554:	9416      	str	r4, [sp, #88]	@ 0x58
 800b556:	900a      	str	r0, [sp, #40]	@ 0x28
 800b558:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b55a:	e7c3      	b.n	800b4e4 <_dtoa_r+0x59c>
 800b55c:	0030      	movs	r0, r6
 800b55e:	0039      	movs	r1, r7
 800b560:	f7f6 f9b0 	bl	80018c4 <__aeabi_dmul>
 800b564:	9d08      	ldr	r5, [sp, #32]
 800b566:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b568:	002b      	movs	r3, r5
 800b56a:	4694      	mov	ip, r2
 800b56c:	9016      	str	r0, [sp, #88]	@ 0x58
 800b56e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b570:	4463      	add	r3, ip
 800b572:	9319      	str	r3, [sp, #100]	@ 0x64
 800b574:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b576:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b578:	f7f7 f82a 	bl	80025d0 <__aeabi_d2iz>
 800b57c:	0004      	movs	r4, r0
 800b57e:	f7f7 f863 	bl	8002648 <__aeabi_i2d>
 800b582:	000b      	movs	r3, r1
 800b584:	0002      	movs	r2, r0
 800b586:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b58a:	f7f6 fc63 	bl	8001e54 <__aeabi_dsub>
 800b58e:	3430      	adds	r4, #48	@ 0x30
 800b590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b592:	702c      	strb	r4, [r5, #0]
 800b594:	3501      	adds	r5, #1
 800b596:	0006      	movs	r6, r0
 800b598:	000f      	movs	r7, r1
 800b59a:	42ab      	cmp	r3, r5
 800b59c:	d129      	bne.n	800b5f2 <_dtoa_r+0x6aa>
 800b59e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800b5a0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b5a2:	9b08      	ldr	r3, [sp, #32]
 800b5a4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b5a6:	469c      	mov	ip, r3
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4b32      	ldr	r3, [pc, #200]	@ (800b674 <_dtoa_r+0x72c>)
 800b5ac:	4464      	add	r4, ip
 800b5ae:	f7f5 f9e1 	bl	8000974 <__aeabi_dadd>
 800b5b2:	0002      	movs	r2, r0
 800b5b4:	000b      	movs	r3, r1
 800b5b6:	0030      	movs	r0, r6
 800b5b8:	0039      	movs	r1, r7
 800b5ba:	f7f4 ff61 	bl	8000480 <__aeabi_dcmpgt>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d15c      	bne.n	800b67c <_dtoa_r+0x734>
 800b5c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b5c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	492a      	ldr	r1, [pc, #168]	@ (800b674 <_dtoa_r+0x72c>)
 800b5ca:	f7f6 fc43 	bl	8001e54 <__aeabi_dsub>
 800b5ce:	0002      	movs	r2, r0
 800b5d0:	000b      	movs	r3, r1
 800b5d2:	0030      	movs	r0, r6
 800b5d4:	0039      	movs	r1, r7
 800b5d6:	f7f4 ff3f 	bl	8000458 <__aeabi_dcmplt>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d100      	bne.n	800b5e0 <_dtoa_r+0x698>
 800b5de:	e6ee      	b.n	800b3be <_dtoa_r+0x476>
 800b5e0:	0023      	movs	r3, r4
 800b5e2:	3c01      	subs	r4, #1
 800b5e4:	7822      	ldrb	r2, [r4, #0]
 800b5e6:	2a30      	cmp	r2, #48	@ 0x30
 800b5e8:	d0fa      	beq.n	800b5e0 <_dtoa_r+0x698>
 800b5ea:	001c      	movs	r4, r3
 800b5ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5ee:	9304      	str	r3, [sp, #16]
 800b5f0:	e73e      	b.n	800b470 <_dtoa_r+0x528>
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b664 <_dtoa_r+0x71c>)
 800b5f6:	f7f6 f965 	bl	80018c4 <__aeabi_dmul>
 800b5fa:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b5fe:	e7b9      	b.n	800b574 <_dtoa_r+0x62c>
 800b600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10c      	bne.n	800b620 <_dtoa_r+0x6d8>
 800b606:	9806      	ldr	r0, [sp, #24]
 800b608:	9907      	ldr	r1, [sp, #28]
 800b60a:	2200      	movs	r2, #0
 800b60c:	4b18      	ldr	r3, [pc, #96]	@ (800b670 <_dtoa_r+0x728>)
 800b60e:	f7f6 f959 	bl	80018c4 <__aeabi_dmul>
 800b612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b616:	f7f4 ff3d 	bl	8000494 <__aeabi_dcmpge>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d100      	bne.n	800b620 <_dtoa_r+0x6d8>
 800b61e:	e164      	b.n	800b8ea <_dtoa_r+0x9a2>
 800b620:	2600      	movs	r6, #0
 800b622:	0037      	movs	r7, r6
 800b624:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b626:	9c08      	ldr	r4, [sp, #32]
 800b628:	43db      	mvns	r3, r3
 800b62a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b62c:	2300      	movs	r3, #0
 800b62e:	9304      	str	r3, [sp, #16]
 800b630:	0031      	movs	r1, r6
 800b632:	9803      	ldr	r0, [sp, #12]
 800b634:	f000 fbc6 	bl	800bdc4 <_Bfree>
 800b638:	2f00      	cmp	r7, #0
 800b63a:	d0d7      	beq.n	800b5ec <_dtoa_r+0x6a4>
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d005      	beq.n	800b64e <_dtoa_r+0x706>
 800b642:	42bb      	cmp	r3, r7
 800b644:	d003      	beq.n	800b64e <_dtoa_r+0x706>
 800b646:	0019      	movs	r1, r3
 800b648:	9803      	ldr	r0, [sp, #12]
 800b64a:	f000 fbbb 	bl	800bdc4 <_Bfree>
 800b64e:	0039      	movs	r1, r7
 800b650:	9803      	ldr	r0, [sp, #12]
 800b652:	f000 fbb7 	bl	800bdc4 <_Bfree>
 800b656:	e7c9      	b.n	800b5ec <_dtoa_r+0x6a4>
 800b658:	0800cf00 	.word	0x0800cf00
 800b65c:	0800ced8 	.word	0x0800ced8
 800b660:	3ff00000 	.word	0x3ff00000
 800b664:	40240000 	.word	0x40240000
 800b668:	401c0000 	.word	0x401c0000
 800b66c:	fcc00000 	.word	0xfcc00000
 800b670:	40140000 	.word	0x40140000
 800b674:	3fe00000 	.word	0x3fe00000
 800b678:	9b04      	ldr	r3, [sp, #16]
 800b67a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b67c:	0023      	movs	r3, r4
 800b67e:	001c      	movs	r4, r3
 800b680:	3b01      	subs	r3, #1
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	2a39      	cmp	r2, #57	@ 0x39
 800b686:	d108      	bne.n	800b69a <_dtoa_r+0x752>
 800b688:	9a08      	ldr	r2, [sp, #32]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d1f7      	bne.n	800b67e <_dtoa_r+0x736>
 800b68e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b690:	9908      	ldr	r1, [sp, #32]
 800b692:	3201      	adds	r2, #1
 800b694:	920c      	str	r2, [sp, #48]	@ 0x30
 800b696:	2230      	movs	r2, #48	@ 0x30
 800b698:	700a      	strb	r2, [r1, #0]
 800b69a:	781a      	ldrb	r2, [r3, #0]
 800b69c:	3201      	adds	r2, #1
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	e7a4      	b.n	800b5ec <_dtoa_r+0x6a4>
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	4bc6      	ldr	r3, [pc, #792]	@ (800b9c0 <_dtoa_r+0xa78>)
 800b6a6:	f7f6 f90d 	bl	80018c4 <__aeabi_dmul>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	0006      	movs	r6, r0
 800b6b0:	000f      	movs	r7, r1
 800b6b2:	f7f4 fecb 	bl	800044c <__aeabi_dcmpeq>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d100      	bne.n	800b6bc <_dtoa_r+0x774>
 800b6ba:	e6a1      	b.n	800b400 <_dtoa_r+0x4b8>
 800b6bc:	e6d8      	b.n	800b470 <_dtoa_r+0x528>
 800b6be:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b6c0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b6c2:	9c06      	ldr	r4, [sp, #24]
 800b6c4:	2f00      	cmp	r7, #0
 800b6c6:	d014      	beq.n	800b6f2 <_dtoa_r+0x7aa>
 800b6c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b6ca:	2a01      	cmp	r2, #1
 800b6cc:	dd00      	ble.n	800b6d0 <_dtoa_r+0x788>
 800b6ce:	e0c8      	b.n	800b862 <_dtoa_r+0x91a>
 800b6d0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	d100      	bne.n	800b6d8 <_dtoa_r+0x790>
 800b6d6:	e0be      	b.n	800b856 <_dtoa_r+0x90e>
 800b6d8:	4aba      	ldr	r2, [pc, #744]	@ (800b9c4 <_dtoa_r+0xa7c>)
 800b6da:	189b      	adds	r3, r3, r2
 800b6dc:	9a06      	ldr	r2, [sp, #24]
 800b6de:	2101      	movs	r1, #1
 800b6e0:	18d2      	adds	r2, r2, r3
 800b6e2:	9206      	str	r2, [sp, #24]
 800b6e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6e6:	9803      	ldr	r0, [sp, #12]
 800b6e8:	18d3      	adds	r3, r2, r3
 800b6ea:	930d      	str	r3, [sp, #52]	@ 0x34
 800b6ec:	f000 fc22 	bl	800bf34 <__i2b>
 800b6f0:	0007      	movs	r7, r0
 800b6f2:	2c00      	cmp	r4, #0
 800b6f4:	d00e      	beq.n	800b714 <_dtoa_r+0x7cc>
 800b6f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	dd0b      	ble.n	800b714 <_dtoa_r+0x7cc>
 800b6fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6fe:	0023      	movs	r3, r4
 800b700:	4294      	cmp	r4, r2
 800b702:	dd00      	ble.n	800b706 <_dtoa_r+0x7be>
 800b704:	0013      	movs	r3, r2
 800b706:	9a06      	ldr	r2, [sp, #24]
 800b708:	1ae4      	subs	r4, r4, r3
 800b70a:	1ad2      	subs	r2, r2, r3
 800b70c:	9206      	str	r2, [sp, #24]
 800b70e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	930d      	str	r3, [sp, #52]	@ 0x34
 800b714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b716:	2b00      	cmp	r3, #0
 800b718:	d01f      	beq.n	800b75a <_dtoa_r+0x812>
 800b71a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d100      	bne.n	800b722 <_dtoa_r+0x7da>
 800b720:	e0b5      	b.n	800b88e <_dtoa_r+0x946>
 800b722:	2d00      	cmp	r5, #0
 800b724:	d010      	beq.n	800b748 <_dtoa_r+0x800>
 800b726:	0039      	movs	r1, r7
 800b728:	002a      	movs	r2, r5
 800b72a:	9803      	ldr	r0, [sp, #12]
 800b72c:	f000 fccc 	bl	800c0c8 <__pow5mult>
 800b730:	9a05      	ldr	r2, [sp, #20]
 800b732:	0001      	movs	r1, r0
 800b734:	0007      	movs	r7, r0
 800b736:	9803      	ldr	r0, [sp, #12]
 800b738:	f000 fc14 	bl	800bf64 <__multiply>
 800b73c:	0006      	movs	r6, r0
 800b73e:	9905      	ldr	r1, [sp, #20]
 800b740:	9803      	ldr	r0, [sp, #12]
 800b742:	f000 fb3f 	bl	800bdc4 <_Bfree>
 800b746:	9605      	str	r6, [sp, #20]
 800b748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b74a:	1b5a      	subs	r2, r3, r5
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	d004      	beq.n	800b75a <_dtoa_r+0x812>
 800b750:	9905      	ldr	r1, [sp, #20]
 800b752:	9803      	ldr	r0, [sp, #12]
 800b754:	f000 fcb8 	bl	800c0c8 <__pow5mult>
 800b758:	9005      	str	r0, [sp, #20]
 800b75a:	2101      	movs	r1, #1
 800b75c:	9803      	ldr	r0, [sp, #12]
 800b75e:	f000 fbe9 	bl	800bf34 <__i2b>
 800b762:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b764:	0006      	movs	r6, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d100      	bne.n	800b76c <_dtoa_r+0x824>
 800b76a:	e1bc      	b.n	800bae6 <_dtoa_r+0xb9e>
 800b76c:	001a      	movs	r2, r3
 800b76e:	0001      	movs	r1, r0
 800b770:	9803      	ldr	r0, [sp, #12]
 800b772:	f000 fca9 	bl	800c0c8 <__pow5mult>
 800b776:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b778:	0006      	movs	r6, r0
 800b77a:	2500      	movs	r5, #0
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	dc16      	bgt.n	800b7ae <_dtoa_r+0x866>
 800b780:	2500      	movs	r5, #0
 800b782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b784:	42ab      	cmp	r3, r5
 800b786:	d10e      	bne.n	800b7a6 <_dtoa_r+0x85e>
 800b788:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b78a:	031b      	lsls	r3, r3, #12
 800b78c:	42ab      	cmp	r3, r5
 800b78e:	d10a      	bne.n	800b7a6 <_dtoa_r+0x85e>
 800b790:	4b8d      	ldr	r3, [pc, #564]	@ (800b9c8 <_dtoa_r+0xa80>)
 800b792:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b794:	4213      	tst	r3, r2
 800b796:	d006      	beq.n	800b7a6 <_dtoa_r+0x85e>
 800b798:	9b06      	ldr	r3, [sp, #24]
 800b79a:	3501      	adds	r5, #1
 800b79c:	3301      	adds	r3, #1
 800b79e:	9306      	str	r3, [sp, #24]
 800b7a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d008      	beq.n	800b7c0 <_dtoa_r+0x878>
 800b7ae:	6933      	ldr	r3, [r6, #16]
 800b7b0:	3303      	adds	r3, #3
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	18f3      	adds	r3, r6, r3
 800b7b6:	6858      	ldr	r0, [r3, #4]
 800b7b8:	f000 fb6c 	bl	800be94 <__hi0bits>
 800b7bc:	2320      	movs	r3, #32
 800b7be:	1a18      	subs	r0, r3, r0
 800b7c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7c2:	1818      	adds	r0, r3, r0
 800b7c4:	0002      	movs	r2, r0
 800b7c6:	231f      	movs	r3, #31
 800b7c8:	401a      	ands	r2, r3
 800b7ca:	4218      	tst	r0, r3
 800b7cc:	d065      	beq.n	800b89a <_dtoa_r+0x952>
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	1a9b      	subs	r3, r3, r2
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	dd5d      	ble.n	800b892 <_dtoa_r+0x94a>
 800b7d6:	231c      	movs	r3, #28
 800b7d8:	1a9b      	subs	r3, r3, r2
 800b7da:	9a06      	ldr	r2, [sp, #24]
 800b7dc:	18e4      	adds	r4, r4, r3
 800b7de:	18d2      	adds	r2, r2, r3
 800b7e0:	9206      	str	r2, [sp, #24]
 800b7e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7e4:	18d3      	adds	r3, r2, r3
 800b7e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7e8:	9b06      	ldr	r3, [sp, #24]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dd05      	ble.n	800b7fa <_dtoa_r+0x8b2>
 800b7ee:	001a      	movs	r2, r3
 800b7f0:	9905      	ldr	r1, [sp, #20]
 800b7f2:	9803      	ldr	r0, [sp, #12]
 800b7f4:	f000 fcc4 	bl	800c180 <__lshift>
 800b7f8:	9005      	str	r0, [sp, #20]
 800b7fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dd05      	ble.n	800b80c <_dtoa_r+0x8c4>
 800b800:	0031      	movs	r1, r6
 800b802:	001a      	movs	r2, r3
 800b804:	9803      	ldr	r0, [sp, #12]
 800b806:	f000 fcbb 	bl	800c180 <__lshift>
 800b80a:	0006      	movs	r6, r0
 800b80c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d045      	beq.n	800b89e <_dtoa_r+0x956>
 800b812:	0031      	movs	r1, r6
 800b814:	9805      	ldr	r0, [sp, #20]
 800b816:	f000 fd1f 	bl	800c258 <__mcmp>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	da3f      	bge.n	800b89e <_dtoa_r+0x956>
 800b81e:	9b04      	ldr	r3, [sp, #16]
 800b820:	220a      	movs	r2, #10
 800b822:	3b01      	subs	r3, #1
 800b824:	930c      	str	r3, [sp, #48]	@ 0x30
 800b826:	9905      	ldr	r1, [sp, #20]
 800b828:	2300      	movs	r3, #0
 800b82a:	9803      	ldr	r0, [sp, #12]
 800b82c:	f000 faee 	bl	800be0c <__multadd>
 800b830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b832:	9005      	str	r0, [sp, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d100      	bne.n	800b83a <_dtoa_r+0x8f2>
 800b838:	e15c      	b.n	800baf4 <_dtoa_r+0xbac>
 800b83a:	2300      	movs	r3, #0
 800b83c:	0039      	movs	r1, r7
 800b83e:	220a      	movs	r2, #10
 800b840:	9803      	ldr	r0, [sp, #12]
 800b842:	f000 fae3 	bl	800be0c <__multadd>
 800b846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b848:	0007      	movs	r7, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	dc55      	bgt.n	800b8fa <_dtoa_r+0x9b2>
 800b84e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b850:	2b02      	cmp	r3, #2
 800b852:	dc2d      	bgt.n	800b8b0 <_dtoa_r+0x968>
 800b854:	e051      	b.n	800b8fa <_dtoa_r+0x9b2>
 800b856:	2336      	movs	r3, #54	@ 0x36
 800b858:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b85a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b85c:	9c06      	ldr	r4, [sp, #24]
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	e73c      	b.n	800b6dc <_dtoa_r+0x794>
 800b862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b864:	1e5d      	subs	r5, r3, #1
 800b866:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b868:	42ab      	cmp	r3, r5
 800b86a:	db08      	blt.n	800b87e <_dtoa_r+0x936>
 800b86c:	1b5d      	subs	r5, r3, r5
 800b86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b870:	9c06      	ldr	r4, [sp, #24]
 800b872:	2b00      	cmp	r3, #0
 800b874:	db00      	blt.n	800b878 <_dtoa_r+0x930>
 800b876:	e731      	b.n	800b6dc <_dtoa_r+0x794>
 800b878:	1ae4      	subs	r4, r4, r3
 800b87a:	2300      	movs	r3, #0
 800b87c:	e72e      	b.n	800b6dc <_dtoa_r+0x794>
 800b87e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b880:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b882:	1aeb      	subs	r3, r5, r3
 800b884:	18d3      	adds	r3, r2, r3
 800b886:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b888:	9314      	str	r3, [sp, #80]	@ 0x50
 800b88a:	2500      	movs	r5, #0
 800b88c:	e7ef      	b.n	800b86e <_dtoa_r+0x926>
 800b88e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b890:	e75e      	b.n	800b750 <_dtoa_r+0x808>
 800b892:	2b04      	cmp	r3, #4
 800b894:	d0a8      	beq.n	800b7e8 <_dtoa_r+0x8a0>
 800b896:	331c      	adds	r3, #28
 800b898:	e79f      	b.n	800b7da <_dtoa_r+0x892>
 800b89a:	0013      	movs	r3, r2
 800b89c:	e7fb      	b.n	800b896 <_dtoa_r+0x94e>
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dc23      	bgt.n	800b8f2 <_dtoa_r+0x9aa>
 800b8aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	dd20      	ble.n	800b8f2 <_dtoa_r+0x9aa>
 800b8b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d000      	beq.n	800b8b8 <_dtoa_r+0x970>
 800b8b6:	e6b5      	b.n	800b624 <_dtoa_r+0x6dc>
 800b8b8:	0031      	movs	r1, r6
 800b8ba:	2205      	movs	r2, #5
 800b8bc:	9803      	ldr	r0, [sp, #12]
 800b8be:	f000 faa5 	bl	800be0c <__multadd>
 800b8c2:	0006      	movs	r6, r0
 800b8c4:	0001      	movs	r1, r0
 800b8c6:	9805      	ldr	r0, [sp, #20]
 800b8c8:	f000 fcc6 	bl	800c258 <__mcmp>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	dc00      	bgt.n	800b8d2 <_dtoa_r+0x98a>
 800b8d0:	e6a8      	b.n	800b624 <_dtoa_r+0x6dc>
 800b8d2:	9b08      	ldr	r3, [sp, #32]
 800b8d4:	9a08      	ldr	r2, [sp, #32]
 800b8d6:	1c5c      	adds	r4, r3, #1
 800b8d8:	2331      	movs	r3, #49	@ 0x31
 800b8da:	7013      	strb	r3, [r2, #0]
 800b8dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8de:	3301      	adds	r3, #1
 800b8e0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8e2:	e6a3      	b.n	800b62c <_dtoa_r+0x6e4>
 800b8e4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b8e6:	0037      	movs	r7, r6
 800b8e8:	e7f3      	b.n	800b8d2 <_dtoa_r+0x98a>
 800b8ea:	9b04      	ldr	r3, [sp, #16]
 800b8ec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b8ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8f0:	e7f9      	b.n	800b8e6 <_dtoa_r+0x99e>
 800b8f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d100      	bne.n	800b8fa <_dtoa_r+0x9b2>
 800b8f8:	e100      	b.n	800bafc <_dtoa_r+0xbb4>
 800b8fa:	2c00      	cmp	r4, #0
 800b8fc:	dd05      	ble.n	800b90a <_dtoa_r+0x9c2>
 800b8fe:	0039      	movs	r1, r7
 800b900:	0022      	movs	r2, r4
 800b902:	9803      	ldr	r0, [sp, #12]
 800b904:	f000 fc3c 	bl	800c180 <__lshift>
 800b908:	0007      	movs	r7, r0
 800b90a:	0038      	movs	r0, r7
 800b90c:	2d00      	cmp	r5, #0
 800b90e:	d018      	beq.n	800b942 <_dtoa_r+0x9fa>
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	9803      	ldr	r0, [sp, #12]
 800b914:	f000 fa12 	bl	800bd3c <_Balloc>
 800b918:	1e04      	subs	r4, r0, #0
 800b91a:	d105      	bne.n	800b928 <_dtoa_r+0x9e0>
 800b91c:	0022      	movs	r2, r4
 800b91e:	4b2b      	ldr	r3, [pc, #172]	@ (800b9cc <_dtoa_r+0xa84>)
 800b920:	482b      	ldr	r0, [pc, #172]	@ (800b9d0 <_dtoa_r+0xa88>)
 800b922:	492c      	ldr	r1, [pc, #176]	@ (800b9d4 <_dtoa_r+0xa8c>)
 800b924:	f7ff fb25 	bl	800af72 <_dtoa_r+0x2a>
 800b928:	0039      	movs	r1, r7
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	310c      	adds	r1, #12
 800b92e:	3202      	adds	r2, #2
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	300c      	adds	r0, #12
 800b934:	f001 f84e 	bl	800c9d4 <memcpy>
 800b938:	2201      	movs	r2, #1
 800b93a:	0021      	movs	r1, r4
 800b93c:	9803      	ldr	r0, [sp, #12]
 800b93e:	f000 fc1f 	bl	800c180 <__lshift>
 800b942:	9b08      	ldr	r3, [sp, #32]
 800b944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b946:	9306      	str	r3, [sp, #24]
 800b948:	3b01      	subs	r3, #1
 800b94a:	189b      	adds	r3, r3, r2
 800b94c:	2201      	movs	r2, #1
 800b94e:	9704      	str	r7, [sp, #16]
 800b950:	0007      	movs	r7, r0
 800b952:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b956:	4013      	ands	r3, r2
 800b958:	930e      	str	r3, [sp, #56]	@ 0x38
 800b95a:	0031      	movs	r1, r6
 800b95c:	9805      	ldr	r0, [sp, #20]
 800b95e:	f7ff fa65 	bl	800ae2c <quorem>
 800b962:	9904      	ldr	r1, [sp, #16]
 800b964:	0005      	movs	r5, r0
 800b966:	900a      	str	r0, [sp, #40]	@ 0x28
 800b968:	9805      	ldr	r0, [sp, #20]
 800b96a:	f000 fc75 	bl	800c258 <__mcmp>
 800b96e:	003a      	movs	r2, r7
 800b970:	900d      	str	r0, [sp, #52]	@ 0x34
 800b972:	0031      	movs	r1, r6
 800b974:	9803      	ldr	r0, [sp, #12]
 800b976:	f000 fc8b 	bl	800c290 <__mdiff>
 800b97a:	2201      	movs	r2, #1
 800b97c:	68c3      	ldr	r3, [r0, #12]
 800b97e:	0004      	movs	r4, r0
 800b980:	3530      	adds	r5, #48	@ 0x30
 800b982:	9209      	str	r2, [sp, #36]	@ 0x24
 800b984:	2b00      	cmp	r3, #0
 800b986:	d104      	bne.n	800b992 <_dtoa_r+0xa4a>
 800b988:	0001      	movs	r1, r0
 800b98a:	9805      	ldr	r0, [sp, #20]
 800b98c:	f000 fc64 	bl	800c258 <__mcmp>
 800b990:	9009      	str	r0, [sp, #36]	@ 0x24
 800b992:	0021      	movs	r1, r4
 800b994:	9803      	ldr	r0, [sp, #12]
 800b996:	f000 fa15 	bl	800bdc4 <_Bfree>
 800b99a:	9b06      	ldr	r3, [sp, #24]
 800b99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b99e:	1c5c      	adds	r4, r3, #1
 800b9a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d116      	bne.n	800b9d8 <_dtoa_r+0xa90>
 800b9aa:	2d39      	cmp	r5, #57	@ 0x39
 800b9ac:	d02f      	beq.n	800ba0e <_dtoa_r+0xac6>
 800b9ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	dd01      	ble.n	800b9b8 <_dtoa_r+0xa70>
 800b9b4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b9b6:	3531      	adds	r5, #49	@ 0x31
 800b9b8:	9b06      	ldr	r3, [sp, #24]
 800b9ba:	701d      	strb	r5, [r3, #0]
 800b9bc:	e638      	b.n	800b630 <_dtoa_r+0x6e8>
 800b9be:	46c0      	nop			@ (mov r8, r8)
 800b9c0:	40240000 	.word	0x40240000
 800b9c4:	00000433 	.word	0x00000433
 800b9c8:	7ff00000 	.word	0x7ff00000
 800b9cc:	0800ce5c 	.word	0x0800ce5c
 800b9d0:	0800ce04 	.word	0x0800ce04
 800b9d4:	000002ef 	.word	0x000002ef
 800b9d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	db04      	blt.n	800b9e8 <_dtoa_r+0xaa0>
 800b9de:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	d11e      	bne.n	800ba26 <_dtoa_r+0xade>
 800b9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	dde4      	ble.n	800b9b8 <_dtoa_r+0xa70>
 800b9ee:	9905      	ldr	r1, [sp, #20]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	9803      	ldr	r0, [sp, #12]
 800b9f4:	f000 fbc4 	bl	800c180 <__lshift>
 800b9f8:	0031      	movs	r1, r6
 800b9fa:	9005      	str	r0, [sp, #20]
 800b9fc:	f000 fc2c 	bl	800c258 <__mcmp>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	dc02      	bgt.n	800ba0a <_dtoa_r+0xac2>
 800ba04:	d1d8      	bne.n	800b9b8 <_dtoa_r+0xa70>
 800ba06:	07eb      	lsls	r3, r5, #31
 800ba08:	d5d6      	bpl.n	800b9b8 <_dtoa_r+0xa70>
 800ba0a:	2d39      	cmp	r5, #57	@ 0x39
 800ba0c:	d1d2      	bne.n	800b9b4 <_dtoa_r+0xa6c>
 800ba0e:	2339      	movs	r3, #57	@ 0x39
 800ba10:	9a06      	ldr	r2, [sp, #24]
 800ba12:	7013      	strb	r3, [r2, #0]
 800ba14:	0023      	movs	r3, r4
 800ba16:	001c      	movs	r4, r3
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	781a      	ldrb	r2, [r3, #0]
 800ba1c:	2a39      	cmp	r2, #57	@ 0x39
 800ba1e:	d04f      	beq.n	800bac0 <_dtoa_r+0xb78>
 800ba20:	3201      	adds	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	e604      	b.n	800b630 <_dtoa_r+0x6e8>
 800ba26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dd03      	ble.n	800ba34 <_dtoa_r+0xaec>
 800ba2c:	2d39      	cmp	r5, #57	@ 0x39
 800ba2e:	d0ee      	beq.n	800ba0e <_dtoa_r+0xac6>
 800ba30:	3501      	adds	r5, #1
 800ba32:	e7c1      	b.n	800b9b8 <_dtoa_r+0xa70>
 800ba34:	9b06      	ldr	r3, [sp, #24]
 800ba36:	9a06      	ldr	r2, [sp, #24]
 800ba38:	701d      	strb	r5, [r3, #0]
 800ba3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d02a      	beq.n	800ba96 <_dtoa_r+0xb4e>
 800ba40:	2300      	movs	r3, #0
 800ba42:	220a      	movs	r2, #10
 800ba44:	9905      	ldr	r1, [sp, #20]
 800ba46:	9803      	ldr	r0, [sp, #12]
 800ba48:	f000 f9e0 	bl	800be0c <__multadd>
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	9005      	str	r0, [sp, #20]
 800ba50:	42bb      	cmp	r3, r7
 800ba52:	d109      	bne.n	800ba68 <_dtoa_r+0xb20>
 800ba54:	2300      	movs	r3, #0
 800ba56:	220a      	movs	r2, #10
 800ba58:	9904      	ldr	r1, [sp, #16]
 800ba5a:	9803      	ldr	r0, [sp, #12]
 800ba5c:	f000 f9d6 	bl	800be0c <__multadd>
 800ba60:	9004      	str	r0, [sp, #16]
 800ba62:	0007      	movs	r7, r0
 800ba64:	9406      	str	r4, [sp, #24]
 800ba66:	e778      	b.n	800b95a <_dtoa_r+0xa12>
 800ba68:	9904      	ldr	r1, [sp, #16]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	220a      	movs	r2, #10
 800ba6e:	9803      	ldr	r0, [sp, #12]
 800ba70:	f000 f9cc 	bl	800be0c <__multadd>
 800ba74:	2300      	movs	r3, #0
 800ba76:	9004      	str	r0, [sp, #16]
 800ba78:	220a      	movs	r2, #10
 800ba7a:	0039      	movs	r1, r7
 800ba7c:	9803      	ldr	r0, [sp, #12]
 800ba7e:	f000 f9c5 	bl	800be0c <__multadd>
 800ba82:	e7ee      	b.n	800ba62 <_dtoa_r+0xb1a>
 800ba84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba86:	2401      	movs	r4, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	dd00      	ble.n	800ba8e <_dtoa_r+0xb46>
 800ba8c:	001c      	movs	r4, r3
 800ba8e:	9b08      	ldr	r3, [sp, #32]
 800ba90:	191c      	adds	r4, r3, r4
 800ba92:	2300      	movs	r3, #0
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	9905      	ldr	r1, [sp, #20]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	9803      	ldr	r0, [sp, #12]
 800ba9c:	f000 fb70 	bl	800c180 <__lshift>
 800baa0:	0031      	movs	r1, r6
 800baa2:	9005      	str	r0, [sp, #20]
 800baa4:	f000 fbd8 	bl	800c258 <__mcmp>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	dcb3      	bgt.n	800ba14 <_dtoa_r+0xacc>
 800baac:	d101      	bne.n	800bab2 <_dtoa_r+0xb6a>
 800baae:	07ed      	lsls	r5, r5, #31
 800bab0:	d4b0      	bmi.n	800ba14 <_dtoa_r+0xacc>
 800bab2:	0023      	movs	r3, r4
 800bab4:	001c      	movs	r4, r3
 800bab6:	3b01      	subs	r3, #1
 800bab8:	781a      	ldrb	r2, [r3, #0]
 800baba:	2a30      	cmp	r2, #48	@ 0x30
 800babc:	d0fa      	beq.n	800bab4 <_dtoa_r+0xb6c>
 800babe:	e5b7      	b.n	800b630 <_dtoa_r+0x6e8>
 800bac0:	9a08      	ldr	r2, [sp, #32]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d1a7      	bne.n	800ba16 <_dtoa_r+0xace>
 800bac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bac8:	3301      	adds	r3, #1
 800baca:	930c      	str	r3, [sp, #48]	@ 0x30
 800bacc:	2331      	movs	r3, #49	@ 0x31
 800bace:	7013      	strb	r3, [r2, #0]
 800bad0:	e5ae      	b.n	800b630 <_dtoa_r+0x6e8>
 800bad2:	4b15      	ldr	r3, [pc, #84]	@ (800bb28 <_dtoa_r+0xbe0>)
 800bad4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bad6:	9308      	str	r3, [sp, #32]
 800bad8:	4b14      	ldr	r3, [pc, #80]	@ (800bb2c <_dtoa_r+0xbe4>)
 800bada:	2a00      	cmp	r2, #0
 800badc:	d001      	beq.n	800bae2 <_dtoa_r+0xb9a>
 800bade:	f7ff fa7b 	bl	800afd8 <_dtoa_r+0x90>
 800bae2:	f7ff fa7b 	bl	800afdc <_dtoa_r+0x94>
 800bae6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bae8:	2b01      	cmp	r3, #1
 800baea:	dc00      	bgt.n	800baee <_dtoa_r+0xba6>
 800baec:	e648      	b.n	800b780 <_dtoa_r+0x838>
 800baee:	2001      	movs	r0, #1
 800baf0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800baf2:	e665      	b.n	800b7c0 <_dtoa_r+0x878>
 800baf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	dc00      	bgt.n	800bafc <_dtoa_r+0xbb4>
 800bafa:	e6d6      	b.n	800b8aa <_dtoa_r+0x962>
 800bafc:	2400      	movs	r4, #0
 800bafe:	0031      	movs	r1, r6
 800bb00:	9805      	ldr	r0, [sp, #20]
 800bb02:	f7ff f993 	bl	800ae2c <quorem>
 800bb06:	9b08      	ldr	r3, [sp, #32]
 800bb08:	3030      	adds	r0, #48	@ 0x30
 800bb0a:	5518      	strb	r0, [r3, r4]
 800bb0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb0e:	3401      	adds	r4, #1
 800bb10:	0005      	movs	r5, r0
 800bb12:	429c      	cmp	r4, r3
 800bb14:	dab6      	bge.n	800ba84 <_dtoa_r+0xb3c>
 800bb16:	2300      	movs	r3, #0
 800bb18:	220a      	movs	r2, #10
 800bb1a:	9905      	ldr	r1, [sp, #20]
 800bb1c:	9803      	ldr	r0, [sp, #12]
 800bb1e:	f000 f975 	bl	800be0c <__multadd>
 800bb22:	9005      	str	r0, [sp, #20]
 800bb24:	e7eb      	b.n	800bafe <_dtoa_r+0xbb6>
 800bb26:	46c0      	nop			@ (mov r8, r8)
 800bb28:	0800cde0 	.word	0x0800cde0
 800bb2c:	0800cde8 	.word	0x0800cde8

0800bb30 <_free_r>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	0005      	movs	r5, r0
 800bb34:	1e0c      	subs	r4, r1, #0
 800bb36:	d010      	beq.n	800bb5a <_free_r+0x2a>
 800bb38:	3c04      	subs	r4, #4
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	da00      	bge.n	800bb42 <_free_r+0x12>
 800bb40:	18e4      	adds	r4, r4, r3
 800bb42:	0028      	movs	r0, r5
 800bb44:	f000 f8ea 	bl	800bd1c <__malloc_lock>
 800bb48:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc0 <_free_r+0x90>)
 800bb4a:	6813      	ldr	r3, [r2, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d105      	bne.n	800bb5c <_free_r+0x2c>
 800bb50:	6063      	str	r3, [r4, #4]
 800bb52:	6014      	str	r4, [r2, #0]
 800bb54:	0028      	movs	r0, r5
 800bb56:	f000 f8e9 	bl	800bd2c <__malloc_unlock>
 800bb5a:	bd70      	pop	{r4, r5, r6, pc}
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d908      	bls.n	800bb72 <_free_r+0x42>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	1821      	adds	r1, r4, r0
 800bb64:	428b      	cmp	r3, r1
 800bb66:	d1f3      	bne.n	800bb50 <_free_r+0x20>
 800bb68:	6819      	ldr	r1, [r3, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	1809      	adds	r1, r1, r0
 800bb6e:	6021      	str	r1, [r4, #0]
 800bb70:	e7ee      	b.n	800bb50 <_free_r+0x20>
 800bb72:	001a      	movs	r2, r3
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <_free_r+0x4e>
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	d9f9      	bls.n	800bb72 <_free_r+0x42>
 800bb7e:	6811      	ldr	r1, [r2, #0]
 800bb80:	1850      	adds	r0, r2, r1
 800bb82:	42a0      	cmp	r0, r4
 800bb84:	d10b      	bne.n	800bb9e <_free_r+0x6e>
 800bb86:	6820      	ldr	r0, [r4, #0]
 800bb88:	1809      	adds	r1, r1, r0
 800bb8a:	1850      	adds	r0, r2, r1
 800bb8c:	6011      	str	r1, [r2, #0]
 800bb8e:	4283      	cmp	r3, r0
 800bb90:	d1e0      	bne.n	800bb54 <_free_r+0x24>
 800bb92:	6818      	ldr	r0, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	1841      	adds	r1, r0, r1
 800bb98:	6011      	str	r1, [r2, #0]
 800bb9a:	6053      	str	r3, [r2, #4]
 800bb9c:	e7da      	b.n	800bb54 <_free_r+0x24>
 800bb9e:	42a0      	cmp	r0, r4
 800bba0:	d902      	bls.n	800bba8 <_free_r+0x78>
 800bba2:	230c      	movs	r3, #12
 800bba4:	602b      	str	r3, [r5, #0]
 800bba6:	e7d5      	b.n	800bb54 <_free_r+0x24>
 800bba8:	6820      	ldr	r0, [r4, #0]
 800bbaa:	1821      	adds	r1, r4, r0
 800bbac:	428b      	cmp	r3, r1
 800bbae:	d103      	bne.n	800bbb8 <_free_r+0x88>
 800bbb0:	6819      	ldr	r1, [r3, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	1809      	adds	r1, r1, r0
 800bbb6:	6021      	str	r1, [r4, #0]
 800bbb8:	6063      	str	r3, [r4, #4]
 800bbba:	6054      	str	r4, [r2, #4]
 800bbbc:	e7ca      	b.n	800bb54 <_free_r+0x24>
 800bbbe:	46c0      	nop			@ (mov r8, r8)
 800bbc0:	200005ec 	.word	0x200005ec

0800bbc4 <malloc>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	4b03      	ldr	r3, [pc, #12]	@ (800bbd4 <malloc+0x10>)
 800bbc8:	0001      	movs	r1, r0
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	f000 f826 	bl	800bc1c <_malloc_r>
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	46c0      	nop			@ (mov r8, r8)
 800bbd4:	20000018 	.word	0x20000018

0800bbd8 <sbrk_aligned>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	4e0f      	ldr	r6, [pc, #60]	@ (800bc18 <sbrk_aligned+0x40>)
 800bbdc:	000d      	movs	r5, r1
 800bbde:	6831      	ldr	r1, [r6, #0]
 800bbe0:	0004      	movs	r4, r0
 800bbe2:	2900      	cmp	r1, #0
 800bbe4:	d102      	bne.n	800bbec <sbrk_aligned+0x14>
 800bbe6:	f000 fee3 	bl	800c9b0 <_sbrk_r>
 800bbea:	6030      	str	r0, [r6, #0]
 800bbec:	0029      	movs	r1, r5
 800bbee:	0020      	movs	r0, r4
 800bbf0:	f000 fede 	bl	800c9b0 <_sbrk_r>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	d103      	bne.n	800bc00 <sbrk_aligned+0x28>
 800bbf8:	2501      	movs	r5, #1
 800bbfa:	426d      	negs	r5, r5
 800bbfc:	0028      	movs	r0, r5
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	2303      	movs	r3, #3
 800bc02:	1cc5      	adds	r5, r0, #3
 800bc04:	439d      	bics	r5, r3
 800bc06:	42a8      	cmp	r0, r5
 800bc08:	d0f8      	beq.n	800bbfc <sbrk_aligned+0x24>
 800bc0a:	1a29      	subs	r1, r5, r0
 800bc0c:	0020      	movs	r0, r4
 800bc0e:	f000 fecf 	bl	800c9b0 <_sbrk_r>
 800bc12:	3001      	adds	r0, #1
 800bc14:	d1f2      	bne.n	800bbfc <sbrk_aligned+0x24>
 800bc16:	e7ef      	b.n	800bbf8 <sbrk_aligned+0x20>
 800bc18:	200005e8 	.word	0x200005e8

0800bc1c <_malloc_r>:
 800bc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc1e:	2203      	movs	r2, #3
 800bc20:	1ccb      	adds	r3, r1, #3
 800bc22:	4393      	bics	r3, r2
 800bc24:	3308      	adds	r3, #8
 800bc26:	0005      	movs	r5, r0
 800bc28:	001f      	movs	r7, r3
 800bc2a:	2b0c      	cmp	r3, #12
 800bc2c:	d234      	bcs.n	800bc98 <_malloc_r+0x7c>
 800bc2e:	270c      	movs	r7, #12
 800bc30:	42b9      	cmp	r1, r7
 800bc32:	d833      	bhi.n	800bc9c <_malloc_r+0x80>
 800bc34:	0028      	movs	r0, r5
 800bc36:	f000 f871 	bl	800bd1c <__malloc_lock>
 800bc3a:	4e37      	ldr	r6, [pc, #220]	@ (800bd18 <_malloc_r+0xfc>)
 800bc3c:	6833      	ldr	r3, [r6, #0]
 800bc3e:	001c      	movs	r4, r3
 800bc40:	2c00      	cmp	r4, #0
 800bc42:	d12f      	bne.n	800bca4 <_malloc_r+0x88>
 800bc44:	0039      	movs	r1, r7
 800bc46:	0028      	movs	r0, r5
 800bc48:	f7ff ffc6 	bl	800bbd8 <sbrk_aligned>
 800bc4c:	0004      	movs	r4, r0
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	d15f      	bne.n	800bd12 <_malloc_r+0xf6>
 800bc52:	6834      	ldr	r4, [r6, #0]
 800bc54:	9400      	str	r4, [sp, #0]
 800bc56:	9b00      	ldr	r3, [sp, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d14a      	bne.n	800bcf2 <_malloc_r+0xd6>
 800bc5c:	2c00      	cmp	r4, #0
 800bc5e:	d052      	beq.n	800bd06 <_malloc_r+0xea>
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	0028      	movs	r0, r5
 800bc64:	18e3      	adds	r3, r4, r3
 800bc66:	9900      	ldr	r1, [sp, #0]
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	f000 fea1 	bl	800c9b0 <_sbrk_r>
 800bc6e:	9b01      	ldr	r3, [sp, #4]
 800bc70:	4283      	cmp	r3, r0
 800bc72:	d148      	bne.n	800bd06 <_malloc_r+0xea>
 800bc74:	6823      	ldr	r3, [r4, #0]
 800bc76:	0028      	movs	r0, r5
 800bc78:	1aff      	subs	r7, r7, r3
 800bc7a:	0039      	movs	r1, r7
 800bc7c:	f7ff ffac 	bl	800bbd8 <sbrk_aligned>
 800bc80:	3001      	adds	r0, #1
 800bc82:	d040      	beq.n	800bd06 <_malloc_r+0xea>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	19db      	adds	r3, r3, r7
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	6833      	ldr	r3, [r6, #0]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d133      	bne.n	800bcfa <_malloc_r+0xde>
 800bc92:	9b00      	ldr	r3, [sp, #0]
 800bc94:	6033      	str	r3, [r6, #0]
 800bc96:	e019      	b.n	800bccc <_malloc_r+0xb0>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dac9      	bge.n	800bc30 <_malloc_r+0x14>
 800bc9c:	230c      	movs	r3, #12
 800bc9e:	602b      	str	r3, [r5, #0]
 800bca0:	2000      	movs	r0, #0
 800bca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bca4:	6821      	ldr	r1, [r4, #0]
 800bca6:	1bc9      	subs	r1, r1, r7
 800bca8:	d420      	bmi.n	800bcec <_malloc_r+0xd0>
 800bcaa:	290b      	cmp	r1, #11
 800bcac:	d90a      	bls.n	800bcc4 <_malloc_r+0xa8>
 800bcae:	19e2      	adds	r2, r4, r7
 800bcb0:	6027      	str	r7, [r4, #0]
 800bcb2:	42a3      	cmp	r3, r4
 800bcb4:	d104      	bne.n	800bcc0 <_malloc_r+0xa4>
 800bcb6:	6032      	str	r2, [r6, #0]
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	6011      	str	r1, [r2, #0]
 800bcbc:	6053      	str	r3, [r2, #4]
 800bcbe:	e005      	b.n	800bccc <_malloc_r+0xb0>
 800bcc0:	605a      	str	r2, [r3, #4]
 800bcc2:	e7f9      	b.n	800bcb8 <_malloc_r+0x9c>
 800bcc4:	6862      	ldr	r2, [r4, #4]
 800bcc6:	42a3      	cmp	r3, r4
 800bcc8:	d10e      	bne.n	800bce8 <_malloc_r+0xcc>
 800bcca:	6032      	str	r2, [r6, #0]
 800bccc:	0028      	movs	r0, r5
 800bcce:	f000 f82d 	bl	800bd2c <__malloc_unlock>
 800bcd2:	0020      	movs	r0, r4
 800bcd4:	2207      	movs	r2, #7
 800bcd6:	300b      	adds	r0, #11
 800bcd8:	1d23      	adds	r3, r4, #4
 800bcda:	4390      	bics	r0, r2
 800bcdc:	1ac2      	subs	r2, r0, r3
 800bcde:	4298      	cmp	r0, r3
 800bce0:	d0df      	beq.n	800bca2 <_malloc_r+0x86>
 800bce2:	1a1b      	subs	r3, r3, r0
 800bce4:	50a3      	str	r3, [r4, r2]
 800bce6:	e7dc      	b.n	800bca2 <_malloc_r+0x86>
 800bce8:	605a      	str	r2, [r3, #4]
 800bcea:	e7ef      	b.n	800bccc <_malloc_r+0xb0>
 800bcec:	0023      	movs	r3, r4
 800bcee:	6864      	ldr	r4, [r4, #4]
 800bcf0:	e7a6      	b.n	800bc40 <_malloc_r+0x24>
 800bcf2:	9c00      	ldr	r4, [sp, #0]
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	e7ad      	b.n	800bc56 <_malloc_r+0x3a>
 800bcfa:	001a      	movs	r2, r3
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	42a3      	cmp	r3, r4
 800bd00:	d1fb      	bne.n	800bcfa <_malloc_r+0xde>
 800bd02:	2300      	movs	r3, #0
 800bd04:	e7da      	b.n	800bcbc <_malloc_r+0xa0>
 800bd06:	230c      	movs	r3, #12
 800bd08:	0028      	movs	r0, r5
 800bd0a:	602b      	str	r3, [r5, #0]
 800bd0c:	f000 f80e 	bl	800bd2c <__malloc_unlock>
 800bd10:	e7c6      	b.n	800bca0 <_malloc_r+0x84>
 800bd12:	6007      	str	r7, [r0, #0]
 800bd14:	e7da      	b.n	800bccc <_malloc_r+0xb0>
 800bd16:	46c0      	nop			@ (mov r8, r8)
 800bd18:	200005ec 	.word	0x200005ec

0800bd1c <__malloc_lock>:
 800bd1c:	b510      	push	{r4, lr}
 800bd1e:	4802      	ldr	r0, [pc, #8]	@ (800bd28 <__malloc_lock+0xc>)
 800bd20:	f7ff f877 	bl	800ae12 <__retarget_lock_acquire_recursive>
 800bd24:	bd10      	pop	{r4, pc}
 800bd26:	46c0      	nop			@ (mov r8, r8)
 800bd28:	200005e4 	.word	0x200005e4

0800bd2c <__malloc_unlock>:
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	4802      	ldr	r0, [pc, #8]	@ (800bd38 <__malloc_unlock+0xc>)
 800bd30:	f7ff f870 	bl	800ae14 <__retarget_lock_release_recursive>
 800bd34:	bd10      	pop	{r4, pc}
 800bd36:	46c0      	nop			@ (mov r8, r8)
 800bd38:	200005e4 	.word	0x200005e4

0800bd3c <_Balloc>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	69c5      	ldr	r5, [r0, #28]
 800bd40:	0006      	movs	r6, r0
 800bd42:	000c      	movs	r4, r1
 800bd44:	2d00      	cmp	r5, #0
 800bd46:	d10e      	bne.n	800bd66 <_Balloc+0x2a>
 800bd48:	2010      	movs	r0, #16
 800bd4a:	f7ff ff3b 	bl	800bbc4 <malloc>
 800bd4e:	1e02      	subs	r2, r0, #0
 800bd50:	61f0      	str	r0, [r6, #28]
 800bd52:	d104      	bne.n	800bd5e <_Balloc+0x22>
 800bd54:	216b      	movs	r1, #107	@ 0x6b
 800bd56:	4b19      	ldr	r3, [pc, #100]	@ (800bdbc <_Balloc+0x80>)
 800bd58:	4819      	ldr	r0, [pc, #100]	@ (800bdc0 <_Balloc+0x84>)
 800bd5a:	f000 fe45 	bl	800c9e8 <__assert_func>
 800bd5e:	6045      	str	r5, [r0, #4]
 800bd60:	6085      	str	r5, [r0, #8]
 800bd62:	6005      	str	r5, [r0, #0]
 800bd64:	60c5      	str	r5, [r0, #12]
 800bd66:	69f5      	ldr	r5, [r6, #28]
 800bd68:	68eb      	ldr	r3, [r5, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d013      	beq.n	800bd96 <_Balloc+0x5a>
 800bd6e:	69f3      	ldr	r3, [r6, #28]
 800bd70:	00a2      	lsls	r2, r4, #2
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	189b      	adds	r3, r3, r2
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d118      	bne.n	800bdae <_Balloc+0x72>
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	000d      	movs	r5, r1
 800bd80:	40a5      	lsls	r5, r4
 800bd82:	1d6a      	adds	r2, r5, #5
 800bd84:	0030      	movs	r0, r6
 800bd86:	0092      	lsls	r2, r2, #2
 800bd88:	f000 fe4c 	bl	800ca24 <_calloc_r>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d00c      	beq.n	800bdaa <_Balloc+0x6e>
 800bd90:	6044      	str	r4, [r0, #4]
 800bd92:	6085      	str	r5, [r0, #8]
 800bd94:	e00d      	b.n	800bdb2 <_Balloc+0x76>
 800bd96:	2221      	movs	r2, #33	@ 0x21
 800bd98:	2104      	movs	r1, #4
 800bd9a:	0030      	movs	r0, r6
 800bd9c:	f000 fe42 	bl	800ca24 <_calloc_r>
 800bda0:	69f3      	ldr	r3, [r6, #28]
 800bda2:	60e8      	str	r0, [r5, #12]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1e1      	bne.n	800bd6e <_Balloc+0x32>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	bd70      	pop	{r4, r5, r6, pc}
 800bdae:	6802      	ldr	r2, [r0, #0]
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	6103      	str	r3, [r0, #16]
 800bdb6:	60c3      	str	r3, [r0, #12]
 800bdb8:	e7f8      	b.n	800bdac <_Balloc+0x70>
 800bdba:	46c0      	nop			@ (mov r8, r8)
 800bdbc:	0800cded 	.word	0x0800cded
 800bdc0:	0800ce6d 	.word	0x0800ce6d

0800bdc4 <_Bfree>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	69c6      	ldr	r6, [r0, #28]
 800bdc8:	0005      	movs	r5, r0
 800bdca:	000c      	movs	r4, r1
 800bdcc:	2e00      	cmp	r6, #0
 800bdce:	d10e      	bne.n	800bdee <_Bfree+0x2a>
 800bdd0:	2010      	movs	r0, #16
 800bdd2:	f7ff fef7 	bl	800bbc4 <malloc>
 800bdd6:	1e02      	subs	r2, r0, #0
 800bdd8:	61e8      	str	r0, [r5, #28]
 800bdda:	d104      	bne.n	800bde6 <_Bfree+0x22>
 800bddc:	218f      	movs	r1, #143	@ 0x8f
 800bdde:	4b09      	ldr	r3, [pc, #36]	@ (800be04 <_Bfree+0x40>)
 800bde0:	4809      	ldr	r0, [pc, #36]	@ (800be08 <_Bfree+0x44>)
 800bde2:	f000 fe01 	bl	800c9e8 <__assert_func>
 800bde6:	6046      	str	r6, [r0, #4]
 800bde8:	6086      	str	r6, [r0, #8]
 800bdea:	6006      	str	r6, [r0, #0]
 800bdec:	60c6      	str	r6, [r0, #12]
 800bdee:	2c00      	cmp	r4, #0
 800bdf0:	d007      	beq.n	800be02 <_Bfree+0x3e>
 800bdf2:	69eb      	ldr	r3, [r5, #28]
 800bdf4:	6862      	ldr	r2, [r4, #4]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	0092      	lsls	r2, r2, #2
 800bdfa:	189b      	adds	r3, r3, r2
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	6022      	str	r2, [r4, #0]
 800be00:	601c      	str	r4, [r3, #0]
 800be02:	bd70      	pop	{r4, r5, r6, pc}
 800be04:	0800cded 	.word	0x0800cded
 800be08:	0800ce6d 	.word	0x0800ce6d

0800be0c <__multadd>:
 800be0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be0e:	000f      	movs	r7, r1
 800be10:	9001      	str	r0, [sp, #4]
 800be12:	000c      	movs	r4, r1
 800be14:	001e      	movs	r6, r3
 800be16:	2000      	movs	r0, #0
 800be18:	690d      	ldr	r5, [r1, #16]
 800be1a:	3714      	adds	r7, #20
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	3001      	adds	r0, #1
 800be20:	b299      	uxth	r1, r3
 800be22:	4351      	muls	r1, r2
 800be24:	0c1b      	lsrs	r3, r3, #16
 800be26:	4353      	muls	r3, r2
 800be28:	1989      	adds	r1, r1, r6
 800be2a:	0c0e      	lsrs	r6, r1, #16
 800be2c:	199b      	adds	r3, r3, r6
 800be2e:	0c1e      	lsrs	r6, r3, #16
 800be30:	b289      	uxth	r1, r1
 800be32:	041b      	lsls	r3, r3, #16
 800be34:	185b      	adds	r3, r3, r1
 800be36:	c708      	stmia	r7!, {r3}
 800be38:	4285      	cmp	r5, r0
 800be3a:	dcef      	bgt.n	800be1c <__multadd+0x10>
 800be3c:	2e00      	cmp	r6, #0
 800be3e:	d022      	beq.n	800be86 <__multadd+0x7a>
 800be40:	68a3      	ldr	r3, [r4, #8]
 800be42:	42ab      	cmp	r3, r5
 800be44:	dc19      	bgt.n	800be7a <__multadd+0x6e>
 800be46:	6861      	ldr	r1, [r4, #4]
 800be48:	9801      	ldr	r0, [sp, #4]
 800be4a:	3101      	adds	r1, #1
 800be4c:	f7ff ff76 	bl	800bd3c <_Balloc>
 800be50:	1e07      	subs	r7, r0, #0
 800be52:	d105      	bne.n	800be60 <__multadd+0x54>
 800be54:	003a      	movs	r2, r7
 800be56:	21ba      	movs	r1, #186	@ 0xba
 800be58:	4b0c      	ldr	r3, [pc, #48]	@ (800be8c <__multadd+0x80>)
 800be5a:	480d      	ldr	r0, [pc, #52]	@ (800be90 <__multadd+0x84>)
 800be5c:	f000 fdc4 	bl	800c9e8 <__assert_func>
 800be60:	0021      	movs	r1, r4
 800be62:	6922      	ldr	r2, [r4, #16]
 800be64:	310c      	adds	r1, #12
 800be66:	3202      	adds	r2, #2
 800be68:	0092      	lsls	r2, r2, #2
 800be6a:	300c      	adds	r0, #12
 800be6c:	f000 fdb2 	bl	800c9d4 <memcpy>
 800be70:	0021      	movs	r1, r4
 800be72:	9801      	ldr	r0, [sp, #4]
 800be74:	f7ff ffa6 	bl	800bdc4 <_Bfree>
 800be78:	003c      	movs	r4, r7
 800be7a:	1d2b      	adds	r3, r5, #4
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	18e3      	adds	r3, r4, r3
 800be80:	3501      	adds	r5, #1
 800be82:	605e      	str	r6, [r3, #4]
 800be84:	6125      	str	r5, [r4, #16]
 800be86:	0020      	movs	r0, r4
 800be88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be8a:	46c0      	nop			@ (mov r8, r8)
 800be8c:	0800ce5c 	.word	0x0800ce5c
 800be90:	0800ce6d 	.word	0x0800ce6d

0800be94 <__hi0bits>:
 800be94:	2280      	movs	r2, #128	@ 0x80
 800be96:	0003      	movs	r3, r0
 800be98:	0252      	lsls	r2, r2, #9
 800be9a:	2000      	movs	r0, #0
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d201      	bcs.n	800bea4 <__hi0bits+0x10>
 800bea0:	041b      	lsls	r3, r3, #16
 800bea2:	3010      	adds	r0, #16
 800bea4:	2280      	movs	r2, #128	@ 0x80
 800bea6:	0452      	lsls	r2, r2, #17
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d201      	bcs.n	800beb0 <__hi0bits+0x1c>
 800beac:	3008      	adds	r0, #8
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	2280      	movs	r2, #128	@ 0x80
 800beb2:	0552      	lsls	r2, r2, #21
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d201      	bcs.n	800bebc <__hi0bits+0x28>
 800beb8:	3004      	adds	r0, #4
 800beba:	011b      	lsls	r3, r3, #4
 800bebc:	2280      	movs	r2, #128	@ 0x80
 800bebe:	05d2      	lsls	r2, r2, #23
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d201      	bcs.n	800bec8 <__hi0bits+0x34>
 800bec4:	3002      	adds	r0, #2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	2b00      	cmp	r3, #0
 800beca:	db03      	blt.n	800bed4 <__hi0bits+0x40>
 800becc:	3001      	adds	r0, #1
 800bece:	4213      	tst	r3, r2
 800bed0:	d100      	bne.n	800bed4 <__hi0bits+0x40>
 800bed2:	2020      	movs	r0, #32
 800bed4:	4770      	bx	lr

0800bed6 <__lo0bits>:
 800bed6:	6803      	ldr	r3, [r0, #0]
 800bed8:	0001      	movs	r1, r0
 800beda:	2207      	movs	r2, #7
 800bedc:	0018      	movs	r0, r3
 800bede:	4010      	ands	r0, r2
 800bee0:	4213      	tst	r3, r2
 800bee2:	d00d      	beq.n	800bf00 <__lo0bits+0x2a>
 800bee4:	3a06      	subs	r2, #6
 800bee6:	2000      	movs	r0, #0
 800bee8:	4213      	tst	r3, r2
 800beea:	d105      	bne.n	800bef8 <__lo0bits+0x22>
 800beec:	3002      	adds	r0, #2
 800beee:	4203      	tst	r3, r0
 800bef0:	d003      	beq.n	800befa <__lo0bits+0x24>
 800bef2:	40d3      	lsrs	r3, r2
 800bef4:	0010      	movs	r0, r2
 800bef6:	600b      	str	r3, [r1, #0]
 800bef8:	4770      	bx	lr
 800befa:	089b      	lsrs	r3, r3, #2
 800befc:	600b      	str	r3, [r1, #0]
 800befe:	e7fb      	b.n	800bef8 <__lo0bits+0x22>
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d101      	bne.n	800bf0a <__lo0bits+0x34>
 800bf06:	2010      	movs	r0, #16
 800bf08:	0c1b      	lsrs	r3, r3, #16
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	2a00      	cmp	r2, #0
 800bf0e:	d101      	bne.n	800bf14 <__lo0bits+0x3e>
 800bf10:	3008      	adds	r0, #8
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	071a      	lsls	r2, r3, #28
 800bf16:	d101      	bne.n	800bf1c <__lo0bits+0x46>
 800bf18:	3004      	adds	r0, #4
 800bf1a:	091b      	lsrs	r3, r3, #4
 800bf1c:	079a      	lsls	r2, r3, #30
 800bf1e:	d101      	bne.n	800bf24 <__lo0bits+0x4e>
 800bf20:	3002      	adds	r0, #2
 800bf22:	089b      	lsrs	r3, r3, #2
 800bf24:	07da      	lsls	r2, r3, #31
 800bf26:	d4e9      	bmi.n	800befc <__lo0bits+0x26>
 800bf28:	3001      	adds	r0, #1
 800bf2a:	085b      	lsrs	r3, r3, #1
 800bf2c:	d1e6      	bne.n	800befc <__lo0bits+0x26>
 800bf2e:	2020      	movs	r0, #32
 800bf30:	e7e2      	b.n	800bef8 <__lo0bits+0x22>
	...

0800bf34 <__i2b>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	000c      	movs	r4, r1
 800bf38:	2101      	movs	r1, #1
 800bf3a:	f7ff feff 	bl	800bd3c <_Balloc>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d107      	bne.n	800bf52 <__i2b+0x1e>
 800bf42:	2146      	movs	r1, #70	@ 0x46
 800bf44:	4c05      	ldr	r4, [pc, #20]	@ (800bf5c <__i2b+0x28>)
 800bf46:	0002      	movs	r2, r0
 800bf48:	4b05      	ldr	r3, [pc, #20]	@ (800bf60 <__i2b+0x2c>)
 800bf4a:	0020      	movs	r0, r4
 800bf4c:	31ff      	adds	r1, #255	@ 0xff
 800bf4e:	f000 fd4b 	bl	800c9e8 <__assert_func>
 800bf52:	2301      	movs	r3, #1
 800bf54:	6144      	str	r4, [r0, #20]
 800bf56:	6103      	str	r3, [r0, #16]
 800bf58:	bd10      	pop	{r4, pc}
 800bf5a:	46c0      	nop			@ (mov r8, r8)
 800bf5c:	0800ce6d 	.word	0x0800ce6d
 800bf60:	0800ce5c 	.word	0x0800ce5c

0800bf64 <__multiply>:
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf66:	0014      	movs	r4, r2
 800bf68:	690a      	ldr	r2, [r1, #16]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	000d      	movs	r5, r1
 800bf6e:	b08b      	sub	sp, #44	@ 0x2c
 800bf70:	429a      	cmp	r2, r3
 800bf72:	db02      	blt.n	800bf7a <__multiply+0x16>
 800bf74:	0023      	movs	r3, r4
 800bf76:	000c      	movs	r4, r1
 800bf78:	001d      	movs	r5, r3
 800bf7a:	6927      	ldr	r7, [r4, #16]
 800bf7c:	692e      	ldr	r6, [r5, #16]
 800bf7e:	6861      	ldr	r1, [r4, #4]
 800bf80:	19bb      	adds	r3, r7, r6
 800bf82:	9303      	str	r3, [sp, #12]
 800bf84:	68a3      	ldr	r3, [r4, #8]
 800bf86:	19ba      	adds	r2, r7, r6
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	da00      	bge.n	800bf8e <__multiply+0x2a>
 800bf8c:	3101      	adds	r1, #1
 800bf8e:	f7ff fed5 	bl	800bd3c <_Balloc>
 800bf92:	9002      	str	r0, [sp, #8]
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d106      	bne.n	800bfa6 <__multiply+0x42>
 800bf98:	21b1      	movs	r1, #177	@ 0xb1
 800bf9a:	4b49      	ldr	r3, [pc, #292]	@ (800c0c0 <__multiply+0x15c>)
 800bf9c:	4849      	ldr	r0, [pc, #292]	@ (800c0c4 <__multiply+0x160>)
 800bf9e:	9a02      	ldr	r2, [sp, #8]
 800bfa0:	0049      	lsls	r1, r1, #1
 800bfa2:	f000 fd21 	bl	800c9e8 <__assert_func>
 800bfa6:	9b02      	ldr	r3, [sp, #8]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	3314      	adds	r3, #20
 800bfac:	469c      	mov	ip, r3
 800bfae:	19bb      	adds	r3, r7, r6
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4463      	add	r3, ip
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	4663      	mov	r3, ip
 800bfb8:	9904      	ldr	r1, [sp, #16]
 800bfba:	428b      	cmp	r3, r1
 800bfbc:	d32a      	bcc.n	800c014 <__multiply+0xb0>
 800bfbe:	0023      	movs	r3, r4
 800bfc0:	00bf      	lsls	r7, r7, #2
 800bfc2:	3314      	adds	r3, #20
 800bfc4:	3514      	adds	r5, #20
 800bfc6:	9308      	str	r3, [sp, #32]
 800bfc8:	00b6      	lsls	r6, r6, #2
 800bfca:	19db      	adds	r3, r3, r7
 800bfcc:	9305      	str	r3, [sp, #20]
 800bfce:	19ab      	adds	r3, r5, r6
 800bfd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfd2:	2304      	movs	r3, #4
 800bfd4:	9306      	str	r3, [sp, #24]
 800bfd6:	0023      	movs	r3, r4
 800bfd8:	9a05      	ldr	r2, [sp, #20]
 800bfda:	3315      	adds	r3, #21
 800bfdc:	9501      	str	r5, [sp, #4]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d305      	bcc.n	800bfee <__multiply+0x8a>
 800bfe2:	1b13      	subs	r3, r2, r4
 800bfe4:	3b15      	subs	r3, #21
 800bfe6:	089b      	lsrs	r3, r3, #2
 800bfe8:	3301      	adds	r3, #1
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	9306      	str	r3, [sp, #24]
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d310      	bcc.n	800c018 <__multiply+0xb4>
 800bff6:	9b03      	ldr	r3, [sp, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dd05      	ble.n	800c008 <__multiply+0xa4>
 800bffc:	9b04      	ldr	r3, [sp, #16]
 800bffe:	3b04      	subs	r3, #4
 800c000:	9304      	str	r3, [sp, #16]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d056      	beq.n	800c0b6 <__multiply+0x152>
 800c008:	9b02      	ldr	r3, [sp, #8]
 800c00a:	9a03      	ldr	r2, [sp, #12]
 800c00c:	0018      	movs	r0, r3
 800c00e:	611a      	str	r2, [r3, #16]
 800c010:	b00b      	add	sp, #44	@ 0x2c
 800c012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c014:	c304      	stmia	r3!, {r2}
 800c016:	e7cf      	b.n	800bfb8 <__multiply+0x54>
 800c018:	9b01      	ldr	r3, [sp, #4]
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	b280      	uxth	r0, r0
 800c01e:	2800      	cmp	r0, #0
 800c020:	d01e      	beq.n	800c060 <__multiply+0xfc>
 800c022:	4667      	mov	r7, ip
 800c024:	2500      	movs	r5, #0
 800c026:	9e08      	ldr	r6, [sp, #32]
 800c028:	ce02      	ldmia	r6!, {r1}
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	9307      	str	r3, [sp, #28]
 800c02e:	b28b      	uxth	r3, r1
 800c030:	4343      	muls	r3, r0
 800c032:	001a      	movs	r2, r3
 800c034:	466b      	mov	r3, sp
 800c036:	0c09      	lsrs	r1, r1, #16
 800c038:	8b9b      	ldrh	r3, [r3, #28]
 800c03a:	4341      	muls	r1, r0
 800c03c:	18d3      	adds	r3, r2, r3
 800c03e:	9a07      	ldr	r2, [sp, #28]
 800c040:	195b      	adds	r3, r3, r5
 800c042:	0c12      	lsrs	r2, r2, #16
 800c044:	1889      	adds	r1, r1, r2
 800c046:	0c1a      	lsrs	r2, r3, #16
 800c048:	188a      	adds	r2, r1, r2
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	0c15      	lsrs	r5, r2, #16
 800c04e:	0412      	lsls	r2, r2, #16
 800c050:	431a      	orrs	r2, r3
 800c052:	9b05      	ldr	r3, [sp, #20]
 800c054:	c704      	stmia	r7!, {r2}
 800c056:	42b3      	cmp	r3, r6
 800c058:	d8e6      	bhi.n	800c028 <__multiply+0xc4>
 800c05a:	4663      	mov	r3, ip
 800c05c:	9a06      	ldr	r2, [sp, #24]
 800c05e:	509d      	str	r5, [r3, r2]
 800c060:	9b01      	ldr	r3, [sp, #4]
 800c062:	6818      	ldr	r0, [r3, #0]
 800c064:	0c00      	lsrs	r0, r0, #16
 800c066:	d020      	beq.n	800c0aa <__multiply+0x146>
 800c068:	4663      	mov	r3, ip
 800c06a:	0025      	movs	r5, r4
 800c06c:	4661      	mov	r1, ip
 800c06e:	2700      	movs	r7, #0
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3514      	adds	r5, #20
 800c074:	682a      	ldr	r2, [r5, #0]
 800c076:	680e      	ldr	r6, [r1, #0]
 800c078:	b292      	uxth	r2, r2
 800c07a:	4342      	muls	r2, r0
 800c07c:	0c36      	lsrs	r6, r6, #16
 800c07e:	1992      	adds	r2, r2, r6
 800c080:	19d2      	adds	r2, r2, r7
 800c082:	0416      	lsls	r6, r2, #16
 800c084:	b29b      	uxth	r3, r3
 800c086:	431e      	orrs	r6, r3
 800c088:	600e      	str	r6, [r1, #0]
 800c08a:	cd40      	ldmia	r5!, {r6}
 800c08c:	684b      	ldr	r3, [r1, #4]
 800c08e:	0c36      	lsrs	r6, r6, #16
 800c090:	4346      	muls	r6, r0
 800c092:	b29b      	uxth	r3, r3
 800c094:	0c12      	lsrs	r2, r2, #16
 800c096:	18f3      	adds	r3, r6, r3
 800c098:	189b      	adds	r3, r3, r2
 800c09a:	9a05      	ldr	r2, [sp, #20]
 800c09c:	0c1f      	lsrs	r7, r3, #16
 800c09e:	3104      	adds	r1, #4
 800c0a0:	42aa      	cmp	r2, r5
 800c0a2:	d8e7      	bhi.n	800c074 <__multiply+0x110>
 800c0a4:	4662      	mov	r2, ip
 800c0a6:	9906      	ldr	r1, [sp, #24]
 800c0a8:	5053      	str	r3, [r2, r1]
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	2304      	movs	r3, #4
 800c0b2:	449c      	add	ip, r3
 800c0b4:	e79b      	b.n	800bfee <__multiply+0x8a>
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	9303      	str	r3, [sp, #12]
 800c0bc:	e79b      	b.n	800bff6 <__multiply+0x92>
 800c0be:	46c0      	nop			@ (mov r8, r8)
 800c0c0:	0800ce5c 	.word	0x0800ce5c
 800c0c4:	0800ce6d 	.word	0x0800ce6d

0800c0c8 <__pow5mult>:
 800c0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	0015      	movs	r5, r2
 800c0ce:	0007      	movs	r7, r0
 800c0d0:	000e      	movs	r6, r1
 800c0d2:	401a      	ands	r2, r3
 800c0d4:	421d      	tst	r5, r3
 800c0d6:	d008      	beq.n	800c0ea <__pow5mult+0x22>
 800c0d8:	4925      	ldr	r1, [pc, #148]	@ (800c170 <__pow5mult+0xa8>)
 800c0da:	3a01      	subs	r2, #1
 800c0dc:	0092      	lsls	r2, r2, #2
 800c0de:	5852      	ldr	r2, [r2, r1]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	0031      	movs	r1, r6
 800c0e4:	f7ff fe92 	bl	800be0c <__multadd>
 800c0e8:	0006      	movs	r6, r0
 800c0ea:	10ad      	asrs	r5, r5, #2
 800c0ec:	d03d      	beq.n	800c16a <__pow5mult+0xa2>
 800c0ee:	69fc      	ldr	r4, [r7, #28]
 800c0f0:	2c00      	cmp	r4, #0
 800c0f2:	d10f      	bne.n	800c114 <__pow5mult+0x4c>
 800c0f4:	2010      	movs	r0, #16
 800c0f6:	f7ff fd65 	bl	800bbc4 <malloc>
 800c0fa:	1e02      	subs	r2, r0, #0
 800c0fc:	61f8      	str	r0, [r7, #28]
 800c0fe:	d105      	bne.n	800c10c <__pow5mult+0x44>
 800c100:	21b4      	movs	r1, #180	@ 0xb4
 800c102:	4b1c      	ldr	r3, [pc, #112]	@ (800c174 <__pow5mult+0xac>)
 800c104:	481c      	ldr	r0, [pc, #112]	@ (800c178 <__pow5mult+0xb0>)
 800c106:	31ff      	adds	r1, #255	@ 0xff
 800c108:	f000 fc6e 	bl	800c9e8 <__assert_func>
 800c10c:	6044      	str	r4, [r0, #4]
 800c10e:	6084      	str	r4, [r0, #8]
 800c110:	6004      	str	r4, [r0, #0]
 800c112:	60c4      	str	r4, [r0, #12]
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	689c      	ldr	r4, [r3, #8]
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	d108      	bne.n	800c130 <__pow5mult+0x68>
 800c11e:	0038      	movs	r0, r7
 800c120:	4916      	ldr	r1, [pc, #88]	@ (800c17c <__pow5mult+0xb4>)
 800c122:	f7ff ff07 	bl	800bf34 <__i2b>
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	0004      	movs	r4, r0
 800c12a:	6098      	str	r0, [r3, #8]
 800c12c:	2300      	movs	r3, #0
 800c12e:	6003      	str	r3, [r0, #0]
 800c130:	2301      	movs	r3, #1
 800c132:	421d      	tst	r5, r3
 800c134:	d00a      	beq.n	800c14c <__pow5mult+0x84>
 800c136:	0031      	movs	r1, r6
 800c138:	0022      	movs	r2, r4
 800c13a:	0038      	movs	r0, r7
 800c13c:	f7ff ff12 	bl	800bf64 <__multiply>
 800c140:	0031      	movs	r1, r6
 800c142:	9001      	str	r0, [sp, #4]
 800c144:	0038      	movs	r0, r7
 800c146:	f7ff fe3d 	bl	800bdc4 <_Bfree>
 800c14a:	9e01      	ldr	r6, [sp, #4]
 800c14c:	106d      	asrs	r5, r5, #1
 800c14e:	d00c      	beq.n	800c16a <__pow5mult+0xa2>
 800c150:	6820      	ldr	r0, [r4, #0]
 800c152:	2800      	cmp	r0, #0
 800c154:	d107      	bne.n	800c166 <__pow5mult+0x9e>
 800c156:	0022      	movs	r2, r4
 800c158:	0021      	movs	r1, r4
 800c15a:	0038      	movs	r0, r7
 800c15c:	f7ff ff02 	bl	800bf64 <__multiply>
 800c160:	2300      	movs	r3, #0
 800c162:	6020      	str	r0, [r4, #0]
 800c164:	6003      	str	r3, [r0, #0]
 800c166:	0004      	movs	r4, r0
 800c168:	e7e2      	b.n	800c130 <__pow5mult+0x68>
 800c16a:	0030      	movs	r0, r6
 800c16c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c16e:	46c0      	nop			@ (mov r8, r8)
 800c170:	0800cec8 	.word	0x0800cec8
 800c174:	0800cded 	.word	0x0800cded
 800c178:	0800ce6d 	.word	0x0800ce6d
 800c17c:	00000271 	.word	0x00000271

0800c180 <__lshift>:
 800c180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c182:	000c      	movs	r4, r1
 800c184:	0016      	movs	r6, r2
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	1157      	asrs	r7, r2, #5
 800c18a:	b085      	sub	sp, #20
 800c18c:	18fb      	adds	r3, r7, r3
 800c18e:	9301      	str	r3, [sp, #4]
 800c190:	3301      	adds	r3, #1
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	6849      	ldr	r1, [r1, #4]
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	9002      	str	r0, [sp, #8]
 800c19a:	9a00      	ldr	r2, [sp, #0]
 800c19c:	4293      	cmp	r3, r2
 800c19e:	db10      	blt.n	800c1c2 <__lshift+0x42>
 800c1a0:	9802      	ldr	r0, [sp, #8]
 800c1a2:	f7ff fdcb 	bl	800bd3c <_Balloc>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	0001      	movs	r1, r0
 800c1aa:	0005      	movs	r5, r0
 800c1ac:	001a      	movs	r2, r3
 800c1ae:	3114      	adds	r1, #20
 800c1b0:	4298      	cmp	r0, r3
 800c1b2:	d10c      	bne.n	800c1ce <__lshift+0x4e>
 800c1b4:	21ef      	movs	r1, #239	@ 0xef
 800c1b6:	002a      	movs	r2, r5
 800c1b8:	4b25      	ldr	r3, [pc, #148]	@ (800c250 <__lshift+0xd0>)
 800c1ba:	4826      	ldr	r0, [pc, #152]	@ (800c254 <__lshift+0xd4>)
 800c1bc:	0049      	lsls	r1, r1, #1
 800c1be:	f000 fc13 	bl	800c9e8 <__assert_func>
 800c1c2:	3101      	adds	r1, #1
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	e7e8      	b.n	800c19a <__lshift+0x1a>
 800c1c8:	0098      	lsls	r0, r3, #2
 800c1ca:	500a      	str	r2, [r1, r0]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	42bb      	cmp	r3, r7
 800c1d0:	dbfa      	blt.n	800c1c8 <__lshift+0x48>
 800c1d2:	43fb      	mvns	r3, r7
 800c1d4:	17db      	asrs	r3, r3, #31
 800c1d6:	401f      	ands	r7, r3
 800c1d8:	00bf      	lsls	r7, r7, #2
 800c1da:	0023      	movs	r3, r4
 800c1dc:	201f      	movs	r0, #31
 800c1de:	19c9      	adds	r1, r1, r7
 800c1e0:	0037      	movs	r7, r6
 800c1e2:	6922      	ldr	r2, [r4, #16]
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	0092      	lsls	r2, r2, #2
 800c1e8:	189a      	adds	r2, r3, r2
 800c1ea:	4007      	ands	r7, r0
 800c1ec:	4206      	tst	r6, r0
 800c1ee:	d029      	beq.n	800c244 <__lshift+0xc4>
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	1bc0      	subs	r0, r0, r7
 800c1f4:	9003      	str	r0, [sp, #12]
 800c1f6:	468c      	mov	ip, r1
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	681e      	ldr	r6, [r3, #0]
 800c1fc:	40be      	lsls	r6, r7
 800c1fe:	4306      	orrs	r6, r0
 800c200:	4660      	mov	r0, ip
 800c202:	c040      	stmia	r0!, {r6}
 800c204:	4684      	mov	ip, r0
 800c206:	9e03      	ldr	r6, [sp, #12]
 800c208:	cb01      	ldmia	r3!, {r0}
 800c20a:	40f0      	lsrs	r0, r6
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d8f4      	bhi.n	800c1fa <__lshift+0x7a>
 800c210:	0026      	movs	r6, r4
 800c212:	3615      	adds	r6, #21
 800c214:	2304      	movs	r3, #4
 800c216:	42b2      	cmp	r2, r6
 800c218:	d304      	bcc.n	800c224 <__lshift+0xa4>
 800c21a:	1b13      	subs	r3, r2, r4
 800c21c:	3b15      	subs	r3, #21
 800c21e:	089b      	lsrs	r3, r3, #2
 800c220:	3301      	adds	r3, #1
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	50c8      	str	r0, [r1, r3]
 800c226:	2800      	cmp	r0, #0
 800c228:	d002      	beq.n	800c230 <__lshift+0xb0>
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	3302      	adds	r3, #2
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	9802      	ldr	r0, [sp, #8]
 800c234:	3b01      	subs	r3, #1
 800c236:	0021      	movs	r1, r4
 800c238:	612b      	str	r3, [r5, #16]
 800c23a:	f7ff fdc3 	bl	800bdc4 <_Bfree>
 800c23e:	0028      	movs	r0, r5
 800c240:	b005      	add	sp, #20
 800c242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c244:	cb01      	ldmia	r3!, {r0}
 800c246:	c101      	stmia	r1!, {r0}
 800c248:	429a      	cmp	r2, r3
 800c24a:	d8fb      	bhi.n	800c244 <__lshift+0xc4>
 800c24c:	e7f0      	b.n	800c230 <__lshift+0xb0>
 800c24e:	46c0      	nop			@ (mov r8, r8)
 800c250:	0800ce5c 	.word	0x0800ce5c
 800c254:	0800ce6d 	.word	0x0800ce6d

0800c258 <__mcmp>:
 800c258:	b530      	push	{r4, r5, lr}
 800c25a:	690b      	ldr	r3, [r1, #16]
 800c25c:	6904      	ldr	r4, [r0, #16]
 800c25e:	0002      	movs	r2, r0
 800c260:	1ae0      	subs	r0, r4, r3
 800c262:	429c      	cmp	r4, r3
 800c264:	d10f      	bne.n	800c286 <__mcmp+0x2e>
 800c266:	3214      	adds	r2, #20
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	3114      	adds	r1, #20
 800c26c:	0014      	movs	r4, r2
 800c26e:	18c9      	adds	r1, r1, r3
 800c270:	18d2      	adds	r2, r2, r3
 800c272:	3a04      	subs	r2, #4
 800c274:	3904      	subs	r1, #4
 800c276:	6815      	ldr	r5, [r2, #0]
 800c278:	680b      	ldr	r3, [r1, #0]
 800c27a:	429d      	cmp	r5, r3
 800c27c:	d004      	beq.n	800c288 <__mcmp+0x30>
 800c27e:	2001      	movs	r0, #1
 800c280:	429d      	cmp	r5, r3
 800c282:	d200      	bcs.n	800c286 <__mcmp+0x2e>
 800c284:	3802      	subs	r0, #2
 800c286:	bd30      	pop	{r4, r5, pc}
 800c288:	4294      	cmp	r4, r2
 800c28a:	d3f2      	bcc.n	800c272 <__mcmp+0x1a>
 800c28c:	e7fb      	b.n	800c286 <__mcmp+0x2e>
	...

0800c290 <__mdiff>:
 800c290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c292:	000c      	movs	r4, r1
 800c294:	b087      	sub	sp, #28
 800c296:	9000      	str	r0, [sp, #0]
 800c298:	0011      	movs	r1, r2
 800c29a:	0020      	movs	r0, r4
 800c29c:	0017      	movs	r7, r2
 800c29e:	f7ff ffdb 	bl	800c258 <__mcmp>
 800c2a2:	1e05      	subs	r5, r0, #0
 800c2a4:	d110      	bne.n	800c2c8 <__mdiff+0x38>
 800c2a6:	0001      	movs	r1, r0
 800c2a8:	9800      	ldr	r0, [sp, #0]
 800c2aa:	f7ff fd47 	bl	800bd3c <_Balloc>
 800c2ae:	1e02      	subs	r2, r0, #0
 800c2b0:	d104      	bne.n	800c2bc <__mdiff+0x2c>
 800c2b2:	4b40      	ldr	r3, [pc, #256]	@ (800c3b4 <__mdiff+0x124>)
 800c2b4:	4840      	ldr	r0, [pc, #256]	@ (800c3b8 <__mdiff+0x128>)
 800c2b6:	4941      	ldr	r1, [pc, #260]	@ (800c3bc <__mdiff+0x12c>)
 800c2b8:	f000 fb96 	bl	800c9e8 <__assert_func>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	6145      	str	r5, [r0, #20]
 800c2c0:	6103      	str	r3, [r0, #16]
 800c2c2:	0010      	movs	r0, r2
 800c2c4:	b007      	add	sp, #28
 800c2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c8:	2600      	movs	r6, #0
 800c2ca:	42b0      	cmp	r0, r6
 800c2cc:	da03      	bge.n	800c2d6 <__mdiff+0x46>
 800c2ce:	0023      	movs	r3, r4
 800c2d0:	003c      	movs	r4, r7
 800c2d2:	001f      	movs	r7, r3
 800c2d4:	3601      	adds	r6, #1
 800c2d6:	6861      	ldr	r1, [r4, #4]
 800c2d8:	9800      	ldr	r0, [sp, #0]
 800c2da:	f7ff fd2f 	bl	800bd3c <_Balloc>
 800c2de:	1e02      	subs	r2, r0, #0
 800c2e0:	d103      	bne.n	800c2ea <__mdiff+0x5a>
 800c2e2:	4b34      	ldr	r3, [pc, #208]	@ (800c3b4 <__mdiff+0x124>)
 800c2e4:	4834      	ldr	r0, [pc, #208]	@ (800c3b8 <__mdiff+0x128>)
 800c2e6:	4936      	ldr	r1, [pc, #216]	@ (800c3c0 <__mdiff+0x130>)
 800c2e8:	e7e6      	b.n	800c2b8 <__mdiff+0x28>
 800c2ea:	6923      	ldr	r3, [r4, #16]
 800c2ec:	3414      	adds	r4, #20
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	18e3      	adds	r3, r4, r3
 800c2f4:	0021      	movs	r1, r4
 800c2f6:	9401      	str	r4, [sp, #4]
 800c2f8:	003c      	movs	r4, r7
 800c2fa:	9302      	str	r3, [sp, #8]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	3414      	adds	r4, #20
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	18e3      	adds	r3, r4, r3
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	0003      	movs	r3, r0
 800c308:	60c6      	str	r6, [r0, #12]
 800c30a:	468c      	mov	ip, r1
 800c30c:	2000      	movs	r0, #0
 800c30e:	3314      	adds	r3, #20
 800c310:	9304      	str	r3, [sp, #16]
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	4663      	mov	r3, ip
 800c316:	cb20      	ldmia	r3!, {r5}
 800c318:	b2a9      	uxth	r1, r5
 800c31a:	000e      	movs	r6, r1
 800c31c:	469c      	mov	ip, r3
 800c31e:	cc08      	ldmia	r4!, {r3}
 800c320:	0c2d      	lsrs	r5, r5, #16
 800c322:	b299      	uxth	r1, r3
 800c324:	1a71      	subs	r1, r6, r1
 800c326:	1809      	adds	r1, r1, r0
 800c328:	0c1b      	lsrs	r3, r3, #16
 800c32a:	1408      	asrs	r0, r1, #16
 800c32c:	1aeb      	subs	r3, r5, r3
 800c32e:	181b      	adds	r3, r3, r0
 800c330:	1418      	asrs	r0, r3, #16
 800c332:	b289      	uxth	r1, r1
 800c334:	041b      	lsls	r3, r3, #16
 800c336:	4319      	orrs	r1, r3
 800c338:	9b05      	ldr	r3, [sp, #20]
 800c33a:	c302      	stmia	r3!, {r1}
 800c33c:	9305      	str	r3, [sp, #20]
 800c33e:	9b03      	ldr	r3, [sp, #12]
 800c340:	42a3      	cmp	r3, r4
 800c342:	d8e7      	bhi.n	800c314 <__mdiff+0x84>
 800c344:	0039      	movs	r1, r7
 800c346:	9c03      	ldr	r4, [sp, #12]
 800c348:	3115      	adds	r1, #21
 800c34a:	2304      	movs	r3, #4
 800c34c:	428c      	cmp	r4, r1
 800c34e:	d304      	bcc.n	800c35a <__mdiff+0xca>
 800c350:	1be3      	subs	r3, r4, r7
 800c352:	3b15      	subs	r3, #21
 800c354:	089b      	lsrs	r3, r3, #2
 800c356:	3301      	adds	r3, #1
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	9901      	ldr	r1, [sp, #4]
 800c35c:	18cd      	adds	r5, r1, r3
 800c35e:	9904      	ldr	r1, [sp, #16]
 800c360:	002e      	movs	r6, r5
 800c362:	18cb      	adds	r3, r1, r3
 800c364:	001f      	movs	r7, r3
 800c366:	9902      	ldr	r1, [sp, #8]
 800c368:	428e      	cmp	r6, r1
 800c36a:	d311      	bcc.n	800c390 <__mdiff+0x100>
 800c36c:	9c02      	ldr	r4, [sp, #8]
 800c36e:	1ee9      	subs	r1, r5, #3
 800c370:	2000      	movs	r0, #0
 800c372:	428c      	cmp	r4, r1
 800c374:	d304      	bcc.n	800c380 <__mdiff+0xf0>
 800c376:	0021      	movs	r1, r4
 800c378:	3103      	adds	r1, #3
 800c37a:	1b49      	subs	r1, r1, r5
 800c37c:	0889      	lsrs	r1, r1, #2
 800c37e:	0088      	lsls	r0, r1, #2
 800c380:	181b      	adds	r3, r3, r0
 800c382:	3b04      	subs	r3, #4
 800c384:	6819      	ldr	r1, [r3, #0]
 800c386:	2900      	cmp	r1, #0
 800c388:	d010      	beq.n	800c3ac <__mdiff+0x11c>
 800c38a:	9b00      	ldr	r3, [sp, #0]
 800c38c:	6113      	str	r3, [r2, #16]
 800c38e:	e798      	b.n	800c2c2 <__mdiff+0x32>
 800c390:	4684      	mov	ip, r0
 800c392:	ce02      	ldmia	r6!, {r1}
 800c394:	b288      	uxth	r0, r1
 800c396:	4460      	add	r0, ip
 800c398:	1400      	asrs	r0, r0, #16
 800c39a:	0c0c      	lsrs	r4, r1, #16
 800c39c:	1904      	adds	r4, r0, r4
 800c39e:	4461      	add	r1, ip
 800c3a0:	1420      	asrs	r0, r4, #16
 800c3a2:	b289      	uxth	r1, r1
 800c3a4:	0424      	lsls	r4, r4, #16
 800c3a6:	4321      	orrs	r1, r4
 800c3a8:	c702      	stmia	r7!, {r1}
 800c3aa:	e7dc      	b.n	800c366 <__mdiff+0xd6>
 800c3ac:	9900      	ldr	r1, [sp, #0]
 800c3ae:	3901      	subs	r1, #1
 800c3b0:	9100      	str	r1, [sp, #0]
 800c3b2:	e7e6      	b.n	800c382 <__mdiff+0xf2>
 800c3b4:	0800ce5c 	.word	0x0800ce5c
 800c3b8:	0800ce6d 	.word	0x0800ce6d
 800c3bc:	00000237 	.word	0x00000237
 800c3c0:	00000245 	.word	0x00000245

0800c3c4 <__d2b>:
 800c3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	0016      	movs	r6, r2
 800c3ca:	001f      	movs	r7, r3
 800c3cc:	f7ff fcb6 	bl	800bd3c <_Balloc>
 800c3d0:	1e04      	subs	r4, r0, #0
 800c3d2:	d105      	bne.n	800c3e0 <__d2b+0x1c>
 800c3d4:	0022      	movs	r2, r4
 800c3d6:	4b25      	ldr	r3, [pc, #148]	@ (800c46c <__d2b+0xa8>)
 800c3d8:	4825      	ldr	r0, [pc, #148]	@ (800c470 <__d2b+0xac>)
 800c3da:	4926      	ldr	r1, [pc, #152]	@ (800c474 <__d2b+0xb0>)
 800c3dc:	f000 fb04 	bl	800c9e8 <__assert_func>
 800c3e0:	033b      	lsls	r3, r7, #12
 800c3e2:	007d      	lsls	r5, r7, #1
 800c3e4:	0b1b      	lsrs	r3, r3, #12
 800c3e6:	0d6d      	lsrs	r5, r5, #21
 800c3e8:	d002      	beq.n	800c3f0 <__d2b+0x2c>
 800c3ea:	2280      	movs	r2, #128	@ 0x80
 800c3ec:	0352      	lsls	r2, r2, #13
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	9301      	str	r3, [sp, #4]
 800c3f2:	2e00      	cmp	r6, #0
 800c3f4:	d025      	beq.n	800c442 <__d2b+0x7e>
 800c3f6:	4668      	mov	r0, sp
 800c3f8:	9600      	str	r6, [sp, #0]
 800c3fa:	f7ff fd6c 	bl	800bed6 <__lo0bits>
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	9900      	ldr	r1, [sp, #0]
 800c402:	2800      	cmp	r0, #0
 800c404:	d01b      	beq.n	800c43e <__d2b+0x7a>
 800c406:	2220      	movs	r2, #32
 800c408:	001e      	movs	r6, r3
 800c40a:	1a12      	subs	r2, r2, r0
 800c40c:	4096      	lsls	r6, r2
 800c40e:	0032      	movs	r2, r6
 800c410:	40c3      	lsrs	r3, r0
 800c412:	430a      	orrs	r2, r1
 800c414:	6162      	str	r2, [r4, #20]
 800c416:	9301      	str	r3, [sp, #4]
 800c418:	9e01      	ldr	r6, [sp, #4]
 800c41a:	61a6      	str	r6, [r4, #24]
 800c41c:	1e73      	subs	r3, r6, #1
 800c41e:	419e      	sbcs	r6, r3
 800c420:	3601      	adds	r6, #1
 800c422:	6126      	str	r6, [r4, #16]
 800c424:	2d00      	cmp	r5, #0
 800c426:	d014      	beq.n	800c452 <__d2b+0x8e>
 800c428:	2635      	movs	r6, #53	@ 0x35
 800c42a:	4b13      	ldr	r3, [pc, #76]	@ (800c478 <__d2b+0xb4>)
 800c42c:	18ed      	adds	r5, r5, r3
 800c42e:	9b08      	ldr	r3, [sp, #32]
 800c430:	182d      	adds	r5, r5, r0
 800c432:	601d      	str	r5, [r3, #0]
 800c434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c436:	1a36      	subs	r6, r6, r0
 800c438:	601e      	str	r6, [r3, #0]
 800c43a:	0020      	movs	r0, r4
 800c43c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c43e:	6161      	str	r1, [r4, #20]
 800c440:	e7ea      	b.n	800c418 <__d2b+0x54>
 800c442:	a801      	add	r0, sp, #4
 800c444:	f7ff fd47 	bl	800bed6 <__lo0bits>
 800c448:	9b01      	ldr	r3, [sp, #4]
 800c44a:	2601      	movs	r6, #1
 800c44c:	6163      	str	r3, [r4, #20]
 800c44e:	3020      	adds	r0, #32
 800c450:	e7e7      	b.n	800c422 <__d2b+0x5e>
 800c452:	4b0a      	ldr	r3, [pc, #40]	@ (800c47c <__d2b+0xb8>)
 800c454:	18c0      	adds	r0, r0, r3
 800c456:	9b08      	ldr	r3, [sp, #32]
 800c458:	6018      	str	r0, [r3, #0]
 800c45a:	4b09      	ldr	r3, [pc, #36]	@ (800c480 <__d2b+0xbc>)
 800c45c:	18f3      	adds	r3, r6, r3
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	18e3      	adds	r3, r4, r3
 800c462:	6958      	ldr	r0, [r3, #20]
 800c464:	f7ff fd16 	bl	800be94 <__hi0bits>
 800c468:	0176      	lsls	r6, r6, #5
 800c46a:	e7e3      	b.n	800c434 <__d2b+0x70>
 800c46c:	0800ce5c 	.word	0x0800ce5c
 800c470:	0800ce6d 	.word	0x0800ce6d
 800c474:	0000030f 	.word	0x0000030f
 800c478:	fffffbcd 	.word	0xfffffbcd
 800c47c:	fffffbce 	.word	0xfffffbce
 800c480:	3fffffff 	.word	0x3fffffff

0800c484 <__sfputc_r>:
 800c484:	6893      	ldr	r3, [r2, #8]
 800c486:	b510      	push	{r4, lr}
 800c488:	3b01      	subs	r3, #1
 800c48a:	6093      	str	r3, [r2, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	da04      	bge.n	800c49a <__sfputc_r+0x16>
 800c490:	6994      	ldr	r4, [r2, #24]
 800c492:	42a3      	cmp	r3, r4
 800c494:	db07      	blt.n	800c4a6 <__sfputc_r+0x22>
 800c496:	290a      	cmp	r1, #10
 800c498:	d005      	beq.n	800c4a6 <__sfputc_r+0x22>
 800c49a:	6813      	ldr	r3, [r2, #0]
 800c49c:	1c58      	adds	r0, r3, #1
 800c49e:	6010      	str	r0, [r2, #0]
 800c4a0:	7019      	strb	r1, [r3, #0]
 800c4a2:	0008      	movs	r0, r1
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	f000 f9e2 	bl	800c86e <__swbuf_r>
 800c4aa:	0001      	movs	r1, r0
 800c4ac:	e7f9      	b.n	800c4a2 <__sfputc_r+0x1e>

0800c4ae <__sfputs_r>:
 800c4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b0:	0006      	movs	r6, r0
 800c4b2:	000f      	movs	r7, r1
 800c4b4:	0014      	movs	r4, r2
 800c4b6:	18d5      	adds	r5, r2, r3
 800c4b8:	42ac      	cmp	r4, r5
 800c4ba:	d101      	bne.n	800c4c0 <__sfputs_r+0x12>
 800c4bc:	2000      	movs	r0, #0
 800c4be:	e007      	b.n	800c4d0 <__sfputs_r+0x22>
 800c4c0:	7821      	ldrb	r1, [r4, #0]
 800c4c2:	003a      	movs	r2, r7
 800c4c4:	0030      	movs	r0, r6
 800c4c6:	f7ff ffdd 	bl	800c484 <__sfputc_r>
 800c4ca:	3401      	adds	r4, #1
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d1f3      	bne.n	800c4b8 <__sfputs_r+0xa>
 800c4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4d4 <_vfiprintf_r>:
 800c4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4d6:	b0a1      	sub	sp, #132	@ 0x84
 800c4d8:	000f      	movs	r7, r1
 800c4da:	0015      	movs	r5, r2
 800c4dc:	001e      	movs	r6, r3
 800c4de:	9003      	str	r0, [sp, #12]
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d004      	beq.n	800c4ee <_vfiprintf_r+0x1a>
 800c4e4:	6a03      	ldr	r3, [r0, #32]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <_vfiprintf_r+0x1a>
 800c4ea:	f7fe fb8d 	bl	800ac08 <__sinit>
 800c4ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4f0:	07db      	lsls	r3, r3, #31
 800c4f2:	d405      	bmi.n	800c500 <_vfiprintf_r+0x2c>
 800c4f4:	89bb      	ldrh	r3, [r7, #12]
 800c4f6:	059b      	lsls	r3, r3, #22
 800c4f8:	d402      	bmi.n	800c500 <_vfiprintf_r+0x2c>
 800c4fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c4fc:	f7fe fc89 	bl	800ae12 <__retarget_lock_acquire_recursive>
 800c500:	89bb      	ldrh	r3, [r7, #12]
 800c502:	071b      	lsls	r3, r3, #28
 800c504:	d502      	bpl.n	800c50c <_vfiprintf_r+0x38>
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d113      	bne.n	800c534 <_vfiprintf_r+0x60>
 800c50c:	0039      	movs	r1, r7
 800c50e:	9803      	ldr	r0, [sp, #12]
 800c510:	f000 f9f0 	bl	800c8f4 <__swsetup_r>
 800c514:	2800      	cmp	r0, #0
 800c516:	d00d      	beq.n	800c534 <_vfiprintf_r+0x60>
 800c518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c51a:	07db      	lsls	r3, r3, #31
 800c51c:	d503      	bpl.n	800c526 <_vfiprintf_r+0x52>
 800c51e:	2001      	movs	r0, #1
 800c520:	4240      	negs	r0, r0
 800c522:	b021      	add	sp, #132	@ 0x84
 800c524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c526:	89bb      	ldrh	r3, [r7, #12]
 800c528:	059b      	lsls	r3, r3, #22
 800c52a:	d4f8      	bmi.n	800c51e <_vfiprintf_r+0x4a>
 800c52c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c52e:	f7fe fc71 	bl	800ae14 <__retarget_lock_release_recursive>
 800c532:	e7f4      	b.n	800c51e <_vfiprintf_r+0x4a>
 800c534:	2300      	movs	r3, #0
 800c536:	ac08      	add	r4, sp, #32
 800c538:	6163      	str	r3, [r4, #20]
 800c53a:	3320      	adds	r3, #32
 800c53c:	7663      	strb	r3, [r4, #25]
 800c53e:	3310      	adds	r3, #16
 800c540:	76a3      	strb	r3, [r4, #26]
 800c542:	9607      	str	r6, [sp, #28]
 800c544:	002e      	movs	r6, r5
 800c546:	7833      	ldrb	r3, [r6, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <_vfiprintf_r+0x7c>
 800c54c:	2b25      	cmp	r3, #37	@ 0x25
 800c54e:	d148      	bne.n	800c5e2 <_vfiprintf_r+0x10e>
 800c550:	1b73      	subs	r3, r6, r5
 800c552:	9305      	str	r3, [sp, #20]
 800c554:	42ae      	cmp	r6, r5
 800c556:	d00b      	beq.n	800c570 <_vfiprintf_r+0x9c>
 800c558:	002a      	movs	r2, r5
 800c55a:	0039      	movs	r1, r7
 800c55c:	9803      	ldr	r0, [sp, #12]
 800c55e:	f7ff ffa6 	bl	800c4ae <__sfputs_r>
 800c562:	3001      	adds	r0, #1
 800c564:	d100      	bne.n	800c568 <_vfiprintf_r+0x94>
 800c566:	e0ae      	b.n	800c6c6 <_vfiprintf_r+0x1f2>
 800c568:	6963      	ldr	r3, [r4, #20]
 800c56a:	9a05      	ldr	r2, [sp, #20]
 800c56c:	189b      	adds	r3, r3, r2
 800c56e:	6163      	str	r3, [r4, #20]
 800c570:	7833      	ldrb	r3, [r6, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d100      	bne.n	800c578 <_vfiprintf_r+0xa4>
 800c576:	e0a6      	b.n	800c6c6 <_vfiprintf_r+0x1f2>
 800c578:	2201      	movs	r2, #1
 800c57a:	2300      	movs	r3, #0
 800c57c:	4252      	negs	r2, r2
 800c57e:	6062      	str	r2, [r4, #4]
 800c580:	a904      	add	r1, sp, #16
 800c582:	3254      	adds	r2, #84	@ 0x54
 800c584:	1852      	adds	r2, r2, r1
 800c586:	1c75      	adds	r5, r6, #1
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	60e3      	str	r3, [r4, #12]
 800c58c:	60a3      	str	r3, [r4, #8]
 800c58e:	7013      	strb	r3, [r2, #0]
 800c590:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c592:	4b59      	ldr	r3, [pc, #356]	@ (800c6f8 <_vfiprintf_r+0x224>)
 800c594:	2205      	movs	r2, #5
 800c596:	0018      	movs	r0, r3
 800c598:	7829      	ldrb	r1, [r5, #0]
 800c59a:	9305      	str	r3, [sp, #20]
 800c59c:	f7fe fc3b 	bl	800ae16 <memchr>
 800c5a0:	1c6e      	adds	r6, r5, #1
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d11f      	bne.n	800c5e6 <_vfiprintf_r+0x112>
 800c5a6:	6822      	ldr	r2, [r4, #0]
 800c5a8:	06d3      	lsls	r3, r2, #27
 800c5aa:	d504      	bpl.n	800c5b6 <_vfiprintf_r+0xe2>
 800c5ac:	2353      	movs	r3, #83	@ 0x53
 800c5ae:	a904      	add	r1, sp, #16
 800c5b0:	185b      	adds	r3, r3, r1
 800c5b2:	2120      	movs	r1, #32
 800c5b4:	7019      	strb	r1, [r3, #0]
 800c5b6:	0713      	lsls	r3, r2, #28
 800c5b8:	d504      	bpl.n	800c5c4 <_vfiprintf_r+0xf0>
 800c5ba:	2353      	movs	r3, #83	@ 0x53
 800c5bc:	a904      	add	r1, sp, #16
 800c5be:	185b      	adds	r3, r3, r1
 800c5c0:	212b      	movs	r1, #43	@ 0x2b
 800c5c2:	7019      	strb	r1, [r3, #0]
 800c5c4:	782b      	ldrb	r3, [r5, #0]
 800c5c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5c8:	d016      	beq.n	800c5f8 <_vfiprintf_r+0x124>
 800c5ca:	002e      	movs	r6, r5
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	200a      	movs	r0, #10
 800c5d0:	68e3      	ldr	r3, [r4, #12]
 800c5d2:	7832      	ldrb	r2, [r6, #0]
 800c5d4:	1c75      	adds	r5, r6, #1
 800c5d6:	3a30      	subs	r2, #48	@ 0x30
 800c5d8:	2a09      	cmp	r2, #9
 800c5da:	d950      	bls.n	800c67e <_vfiprintf_r+0x1aa>
 800c5dc:	2900      	cmp	r1, #0
 800c5de:	d111      	bne.n	800c604 <_vfiprintf_r+0x130>
 800c5e0:	e017      	b.n	800c612 <_vfiprintf_r+0x13e>
 800c5e2:	3601      	adds	r6, #1
 800c5e4:	e7af      	b.n	800c546 <_vfiprintf_r+0x72>
 800c5e6:	9b05      	ldr	r3, [sp, #20]
 800c5e8:	6822      	ldr	r2, [r4, #0]
 800c5ea:	1ac0      	subs	r0, r0, r3
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	4083      	lsls	r3, r0
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	0035      	movs	r5, r6
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	e7cc      	b.n	800c592 <_vfiprintf_r+0xbe>
 800c5f8:	9b07      	ldr	r3, [sp, #28]
 800c5fa:	1d19      	adds	r1, r3, #4
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	9107      	str	r1, [sp, #28]
 800c600:	2b00      	cmp	r3, #0
 800c602:	db01      	blt.n	800c608 <_vfiprintf_r+0x134>
 800c604:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c606:	e004      	b.n	800c612 <_vfiprintf_r+0x13e>
 800c608:	425b      	negs	r3, r3
 800c60a:	60e3      	str	r3, [r4, #12]
 800c60c:	2302      	movs	r3, #2
 800c60e:	4313      	orrs	r3, r2
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	7833      	ldrb	r3, [r6, #0]
 800c614:	2b2e      	cmp	r3, #46	@ 0x2e
 800c616:	d10c      	bne.n	800c632 <_vfiprintf_r+0x15e>
 800c618:	7873      	ldrb	r3, [r6, #1]
 800c61a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c61c:	d134      	bne.n	800c688 <_vfiprintf_r+0x1b4>
 800c61e:	9b07      	ldr	r3, [sp, #28]
 800c620:	3602      	adds	r6, #2
 800c622:	1d1a      	adds	r2, r3, #4
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	9207      	str	r2, [sp, #28]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	da01      	bge.n	800c630 <_vfiprintf_r+0x15c>
 800c62c:	2301      	movs	r3, #1
 800c62e:	425b      	negs	r3, r3
 800c630:	9309      	str	r3, [sp, #36]	@ 0x24
 800c632:	4d32      	ldr	r5, [pc, #200]	@ (800c6fc <_vfiprintf_r+0x228>)
 800c634:	2203      	movs	r2, #3
 800c636:	0028      	movs	r0, r5
 800c638:	7831      	ldrb	r1, [r6, #0]
 800c63a:	f7fe fbec 	bl	800ae16 <memchr>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d006      	beq.n	800c650 <_vfiprintf_r+0x17c>
 800c642:	2340      	movs	r3, #64	@ 0x40
 800c644:	1b40      	subs	r0, r0, r5
 800c646:	4083      	lsls	r3, r0
 800c648:	6822      	ldr	r2, [r4, #0]
 800c64a:	3601      	adds	r6, #1
 800c64c:	4313      	orrs	r3, r2
 800c64e:	6023      	str	r3, [r4, #0]
 800c650:	7831      	ldrb	r1, [r6, #0]
 800c652:	2206      	movs	r2, #6
 800c654:	482a      	ldr	r0, [pc, #168]	@ (800c700 <_vfiprintf_r+0x22c>)
 800c656:	1c75      	adds	r5, r6, #1
 800c658:	7621      	strb	r1, [r4, #24]
 800c65a:	f7fe fbdc 	bl	800ae16 <memchr>
 800c65e:	2800      	cmp	r0, #0
 800c660:	d040      	beq.n	800c6e4 <_vfiprintf_r+0x210>
 800c662:	4b28      	ldr	r3, [pc, #160]	@ (800c704 <_vfiprintf_r+0x230>)
 800c664:	2b00      	cmp	r3, #0
 800c666:	d122      	bne.n	800c6ae <_vfiprintf_r+0x1da>
 800c668:	2207      	movs	r2, #7
 800c66a:	9b07      	ldr	r3, [sp, #28]
 800c66c:	3307      	adds	r3, #7
 800c66e:	4393      	bics	r3, r2
 800c670:	3308      	adds	r3, #8
 800c672:	9307      	str	r3, [sp, #28]
 800c674:	6963      	ldr	r3, [r4, #20]
 800c676:	9a04      	ldr	r2, [sp, #16]
 800c678:	189b      	adds	r3, r3, r2
 800c67a:	6163      	str	r3, [r4, #20]
 800c67c:	e762      	b.n	800c544 <_vfiprintf_r+0x70>
 800c67e:	4343      	muls	r3, r0
 800c680:	002e      	movs	r6, r5
 800c682:	2101      	movs	r1, #1
 800c684:	189b      	adds	r3, r3, r2
 800c686:	e7a4      	b.n	800c5d2 <_vfiprintf_r+0xfe>
 800c688:	2300      	movs	r3, #0
 800c68a:	200a      	movs	r0, #10
 800c68c:	0019      	movs	r1, r3
 800c68e:	3601      	adds	r6, #1
 800c690:	6063      	str	r3, [r4, #4]
 800c692:	7832      	ldrb	r2, [r6, #0]
 800c694:	1c75      	adds	r5, r6, #1
 800c696:	3a30      	subs	r2, #48	@ 0x30
 800c698:	2a09      	cmp	r2, #9
 800c69a:	d903      	bls.n	800c6a4 <_vfiprintf_r+0x1d0>
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d0c8      	beq.n	800c632 <_vfiprintf_r+0x15e>
 800c6a0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6a2:	e7c6      	b.n	800c632 <_vfiprintf_r+0x15e>
 800c6a4:	4341      	muls	r1, r0
 800c6a6:	002e      	movs	r6, r5
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	1889      	adds	r1, r1, r2
 800c6ac:	e7f1      	b.n	800c692 <_vfiprintf_r+0x1be>
 800c6ae:	aa07      	add	r2, sp, #28
 800c6b0:	9200      	str	r2, [sp, #0]
 800c6b2:	0021      	movs	r1, r4
 800c6b4:	003a      	movs	r2, r7
 800c6b6:	4b14      	ldr	r3, [pc, #80]	@ (800c708 <_vfiprintf_r+0x234>)
 800c6b8:	9803      	ldr	r0, [sp, #12]
 800c6ba:	f7fd fe59 	bl	800a370 <_printf_float>
 800c6be:	9004      	str	r0, [sp, #16]
 800c6c0:	9b04      	ldr	r3, [sp, #16]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	d1d6      	bne.n	800c674 <_vfiprintf_r+0x1a0>
 800c6c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6c8:	07db      	lsls	r3, r3, #31
 800c6ca:	d405      	bmi.n	800c6d8 <_vfiprintf_r+0x204>
 800c6cc:	89bb      	ldrh	r3, [r7, #12]
 800c6ce:	059b      	lsls	r3, r3, #22
 800c6d0:	d402      	bmi.n	800c6d8 <_vfiprintf_r+0x204>
 800c6d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c6d4:	f7fe fb9e 	bl	800ae14 <__retarget_lock_release_recursive>
 800c6d8:	89bb      	ldrh	r3, [r7, #12]
 800c6da:	065b      	lsls	r3, r3, #25
 800c6dc:	d500      	bpl.n	800c6e0 <_vfiprintf_r+0x20c>
 800c6de:	e71e      	b.n	800c51e <_vfiprintf_r+0x4a>
 800c6e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c6e2:	e71e      	b.n	800c522 <_vfiprintf_r+0x4e>
 800c6e4:	aa07      	add	r2, sp, #28
 800c6e6:	9200      	str	r2, [sp, #0]
 800c6e8:	0021      	movs	r1, r4
 800c6ea:	003a      	movs	r2, r7
 800c6ec:	4b06      	ldr	r3, [pc, #24]	@ (800c708 <_vfiprintf_r+0x234>)
 800c6ee:	9803      	ldr	r0, [sp, #12]
 800c6f0:	f7fe f8ec 	bl	800a8cc <_printf_i>
 800c6f4:	e7e3      	b.n	800c6be <_vfiprintf_r+0x1ea>
 800c6f6:	46c0      	nop			@ (mov r8, r8)
 800c6f8:	0800cfc8 	.word	0x0800cfc8
 800c6fc:	0800cfce 	.word	0x0800cfce
 800c700:	0800cfd2 	.word	0x0800cfd2
 800c704:	0800a371 	.word	0x0800a371
 800c708:	0800c4af 	.word	0x0800c4af

0800c70c <__sflush_r>:
 800c70c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c70e:	220c      	movs	r2, #12
 800c710:	5e8b      	ldrsh	r3, [r1, r2]
 800c712:	0005      	movs	r5, r0
 800c714:	000c      	movs	r4, r1
 800c716:	071a      	lsls	r2, r3, #28
 800c718:	d456      	bmi.n	800c7c8 <__sflush_r+0xbc>
 800c71a:	684a      	ldr	r2, [r1, #4]
 800c71c:	2a00      	cmp	r2, #0
 800c71e:	dc02      	bgt.n	800c726 <__sflush_r+0x1a>
 800c720:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c722:	2a00      	cmp	r2, #0
 800c724:	dd4e      	ble.n	800c7c4 <__sflush_r+0xb8>
 800c726:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c728:	2f00      	cmp	r7, #0
 800c72a:	d04b      	beq.n	800c7c4 <__sflush_r+0xb8>
 800c72c:	2200      	movs	r2, #0
 800c72e:	2080      	movs	r0, #128	@ 0x80
 800c730:	682e      	ldr	r6, [r5, #0]
 800c732:	602a      	str	r2, [r5, #0]
 800c734:	001a      	movs	r2, r3
 800c736:	0140      	lsls	r0, r0, #5
 800c738:	6a21      	ldr	r1, [r4, #32]
 800c73a:	4002      	ands	r2, r0
 800c73c:	4203      	tst	r3, r0
 800c73e:	d033      	beq.n	800c7a8 <__sflush_r+0x9c>
 800c740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	075b      	lsls	r3, r3, #29
 800c746:	d506      	bpl.n	800c756 <__sflush_r+0x4a>
 800c748:	6863      	ldr	r3, [r4, #4]
 800c74a:	1ad2      	subs	r2, r2, r3
 800c74c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <__sflush_r+0x4a>
 800c752:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c754:	1ad2      	subs	r2, r2, r3
 800c756:	2300      	movs	r3, #0
 800c758:	0028      	movs	r0, r5
 800c75a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c75c:	6a21      	ldr	r1, [r4, #32]
 800c75e:	47b8      	blx	r7
 800c760:	89a2      	ldrh	r2, [r4, #12]
 800c762:	1c43      	adds	r3, r0, #1
 800c764:	d106      	bne.n	800c774 <__sflush_r+0x68>
 800c766:	6829      	ldr	r1, [r5, #0]
 800c768:	291d      	cmp	r1, #29
 800c76a:	d846      	bhi.n	800c7fa <__sflush_r+0xee>
 800c76c:	4b29      	ldr	r3, [pc, #164]	@ (800c814 <__sflush_r+0x108>)
 800c76e:	410b      	asrs	r3, r1
 800c770:	07db      	lsls	r3, r3, #31
 800c772:	d442      	bmi.n	800c7fa <__sflush_r+0xee>
 800c774:	2300      	movs	r3, #0
 800c776:	6063      	str	r3, [r4, #4]
 800c778:	6923      	ldr	r3, [r4, #16]
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	04d2      	lsls	r2, r2, #19
 800c77e:	d505      	bpl.n	800c78c <__sflush_r+0x80>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <__sflush_r+0x7e>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d100      	bne.n	800c78c <__sflush_r+0x80>
 800c78a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c78c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c78e:	602e      	str	r6, [r5, #0]
 800c790:	2900      	cmp	r1, #0
 800c792:	d017      	beq.n	800c7c4 <__sflush_r+0xb8>
 800c794:	0023      	movs	r3, r4
 800c796:	3344      	adds	r3, #68	@ 0x44
 800c798:	4299      	cmp	r1, r3
 800c79a:	d002      	beq.n	800c7a2 <__sflush_r+0x96>
 800c79c:	0028      	movs	r0, r5
 800c79e:	f7ff f9c7 	bl	800bb30 <_free_r>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7a6:	e00d      	b.n	800c7c4 <__sflush_r+0xb8>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	0028      	movs	r0, r5
 800c7ac:	47b8      	blx	r7
 800c7ae:	0002      	movs	r2, r0
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d1c6      	bne.n	800c742 <__sflush_r+0x36>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0c3      	beq.n	800c742 <__sflush_r+0x36>
 800c7ba:	2b1d      	cmp	r3, #29
 800c7bc:	d001      	beq.n	800c7c2 <__sflush_r+0xb6>
 800c7be:	2b16      	cmp	r3, #22
 800c7c0:	d11a      	bne.n	800c7f8 <__sflush_r+0xec>
 800c7c2:	602e      	str	r6, [r5, #0]
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	e01e      	b.n	800c806 <__sflush_r+0xfa>
 800c7c8:	690e      	ldr	r6, [r1, #16]
 800c7ca:	2e00      	cmp	r6, #0
 800c7cc:	d0fa      	beq.n	800c7c4 <__sflush_r+0xb8>
 800c7ce:	680f      	ldr	r7, [r1, #0]
 800c7d0:	600e      	str	r6, [r1, #0]
 800c7d2:	1bba      	subs	r2, r7, r6
 800c7d4:	9201      	str	r2, [sp, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	079b      	lsls	r3, r3, #30
 800c7da:	d100      	bne.n	800c7de <__sflush_r+0xd2>
 800c7dc:	694a      	ldr	r2, [r1, #20]
 800c7de:	60a2      	str	r2, [r4, #8]
 800c7e0:	9b01      	ldr	r3, [sp, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	ddee      	ble.n	800c7c4 <__sflush_r+0xb8>
 800c7e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c7e8:	0032      	movs	r2, r6
 800c7ea:	001f      	movs	r7, r3
 800c7ec:	0028      	movs	r0, r5
 800c7ee:	9b01      	ldr	r3, [sp, #4]
 800c7f0:	6a21      	ldr	r1, [r4, #32]
 800c7f2:	47b8      	blx	r7
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	dc07      	bgt.n	800c808 <__sflush_r+0xfc>
 800c7f8:	89a2      	ldrh	r2, [r4, #12]
 800c7fa:	2340      	movs	r3, #64	@ 0x40
 800c7fc:	2001      	movs	r0, #1
 800c7fe:	4313      	orrs	r3, r2
 800c800:	b21b      	sxth	r3, r3
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	4240      	negs	r0, r0
 800c806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c808:	9b01      	ldr	r3, [sp, #4]
 800c80a:	1836      	adds	r6, r6, r0
 800c80c:	1a1b      	subs	r3, r3, r0
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	e7e6      	b.n	800c7e0 <__sflush_r+0xd4>
 800c812:	46c0      	nop			@ (mov r8, r8)
 800c814:	dfbffffe 	.word	0xdfbffffe

0800c818 <_fflush_r>:
 800c818:	690b      	ldr	r3, [r1, #16]
 800c81a:	b570      	push	{r4, r5, r6, lr}
 800c81c:	0005      	movs	r5, r0
 800c81e:	000c      	movs	r4, r1
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <_fflush_r+0x12>
 800c824:	2500      	movs	r5, #0
 800c826:	0028      	movs	r0, r5
 800c828:	bd70      	pop	{r4, r5, r6, pc}
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d004      	beq.n	800c838 <_fflush_r+0x20>
 800c82e:	6a03      	ldr	r3, [r0, #32]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <_fflush_r+0x20>
 800c834:	f7fe f9e8 	bl	800ac08 <__sinit>
 800c838:	220c      	movs	r2, #12
 800c83a:	5ea3      	ldrsh	r3, [r4, r2]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0f1      	beq.n	800c824 <_fflush_r+0xc>
 800c840:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c842:	07d2      	lsls	r2, r2, #31
 800c844:	d404      	bmi.n	800c850 <_fflush_r+0x38>
 800c846:	059b      	lsls	r3, r3, #22
 800c848:	d402      	bmi.n	800c850 <_fflush_r+0x38>
 800c84a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c84c:	f7fe fae1 	bl	800ae12 <__retarget_lock_acquire_recursive>
 800c850:	0028      	movs	r0, r5
 800c852:	0021      	movs	r1, r4
 800c854:	f7ff ff5a 	bl	800c70c <__sflush_r>
 800c858:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c85a:	0005      	movs	r5, r0
 800c85c:	07db      	lsls	r3, r3, #31
 800c85e:	d4e2      	bmi.n	800c826 <_fflush_r+0xe>
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	059b      	lsls	r3, r3, #22
 800c864:	d4df      	bmi.n	800c826 <_fflush_r+0xe>
 800c866:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c868:	f7fe fad4 	bl	800ae14 <__retarget_lock_release_recursive>
 800c86c:	e7db      	b.n	800c826 <_fflush_r+0xe>

0800c86e <__swbuf_r>:
 800c86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c870:	0006      	movs	r6, r0
 800c872:	000d      	movs	r5, r1
 800c874:	0014      	movs	r4, r2
 800c876:	2800      	cmp	r0, #0
 800c878:	d004      	beq.n	800c884 <__swbuf_r+0x16>
 800c87a:	6a03      	ldr	r3, [r0, #32]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <__swbuf_r+0x16>
 800c880:	f7fe f9c2 	bl	800ac08 <__sinit>
 800c884:	69a3      	ldr	r3, [r4, #24]
 800c886:	60a3      	str	r3, [r4, #8]
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	071b      	lsls	r3, r3, #28
 800c88c:	d502      	bpl.n	800c894 <__swbuf_r+0x26>
 800c88e:	6923      	ldr	r3, [r4, #16]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <__swbuf_r+0x3a>
 800c894:	0021      	movs	r1, r4
 800c896:	0030      	movs	r0, r6
 800c898:	f000 f82c 	bl	800c8f4 <__swsetup_r>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d003      	beq.n	800c8a8 <__swbuf_r+0x3a>
 800c8a0:	2501      	movs	r5, #1
 800c8a2:	426d      	negs	r5, r5
 800c8a4:	0028      	movs	r0, r5
 800c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a8:	6923      	ldr	r3, [r4, #16]
 800c8aa:	6820      	ldr	r0, [r4, #0]
 800c8ac:	b2ef      	uxtb	r7, r5
 800c8ae:	1ac0      	subs	r0, r0, r3
 800c8b0:	6963      	ldr	r3, [r4, #20]
 800c8b2:	b2ed      	uxtb	r5, r5
 800c8b4:	4283      	cmp	r3, r0
 800c8b6:	dc05      	bgt.n	800c8c4 <__swbuf_r+0x56>
 800c8b8:	0021      	movs	r1, r4
 800c8ba:	0030      	movs	r0, r6
 800c8bc:	f7ff ffac 	bl	800c818 <_fflush_r>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d1ed      	bne.n	800c8a0 <__swbuf_r+0x32>
 800c8c4:	68a3      	ldr	r3, [r4, #8]
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	60a3      	str	r3, [r4, #8]
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	1c5a      	adds	r2, r3, #1
 800c8d0:	6022      	str	r2, [r4, #0]
 800c8d2:	701f      	strb	r7, [r3, #0]
 800c8d4:	6963      	ldr	r3, [r4, #20]
 800c8d6:	4283      	cmp	r3, r0
 800c8d8:	d004      	beq.n	800c8e4 <__swbuf_r+0x76>
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	07db      	lsls	r3, r3, #31
 800c8de:	d5e1      	bpl.n	800c8a4 <__swbuf_r+0x36>
 800c8e0:	2d0a      	cmp	r5, #10
 800c8e2:	d1df      	bne.n	800c8a4 <__swbuf_r+0x36>
 800c8e4:	0021      	movs	r1, r4
 800c8e6:	0030      	movs	r0, r6
 800c8e8:	f7ff ff96 	bl	800c818 <_fflush_r>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d0d9      	beq.n	800c8a4 <__swbuf_r+0x36>
 800c8f0:	e7d6      	b.n	800c8a0 <__swbuf_r+0x32>
	...

0800c8f4 <__swsetup_r>:
 800c8f4:	4b2d      	ldr	r3, [pc, #180]	@ (800c9ac <__swsetup_r+0xb8>)
 800c8f6:	b570      	push	{r4, r5, r6, lr}
 800c8f8:	0005      	movs	r5, r0
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	000c      	movs	r4, r1
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d004      	beq.n	800c90c <__swsetup_r+0x18>
 800c902:	6a03      	ldr	r3, [r0, #32]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d101      	bne.n	800c90c <__swsetup_r+0x18>
 800c908:	f7fe f97e 	bl	800ac08 <__sinit>
 800c90c:	230c      	movs	r3, #12
 800c90e:	5ee2      	ldrsh	r2, [r4, r3]
 800c910:	0713      	lsls	r3, r2, #28
 800c912:	d423      	bmi.n	800c95c <__swsetup_r+0x68>
 800c914:	06d3      	lsls	r3, r2, #27
 800c916:	d407      	bmi.n	800c928 <__swsetup_r+0x34>
 800c918:	2309      	movs	r3, #9
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	2340      	movs	r3, #64	@ 0x40
 800c91e:	2001      	movs	r0, #1
 800c920:	4313      	orrs	r3, r2
 800c922:	81a3      	strh	r3, [r4, #12]
 800c924:	4240      	negs	r0, r0
 800c926:	e03a      	b.n	800c99e <__swsetup_r+0xaa>
 800c928:	0752      	lsls	r2, r2, #29
 800c92a:	d513      	bpl.n	800c954 <__swsetup_r+0x60>
 800c92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c92e:	2900      	cmp	r1, #0
 800c930:	d008      	beq.n	800c944 <__swsetup_r+0x50>
 800c932:	0023      	movs	r3, r4
 800c934:	3344      	adds	r3, #68	@ 0x44
 800c936:	4299      	cmp	r1, r3
 800c938:	d002      	beq.n	800c940 <__swsetup_r+0x4c>
 800c93a:	0028      	movs	r0, r5
 800c93c:	f7ff f8f8 	bl	800bb30 <_free_r>
 800c940:	2300      	movs	r3, #0
 800c942:	6363      	str	r3, [r4, #52]	@ 0x34
 800c944:	2224      	movs	r2, #36	@ 0x24
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	4393      	bics	r3, r2
 800c94a:	81a3      	strh	r3, [r4, #12]
 800c94c:	2300      	movs	r3, #0
 800c94e:	6063      	str	r3, [r4, #4]
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	2308      	movs	r3, #8
 800c956:	89a2      	ldrh	r2, [r4, #12]
 800c958:	4313      	orrs	r3, r2
 800c95a:	81a3      	strh	r3, [r4, #12]
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <__swsetup_r+0x86>
 800c962:	21a0      	movs	r1, #160	@ 0xa0
 800c964:	2280      	movs	r2, #128	@ 0x80
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	0089      	lsls	r1, r1, #2
 800c96a:	0092      	lsls	r2, r2, #2
 800c96c:	400b      	ands	r3, r1
 800c96e:	4293      	cmp	r3, r2
 800c970:	d003      	beq.n	800c97a <__swsetup_r+0x86>
 800c972:	0021      	movs	r1, r4
 800c974:	0028      	movs	r0, r5
 800c976:	f000 f8db 	bl	800cb30 <__smakebuf_r>
 800c97a:	230c      	movs	r3, #12
 800c97c:	5ee2      	ldrsh	r2, [r4, r3]
 800c97e:	2101      	movs	r1, #1
 800c980:	0013      	movs	r3, r2
 800c982:	400b      	ands	r3, r1
 800c984:	420a      	tst	r2, r1
 800c986:	d00b      	beq.n	800c9a0 <__swsetup_r+0xac>
 800c988:	2300      	movs	r3, #0
 800c98a:	60a3      	str	r3, [r4, #8]
 800c98c:	6963      	ldr	r3, [r4, #20]
 800c98e:	425b      	negs	r3, r3
 800c990:	61a3      	str	r3, [r4, #24]
 800c992:	2000      	movs	r0, #0
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	4283      	cmp	r3, r0
 800c998:	d101      	bne.n	800c99e <__swsetup_r+0xaa>
 800c99a:	0613      	lsls	r3, r2, #24
 800c99c:	d4be      	bmi.n	800c91c <__swsetup_r+0x28>
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	0791      	lsls	r1, r2, #30
 800c9a2:	d400      	bmi.n	800c9a6 <__swsetup_r+0xb2>
 800c9a4:	6963      	ldr	r3, [r4, #20]
 800c9a6:	60a3      	str	r3, [r4, #8]
 800c9a8:	e7f3      	b.n	800c992 <__swsetup_r+0x9e>
 800c9aa:	46c0      	nop			@ (mov r8, r8)
 800c9ac:	20000018 	.word	0x20000018

0800c9b0 <_sbrk_r>:
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	b570      	push	{r4, r5, r6, lr}
 800c9b4:	4d06      	ldr	r5, [pc, #24]	@ (800c9d0 <_sbrk_r+0x20>)
 800c9b6:	0004      	movs	r4, r0
 800c9b8:	0008      	movs	r0, r1
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	f7f8 feae 	bl	800571c <_sbrk>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d103      	bne.n	800c9cc <_sbrk_r+0x1c>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d000      	beq.n	800c9cc <_sbrk_r+0x1c>
 800c9ca:	6023      	str	r3, [r4, #0]
 800c9cc:	bd70      	pop	{r4, r5, r6, pc}
 800c9ce:	46c0      	nop			@ (mov r8, r8)
 800c9d0:	200005e0 	.word	0x200005e0

0800c9d4 <memcpy>:
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	b510      	push	{r4, lr}
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d100      	bne.n	800c9de <memcpy+0xa>
 800c9dc:	bd10      	pop	{r4, pc}
 800c9de:	5ccc      	ldrb	r4, [r1, r3]
 800c9e0:	54c4      	strb	r4, [r0, r3]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	e7f8      	b.n	800c9d8 <memcpy+0x4>
	...

0800c9e8 <__assert_func>:
 800c9e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c9ea:	0014      	movs	r4, r2
 800c9ec:	001a      	movs	r2, r3
 800c9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ca14 <__assert_func+0x2c>)
 800c9f0:	0005      	movs	r5, r0
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	000e      	movs	r6, r1
 800c9f6:	68d8      	ldr	r0, [r3, #12]
 800c9f8:	4b07      	ldr	r3, [pc, #28]	@ (800ca18 <__assert_func+0x30>)
 800c9fa:	2c00      	cmp	r4, #0
 800c9fc:	d101      	bne.n	800ca02 <__assert_func+0x1a>
 800c9fe:	4b07      	ldr	r3, [pc, #28]	@ (800ca1c <__assert_func+0x34>)
 800ca00:	001c      	movs	r4, r3
 800ca02:	4907      	ldr	r1, [pc, #28]	@ (800ca20 <__assert_func+0x38>)
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	9402      	str	r4, [sp, #8]
 800ca08:	002b      	movs	r3, r5
 800ca0a:	9600      	str	r6, [sp, #0]
 800ca0c:	f000 f856 	bl	800cabc <fiprintf>
 800ca10:	f000 f8f4 	bl	800cbfc <abort>
 800ca14:	20000018 	.word	0x20000018
 800ca18:	0800cfe3 	.word	0x0800cfe3
 800ca1c:	0800d01e 	.word	0x0800d01e
 800ca20:	0800cff0 	.word	0x0800cff0

0800ca24 <_calloc_r>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	0c0b      	lsrs	r3, r1, #16
 800ca28:	0c15      	lsrs	r5, r2, #16
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d11e      	bne.n	800ca6c <_calloc_r+0x48>
 800ca2e:	2d00      	cmp	r5, #0
 800ca30:	d10c      	bne.n	800ca4c <_calloc_r+0x28>
 800ca32:	b289      	uxth	r1, r1
 800ca34:	b294      	uxth	r4, r2
 800ca36:	434c      	muls	r4, r1
 800ca38:	0021      	movs	r1, r4
 800ca3a:	f7ff f8ef 	bl	800bc1c <_malloc_r>
 800ca3e:	1e05      	subs	r5, r0, #0
 800ca40:	d01a      	beq.n	800ca78 <_calloc_r+0x54>
 800ca42:	0022      	movs	r2, r4
 800ca44:	2100      	movs	r1, #0
 800ca46:	f7fe f95f 	bl	800ad08 <memset>
 800ca4a:	e016      	b.n	800ca7a <_calloc_r+0x56>
 800ca4c:	1c2b      	adds	r3, r5, #0
 800ca4e:	1c0c      	adds	r4, r1, #0
 800ca50:	b289      	uxth	r1, r1
 800ca52:	b292      	uxth	r2, r2
 800ca54:	434a      	muls	r2, r1
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	b2a1      	uxth	r1, r4
 800ca5a:	4359      	muls	r1, r3
 800ca5c:	0c14      	lsrs	r4, r2, #16
 800ca5e:	190c      	adds	r4, r1, r4
 800ca60:	0c23      	lsrs	r3, r4, #16
 800ca62:	d107      	bne.n	800ca74 <_calloc_r+0x50>
 800ca64:	0424      	lsls	r4, r4, #16
 800ca66:	b292      	uxth	r2, r2
 800ca68:	4314      	orrs	r4, r2
 800ca6a:	e7e5      	b.n	800ca38 <_calloc_r+0x14>
 800ca6c:	2d00      	cmp	r5, #0
 800ca6e:	d101      	bne.n	800ca74 <_calloc_r+0x50>
 800ca70:	1c14      	adds	r4, r2, #0
 800ca72:	e7ed      	b.n	800ca50 <_calloc_r+0x2c>
 800ca74:	230c      	movs	r3, #12
 800ca76:	6003      	str	r3, [r0, #0]
 800ca78:	2500      	movs	r5, #0
 800ca7a:	0028      	movs	r0, r5
 800ca7c:	bd70      	pop	{r4, r5, r6, pc}

0800ca7e <__ascii_mbtowc>:
 800ca7e:	b082      	sub	sp, #8
 800ca80:	2900      	cmp	r1, #0
 800ca82:	d100      	bne.n	800ca86 <__ascii_mbtowc+0x8>
 800ca84:	a901      	add	r1, sp, #4
 800ca86:	1e10      	subs	r0, r2, #0
 800ca88:	d006      	beq.n	800ca98 <__ascii_mbtowc+0x1a>
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d006      	beq.n	800ca9c <__ascii_mbtowc+0x1e>
 800ca8e:	7813      	ldrb	r3, [r2, #0]
 800ca90:	600b      	str	r3, [r1, #0]
 800ca92:	7810      	ldrb	r0, [r2, #0]
 800ca94:	1e43      	subs	r3, r0, #1
 800ca96:	4198      	sbcs	r0, r3
 800ca98:	b002      	add	sp, #8
 800ca9a:	4770      	bx	lr
 800ca9c:	2002      	movs	r0, #2
 800ca9e:	4240      	negs	r0, r0
 800caa0:	e7fa      	b.n	800ca98 <__ascii_mbtowc+0x1a>

0800caa2 <__ascii_wctomb>:
 800caa2:	0003      	movs	r3, r0
 800caa4:	1e08      	subs	r0, r1, #0
 800caa6:	d005      	beq.n	800cab4 <__ascii_wctomb+0x12>
 800caa8:	2aff      	cmp	r2, #255	@ 0xff
 800caaa:	d904      	bls.n	800cab6 <__ascii_wctomb+0x14>
 800caac:	228a      	movs	r2, #138	@ 0x8a
 800caae:	2001      	movs	r0, #1
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	4240      	negs	r0, r0
 800cab4:	4770      	bx	lr
 800cab6:	2001      	movs	r0, #1
 800cab8:	700a      	strb	r2, [r1, #0]
 800caba:	e7fb      	b.n	800cab4 <__ascii_wctomb+0x12>

0800cabc <fiprintf>:
 800cabc:	b40e      	push	{r1, r2, r3}
 800cabe:	b517      	push	{r0, r1, r2, r4, lr}
 800cac0:	4c05      	ldr	r4, [pc, #20]	@ (800cad8 <fiprintf+0x1c>)
 800cac2:	ab05      	add	r3, sp, #20
 800cac4:	cb04      	ldmia	r3!, {r2}
 800cac6:	0001      	movs	r1, r0
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	9301      	str	r3, [sp, #4]
 800cacc:	f7ff fd02 	bl	800c4d4 <_vfiprintf_r>
 800cad0:	bc1e      	pop	{r1, r2, r3, r4}
 800cad2:	bc08      	pop	{r3}
 800cad4:	b003      	add	sp, #12
 800cad6:	4718      	bx	r3
 800cad8:	20000018 	.word	0x20000018

0800cadc <__swhatbuf_r>:
 800cadc:	b570      	push	{r4, r5, r6, lr}
 800cade:	000e      	movs	r6, r1
 800cae0:	001d      	movs	r5, r3
 800cae2:	230e      	movs	r3, #14
 800cae4:	5ec9      	ldrsh	r1, [r1, r3]
 800cae6:	0014      	movs	r4, r2
 800cae8:	b096      	sub	sp, #88	@ 0x58
 800caea:	2900      	cmp	r1, #0
 800caec:	da0c      	bge.n	800cb08 <__swhatbuf_r+0x2c>
 800caee:	89b2      	ldrh	r2, [r6, #12]
 800caf0:	2380      	movs	r3, #128	@ 0x80
 800caf2:	0011      	movs	r1, r2
 800caf4:	4019      	ands	r1, r3
 800caf6:	421a      	tst	r2, r3
 800caf8:	d114      	bne.n	800cb24 <__swhatbuf_r+0x48>
 800cafa:	2380      	movs	r3, #128	@ 0x80
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	2000      	movs	r0, #0
 800cb00:	6029      	str	r1, [r5, #0]
 800cb02:	6023      	str	r3, [r4, #0]
 800cb04:	b016      	add	sp, #88	@ 0x58
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	466a      	mov	r2, sp
 800cb0a:	f000 f853 	bl	800cbb4 <_fstat_r>
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	dbed      	blt.n	800caee <__swhatbuf_r+0x12>
 800cb12:	23f0      	movs	r3, #240	@ 0xf0
 800cb14:	9901      	ldr	r1, [sp, #4]
 800cb16:	021b      	lsls	r3, r3, #8
 800cb18:	4019      	ands	r1, r3
 800cb1a:	4b04      	ldr	r3, [pc, #16]	@ (800cb2c <__swhatbuf_r+0x50>)
 800cb1c:	18c9      	adds	r1, r1, r3
 800cb1e:	424b      	negs	r3, r1
 800cb20:	4159      	adcs	r1, r3
 800cb22:	e7ea      	b.n	800cafa <__swhatbuf_r+0x1e>
 800cb24:	2100      	movs	r1, #0
 800cb26:	2340      	movs	r3, #64	@ 0x40
 800cb28:	e7e9      	b.n	800cafe <__swhatbuf_r+0x22>
 800cb2a:	46c0      	nop			@ (mov r8, r8)
 800cb2c:	ffffe000 	.word	0xffffe000

0800cb30 <__smakebuf_r>:
 800cb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb32:	2602      	movs	r6, #2
 800cb34:	898b      	ldrh	r3, [r1, #12]
 800cb36:	0005      	movs	r5, r0
 800cb38:	000c      	movs	r4, r1
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	4233      	tst	r3, r6
 800cb3e:	d007      	beq.n	800cb50 <__smakebuf_r+0x20>
 800cb40:	0023      	movs	r3, r4
 800cb42:	3347      	adds	r3, #71	@ 0x47
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	b005      	add	sp, #20
 800cb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb50:	ab03      	add	r3, sp, #12
 800cb52:	aa02      	add	r2, sp, #8
 800cb54:	f7ff ffc2 	bl	800cadc <__swhatbuf_r>
 800cb58:	9f02      	ldr	r7, [sp, #8]
 800cb5a:	9001      	str	r0, [sp, #4]
 800cb5c:	0039      	movs	r1, r7
 800cb5e:	0028      	movs	r0, r5
 800cb60:	f7ff f85c 	bl	800bc1c <_malloc_r>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d108      	bne.n	800cb7a <__smakebuf_r+0x4a>
 800cb68:	220c      	movs	r2, #12
 800cb6a:	5ea3      	ldrsh	r3, [r4, r2]
 800cb6c:	059a      	lsls	r2, r3, #22
 800cb6e:	d4ed      	bmi.n	800cb4c <__smakebuf_r+0x1c>
 800cb70:	2203      	movs	r2, #3
 800cb72:	4393      	bics	r3, r2
 800cb74:	431e      	orrs	r6, r3
 800cb76:	81a6      	strh	r6, [r4, #12]
 800cb78:	e7e2      	b.n	800cb40 <__smakebuf_r+0x10>
 800cb7a:	2380      	movs	r3, #128	@ 0x80
 800cb7c:	89a2      	ldrh	r2, [r4, #12]
 800cb7e:	6020      	str	r0, [r4, #0]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	81a3      	strh	r3, [r4, #12]
 800cb84:	9b03      	ldr	r3, [sp, #12]
 800cb86:	6120      	str	r0, [r4, #16]
 800cb88:	6167      	str	r7, [r4, #20]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00c      	beq.n	800cba8 <__smakebuf_r+0x78>
 800cb8e:	0028      	movs	r0, r5
 800cb90:	230e      	movs	r3, #14
 800cb92:	5ee1      	ldrsh	r1, [r4, r3]
 800cb94:	f000 f820 	bl	800cbd8 <_isatty_r>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d005      	beq.n	800cba8 <__smakebuf_r+0x78>
 800cb9c:	2303      	movs	r3, #3
 800cb9e:	89a2      	ldrh	r2, [r4, #12]
 800cba0:	439a      	bics	r2, r3
 800cba2:	3b02      	subs	r3, #2
 800cba4:	4313      	orrs	r3, r2
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	9a01      	ldr	r2, [sp, #4]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	e7cc      	b.n	800cb4c <__smakebuf_r+0x1c>
	...

0800cbb4 <_fstat_r>:
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	b570      	push	{r4, r5, r6, lr}
 800cbb8:	4d06      	ldr	r5, [pc, #24]	@ (800cbd4 <_fstat_r+0x20>)
 800cbba:	0004      	movs	r4, r0
 800cbbc:	0008      	movs	r0, r1
 800cbbe:	0011      	movs	r1, r2
 800cbc0:	602b      	str	r3, [r5, #0]
 800cbc2:	f7f8 fd89 	bl	80056d8 <_fstat>
 800cbc6:	1c43      	adds	r3, r0, #1
 800cbc8:	d103      	bne.n	800cbd2 <_fstat_r+0x1e>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d000      	beq.n	800cbd2 <_fstat_r+0x1e>
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	200005e0 	.word	0x200005e0

0800cbd8 <_isatty_r>:
 800cbd8:	2300      	movs	r3, #0
 800cbda:	b570      	push	{r4, r5, r6, lr}
 800cbdc:	4d06      	ldr	r5, [pc, #24]	@ (800cbf8 <_isatty_r+0x20>)
 800cbde:	0004      	movs	r4, r0
 800cbe0:	0008      	movs	r0, r1
 800cbe2:	602b      	str	r3, [r5, #0]
 800cbe4:	f7f8 fd86 	bl	80056f4 <_isatty>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d103      	bne.n	800cbf4 <_isatty_r+0x1c>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d000      	beq.n	800cbf4 <_isatty_r+0x1c>
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	bd70      	pop	{r4, r5, r6, pc}
 800cbf6:	46c0      	nop			@ (mov r8, r8)
 800cbf8:	200005e0 	.word	0x200005e0

0800cbfc <abort>:
 800cbfc:	2006      	movs	r0, #6
 800cbfe:	b510      	push	{r4, lr}
 800cc00:	f000 f82c 	bl	800cc5c <raise>
 800cc04:	2001      	movs	r0, #1
 800cc06:	f7f8 fd17 	bl	8005638 <_exit>

0800cc0a <_raise_r>:
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	0004      	movs	r4, r0
 800cc0e:	000d      	movs	r5, r1
 800cc10:	291f      	cmp	r1, #31
 800cc12:	d904      	bls.n	800cc1e <_raise_r+0x14>
 800cc14:	2316      	movs	r3, #22
 800cc16:	6003      	str	r3, [r0, #0]
 800cc18:	2001      	movs	r0, #1
 800cc1a:	4240      	negs	r0, r0
 800cc1c:	bd70      	pop	{r4, r5, r6, pc}
 800cc1e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <_raise_r+0x24>
 800cc24:	008a      	lsls	r2, r1, #2
 800cc26:	189b      	adds	r3, r3, r2
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	2a00      	cmp	r2, #0
 800cc2c:	d108      	bne.n	800cc40 <_raise_r+0x36>
 800cc2e:	0020      	movs	r0, r4
 800cc30:	f000 f830 	bl	800cc94 <_getpid_r>
 800cc34:	002a      	movs	r2, r5
 800cc36:	0001      	movs	r1, r0
 800cc38:	0020      	movs	r0, r4
 800cc3a:	f000 f819 	bl	800cc70 <_kill_r>
 800cc3e:	e7ed      	b.n	800cc1c <_raise_r+0x12>
 800cc40:	2a01      	cmp	r2, #1
 800cc42:	d009      	beq.n	800cc58 <_raise_r+0x4e>
 800cc44:	1c51      	adds	r1, r2, #1
 800cc46:	d103      	bne.n	800cc50 <_raise_r+0x46>
 800cc48:	2316      	movs	r3, #22
 800cc4a:	6003      	str	r3, [r0, #0]
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	e7e5      	b.n	800cc1c <_raise_r+0x12>
 800cc50:	2100      	movs	r1, #0
 800cc52:	0028      	movs	r0, r5
 800cc54:	6019      	str	r1, [r3, #0]
 800cc56:	4790      	blx	r2
 800cc58:	2000      	movs	r0, #0
 800cc5a:	e7df      	b.n	800cc1c <_raise_r+0x12>

0800cc5c <raise>:
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	4b03      	ldr	r3, [pc, #12]	@ (800cc6c <raise+0x10>)
 800cc60:	0001      	movs	r1, r0
 800cc62:	6818      	ldr	r0, [r3, #0]
 800cc64:	f7ff ffd1 	bl	800cc0a <_raise_r>
 800cc68:	bd10      	pop	{r4, pc}
 800cc6a:	46c0      	nop			@ (mov r8, r8)
 800cc6c:	20000018 	.word	0x20000018

0800cc70 <_kill_r>:
 800cc70:	2300      	movs	r3, #0
 800cc72:	b570      	push	{r4, r5, r6, lr}
 800cc74:	4d06      	ldr	r5, [pc, #24]	@ (800cc90 <_kill_r+0x20>)
 800cc76:	0004      	movs	r4, r0
 800cc78:	0008      	movs	r0, r1
 800cc7a:	0011      	movs	r1, r2
 800cc7c:	602b      	str	r3, [r5, #0]
 800cc7e:	f7f8 fccb 	bl	8005618 <_kill>
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d103      	bne.n	800cc8e <_kill_r+0x1e>
 800cc86:	682b      	ldr	r3, [r5, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d000      	beq.n	800cc8e <_kill_r+0x1e>
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}
 800cc90:	200005e0 	.word	0x200005e0

0800cc94 <_getpid_r>:
 800cc94:	b510      	push	{r4, lr}
 800cc96:	f7f8 fcb9 	bl	800560c <_getpid>
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <_init>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	46c0      	nop			@ (mov r8, r8)
 800cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca2:	bc08      	pop	{r3}
 800cca4:	469e      	mov	lr, r3
 800cca6:	4770      	bx	lr

0800cca8 <_fini>:
 800cca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccaa:	46c0      	nop			@ (mov r8, r8)
 800ccac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccae:	bc08      	pop	{r3}
 800ccb0:	469e      	mov	lr, r3
 800ccb2:	4770      	bx	lr
