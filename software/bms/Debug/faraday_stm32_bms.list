
faraday_stm32_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c404  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800c4c8  0800c4c8  0000d4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca30  0800ca30  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca30  0800ca30  0000da30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca38  0800ca38  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca38  0800ca38  0000da38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca3c  0800ca3c  0000da3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ca40  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200001d4  0800cc14  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800cc14  0000e594  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f91  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f4  00000000  00000000  0002318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00026288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d2  00000000  00000000  00027820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150f6  00000000  00000000  000288f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cc7  00000000  00000000  0003d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b2d4  00000000  00000000  000576af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb8  00000000  00000000  000d29c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d8880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c4ac 	.word	0x0800c4ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800c4ac 	.word	0x0800c4ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8cf 	bl	80015e0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f80f 	bl	8001470 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8c1 	bl	80015e0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8b7 	bl	80015e0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f839 	bl	80014f8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f82f 	bl	80014f8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 f8ac 	bl	80026c0 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 f8a7 	bl	80026c0 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	d434      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057a:	469b      	mov	fp, r3
 800057c:	4653      	mov	r3, sl
 800057e:	465a      	mov	r2, fp
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83b      	bhi.n	8000608 <__udivmoddi4+0xc4>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e079      	b.n	800068a <__udivmoddi4+0x146>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e076      	b.n	8000690 <__udivmoddi4+0x14c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e029      	b.n	8000610 <__udivmoddi4+0xcc>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	469b      	mov	fp, r3
 80005e8:	2320      	movs	r3, #32
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	4652      	mov	r2, sl
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	4641      	mov	r1, r8
 80005f2:	0013      	movs	r3, r2
 80005f4:	464a      	mov	r2, r9
 80005f6:	408a      	lsls	r2, r1
 80005f8:	0017      	movs	r7, r2
 80005fa:	4642      	mov	r2, r8
 80005fc:	431f      	orrs	r7, r3
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	001e      	movs	r6, r3
 8000604:	42af      	cmp	r7, r5
 8000606:	d9c3      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4643      	mov	r3, r8
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d8      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000616:	07fb      	lsls	r3, r7, #31
 8000618:	0872      	lsrs	r2, r6, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	4646      	mov	r6, r8
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	e00e      	b.n	8000640 <__udivmoddi4+0xfc>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d101      	bne.n	800062a <__udivmoddi4+0xe6>
 8000626:	42a2      	cmp	r2, r4
 8000628:	d80c      	bhi.n	8000644 <__udivmoddi4+0x100>
 800062a:	1aa4      	subs	r4, r4, r2
 800062c:	419d      	sbcs	r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	1924      	adds	r4, r4, r4
 8000632:	416d      	adcs	r5, r5
 8000634:	2100      	movs	r1, #0
 8000636:	3e01      	subs	r6, #1
 8000638:	1824      	adds	r4, r4, r0
 800063a:	414d      	adcs	r5, r1
 800063c:	2e00      	cmp	r6, #0
 800063e:	d006      	beq.n	800064e <__udivmoddi4+0x10a>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d9ee      	bls.n	8000622 <__udivmoddi4+0xde>
 8000644:	3e01      	subs	r6, #1
 8000646:	1924      	adds	r4, r4, r4
 8000648:	416d      	adcs	r5, r5
 800064a:	2e00      	cmp	r6, #0
 800064c:	d1f8      	bne.n	8000640 <__udivmoddi4+0xfc>
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	465b      	mov	r3, fp
 8000654:	1900      	adds	r0, r0, r4
 8000656:	4169      	adcs	r1, r5
 8000658:	2b00      	cmp	r3, #0
 800065a:	db24      	blt.n	80006a6 <__udivmoddi4+0x162>
 800065c:	002b      	movs	r3, r5
 800065e:	465a      	mov	r2, fp
 8000660:	4644      	mov	r4, r8
 8000662:	40d3      	lsrs	r3, r2
 8000664:	002a      	movs	r2, r5
 8000666:	40e2      	lsrs	r2, r4
 8000668:	001c      	movs	r4, r3
 800066a:	465b      	mov	r3, fp
 800066c:	0015      	movs	r5, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	db2a      	blt.n	80006c8 <__udivmoddi4+0x184>
 8000672:	0026      	movs	r6, r4
 8000674:	409e      	lsls	r6, r3
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4647      	mov	r7, r8
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e79e      	b.n	80005c8 <__udivmoddi4+0x84>
 800068a:	42a3      	cmp	r3, r4
 800068c:	d8bc      	bhi.n	8000608 <__udivmoddi4+0xc4>
 800068e:	e782      	b.n	8000596 <__udivmoddi4+0x52>
 8000690:	4642      	mov	r2, r8
 8000692:	2320      	movs	r3, #32
 8000694:	2100      	movs	r1, #0
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	2200      	movs	r2, #0
 800069a:	9100      	str	r1, [sp, #0]
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	40da      	lsrs	r2, r3
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	e785      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2320      	movs	r3, #32
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	4646      	mov	r6, r8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	40f3      	lsrs	r3, r6
 80006b6:	4644      	mov	r4, r8
 80006b8:	4313      	orrs	r3, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	40e2      	lsrs	r2, r4
 80006be:	001c      	movs	r4, r3
 80006c0:	465b      	mov	r3, fp
 80006c2:	0015      	movs	r5, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dad4      	bge.n	8000672 <__udivmoddi4+0x12e>
 80006c8:	4642      	mov	r2, r8
 80006ca:	002f      	movs	r7, r5
 80006cc:	2320      	movs	r3, #32
 80006ce:	0026      	movs	r6, r4
 80006d0:	4097      	lsls	r7, r2
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	003b      	movs	r3, r7
 80006d8:	4333      	orrs	r3, r6
 80006da:	e7cd      	b.n	8000678 <__udivmoddi4+0x134>

080006dc <__aeabi_i2f>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	2800      	cmp	r0, #0
 80006e0:	d013      	beq.n	800070a <__aeabi_i2f+0x2e>
 80006e2:	17c3      	asrs	r3, r0, #31
 80006e4:	18c5      	adds	r5, r0, r3
 80006e6:	405d      	eors	r5, r3
 80006e8:	0fc4      	lsrs	r4, r0, #31
 80006ea:	0028      	movs	r0, r5
 80006ec:	f001 ffca 	bl	8002684 <__clzsi2>
 80006f0:	239e      	movs	r3, #158	@ 0x9e
 80006f2:	0001      	movs	r1, r0
 80006f4:	1a1b      	subs	r3, r3, r0
 80006f6:	2b96      	cmp	r3, #150	@ 0x96
 80006f8:	dc0f      	bgt.n	800071a <__aeabi_i2f+0x3e>
 80006fa:	2808      	cmp	r0, #8
 80006fc:	d034      	beq.n	8000768 <__aeabi_i2f+0x8c>
 80006fe:	3908      	subs	r1, #8
 8000700:	408d      	lsls	r5, r1
 8000702:	026d      	lsls	r5, r5, #9
 8000704:	0a6d      	lsrs	r5, r5, #9
 8000706:	b2d8      	uxtb	r0, r3
 8000708:	e002      	b.n	8000710 <__aeabi_i2f+0x34>
 800070a:	2400      	movs	r4, #0
 800070c:	2000      	movs	r0, #0
 800070e:	2500      	movs	r5, #0
 8000710:	05c0      	lsls	r0, r0, #23
 8000712:	4328      	orrs	r0, r5
 8000714:	07e4      	lsls	r4, r4, #31
 8000716:	4320      	orrs	r0, r4
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	2b99      	cmp	r3, #153	@ 0x99
 800071c:	dc16      	bgt.n	800074c <__aeabi_i2f+0x70>
 800071e:	1f42      	subs	r2, r0, #5
 8000720:	2805      	cmp	r0, #5
 8000722:	d000      	beq.n	8000726 <__aeabi_i2f+0x4a>
 8000724:	4095      	lsls	r5, r2
 8000726:	002a      	movs	r2, r5
 8000728:	4811      	ldr	r0, [pc, #68]	@ (8000770 <__aeabi_i2f+0x94>)
 800072a:	4002      	ands	r2, r0
 800072c:	076e      	lsls	r6, r5, #29
 800072e:	d009      	beq.n	8000744 <__aeabi_i2f+0x68>
 8000730:	260f      	movs	r6, #15
 8000732:	4035      	ands	r5, r6
 8000734:	2d04      	cmp	r5, #4
 8000736:	d005      	beq.n	8000744 <__aeabi_i2f+0x68>
 8000738:	3204      	adds	r2, #4
 800073a:	0155      	lsls	r5, r2, #5
 800073c:	d502      	bpl.n	8000744 <__aeabi_i2f+0x68>
 800073e:	239f      	movs	r3, #159	@ 0x9f
 8000740:	4002      	ands	r2, r0
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	0192      	lsls	r2, r2, #6
 8000746:	0a55      	lsrs	r5, r2, #9
 8000748:	b2d8      	uxtb	r0, r3
 800074a:	e7e1      	b.n	8000710 <__aeabi_i2f+0x34>
 800074c:	2205      	movs	r2, #5
 800074e:	1a12      	subs	r2, r2, r0
 8000750:	0028      	movs	r0, r5
 8000752:	40d0      	lsrs	r0, r2
 8000754:	0002      	movs	r2, r0
 8000756:	0008      	movs	r0, r1
 8000758:	301b      	adds	r0, #27
 800075a:	4085      	lsls	r5, r0
 800075c:	0028      	movs	r0, r5
 800075e:	1e45      	subs	r5, r0, #1
 8000760:	41a8      	sbcs	r0, r5
 8000762:	4302      	orrs	r2, r0
 8000764:	0015      	movs	r5, r2
 8000766:	e7de      	b.n	8000726 <__aeabi_i2f+0x4a>
 8000768:	026d      	lsls	r5, r5, #9
 800076a:	2096      	movs	r0, #150	@ 0x96
 800076c:	0a6d      	lsrs	r5, r5, #9
 800076e:	e7cf      	b.n	8000710 <__aeabi_i2f+0x34>
 8000770:	fbffffff 	.word	0xfbffffff

08000774 <__aeabi_dadd>:
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	4657      	mov	r7, sl
 8000778:	464e      	mov	r6, r9
 800077a:	4645      	mov	r5, r8
 800077c:	46de      	mov	lr, fp
 800077e:	b5e0      	push	{r5, r6, r7, lr}
 8000780:	b083      	sub	sp, #12
 8000782:	9000      	str	r0, [sp, #0]
 8000784:	9101      	str	r1, [sp, #4]
 8000786:	030c      	lsls	r4, r1, #12
 8000788:	004f      	lsls	r7, r1, #1
 800078a:	0fce      	lsrs	r6, r1, #31
 800078c:	0a61      	lsrs	r1, r4, #9
 800078e:	9c00      	ldr	r4, [sp, #0]
 8000790:	031d      	lsls	r5, r3, #12
 8000792:	0f64      	lsrs	r4, r4, #29
 8000794:	430c      	orrs	r4, r1
 8000796:	9900      	ldr	r1, [sp, #0]
 8000798:	9200      	str	r2, [sp, #0]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	00c8      	lsls	r0, r1, #3
 800079e:	0059      	lsls	r1, r3, #1
 80007a0:	0d4b      	lsrs	r3, r1, #21
 80007a2:	4699      	mov	r9, r3
 80007a4:	9a00      	ldr	r2, [sp, #0]
 80007a6:	9b01      	ldr	r3, [sp, #4]
 80007a8:	0a6d      	lsrs	r5, r5, #9
 80007aa:	0fd9      	lsrs	r1, r3, #31
 80007ac:	0f53      	lsrs	r3, r2, #29
 80007ae:	432b      	orrs	r3, r5
 80007b0:	469a      	mov	sl, r3
 80007b2:	9b00      	ldr	r3, [sp, #0]
 80007b4:	0d7f      	lsrs	r7, r7, #21
 80007b6:	00da      	lsls	r2, r3, #3
 80007b8:	4694      	mov	ip, r2
 80007ba:	464a      	mov	r2, r9
 80007bc:	46b0      	mov	r8, r6
 80007be:	1aba      	subs	r2, r7, r2
 80007c0:	428e      	cmp	r6, r1
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x52>
 80007c4:	e0b0      	b.n	8000928 <__aeabi_dadd+0x1b4>
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	dc00      	bgt.n	80007cc <__aeabi_dadd+0x58>
 80007ca:	e078      	b.n	80008be <__aeabi_dadd+0x14a>
 80007cc:	4649      	mov	r1, r9
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x60>
 80007d2:	e0e9      	b.n	80009a8 <__aeabi_dadd+0x234>
 80007d4:	49c9      	ldr	r1, [pc, #804]	@ (8000afc <__aeabi_dadd+0x388>)
 80007d6:	428f      	cmp	r7, r1
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x68>
 80007da:	e195      	b.n	8000b08 <__aeabi_dadd+0x394>
 80007dc:	2501      	movs	r5, #1
 80007de:	2a38      	cmp	r2, #56	@ 0x38
 80007e0:	dc16      	bgt.n	8000810 <__aeabi_dadd+0x9c>
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	4653      	mov	r3, sl
 80007e6:	0409      	lsls	r1, r1, #16
 80007e8:	430b      	orrs	r3, r1
 80007ea:	469a      	mov	sl, r3
 80007ec:	2a1f      	cmp	r2, #31
 80007ee:	dd00      	ble.n	80007f2 <__aeabi_dadd+0x7e>
 80007f0:	e1e7      	b.n	8000bc2 <__aeabi_dadd+0x44e>
 80007f2:	2120      	movs	r1, #32
 80007f4:	4655      	mov	r5, sl
 80007f6:	1a8b      	subs	r3, r1, r2
 80007f8:	4661      	mov	r1, ip
 80007fa:	409d      	lsls	r5, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	430d      	orrs	r5, r1
 8000800:	4661      	mov	r1, ip
 8000802:	4099      	lsls	r1, r3
 8000804:	1e4b      	subs	r3, r1, #1
 8000806:	4199      	sbcs	r1, r3
 8000808:	4653      	mov	r3, sl
 800080a:	40d3      	lsrs	r3, r2
 800080c:	430d      	orrs	r5, r1
 800080e:	1ae4      	subs	r4, r4, r3
 8000810:	1b45      	subs	r5, r0, r5
 8000812:	42a8      	cmp	r0, r5
 8000814:	4180      	sbcs	r0, r0
 8000816:	4240      	negs	r0, r0
 8000818:	1a24      	subs	r4, r4, r0
 800081a:	0223      	lsls	r3, r4, #8
 800081c:	d400      	bmi.n	8000820 <__aeabi_dadd+0xac>
 800081e:	e10f      	b.n	8000a40 <__aeabi_dadd+0x2cc>
 8000820:	0264      	lsls	r4, r4, #9
 8000822:	0a64      	lsrs	r4, r4, #9
 8000824:	2c00      	cmp	r4, #0
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0xb6>
 8000828:	e139      	b.n	8000a9e <__aeabi_dadd+0x32a>
 800082a:	0020      	movs	r0, r4
 800082c:	f001 ff2a 	bl	8002684 <__clzsi2>
 8000830:	0003      	movs	r3, r0
 8000832:	3b08      	subs	r3, #8
 8000834:	2120      	movs	r1, #32
 8000836:	0028      	movs	r0, r5
 8000838:	1aca      	subs	r2, r1, r3
 800083a:	40d0      	lsrs	r0, r2
 800083c:	409c      	lsls	r4, r3
 800083e:	0002      	movs	r2, r0
 8000840:	409d      	lsls	r5, r3
 8000842:	4322      	orrs	r2, r4
 8000844:	429f      	cmp	r7, r3
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0xd6>
 8000848:	e173      	b.n	8000b32 <__aeabi_dadd+0x3be>
 800084a:	1bd8      	subs	r0, r3, r7
 800084c:	3001      	adds	r0, #1
 800084e:	1a09      	subs	r1, r1, r0
 8000850:	002c      	movs	r4, r5
 8000852:	408d      	lsls	r5, r1
 8000854:	40c4      	lsrs	r4, r0
 8000856:	1e6b      	subs	r3, r5, #1
 8000858:	419d      	sbcs	r5, r3
 800085a:	0013      	movs	r3, r2
 800085c:	40c2      	lsrs	r2, r0
 800085e:	408b      	lsls	r3, r1
 8000860:	4325      	orrs	r5, r4
 8000862:	2700      	movs	r7, #0
 8000864:	0014      	movs	r4, r2
 8000866:	431d      	orrs	r5, r3
 8000868:	076b      	lsls	r3, r5, #29
 800086a:	d009      	beq.n	8000880 <__aeabi_dadd+0x10c>
 800086c:	230f      	movs	r3, #15
 800086e:	402b      	ands	r3, r5
 8000870:	2b04      	cmp	r3, #4
 8000872:	d005      	beq.n	8000880 <__aeabi_dadd+0x10c>
 8000874:	1d2b      	adds	r3, r5, #4
 8000876:	42ab      	cmp	r3, r5
 8000878:	41ad      	sbcs	r5, r5
 800087a:	426d      	negs	r5, r5
 800087c:	1964      	adds	r4, r4, r5
 800087e:	001d      	movs	r5, r3
 8000880:	0223      	lsls	r3, r4, #8
 8000882:	d400      	bmi.n	8000886 <__aeabi_dadd+0x112>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x36e>
 8000886:	4a9d      	ldr	r2, [pc, #628]	@ (8000afc <__aeabi_dadd+0x388>)
 8000888:	3701      	adds	r7, #1
 800088a:	4297      	cmp	r7, r2
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x11c>
 800088e:	e0d3      	b.n	8000a38 <__aeabi_dadd+0x2c4>
 8000890:	4646      	mov	r6, r8
 8000892:	499b      	ldr	r1, [pc, #620]	@ (8000b00 <__aeabi_dadd+0x38c>)
 8000894:	08ed      	lsrs	r5, r5, #3
 8000896:	4021      	ands	r1, r4
 8000898:	074a      	lsls	r2, r1, #29
 800089a:	432a      	orrs	r2, r5
 800089c:	057c      	lsls	r4, r7, #21
 800089e:	024d      	lsls	r5, r1, #9
 80008a0:	0b2d      	lsrs	r5, r5, #12
 80008a2:	0d64      	lsrs	r4, r4, #21
 80008a4:	0524      	lsls	r4, r4, #20
 80008a6:	432c      	orrs	r4, r5
 80008a8:	07f6      	lsls	r6, r6, #31
 80008aa:	4334      	orrs	r4, r6
 80008ac:	0010      	movs	r0, r2
 80008ae:	0021      	movs	r1, r4
 80008b0:	b003      	add	sp, #12
 80008b2:	bcf0      	pop	{r4, r5, r6, r7}
 80008b4:	46bb      	mov	fp, r7
 80008b6:	46b2      	mov	sl, r6
 80008b8:	46a9      	mov	r9, r5
 80008ba:	46a0      	mov	r8, r4
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x150>
 80008c2:	e084      	b.n	80009ce <__aeabi_dadd+0x25a>
 80008c4:	464a      	mov	r2, r9
 80008c6:	1bd2      	subs	r2, r2, r7
 80008c8:	2f00      	cmp	r7, #0
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x15a>
 80008cc:	e16d      	b.n	8000baa <__aeabi_dadd+0x436>
 80008ce:	0025      	movs	r5, r4
 80008d0:	4305      	orrs	r5, r0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x162>
 80008d4:	e127      	b.n	8000b26 <__aeabi_dadd+0x3b2>
 80008d6:	1e56      	subs	r6, r2, #1
 80008d8:	2a01      	cmp	r2, #1
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x16a>
 80008dc:	e23b      	b.n	8000d56 <__aeabi_dadd+0x5e2>
 80008de:	4d87      	ldr	r5, [pc, #540]	@ (8000afc <__aeabi_dadd+0x388>)
 80008e0:	42aa      	cmp	r2, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x172>
 80008e4:	e26a      	b.n	8000dbc <__aeabi_dadd+0x648>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2e38      	cmp	r6, #56	@ 0x38
 80008ea:	dc12      	bgt.n	8000912 <__aeabi_dadd+0x19e>
 80008ec:	0032      	movs	r2, r6
 80008ee:	2a1f      	cmp	r2, #31
 80008f0:	dd00      	ble.n	80008f4 <__aeabi_dadd+0x180>
 80008f2:	e1f8      	b.n	8000ce6 <__aeabi_dadd+0x572>
 80008f4:	2620      	movs	r6, #32
 80008f6:	0025      	movs	r5, r4
 80008f8:	1ab6      	subs	r6, r6, r2
 80008fa:	0007      	movs	r7, r0
 80008fc:	4653      	mov	r3, sl
 80008fe:	40b0      	lsls	r0, r6
 8000900:	40d4      	lsrs	r4, r2
 8000902:	40b5      	lsls	r5, r6
 8000904:	40d7      	lsrs	r7, r2
 8000906:	1e46      	subs	r6, r0, #1
 8000908:	41b0      	sbcs	r0, r6
 800090a:	1b1b      	subs	r3, r3, r4
 800090c:	469a      	mov	sl, r3
 800090e:	433d      	orrs	r5, r7
 8000910:	4305      	orrs	r5, r0
 8000912:	4662      	mov	r2, ip
 8000914:	1b55      	subs	r5, r2, r5
 8000916:	45ac      	cmp	ip, r5
 8000918:	4192      	sbcs	r2, r2
 800091a:	4653      	mov	r3, sl
 800091c:	4252      	negs	r2, r2
 800091e:	000e      	movs	r6, r1
 8000920:	464f      	mov	r7, r9
 8000922:	4688      	mov	r8, r1
 8000924:	1a9c      	subs	r4, r3, r2
 8000926:	e778      	b.n	800081a <__aeabi_dadd+0xa6>
 8000928:	2a00      	cmp	r2, #0
 800092a:	dc00      	bgt.n	800092e <__aeabi_dadd+0x1ba>
 800092c:	e08e      	b.n	8000a4c <__aeabi_dadd+0x2d8>
 800092e:	4649      	mov	r1, r9
 8000930:	2900      	cmp	r1, #0
 8000932:	d175      	bne.n	8000a20 <__aeabi_dadd+0x2ac>
 8000934:	4661      	mov	r1, ip
 8000936:	4653      	mov	r3, sl
 8000938:	4319      	orrs	r1, r3
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x1ca>
 800093c:	e0f6      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 800093e:	1e51      	subs	r1, r2, #1
 8000940:	2a01      	cmp	r2, #1
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x1d2>
 8000944:	e191      	b.n	8000c6a <__aeabi_dadd+0x4f6>
 8000946:	4d6d      	ldr	r5, [pc, #436]	@ (8000afc <__aeabi_dadd+0x388>)
 8000948:	42aa      	cmp	r2, r5
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x1da>
 800094c:	e0dc      	b.n	8000b08 <__aeabi_dadd+0x394>
 800094e:	2501      	movs	r5, #1
 8000950:	2938      	cmp	r1, #56	@ 0x38
 8000952:	dc14      	bgt.n	800097e <__aeabi_dadd+0x20a>
 8000954:	000a      	movs	r2, r1
 8000956:	2a1f      	cmp	r2, #31
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x1e8>
 800095a:	e1a2      	b.n	8000ca2 <__aeabi_dadd+0x52e>
 800095c:	2120      	movs	r1, #32
 800095e:	4653      	mov	r3, sl
 8000960:	1a89      	subs	r1, r1, r2
 8000962:	408b      	lsls	r3, r1
 8000964:	001d      	movs	r5, r3
 8000966:	4663      	mov	r3, ip
 8000968:	40d3      	lsrs	r3, r2
 800096a:	431d      	orrs	r5, r3
 800096c:	4663      	mov	r3, ip
 800096e:	408b      	lsls	r3, r1
 8000970:	0019      	movs	r1, r3
 8000972:	1e4b      	subs	r3, r1, #1
 8000974:	4199      	sbcs	r1, r3
 8000976:	4653      	mov	r3, sl
 8000978:	40d3      	lsrs	r3, r2
 800097a:	430d      	orrs	r5, r1
 800097c:	18e4      	adds	r4, r4, r3
 800097e:	182d      	adds	r5, r5, r0
 8000980:	4285      	cmp	r5, r0
 8000982:	4180      	sbcs	r0, r0
 8000984:	4240      	negs	r0, r0
 8000986:	1824      	adds	r4, r4, r0
 8000988:	0223      	lsls	r3, r4, #8
 800098a:	d559      	bpl.n	8000a40 <__aeabi_dadd+0x2cc>
 800098c:	4b5b      	ldr	r3, [pc, #364]	@ (8000afc <__aeabi_dadd+0x388>)
 800098e:	3701      	adds	r7, #1
 8000990:	429f      	cmp	r7, r3
 8000992:	d051      	beq.n	8000a38 <__aeabi_dadd+0x2c4>
 8000994:	2101      	movs	r1, #1
 8000996:	4b5a      	ldr	r3, [pc, #360]	@ (8000b00 <__aeabi_dadd+0x38c>)
 8000998:	086a      	lsrs	r2, r5, #1
 800099a:	401c      	ands	r4, r3
 800099c:	4029      	ands	r1, r5
 800099e:	430a      	orrs	r2, r1
 80009a0:	07e5      	lsls	r5, r4, #31
 80009a2:	4315      	orrs	r5, r2
 80009a4:	0864      	lsrs	r4, r4, #1
 80009a6:	e75f      	b.n	8000868 <__aeabi_dadd+0xf4>
 80009a8:	4661      	mov	r1, ip
 80009aa:	4653      	mov	r3, sl
 80009ac:	4319      	orrs	r1, r3
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x23e>
 80009b0:	e0bc      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 80009b2:	1e51      	subs	r1, r2, #1
 80009b4:	2a01      	cmp	r2, #1
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x246>
 80009b8:	e164      	b.n	8000c84 <__aeabi_dadd+0x510>
 80009ba:	4d50      	ldr	r5, [pc, #320]	@ (8000afc <__aeabi_dadd+0x388>)
 80009bc:	42aa      	cmp	r2, r5
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x24e>
 80009c0:	e16a      	b.n	8000c98 <__aeabi_dadd+0x524>
 80009c2:	2501      	movs	r5, #1
 80009c4:	2938      	cmp	r1, #56	@ 0x38
 80009c6:	dd00      	ble.n	80009ca <__aeabi_dadd+0x256>
 80009c8:	e722      	b.n	8000810 <__aeabi_dadd+0x9c>
 80009ca:	000a      	movs	r2, r1
 80009cc:	e70e      	b.n	80007ec <__aeabi_dadd+0x78>
 80009ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000b04 <__aeabi_dadd+0x390>)
 80009d0:	1c7d      	adds	r5, r7, #1
 80009d2:	4215      	tst	r5, r2
 80009d4:	d000      	beq.n	80009d8 <__aeabi_dadd+0x264>
 80009d6:	e0d0      	b.n	8000b7a <__aeabi_dadd+0x406>
 80009d8:	0025      	movs	r5, r4
 80009da:	4662      	mov	r2, ip
 80009dc:	4653      	mov	r3, sl
 80009de:	4305      	orrs	r5, r0
 80009e0:	431a      	orrs	r2, r3
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x274>
 80009e6:	e137      	b.n	8000c58 <__aeabi_dadd+0x4e4>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x27a>
 80009ec:	e1a8      	b.n	8000d40 <__aeabi_dadd+0x5cc>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x280>
 80009f2:	e16a      	b.n	8000cca <__aeabi_dadd+0x556>
 80009f4:	4663      	mov	r3, ip
 80009f6:	1ac5      	subs	r5, r0, r3
 80009f8:	4653      	mov	r3, sl
 80009fa:	1ae2      	subs	r2, r4, r3
 80009fc:	42a8      	cmp	r0, r5
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	425b      	negs	r3, r3
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	021a      	lsls	r2, r3, #8
 8000a06:	d400      	bmi.n	8000a0a <__aeabi_dadd+0x296>
 8000a08:	e203      	b.n	8000e12 <__aeabi_dadd+0x69e>
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	1a1d      	subs	r5, r3, r0
 8000a0e:	45ac      	cmp	ip, r5
 8000a10:	4192      	sbcs	r2, r2
 8000a12:	4653      	mov	r3, sl
 8000a14:	4252      	negs	r2, r2
 8000a16:	1b1c      	subs	r4, r3, r4
 8000a18:	000e      	movs	r6, r1
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	1aa4      	subs	r4, r4, r2
 8000a1e:	e723      	b.n	8000868 <__aeabi_dadd+0xf4>
 8000a20:	4936      	ldr	r1, [pc, #216]	@ (8000afc <__aeabi_dadd+0x388>)
 8000a22:	428f      	cmp	r7, r1
 8000a24:	d070      	beq.n	8000b08 <__aeabi_dadd+0x394>
 8000a26:	2501      	movs	r5, #1
 8000a28:	2a38      	cmp	r2, #56	@ 0x38
 8000a2a:	dca8      	bgt.n	800097e <__aeabi_dadd+0x20a>
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	4653      	mov	r3, sl
 8000a30:	0409      	lsls	r1, r1, #16
 8000a32:	430b      	orrs	r3, r1
 8000a34:	469a      	mov	sl, r3
 8000a36:	e78e      	b.n	8000956 <__aeabi_dadd+0x1e2>
 8000a38:	003c      	movs	r4, r7
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	e731      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000a40:	2307      	movs	r3, #7
 8000a42:	402b      	ands	r3, r5
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x2d6>
 8000a48:	e710      	b.n	800086c <__aeabi_dadd+0xf8>
 8000a4a:	e093      	b.n	8000b74 <__aeabi_dadd+0x400>
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d074      	beq.n	8000b3a <__aeabi_dadd+0x3c6>
 8000a50:	464a      	mov	r2, r9
 8000a52:	1bd2      	subs	r2, r2, r7
 8000a54:	2f00      	cmp	r7, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x2e6>
 8000a58:	e0c7      	b.n	8000bea <__aeabi_dadd+0x476>
 8000a5a:	4928      	ldr	r1, [pc, #160]	@ (8000afc <__aeabi_dadd+0x388>)
 8000a5c:	4589      	cmp	r9, r1
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dadd+0x2ee>
 8000a60:	e185      	b.n	8000d6e <__aeabi_dadd+0x5fa>
 8000a62:	2501      	movs	r5, #1
 8000a64:	2a38      	cmp	r2, #56	@ 0x38
 8000a66:	dc12      	bgt.n	8000a8e <__aeabi_dadd+0x31a>
 8000a68:	2180      	movs	r1, #128	@ 0x80
 8000a6a:	0409      	lsls	r1, r1, #16
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	2a1f      	cmp	r2, #31
 8000a70:	dd00      	ble.n	8000a74 <__aeabi_dadd+0x300>
 8000a72:	e1ab      	b.n	8000dcc <__aeabi_dadd+0x658>
 8000a74:	2120      	movs	r1, #32
 8000a76:	0025      	movs	r5, r4
 8000a78:	1a89      	subs	r1, r1, r2
 8000a7a:	0007      	movs	r7, r0
 8000a7c:	4088      	lsls	r0, r1
 8000a7e:	408d      	lsls	r5, r1
 8000a80:	40d7      	lsrs	r7, r2
 8000a82:	1e41      	subs	r1, r0, #1
 8000a84:	4188      	sbcs	r0, r1
 8000a86:	40d4      	lsrs	r4, r2
 8000a88:	433d      	orrs	r5, r7
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	44a2      	add	sl, r4
 8000a8e:	4465      	add	r5, ip
 8000a90:	4565      	cmp	r5, ip
 8000a92:	4192      	sbcs	r2, r2
 8000a94:	4252      	negs	r2, r2
 8000a96:	4452      	add	r2, sl
 8000a98:	0014      	movs	r4, r2
 8000a9a:	464f      	mov	r7, r9
 8000a9c:	e774      	b.n	8000988 <__aeabi_dadd+0x214>
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	f001 fdf0 	bl	8002684 <__clzsi2>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	3318      	adds	r3, #24
 8000aa8:	2b1f      	cmp	r3, #31
 8000aaa:	dc00      	bgt.n	8000aae <__aeabi_dadd+0x33a>
 8000aac:	e6c2      	b.n	8000834 <__aeabi_dadd+0xc0>
 8000aae:	002a      	movs	r2, r5
 8000ab0:	3808      	subs	r0, #8
 8000ab2:	4082      	lsls	r2, r0
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x346>
 8000ab8:	e0a9      	b.n	8000c0e <__aeabi_dadd+0x49a>
 8000aba:	1bdb      	subs	r3, r3, r7
 8000abc:	1c58      	adds	r0, r3, #1
 8000abe:	281f      	cmp	r0, #31
 8000ac0:	dc00      	bgt.n	8000ac4 <__aeabi_dadd+0x350>
 8000ac2:	e1ac      	b.n	8000e1e <__aeabi_dadd+0x6aa>
 8000ac4:	0015      	movs	r5, r2
 8000ac6:	3b1f      	subs	r3, #31
 8000ac8:	40dd      	lsrs	r5, r3
 8000aca:	2820      	cmp	r0, #32
 8000acc:	d005      	beq.n	8000ada <__aeabi_dadd+0x366>
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	1a1b      	subs	r3, r3, r0
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	1e53      	subs	r3, r2, #1
 8000ad6:	419a      	sbcs	r2, r3
 8000ad8:	4315      	orrs	r5, r2
 8000ada:	2307      	movs	r3, #7
 8000adc:	2700      	movs	r7, #0
 8000ade:	402b      	ands	r3, r5
 8000ae0:	e7b0      	b.n	8000a44 <__aeabi_dadd+0x2d0>
 8000ae2:	08ed      	lsrs	r5, r5, #3
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <__aeabi_dadd+0x388>)
 8000ae6:	0762      	lsls	r2, r4, #29
 8000ae8:	432a      	orrs	r2, r5
 8000aea:	08e4      	lsrs	r4, r4, #3
 8000aec:	429f      	cmp	r7, r3
 8000aee:	d00f      	beq.n	8000b10 <__aeabi_dadd+0x39c>
 8000af0:	0324      	lsls	r4, r4, #12
 8000af2:	0b25      	lsrs	r5, r4, #12
 8000af4:	057c      	lsls	r4, r7, #21
 8000af6:	0d64      	lsrs	r4, r4, #21
 8000af8:	e6d4      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	000007ff 	.word	0x000007ff
 8000b00:	ff7fffff 	.word	0xff7fffff
 8000b04:	000007fe 	.word	0x000007fe
 8000b08:	08c0      	lsrs	r0, r0, #3
 8000b0a:	0762      	lsls	r2, r4, #29
 8000b0c:	4302      	orrs	r2, r0
 8000b0e:	08e4      	lsrs	r4, r4, #3
 8000b10:	0013      	movs	r3, r2
 8000b12:	4323      	orrs	r3, r4
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x3a4>
 8000b16:	e186      	b.n	8000e26 <__aeabi_dadd+0x6b2>
 8000b18:	2580      	movs	r5, #128	@ 0x80
 8000b1a:	032d      	lsls	r5, r5, #12
 8000b1c:	4325      	orrs	r5, r4
 8000b1e:	032d      	lsls	r5, r5, #12
 8000b20:	4cc3      	ldr	r4, [pc, #780]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000b22:	0b2d      	lsrs	r5, r5, #12
 8000b24:	e6be      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000b26:	4660      	mov	r0, ip
 8000b28:	4654      	mov	r4, sl
 8000b2a:	000e      	movs	r6, r1
 8000b2c:	0017      	movs	r7, r2
 8000b2e:	08c5      	lsrs	r5, r0, #3
 8000b30:	e7d8      	b.n	8000ae4 <__aeabi_dadd+0x370>
 8000b32:	4cc0      	ldr	r4, [pc, #768]	@ (8000e34 <__aeabi_dadd+0x6c0>)
 8000b34:	1aff      	subs	r7, r7, r3
 8000b36:	4014      	ands	r4, r2
 8000b38:	e696      	b.n	8000868 <__aeabi_dadd+0xf4>
 8000b3a:	4abf      	ldr	r2, [pc, #764]	@ (8000e38 <__aeabi_dadd+0x6c4>)
 8000b3c:	1c79      	adds	r1, r7, #1
 8000b3e:	4211      	tst	r1, r2
 8000b40:	d16b      	bne.n	8000c1a <__aeabi_dadd+0x4a6>
 8000b42:	0022      	movs	r2, r4
 8000b44:	4302      	orrs	r2, r0
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_dadd+0x3d8>
 8000b4a:	e0db      	b.n	8000d04 <__aeabi_dadd+0x590>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x3de>
 8000b50:	e12d      	b.n	8000dae <__aeabi_dadd+0x63a>
 8000b52:	4662      	mov	r2, ip
 8000b54:	4653      	mov	r3, sl
 8000b56:	431a      	orrs	r2, r3
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x3e8>
 8000b5a:	e0b6      	b.n	8000cca <__aeabi_dadd+0x556>
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	18c5      	adds	r5, r0, r3
 8000b60:	4285      	cmp	r5, r0
 8000b62:	4180      	sbcs	r0, r0
 8000b64:	4454      	add	r4, sl
 8000b66:	4240      	negs	r0, r0
 8000b68:	1824      	adds	r4, r4, r0
 8000b6a:	0223      	lsls	r3, r4, #8
 8000b6c:	d502      	bpl.n	8000b74 <__aeabi_dadd+0x400>
 8000b6e:	000f      	movs	r7, r1
 8000b70:	4bb0      	ldr	r3, [pc, #704]	@ (8000e34 <__aeabi_dadd+0x6c0>)
 8000b72:	401c      	ands	r4, r3
 8000b74:	003a      	movs	r2, r7
 8000b76:	0028      	movs	r0, r5
 8000b78:	e7d8      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 8000b7a:	4662      	mov	r2, ip
 8000b7c:	1a85      	subs	r5, r0, r2
 8000b7e:	42a8      	cmp	r0, r5
 8000b80:	4192      	sbcs	r2, r2
 8000b82:	4653      	mov	r3, sl
 8000b84:	4252      	negs	r2, r2
 8000b86:	4691      	mov	r9, r2
 8000b88:	1ae3      	subs	r3, r4, r3
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	464b      	mov	r3, r9
 8000b8e:	1ad2      	subs	r2, r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	4691      	mov	r9, r2
 8000b94:	021a      	lsls	r2, r3, #8
 8000b96:	d454      	bmi.n	8000c42 <__aeabi_dadd+0x4ce>
 8000b98:	464a      	mov	r2, r9
 8000b9a:	464c      	mov	r4, r9
 8000b9c:	432a      	orrs	r2, r5
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x42e>
 8000ba0:	e640      	b.n	8000824 <__aeabi_dadd+0xb0>
 8000ba2:	2600      	movs	r6, #0
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	e67c      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000baa:	4da1      	ldr	r5, [pc, #644]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000bac:	45a9      	cmp	r9, r5
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x43e>
 8000bb0:	e090      	b.n	8000cd4 <__aeabi_dadd+0x560>
 8000bb2:	2501      	movs	r5, #1
 8000bb4:	2a38      	cmp	r2, #56	@ 0x38
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dadd+0x446>
 8000bb8:	e6ab      	b.n	8000912 <__aeabi_dadd+0x19e>
 8000bba:	2580      	movs	r5, #128	@ 0x80
 8000bbc:	042d      	lsls	r5, r5, #16
 8000bbe:	432c      	orrs	r4, r5
 8000bc0:	e695      	b.n	80008ee <__aeabi_dadd+0x17a>
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	4655      	mov	r5, sl
 8000bc6:	3920      	subs	r1, #32
 8000bc8:	40cd      	lsrs	r5, r1
 8000bca:	46a9      	mov	r9, r5
 8000bcc:	2a20      	cmp	r2, #32
 8000bce:	d006      	beq.n	8000bde <__aeabi_dadd+0x46a>
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4653      	mov	r3, sl
 8000bd4:	1a8a      	subs	r2, r1, r2
 8000bd6:	4093      	lsls	r3, r2
 8000bd8:	4662      	mov	r2, ip
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	4694      	mov	ip, r2
 8000bde:	4665      	mov	r5, ip
 8000be0:	1e6b      	subs	r3, r5, #1
 8000be2:	419d      	sbcs	r5, r3
 8000be4:	464b      	mov	r3, r9
 8000be6:	431d      	orrs	r5, r3
 8000be8:	e612      	b.n	8000810 <__aeabi_dadd+0x9c>
 8000bea:	0021      	movs	r1, r4
 8000bec:	4301      	orrs	r1, r0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x47e>
 8000bf0:	e0c4      	b.n	8000d7c <__aeabi_dadd+0x608>
 8000bf2:	1e51      	subs	r1, r2, #1
 8000bf4:	2a01      	cmp	r2, #1
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dadd+0x486>
 8000bf8:	e0fb      	b.n	8000df2 <__aeabi_dadd+0x67e>
 8000bfa:	4d8d      	ldr	r5, [pc, #564]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000bfc:	42aa      	cmp	r2, r5
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x48e>
 8000c00:	e0b5      	b.n	8000d6e <__aeabi_dadd+0x5fa>
 8000c02:	2501      	movs	r5, #1
 8000c04:	2938      	cmp	r1, #56	@ 0x38
 8000c06:	dd00      	ble.n	8000c0a <__aeabi_dadd+0x496>
 8000c08:	e741      	b.n	8000a8e <__aeabi_dadd+0x31a>
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	e72f      	b.n	8000a6e <__aeabi_dadd+0x2fa>
 8000c0e:	4c89      	ldr	r4, [pc, #548]	@ (8000e34 <__aeabi_dadd+0x6c0>)
 8000c10:	1aff      	subs	r7, r7, r3
 8000c12:	4014      	ands	r4, r2
 8000c14:	0762      	lsls	r2, r4, #29
 8000c16:	08e4      	lsrs	r4, r4, #3
 8000c18:	e76a      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000c1a:	4a85      	ldr	r2, [pc, #532]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000c1c:	4291      	cmp	r1, r2
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x4ae>
 8000c20:	e0e3      	b.n	8000dea <__aeabi_dadd+0x676>
 8000c22:	4663      	mov	r3, ip
 8000c24:	18c2      	adds	r2, r0, r3
 8000c26:	4282      	cmp	r2, r0
 8000c28:	4180      	sbcs	r0, r0
 8000c2a:	0023      	movs	r3, r4
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	4453      	add	r3, sl
 8000c30:	181b      	adds	r3, r3, r0
 8000c32:	07dd      	lsls	r5, r3, #31
 8000c34:	085c      	lsrs	r4, r3, #1
 8000c36:	2307      	movs	r3, #7
 8000c38:	0852      	lsrs	r2, r2, #1
 8000c3a:	4315      	orrs	r5, r2
 8000c3c:	000f      	movs	r7, r1
 8000c3e:	402b      	ands	r3, r5
 8000c40:	e700      	b.n	8000a44 <__aeabi_dadd+0x2d0>
 8000c42:	4663      	mov	r3, ip
 8000c44:	1a1d      	subs	r5, r3, r0
 8000c46:	45ac      	cmp	ip, r5
 8000c48:	4192      	sbcs	r2, r2
 8000c4a:	4653      	mov	r3, sl
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	1b1c      	subs	r4, r3, r4
 8000c50:	000e      	movs	r6, r1
 8000c52:	4688      	mov	r8, r1
 8000c54:	1aa4      	subs	r4, r4, r2
 8000c56:	e5e5      	b.n	8000824 <__aeabi_dadd+0xb0>
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dadd+0x4ea>
 8000c5c:	e091      	b.n	8000d82 <__aeabi_dadd+0x60e>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d138      	bne.n	8000cd4 <__aeabi_dadd+0x560>
 8000c62:	2480      	movs	r4, #128	@ 0x80
 8000c64:	2600      	movs	r6, #0
 8000c66:	0324      	lsls	r4, r4, #12
 8000c68:	e756      	b.n	8000b18 <__aeabi_dadd+0x3a4>
 8000c6a:	4663      	mov	r3, ip
 8000c6c:	18c5      	adds	r5, r0, r3
 8000c6e:	4285      	cmp	r5, r0
 8000c70:	4180      	sbcs	r0, r0
 8000c72:	4454      	add	r4, sl
 8000c74:	4240      	negs	r0, r0
 8000c76:	1824      	adds	r4, r4, r0
 8000c78:	2701      	movs	r7, #1
 8000c7a:	0223      	lsls	r3, r4, #8
 8000c7c:	d400      	bmi.n	8000c80 <__aeabi_dadd+0x50c>
 8000c7e:	e6df      	b.n	8000a40 <__aeabi_dadd+0x2cc>
 8000c80:	2702      	movs	r7, #2
 8000c82:	e687      	b.n	8000994 <__aeabi_dadd+0x220>
 8000c84:	4663      	mov	r3, ip
 8000c86:	1ac5      	subs	r5, r0, r3
 8000c88:	42a8      	cmp	r0, r5
 8000c8a:	4180      	sbcs	r0, r0
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	4240      	negs	r0, r0
 8000c90:	1ae4      	subs	r4, r4, r3
 8000c92:	2701      	movs	r7, #1
 8000c94:	1a24      	subs	r4, r4, r0
 8000c96:	e5c0      	b.n	800081a <__aeabi_dadd+0xa6>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	08c0      	lsrs	r0, r0, #3
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	e736      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	3920      	subs	r1, #32
 8000ca8:	40cb      	lsrs	r3, r1
 8000caa:	4699      	mov	r9, r3
 8000cac:	2a20      	cmp	r2, #32
 8000cae:	d006      	beq.n	8000cbe <__aeabi_dadd+0x54a>
 8000cb0:	2140      	movs	r1, #64	@ 0x40
 8000cb2:	4653      	mov	r3, sl
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	4093      	lsls	r3, r2
 8000cb8:	4662      	mov	r2, ip
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	4665      	mov	r5, ip
 8000cc0:	1e6b      	subs	r3, r5, #1
 8000cc2:	419d      	sbcs	r5, r3
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	431d      	orrs	r5, r3
 8000cc8:	e659      	b.n	800097e <__aeabi_dadd+0x20a>
 8000cca:	0762      	lsls	r2, r4, #29
 8000ccc:	08c0      	lsrs	r0, r0, #3
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	08e4      	lsrs	r4, r4, #3
 8000cd2:	e70d      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000cd4:	4653      	mov	r3, sl
 8000cd6:	075a      	lsls	r2, r3, #29
 8000cd8:	4663      	mov	r3, ip
 8000cda:	08d8      	lsrs	r0, r3, #3
 8000cdc:	4653      	mov	r3, sl
 8000cde:	000e      	movs	r6, r1
 8000ce0:	4302      	orrs	r2, r0
 8000ce2:	08dc      	lsrs	r4, r3, #3
 8000ce4:	e714      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	0026      	movs	r6, r4
 8000cea:	3d20      	subs	r5, #32
 8000cec:	40ee      	lsrs	r6, r5
 8000cee:	2a20      	cmp	r2, #32
 8000cf0:	d003      	beq.n	8000cfa <__aeabi_dadd+0x586>
 8000cf2:	2540      	movs	r5, #64	@ 0x40
 8000cf4:	1aaa      	subs	r2, r5, r2
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	4320      	orrs	r0, r4
 8000cfa:	1e42      	subs	r2, r0, #1
 8000cfc:	4190      	sbcs	r0, r2
 8000cfe:	0005      	movs	r5, r0
 8000d00:	4335      	orrs	r5, r6
 8000d02:	e606      	b.n	8000912 <__aeabi_dadd+0x19e>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d07c      	beq.n	8000e02 <__aeabi_dadd+0x68e>
 8000d08:	4662      	mov	r2, ip
 8000d0a:	4653      	mov	r3, sl
 8000d0c:	08c0      	lsrs	r0, r0, #3
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x5a0>
 8000d12:	e6fa      	b.n	8000b0a <__aeabi_dadd+0x396>
 8000d14:	0762      	lsls	r2, r4, #29
 8000d16:	4310      	orrs	r0, r2
 8000d18:	2280      	movs	r2, #128	@ 0x80
 8000d1a:	08e4      	lsrs	r4, r4, #3
 8000d1c:	0312      	lsls	r2, r2, #12
 8000d1e:	4214      	tst	r4, r2
 8000d20:	d008      	beq.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d22:	08d9      	lsrs	r1, r3, #3
 8000d24:	4211      	tst	r1, r2
 8000d26:	d105      	bne.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d28:	4663      	mov	r3, ip
 8000d2a:	08d8      	lsrs	r0, r3, #3
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	000c      	movs	r4, r1
 8000d30:	075b      	lsls	r3, r3, #29
 8000d32:	4318      	orrs	r0, r3
 8000d34:	0f42      	lsrs	r2, r0, #29
 8000d36:	00c0      	lsls	r0, r0, #3
 8000d38:	08c0      	lsrs	r0, r0, #3
 8000d3a:	0752      	lsls	r2, r2, #29
 8000d3c:	4302      	orrs	r2, r0
 8000d3e:	e6e7      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0x5d2>
 8000d44:	e72d      	b.n	8000ba2 <__aeabi_dadd+0x42e>
 8000d46:	4663      	mov	r3, ip
 8000d48:	08d8      	lsrs	r0, r3, #3
 8000d4a:	4653      	mov	r3, sl
 8000d4c:	075a      	lsls	r2, r3, #29
 8000d4e:	000e      	movs	r6, r1
 8000d50:	4302      	orrs	r2, r0
 8000d52:	08dc      	lsrs	r4, r3, #3
 8000d54:	e6cc      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000d56:	4663      	mov	r3, ip
 8000d58:	1a1d      	subs	r5, r3, r0
 8000d5a:	45ac      	cmp	ip, r5
 8000d5c:	4192      	sbcs	r2, r2
 8000d5e:	4653      	mov	r3, sl
 8000d60:	4252      	negs	r2, r2
 8000d62:	1b1c      	subs	r4, r3, r4
 8000d64:	000e      	movs	r6, r1
 8000d66:	4688      	mov	r8, r1
 8000d68:	1aa4      	subs	r4, r4, r2
 8000d6a:	3701      	adds	r7, #1
 8000d6c:	e555      	b.n	800081a <__aeabi_dadd+0xa6>
 8000d6e:	4663      	mov	r3, ip
 8000d70:	08d9      	lsrs	r1, r3, #3
 8000d72:	4653      	mov	r3, sl
 8000d74:	075a      	lsls	r2, r3, #29
 8000d76:	430a      	orrs	r2, r1
 8000d78:	08dc      	lsrs	r4, r3, #3
 8000d7a:	e6c9      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000d7c:	4660      	mov	r0, ip
 8000d7e:	4654      	mov	r4, sl
 8000d80:	e6d4      	b.n	8000b2c <__aeabi_dadd+0x3b8>
 8000d82:	08c0      	lsrs	r0, r0, #3
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dadd+0x616>
 8000d88:	e6bf      	b.n	8000b0a <__aeabi_dadd+0x396>
 8000d8a:	0762      	lsls	r2, r4, #29
 8000d8c:	4310      	orrs	r0, r2
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	08e4      	lsrs	r4, r4, #3
 8000d92:	0312      	lsls	r2, r2, #12
 8000d94:	4214      	tst	r4, r2
 8000d96:	d0cd      	beq.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d98:	08dd      	lsrs	r5, r3, #3
 8000d9a:	4215      	tst	r5, r2
 8000d9c:	d1ca      	bne.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d9e:	4663      	mov	r3, ip
 8000da0:	08d8      	lsrs	r0, r3, #3
 8000da2:	4653      	mov	r3, sl
 8000da4:	075b      	lsls	r3, r3, #29
 8000da6:	000e      	movs	r6, r1
 8000da8:	002c      	movs	r4, r5
 8000daa:	4318      	orrs	r0, r3
 8000dac:	e7c2      	b.n	8000d34 <__aeabi_dadd+0x5c0>
 8000dae:	4663      	mov	r3, ip
 8000db0:	08d9      	lsrs	r1, r3, #3
 8000db2:	4653      	mov	r3, sl
 8000db4:	075a      	lsls	r2, r3, #29
 8000db6:	430a      	orrs	r2, r1
 8000db8:	08dc      	lsrs	r4, r3, #3
 8000dba:	e699      	b.n	8000af0 <__aeabi_dadd+0x37c>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	08d8      	lsrs	r0, r3, #3
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	075a      	lsls	r2, r3, #29
 8000dc4:	000e      	movs	r6, r1
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	08dc      	lsrs	r4, r3, #3
 8000dca:	e6a1      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0027      	movs	r7, r4
 8000dd0:	3920      	subs	r1, #32
 8000dd2:	40cf      	lsrs	r7, r1
 8000dd4:	2a20      	cmp	r2, #32
 8000dd6:	d003      	beq.n	8000de0 <__aeabi_dadd+0x66c>
 8000dd8:	2140      	movs	r1, #64	@ 0x40
 8000dda:	1a8a      	subs	r2, r1, r2
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	4320      	orrs	r0, r4
 8000de0:	1e42      	subs	r2, r0, #1
 8000de2:	4190      	sbcs	r0, r2
 8000de4:	0005      	movs	r5, r0
 8000de6:	433d      	orrs	r5, r7
 8000de8:	e651      	b.n	8000a8e <__aeabi_dadd+0x31a>
 8000dea:	000c      	movs	r4, r1
 8000dec:	2500      	movs	r5, #0
 8000dee:	2200      	movs	r2, #0
 8000df0:	e558      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000df2:	4460      	add	r0, ip
 8000df4:	4560      	cmp	r0, ip
 8000df6:	4192      	sbcs	r2, r2
 8000df8:	4454      	add	r4, sl
 8000dfa:	4252      	negs	r2, r2
 8000dfc:	0005      	movs	r5, r0
 8000dfe:	18a4      	adds	r4, r4, r2
 8000e00:	e73a      	b.n	8000c78 <__aeabi_dadd+0x504>
 8000e02:	4653      	mov	r3, sl
 8000e04:	075a      	lsls	r2, r3, #29
 8000e06:	4663      	mov	r3, ip
 8000e08:	08d9      	lsrs	r1, r3, #3
 8000e0a:	4653      	mov	r3, sl
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	08dc      	lsrs	r4, r3, #3
 8000e10:	e67e      	b.n	8000b10 <__aeabi_dadd+0x39c>
 8000e12:	001a      	movs	r2, r3
 8000e14:	001c      	movs	r4, r3
 8000e16:	432a      	orrs	r2, r5
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dadd+0x6a8>
 8000e1a:	e6ab      	b.n	8000b74 <__aeabi_dadd+0x400>
 8000e1c:	e6c1      	b.n	8000ba2 <__aeabi_dadd+0x42e>
 8000e1e:	2120      	movs	r1, #32
 8000e20:	2500      	movs	r5, #0
 8000e22:	1a09      	subs	r1, r1, r0
 8000e24:	e519      	b.n	800085a <__aeabi_dadd+0xe6>
 8000e26:	2200      	movs	r2, #0
 8000e28:	2500      	movs	r5, #0
 8000e2a:	4c01      	ldr	r4, [pc, #4]	@ (8000e30 <__aeabi_dadd+0x6bc>)
 8000e2c:	e53a      	b.n	80008a4 <__aeabi_dadd+0x130>
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	000007ff 	.word	0x000007ff
 8000e34:	ff7fffff 	.word	0xff7fffff
 8000e38:	000007fe 	.word	0x000007fe

08000e3c <__aeabi_ddiv>:
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	46de      	mov	lr, fp
 8000e40:	4645      	mov	r5, r8
 8000e42:	4657      	mov	r7, sl
 8000e44:	464e      	mov	r6, r9
 8000e46:	b5e0      	push	{r5, r6, r7, lr}
 8000e48:	b087      	sub	sp, #28
 8000e4a:	9200      	str	r2, [sp, #0]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	030b      	lsls	r3, r1, #12
 8000e50:	0b1b      	lsrs	r3, r3, #12
 8000e52:	469b      	mov	fp, r3
 8000e54:	0fca      	lsrs	r2, r1, #31
 8000e56:	004b      	lsls	r3, r1, #1
 8000e58:	0004      	movs	r4, r0
 8000e5a:	4680      	mov	r8, r0
 8000e5c:	0d5b      	lsrs	r3, r3, #21
 8000e5e:	9202      	str	r2, [sp, #8]
 8000e60:	d100      	bne.n	8000e64 <__aeabi_ddiv+0x28>
 8000e62:	e16a      	b.n	800113a <__aeabi_ddiv+0x2fe>
 8000e64:	4ad4      	ldr	r2, [pc, #848]	@ (80011b8 <__aeabi_ddiv+0x37c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d100      	bne.n	8000e6c <__aeabi_ddiv+0x30>
 8000e6a:	e18c      	b.n	8001186 <__aeabi_ddiv+0x34a>
 8000e6c:	4659      	mov	r1, fp
 8000e6e:	0f42      	lsrs	r2, r0, #29
 8000e70:	00c9      	lsls	r1, r1, #3
 8000e72:	430a      	orrs	r2, r1
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	0409      	lsls	r1, r1, #16
 8000e78:	4311      	orrs	r1, r2
 8000e7a:	00c2      	lsls	r2, r0, #3
 8000e7c:	4690      	mov	r8, r2
 8000e7e:	4acf      	ldr	r2, [pc, #828]	@ (80011bc <__aeabi_ddiv+0x380>)
 8000e80:	4689      	mov	r9, r1
 8000e82:	4692      	mov	sl, r2
 8000e84:	449a      	add	sl, r3
 8000e86:	2300      	movs	r3, #0
 8000e88:	2400      	movs	r4, #0
 8000e8a:	9303      	str	r3, [sp, #12]
 8000e8c:	9e00      	ldr	r6, [sp, #0]
 8000e8e:	9f01      	ldr	r7, [sp, #4]
 8000e90:	033b      	lsls	r3, r7, #12
 8000e92:	0b1b      	lsrs	r3, r3, #12
 8000e94:	469b      	mov	fp, r3
 8000e96:	007b      	lsls	r3, r7, #1
 8000e98:	0030      	movs	r0, r6
 8000e9a:	0d5b      	lsrs	r3, r3, #21
 8000e9c:	0ffd      	lsrs	r5, r7, #31
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x68>
 8000ea2:	e128      	b.n	80010f6 <__aeabi_ddiv+0x2ba>
 8000ea4:	4ac4      	ldr	r2, [pc, #784]	@ (80011b8 <__aeabi_ddiv+0x37c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d100      	bne.n	8000eac <__aeabi_ddiv+0x70>
 8000eaa:	e177      	b.n	800119c <__aeabi_ddiv+0x360>
 8000eac:	4659      	mov	r1, fp
 8000eae:	0f72      	lsrs	r2, r6, #29
 8000eb0:	00c9      	lsls	r1, r1, #3
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	0409      	lsls	r1, r1, #16
 8000eb8:	4311      	orrs	r1, r2
 8000eba:	468b      	mov	fp, r1
 8000ebc:	49bf      	ldr	r1, [pc, #764]	@ (80011bc <__aeabi_ddiv+0x380>)
 8000ebe:	00f2      	lsls	r2, r6, #3
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	4651      	mov	r1, sl
 8000ec4:	4463      	add	r3, ip
 8000ec6:	1acb      	subs	r3, r1, r3
 8000ec8:	469a      	mov	sl, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9e02      	ldr	r6, [sp, #8]
 8000ece:	406e      	eors	r6, r5
 8000ed0:	2c0f      	cmp	r4, #15
 8000ed2:	d827      	bhi.n	8000f24 <__aeabi_ddiv+0xe8>
 8000ed4:	49ba      	ldr	r1, [pc, #744]	@ (80011c0 <__aeabi_ddiv+0x384>)
 8000ed6:	00a4      	lsls	r4, r4, #2
 8000ed8:	5909      	ldr	r1, [r1, r4]
 8000eda:	468f      	mov	pc, r1
 8000edc:	46cb      	mov	fp, r9
 8000ede:	4642      	mov	r2, r8
 8000ee0:	9e02      	ldr	r6, [sp, #8]
 8000ee2:	9b03      	ldr	r3, [sp, #12]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d016      	beq.n	8000f16 <__aeabi_ddiv+0xda>
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0xb2>
 8000eec:	e2a6      	b.n	800143c <__aeabi_ddiv+0x600>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_ddiv+0xb8>
 8000ef2:	e0df      	b.n	80010b4 <__aeabi_ddiv+0x278>
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2400      	movs	r4, #0
 8000efa:	4690      	mov	r8, r2
 8000efc:	051b      	lsls	r3, r3, #20
 8000efe:	4323      	orrs	r3, r4
 8000f00:	07f6      	lsls	r6, r6, #31
 8000f02:	4333      	orrs	r3, r6
 8000f04:	4640      	mov	r0, r8
 8000f06:	0019      	movs	r1, r3
 8000f08:	b007      	add	sp, #28
 8000f0a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f0c:	46bb      	mov	fp, r7
 8000f0e:	46b2      	mov	sl, r6
 8000f10:	46a9      	mov	r9, r5
 8000f12:	46a0      	mov	r8, r4
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f16:	2200      	movs	r2, #0
 8000f18:	2400      	movs	r4, #0
 8000f1a:	4690      	mov	r8, r2
 8000f1c:	4ba6      	ldr	r3, [pc, #664]	@ (80011b8 <__aeabi_ddiv+0x37c>)
 8000f1e:	e7ed      	b.n	8000efc <__aeabi_ddiv+0xc0>
 8000f20:	002e      	movs	r6, r5
 8000f22:	e7df      	b.n	8000ee4 <__aeabi_ddiv+0xa8>
 8000f24:	45cb      	cmp	fp, r9
 8000f26:	d200      	bcs.n	8000f2a <__aeabi_ddiv+0xee>
 8000f28:	e1d4      	b.n	80012d4 <__aeabi_ddiv+0x498>
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_ddiv+0xf2>
 8000f2c:	e1cf      	b.n	80012ce <__aeabi_ddiv+0x492>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	425b      	negs	r3, r3
 8000f32:	469c      	mov	ip, r3
 8000f34:	4644      	mov	r4, r8
 8000f36:	4648      	mov	r0, r9
 8000f38:	2700      	movs	r7, #0
 8000f3a:	44e2      	add	sl, ip
 8000f3c:	465b      	mov	r3, fp
 8000f3e:	0e15      	lsrs	r5, r2, #24
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	431d      	orrs	r5, r3
 8000f44:	0c19      	lsrs	r1, r3, #16
 8000f46:	042b      	lsls	r3, r5, #16
 8000f48:	0212      	lsls	r2, r2, #8
 8000f4a:	9500      	str	r5, [sp, #0]
 8000f4c:	0c1d      	lsrs	r5, r3, #16
 8000f4e:	4691      	mov	r9, r2
 8000f50:	9102      	str	r1, [sp, #8]
 8000f52:	9503      	str	r5, [sp, #12]
 8000f54:	f7ff f97a 	bl	800024c <__aeabi_uidivmod>
 8000f58:	0002      	movs	r2, r0
 8000f5a:	436a      	muls	r2, r5
 8000f5c:	040b      	lsls	r3, r1, #16
 8000f5e:	0c21      	lsrs	r1, r4, #16
 8000f60:	4680      	mov	r8, r0
 8000f62:	4319      	orrs	r1, r3
 8000f64:	428a      	cmp	r2, r1
 8000f66:	d909      	bls.n	8000f7c <__aeabi_ddiv+0x140>
 8000f68:	9d00      	ldr	r5, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	46ac      	mov	ip, r5
 8000f6e:	425b      	negs	r3, r3
 8000f70:	4461      	add	r1, ip
 8000f72:	469c      	mov	ip, r3
 8000f74:	44e0      	add	r8, ip
 8000f76:	428d      	cmp	r5, r1
 8000f78:	d800      	bhi.n	8000f7c <__aeabi_ddiv+0x140>
 8000f7a:	e1fb      	b.n	8001374 <__aeabi_ddiv+0x538>
 8000f7c:	1a88      	subs	r0, r1, r2
 8000f7e:	9902      	ldr	r1, [sp, #8]
 8000f80:	f7ff f964 	bl	800024c <__aeabi_uidivmod>
 8000f84:	9a03      	ldr	r2, [sp, #12]
 8000f86:	0424      	lsls	r4, r4, #16
 8000f88:	4342      	muls	r2, r0
 8000f8a:	0409      	lsls	r1, r1, #16
 8000f8c:	0c24      	lsrs	r4, r4, #16
 8000f8e:	0003      	movs	r3, r0
 8000f90:	430c      	orrs	r4, r1
 8000f92:	42a2      	cmp	r2, r4
 8000f94:	d906      	bls.n	8000fa4 <__aeabi_ddiv+0x168>
 8000f96:	9900      	ldr	r1, [sp, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	468c      	mov	ip, r1
 8000f9c:	4464      	add	r4, ip
 8000f9e:	42a1      	cmp	r1, r4
 8000fa0:	d800      	bhi.n	8000fa4 <__aeabi_ddiv+0x168>
 8000fa2:	e1e1      	b.n	8001368 <__aeabi_ddiv+0x52c>
 8000fa4:	1aa0      	subs	r0, r4, r2
 8000fa6:	4642      	mov	r2, r8
 8000fa8:	0412      	lsls	r2, r2, #16
 8000faa:	431a      	orrs	r2, r3
 8000fac:	4693      	mov	fp, r2
 8000fae:	464b      	mov	r3, r9
 8000fb0:	4659      	mov	r1, fp
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	001d      	movs	r5, r3
 8000fb6:	9304      	str	r3, [sp, #16]
 8000fb8:	040b      	lsls	r3, r1, #16
 8000fba:	4649      	mov	r1, r9
 8000fbc:	0409      	lsls	r1, r1, #16
 8000fbe:	0c09      	lsrs	r1, r1, #16
 8000fc0:	000c      	movs	r4, r1
 8000fc2:	0c1b      	lsrs	r3, r3, #16
 8000fc4:	435c      	muls	r4, r3
 8000fc6:	0c12      	lsrs	r2, r2, #16
 8000fc8:	436b      	muls	r3, r5
 8000fca:	4688      	mov	r8, r1
 8000fcc:	4351      	muls	r1, r2
 8000fce:	436a      	muls	r2, r5
 8000fd0:	0c25      	lsrs	r5, r4, #16
 8000fd2:	46ac      	mov	ip, r5
 8000fd4:	185b      	adds	r3, r3, r1
 8000fd6:	4463      	add	r3, ip
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d903      	bls.n	8000fe4 <__aeabi_ddiv+0x1a8>
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	0249      	lsls	r1, r1, #9
 8000fe0:	468c      	mov	ip, r1
 8000fe2:	4462      	add	r2, ip
 8000fe4:	0c19      	lsrs	r1, r3, #16
 8000fe6:	0424      	lsls	r4, r4, #16
 8000fe8:	041b      	lsls	r3, r3, #16
 8000fea:	0c24      	lsrs	r4, r4, #16
 8000fec:	188a      	adds	r2, r1, r2
 8000fee:	191c      	adds	r4, r3, r4
 8000ff0:	4290      	cmp	r0, r2
 8000ff2:	d302      	bcc.n	8000ffa <__aeabi_ddiv+0x1be>
 8000ff4:	d116      	bne.n	8001024 <__aeabi_ddiv+0x1e8>
 8000ff6:	42a7      	cmp	r7, r4
 8000ff8:	d214      	bcs.n	8001024 <__aeabi_ddiv+0x1e8>
 8000ffa:	465b      	mov	r3, fp
 8000ffc:	9d00      	ldr	r5, [sp, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	444f      	add	r7, r9
 8001002:	9305      	str	r3, [sp, #20]
 8001004:	454f      	cmp	r7, r9
 8001006:	419b      	sbcs	r3, r3
 8001008:	46ac      	mov	ip, r5
 800100a:	425b      	negs	r3, r3
 800100c:	4463      	add	r3, ip
 800100e:	18c0      	adds	r0, r0, r3
 8001010:	4285      	cmp	r5, r0
 8001012:	d300      	bcc.n	8001016 <__aeabi_ddiv+0x1da>
 8001014:	e1a1      	b.n	800135a <__aeabi_ddiv+0x51e>
 8001016:	4282      	cmp	r2, r0
 8001018:	d900      	bls.n	800101c <__aeabi_ddiv+0x1e0>
 800101a:	e1f6      	b.n	800140a <__aeabi_ddiv+0x5ce>
 800101c:	d100      	bne.n	8001020 <__aeabi_ddiv+0x1e4>
 800101e:	e1f1      	b.n	8001404 <__aeabi_ddiv+0x5c8>
 8001020:	9b05      	ldr	r3, [sp, #20]
 8001022:	469b      	mov	fp, r3
 8001024:	1b3c      	subs	r4, r7, r4
 8001026:	42a7      	cmp	r7, r4
 8001028:	41bf      	sbcs	r7, r7
 800102a:	9d00      	ldr	r5, [sp, #0]
 800102c:	1a80      	subs	r0, r0, r2
 800102e:	427f      	negs	r7, r7
 8001030:	1bc0      	subs	r0, r0, r7
 8001032:	4285      	cmp	r5, r0
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x1fc>
 8001036:	e1d0      	b.n	80013da <__aeabi_ddiv+0x59e>
 8001038:	9902      	ldr	r1, [sp, #8]
 800103a:	f7ff f907 	bl	800024c <__aeabi_uidivmod>
 800103e:	9a03      	ldr	r2, [sp, #12]
 8001040:	040b      	lsls	r3, r1, #16
 8001042:	4342      	muls	r2, r0
 8001044:	0c21      	lsrs	r1, r4, #16
 8001046:	0007      	movs	r7, r0
 8001048:	4319      	orrs	r1, r3
 800104a:	428a      	cmp	r2, r1
 800104c:	d900      	bls.n	8001050 <__aeabi_ddiv+0x214>
 800104e:	e178      	b.n	8001342 <__aeabi_ddiv+0x506>
 8001050:	1a88      	subs	r0, r1, r2
 8001052:	9902      	ldr	r1, [sp, #8]
 8001054:	f7ff f8fa 	bl	800024c <__aeabi_uidivmod>
 8001058:	9a03      	ldr	r2, [sp, #12]
 800105a:	0424      	lsls	r4, r4, #16
 800105c:	4342      	muls	r2, r0
 800105e:	0409      	lsls	r1, r1, #16
 8001060:	0c24      	lsrs	r4, r4, #16
 8001062:	0003      	movs	r3, r0
 8001064:	430c      	orrs	r4, r1
 8001066:	42a2      	cmp	r2, r4
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x230>
 800106a:	e15d      	b.n	8001328 <__aeabi_ddiv+0x4ec>
 800106c:	4641      	mov	r1, r8
 800106e:	1aa4      	subs	r4, r4, r2
 8001070:	043a      	lsls	r2, r7, #16
 8001072:	431a      	orrs	r2, r3
 8001074:	9d04      	ldr	r5, [sp, #16]
 8001076:	0413      	lsls	r3, r2, #16
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	4359      	muls	r1, r3
 800107c:	4647      	mov	r7, r8
 800107e:	436b      	muls	r3, r5
 8001080:	469c      	mov	ip, r3
 8001082:	0c10      	lsrs	r0, r2, #16
 8001084:	4347      	muls	r7, r0
 8001086:	0c0b      	lsrs	r3, r1, #16
 8001088:	44bc      	add	ip, r7
 800108a:	4463      	add	r3, ip
 800108c:	4368      	muls	r0, r5
 800108e:	429f      	cmp	r7, r3
 8001090:	d903      	bls.n	800109a <__aeabi_ddiv+0x25e>
 8001092:	2580      	movs	r5, #128	@ 0x80
 8001094:	026d      	lsls	r5, r5, #9
 8001096:	46ac      	mov	ip, r5
 8001098:	4460      	add	r0, ip
 800109a:	0c1f      	lsrs	r7, r3, #16
 800109c:	0409      	lsls	r1, r1, #16
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	0c09      	lsrs	r1, r1, #16
 80010a2:	183f      	adds	r7, r7, r0
 80010a4:	185b      	adds	r3, r3, r1
 80010a6:	42bc      	cmp	r4, r7
 80010a8:	d200      	bcs.n	80010ac <__aeabi_ddiv+0x270>
 80010aa:	e102      	b.n	80012b2 <__aeabi_ddiv+0x476>
 80010ac:	d100      	bne.n	80010b0 <__aeabi_ddiv+0x274>
 80010ae:	e0fd      	b.n	80012ac <__aeabi_ddiv+0x470>
 80010b0:	2301      	movs	r3, #1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	4b43      	ldr	r3, [pc, #268]	@ (80011c4 <__aeabi_ddiv+0x388>)
 80010b6:	4453      	add	r3, sl
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dc00      	bgt.n	80010be <__aeabi_ddiv+0x282>
 80010bc:	e0ae      	b.n	800121c <__aeabi_ddiv+0x3e0>
 80010be:	0751      	lsls	r1, r2, #29
 80010c0:	d000      	beq.n	80010c4 <__aeabi_ddiv+0x288>
 80010c2:	e198      	b.n	80013f6 <__aeabi_ddiv+0x5ba>
 80010c4:	4659      	mov	r1, fp
 80010c6:	01c9      	lsls	r1, r1, #7
 80010c8:	d506      	bpl.n	80010d8 <__aeabi_ddiv+0x29c>
 80010ca:	4659      	mov	r1, fp
 80010cc:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <__aeabi_ddiv+0x38c>)
 80010ce:	4019      	ands	r1, r3
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	468b      	mov	fp, r1
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4453      	add	r3, sl
 80010d8:	493c      	ldr	r1, [pc, #240]	@ (80011cc <__aeabi_ddiv+0x390>)
 80010da:	428b      	cmp	r3, r1
 80010dc:	dd00      	ble.n	80010e0 <__aeabi_ddiv+0x2a4>
 80010de:	e71a      	b.n	8000f16 <__aeabi_ddiv+0xda>
 80010e0:	4659      	mov	r1, fp
 80010e2:	08d2      	lsrs	r2, r2, #3
 80010e4:	0749      	lsls	r1, r1, #29
 80010e6:	4311      	orrs	r1, r2
 80010e8:	465a      	mov	r2, fp
 80010ea:	055b      	lsls	r3, r3, #21
 80010ec:	0254      	lsls	r4, r2, #9
 80010ee:	4688      	mov	r8, r1
 80010f0:	0b24      	lsrs	r4, r4, #12
 80010f2:	0d5b      	lsrs	r3, r3, #21
 80010f4:	e702      	b.n	8000efc <__aeabi_ddiv+0xc0>
 80010f6:	465a      	mov	r2, fp
 80010f8:	9b00      	ldr	r3, [sp, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	d100      	bne.n	8001100 <__aeabi_ddiv+0x2c4>
 80010fe:	e07e      	b.n	80011fe <__aeabi_ddiv+0x3c2>
 8001100:	465b      	mov	r3, fp
 8001102:	2b00      	cmp	r3, #0
 8001104:	d100      	bne.n	8001108 <__aeabi_ddiv+0x2cc>
 8001106:	e100      	b.n	800130a <__aeabi_ddiv+0x4ce>
 8001108:	4658      	mov	r0, fp
 800110a:	f001 fabb 	bl	8002684 <__clzsi2>
 800110e:	0002      	movs	r2, r0
 8001110:	0003      	movs	r3, r0
 8001112:	3a0b      	subs	r2, #11
 8001114:	271d      	movs	r7, #29
 8001116:	9e00      	ldr	r6, [sp, #0]
 8001118:	1aba      	subs	r2, r7, r2
 800111a:	0019      	movs	r1, r3
 800111c:	4658      	mov	r0, fp
 800111e:	40d6      	lsrs	r6, r2
 8001120:	3908      	subs	r1, #8
 8001122:	4088      	lsls	r0, r1
 8001124:	0032      	movs	r2, r6
 8001126:	4302      	orrs	r2, r0
 8001128:	4693      	mov	fp, r2
 800112a:	9a00      	ldr	r2, [sp, #0]
 800112c:	408a      	lsls	r2, r1
 800112e:	4928      	ldr	r1, [pc, #160]	@ (80011d0 <__aeabi_ddiv+0x394>)
 8001130:	4453      	add	r3, sl
 8001132:	468a      	mov	sl, r1
 8001134:	449a      	add	sl, r3
 8001136:	2300      	movs	r3, #0
 8001138:	e6c8      	b.n	8000ecc <__aeabi_ddiv+0x90>
 800113a:	465b      	mov	r3, fp
 800113c:	4303      	orrs	r3, r0
 800113e:	4699      	mov	r9, r3
 8001140:	d056      	beq.n	80011f0 <__aeabi_ddiv+0x3b4>
 8001142:	465b      	mov	r3, fp
 8001144:	2b00      	cmp	r3, #0
 8001146:	d100      	bne.n	800114a <__aeabi_ddiv+0x30e>
 8001148:	e0cd      	b.n	80012e6 <__aeabi_ddiv+0x4aa>
 800114a:	4658      	mov	r0, fp
 800114c:	f001 fa9a 	bl	8002684 <__clzsi2>
 8001150:	230b      	movs	r3, #11
 8001152:	425b      	negs	r3, r3
 8001154:	469c      	mov	ip, r3
 8001156:	0002      	movs	r2, r0
 8001158:	4484      	add	ip, r0
 800115a:	4666      	mov	r6, ip
 800115c:	231d      	movs	r3, #29
 800115e:	1b9b      	subs	r3, r3, r6
 8001160:	0026      	movs	r6, r4
 8001162:	0011      	movs	r1, r2
 8001164:	4658      	mov	r0, fp
 8001166:	40de      	lsrs	r6, r3
 8001168:	3908      	subs	r1, #8
 800116a:	4088      	lsls	r0, r1
 800116c:	0033      	movs	r3, r6
 800116e:	4303      	orrs	r3, r0
 8001170:	4699      	mov	r9, r3
 8001172:	0023      	movs	r3, r4
 8001174:	408b      	lsls	r3, r1
 8001176:	4698      	mov	r8, r3
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <__aeabi_ddiv+0x398>)
 800117a:	2400      	movs	r4, #0
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469a      	mov	sl, r3
 8001180:	2300      	movs	r3, #0
 8001182:	9303      	str	r3, [sp, #12]
 8001184:	e682      	b.n	8000e8c <__aeabi_ddiv+0x50>
 8001186:	465a      	mov	r2, fp
 8001188:	4302      	orrs	r2, r0
 800118a:	4691      	mov	r9, r2
 800118c:	d12a      	bne.n	80011e4 <__aeabi_ddiv+0x3a8>
 800118e:	2200      	movs	r2, #0
 8001190:	469a      	mov	sl, r3
 8001192:	2302      	movs	r3, #2
 8001194:	4690      	mov	r8, r2
 8001196:	2408      	movs	r4, #8
 8001198:	9303      	str	r3, [sp, #12]
 800119a:	e677      	b.n	8000e8c <__aeabi_ddiv+0x50>
 800119c:	465a      	mov	r2, fp
 800119e:	9b00      	ldr	r3, [sp, #0]
 80011a0:	431a      	orrs	r2, r3
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <__aeabi_ddiv+0x39c>)
 80011a4:	469c      	mov	ip, r3
 80011a6:	44e2      	add	sl, ip
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d117      	bne.n	80011dc <__aeabi_ddiv+0x3a0>
 80011ac:	2302      	movs	r3, #2
 80011ae:	431c      	orrs	r4, r3
 80011b0:	2300      	movs	r3, #0
 80011b2:	469b      	mov	fp, r3
 80011b4:	3302      	adds	r3, #2
 80011b6:	e689      	b.n	8000ecc <__aeabi_ddiv+0x90>
 80011b8:	000007ff 	.word	0x000007ff
 80011bc:	fffffc01 	.word	0xfffffc01
 80011c0:	0800c610 	.word	0x0800c610
 80011c4:	000003ff 	.word	0x000003ff
 80011c8:	feffffff 	.word	0xfeffffff
 80011cc:	000007fe 	.word	0x000007fe
 80011d0:	000003f3 	.word	0x000003f3
 80011d4:	fffffc0d 	.word	0xfffffc0d
 80011d8:	fffff801 	.word	0xfffff801
 80011dc:	2303      	movs	r3, #3
 80011de:	0032      	movs	r2, r6
 80011e0:	431c      	orrs	r4, r3
 80011e2:	e673      	b.n	8000ecc <__aeabi_ddiv+0x90>
 80011e4:	469a      	mov	sl, r3
 80011e6:	2303      	movs	r3, #3
 80011e8:	46d9      	mov	r9, fp
 80011ea:	240c      	movs	r4, #12
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	e64d      	b.n	8000e8c <__aeabi_ddiv+0x50>
 80011f0:	2300      	movs	r3, #0
 80011f2:	4698      	mov	r8, r3
 80011f4:	469a      	mov	sl, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	2404      	movs	r4, #4
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	e646      	b.n	8000e8c <__aeabi_ddiv+0x50>
 80011fe:	2301      	movs	r3, #1
 8001200:	431c      	orrs	r4, r3
 8001202:	2300      	movs	r3, #0
 8001204:	469b      	mov	fp, r3
 8001206:	3301      	adds	r3, #1
 8001208:	e660      	b.n	8000ecc <__aeabi_ddiv+0x90>
 800120a:	2300      	movs	r3, #0
 800120c:	2480      	movs	r4, #128	@ 0x80
 800120e:	4698      	mov	r8, r3
 8001210:	2600      	movs	r6, #0
 8001212:	4b92      	ldr	r3, [pc, #584]	@ (800145c <__aeabi_ddiv+0x620>)
 8001214:	0324      	lsls	r4, r4, #12
 8001216:	e671      	b.n	8000efc <__aeabi_ddiv+0xc0>
 8001218:	2201      	movs	r2, #1
 800121a:	4252      	negs	r2, r2
 800121c:	2101      	movs	r1, #1
 800121e:	1ac9      	subs	r1, r1, r3
 8001220:	2938      	cmp	r1, #56	@ 0x38
 8001222:	dd00      	ble.n	8001226 <__aeabi_ddiv+0x3ea>
 8001224:	e666      	b.n	8000ef4 <__aeabi_ddiv+0xb8>
 8001226:	291f      	cmp	r1, #31
 8001228:	dc00      	bgt.n	800122c <__aeabi_ddiv+0x3f0>
 800122a:	e0ab      	b.n	8001384 <__aeabi_ddiv+0x548>
 800122c:	201f      	movs	r0, #31
 800122e:	4240      	negs	r0, r0
 8001230:	1ac3      	subs	r3, r0, r3
 8001232:	4658      	mov	r0, fp
 8001234:	40d8      	lsrs	r0, r3
 8001236:	0003      	movs	r3, r0
 8001238:	2920      	cmp	r1, #32
 800123a:	d004      	beq.n	8001246 <__aeabi_ddiv+0x40a>
 800123c:	4658      	mov	r0, fp
 800123e:	4988      	ldr	r1, [pc, #544]	@ (8001460 <__aeabi_ddiv+0x624>)
 8001240:	4451      	add	r1, sl
 8001242:	4088      	lsls	r0, r1
 8001244:	4302      	orrs	r2, r0
 8001246:	1e51      	subs	r1, r2, #1
 8001248:	418a      	sbcs	r2, r1
 800124a:	431a      	orrs	r2, r3
 800124c:	2307      	movs	r3, #7
 800124e:	0019      	movs	r1, r3
 8001250:	2400      	movs	r4, #0
 8001252:	4011      	ands	r1, r2
 8001254:	4213      	tst	r3, r2
 8001256:	d00c      	beq.n	8001272 <__aeabi_ddiv+0x436>
 8001258:	230f      	movs	r3, #15
 800125a:	4013      	ands	r3, r2
 800125c:	2b04      	cmp	r3, #4
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x426>
 8001260:	e0f9      	b.n	8001456 <__aeabi_ddiv+0x61a>
 8001262:	1d11      	adds	r1, r2, #4
 8001264:	4291      	cmp	r1, r2
 8001266:	419b      	sbcs	r3, r3
 8001268:	000a      	movs	r2, r1
 800126a:	425b      	negs	r3, r3
 800126c:	0759      	lsls	r1, r3, #29
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	0b1c      	lsrs	r4, r3, #12
 8001272:	08d2      	lsrs	r2, r2, #3
 8001274:	430a      	orrs	r2, r1
 8001276:	4690      	mov	r8, r2
 8001278:	2300      	movs	r3, #0
 800127a:	e63f      	b.n	8000efc <__aeabi_ddiv+0xc0>
 800127c:	2480      	movs	r4, #128	@ 0x80
 800127e:	464b      	mov	r3, r9
 8001280:	0324      	lsls	r4, r4, #12
 8001282:	4223      	tst	r3, r4
 8001284:	d009      	beq.n	800129a <__aeabi_ddiv+0x45e>
 8001286:	465b      	mov	r3, fp
 8001288:	4223      	tst	r3, r4
 800128a:	d106      	bne.n	800129a <__aeabi_ddiv+0x45e>
 800128c:	431c      	orrs	r4, r3
 800128e:	0324      	lsls	r4, r4, #12
 8001290:	002e      	movs	r6, r5
 8001292:	4690      	mov	r8, r2
 8001294:	4b71      	ldr	r3, [pc, #452]	@ (800145c <__aeabi_ddiv+0x620>)
 8001296:	0b24      	lsrs	r4, r4, #12
 8001298:	e630      	b.n	8000efc <__aeabi_ddiv+0xc0>
 800129a:	2480      	movs	r4, #128	@ 0x80
 800129c:	464b      	mov	r3, r9
 800129e:	0324      	lsls	r4, r4, #12
 80012a0:	431c      	orrs	r4, r3
 80012a2:	0324      	lsls	r4, r4, #12
 80012a4:	9e02      	ldr	r6, [sp, #8]
 80012a6:	4b6d      	ldr	r3, [pc, #436]	@ (800145c <__aeabi_ddiv+0x620>)
 80012a8:	0b24      	lsrs	r4, r4, #12
 80012aa:	e627      	b.n	8000efc <__aeabi_ddiv+0xc0>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0x476>
 80012b0:	e700      	b.n	80010b4 <__aeabi_ddiv+0x278>
 80012b2:	9800      	ldr	r0, [sp, #0]
 80012b4:	1e51      	subs	r1, r2, #1
 80012b6:	4684      	mov	ip, r0
 80012b8:	4464      	add	r4, ip
 80012ba:	4284      	cmp	r4, r0
 80012bc:	d200      	bcs.n	80012c0 <__aeabi_ddiv+0x484>
 80012be:	e084      	b.n	80013ca <__aeabi_ddiv+0x58e>
 80012c0:	42bc      	cmp	r4, r7
 80012c2:	d200      	bcs.n	80012c6 <__aeabi_ddiv+0x48a>
 80012c4:	e0ae      	b.n	8001424 <__aeabi_ddiv+0x5e8>
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x48e>
 80012c8:	e0c1      	b.n	800144e <__aeabi_ddiv+0x612>
 80012ca:	000a      	movs	r2, r1
 80012cc:	e6f0      	b.n	80010b0 <__aeabi_ddiv+0x274>
 80012ce:	4542      	cmp	r2, r8
 80012d0:	d900      	bls.n	80012d4 <__aeabi_ddiv+0x498>
 80012d2:	e62c      	b.n	8000f2e <__aeabi_ddiv+0xf2>
 80012d4:	464b      	mov	r3, r9
 80012d6:	07dc      	lsls	r4, r3, #31
 80012d8:	0858      	lsrs	r0, r3, #1
 80012da:	4643      	mov	r3, r8
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	431c      	orrs	r4, r3
 80012e0:	4643      	mov	r3, r8
 80012e2:	07df      	lsls	r7, r3, #31
 80012e4:	e62a      	b.n	8000f3c <__aeabi_ddiv+0x100>
 80012e6:	f001 f9cd 	bl	8002684 <__clzsi2>
 80012ea:	2315      	movs	r3, #21
 80012ec:	469c      	mov	ip, r3
 80012ee:	4484      	add	ip, r0
 80012f0:	0002      	movs	r2, r0
 80012f2:	4663      	mov	r3, ip
 80012f4:	3220      	adds	r2, #32
 80012f6:	2b1c      	cmp	r3, #28
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_ddiv+0x4c0>
 80012fa:	e72e      	b.n	800115a <__aeabi_ddiv+0x31e>
 80012fc:	0023      	movs	r3, r4
 80012fe:	3808      	subs	r0, #8
 8001300:	4083      	lsls	r3, r0
 8001302:	4699      	mov	r9, r3
 8001304:	2300      	movs	r3, #0
 8001306:	4698      	mov	r8, r3
 8001308:	e736      	b.n	8001178 <__aeabi_ddiv+0x33c>
 800130a:	f001 f9bb 	bl	8002684 <__clzsi2>
 800130e:	0002      	movs	r2, r0
 8001310:	0003      	movs	r3, r0
 8001312:	3215      	adds	r2, #21
 8001314:	3320      	adds	r3, #32
 8001316:	2a1c      	cmp	r2, #28
 8001318:	dc00      	bgt.n	800131c <__aeabi_ddiv+0x4e0>
 800131a:	e6fb      	b.n	8001114 <__aeabi_ddiv+0x2d8>
 800131c:	9900      	ldr	r1, [sp, #0]
 800131e:	3808      	subs	r0, #8
 8001320:	4081      	lsls	r1, r0
 8001322:	2200      	movs	r2, #0
 8001324:	468b      	mov	fp, r1
 8001326:	e702      	b.n	800112e <__aeabi_ddiv+0x2f2>
 8001328:	9900      	ldr	r1, [sp, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	468c      	mov	ip, r1
 800132e:	4464      	add	r4, ip
 8001330:	42a1      	cmp	r1, r4
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4fa>
 8001334:	e69a      	b.n	800106c <__aeabi_ddiv+0x230>
 8001336:	42a2      	cmp	r2, r4
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x500>
 800133a:	e697      	b.n	800106c <__aeabi_ddiv+0x230>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	4464      	add	r4, ip
 8001340:	e694      	b.n	800106c <__aeabi_ddiv+0x230>
 8001342:	46ac      	mov	ip, r5
 8001344:	4461      	add	r1, ip
 8001346:	3f01      	subs	r7, #1
 8001348:	428d      	cmp	r5, r1
 800134a:	d900      	bls.n	800134e <__aeabi_ddiv+0x512>
 800134c:	e680      	b.n	8001050 <__aeabi_ddiv+0x214>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x518>
 8001352:	e67d      	b.n	8001050 <__aeabi_ddiv+0x214>
 8001354:	1e87      	subs	r7, r0, #2
 8001356:	4461      	add	r1, ip
 8001358:	e67a      	b.n	8001050 <__aeabi_ddiv+0x214>
 800135a:	4285      	cmp	r5, r0
 800135c:	d000      	beq.n	8001360 <__aeabi_ddiv+0x524>
 800135e:	e65f      	b.n	8001020 <__aeabi_ddiv+0x1e4>
 8001360:	45b9      	cmp	r9, r7
 8001362:	d900      	bls.n	8001366 <__aeabi_ddiv+0x52a>
 8001364:	e65c      	b.n	8001020 <__aeabi_ddiv+0x1e4>
 8001366:	e656      	b.n	8001016 <__aeabi_ddiv+0x1da>
 8001368:	42a2      	cmp	r2, r4
 800136a:	d800      	bhi.n	800136e <__aeabi_ddiv+0x532>
 800136c:	e61a      	b.n	8000fa4 <__aeabi_ddiv+0x168>
 800136e:	1e83      	subs	r3, r0, #2
 8001370:	4464      	add	r4, ip
 8001372:	e617      	b.n	8000fa4 <__aeabi_ddiv+0x168>
 8001374:	428a      	cmp	r2, r1
 8001376:	d800      	bhi.n	800137a <__aeabi_ddiv+0x53e>
 8001378:	e600      	b.n	8000f7c <__aeabi_ddiv+0x140>
 800137a:	46ac      	mov	ip, r5
 800137c:	1e83      	subs	r3, r0, #2
 800137e:	4698      	mov	r8, r3
 8001380:	4461      	add	r1, ip
 8001382:	e5fb      	b.n	8000f7c <__aeabi_ddiv+0x140>
 8001384:	4837      	ldr	r0, [pc, #220]	@ (8001464 <__aeabi_ddiv+0x628>)
 8001386:	0014      	movs	r4, r2
 8001388:	4450      	add	r0, sl
 800138a:	4082      	lsls	r2, r0
 800138c:	465b      	mov	r3, fp
 800138e:	0017      	movs	r7, r2
 8001390:	4083      	lsls	r3, r0
 8001392:	40cc      	lsrs	r4, r1
 8001394:	1e7a      	subs	r2, r7, #1
 8001396:	4197      	sbcs	r7, r2
 8001398:	4323      	orrs	r3, r4
 800139a:	433b      	orrs	r3, r7
 800139c:	001a      	movs	r2, r3
 800139e:	465b      	mov	r3, fp
 80013a0:	40cb      	lsrs	r3, r1
 80013a2:	0751      	lsls	r1, r2, #29
 80013a4:	d009      	beq.n	80013ba <__aeabi_ddiv+0x57e>
 80013a6:	210f      	movs	r1, #15
 80013a8:	4011      	ands	r1, r2
 80013aa:	2904      	cmp	r1, #4
 80013ac:	d005      	beq.n	80013ba <__aeabi_ddiv+0x57e>
 80013ae:	1d11      	adds	r1, r2, #4
 80013b0:	4291      	cmp	r1, r2
 80013b2:	4192      	sbcs	r2, r2
 80013b4:	4252      	negs	r2, r2
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	000a      	movs	r2, r1
 80013ba:	0219      	lsls	r1, r3, #8
 80013bc:	d400      	bmi.n	80013c0 <__aeabi_ddiv+0x584>
 80013be:	e755      	b.n	800126c <__aeabi_ddiv+0x430>
 80013c0:	2200      	movs	r2, #0
 80013c2:	2301      	movs	r3, #1
 80013c4:	2400      	movs	r4, #0
 80013c6:	4690      	mov	r8, r2
 80013c8:	e598      	b.n	8000efc <__aeabi_ddiv+0xc0>
 80013ca:	000a      	movs	r2, r1
 80013cc:	42bc      	cmp	r4, r7
 80013ce:	d000      	beq.n	80013d2 <__aeabi_ddiv+0x596>
 80013d0:	e66e      	b.n	80010b0 <__aeabi_ddiv+0x274>
 80013d2:	454b      	cmp	r3, r9
 80013d4:	d000      	beq.n	80013d8 <__aeabi_ddiv+0x59c>
 80013d6:	e66b      	b.n	80010b0 <__aeabi_ddiv+0x274>
 80013d8:	e66c      	b.n	80010b4 <__aeabi_ddiv+0x278>
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <__aeabi_ddiv+0x62c>)
 80013dc:	4a23      	ldr	r2, [pc, #140]	@ (800146c <__aeabi_ddiv+0x630>)
 80013de:	4453      	add	r3, sl
 80013e0:	4592      	cmp	sl, r2
 80013e2:	da00      	bge.n	80013e6 <__aeabi_ddiv+0x5aa>
 80013e4:	e718      	b.n	8001218 <__aeabi_ddiv+0x3dc>
 80013e6:	2101      	movs	r1, #1
 80013e8:	4249      	negs	r1, r1
 80013ea:	1d0a      	adds	r2, r1, #4
 80013ec:	428a      	cmp	r2, r1
 80013ee:	4189      	sbcs	r1, r1
 80013f0:	4249      	negs	r1, r1
 80013f2:	448b      	add	fp, r1
 80013f4:	e666      	b.n	80010c4 <__aeabi_ddiv+0x288>
 80013f6:	210f      	movs	r1, #15
 80013f8:	4011      	ands	r1, r2
 80013fa:	2904      	cmp	r1, #4
 80013fc:	d100      	bne.n	8001400 <__aeabi_ddiv+0x5c4>
 80013fe:	e661      	b.n	80010c4 <__aeabi_ddiv+0x288>
 8001400:	0011      	movs	r1, r2
 8001402:	e7f2      	b.n	80013ea <__aeabi_ddiv+0x5ae>
 8001404:	42bc      	cmp	r4, r7
 8001406:	d800      	bhi.n	800140a <__aeabi_ddiv+0x5ce>
 8001408:	e60a      	b.n	8001020 <__aeabi_ddiv+0x1e4>
 800140a:	2302      	movs	r3, #2
 800140c:	425b      	negs	r3, r3
 800140e:	469c      	mov	ip, r3
 8001410:	9900      	ldr	r1, [sp, #0]
 8001412:	444f      	add	r7, r9
 8001414:	454f      	cmp	r7, r9
 8001416:	419b      	sbcs	r3, r3
 8001418:	44e3      	add	fp, ip
 800141a:	468c      	mov	ip, r1
 800141c:	425b      	negs	r3, r3
 800141e:	4463      	add	r3, ip
 8001420:	18c0      	adds	r0, r0, r3
 8001422:	e5ff      	b.n	8001024 <__aeabi_ddiv+0x1e8>
 8001424:	4649      	mov	r1, r9
 8001426:	9d00      	ldr	r5, [sp, #0]
 8001428:	0048      	lsls	r0, r1, #1
 800142a:	4548      	cmp	r0, r9
 800142c:	4189      	sbcs	r1, r1
 800142e:	46ac      	mov	ip, r5
 8001430:	4249      	negs	r1, r1
 8001432:	4461      	add	r1, ip
 8001434:	4681      	mov	r9, r0
 8001436:	3a02      	subs	r2, #2
 8001438:	1864      	adds	r4, r4, r1
 800143a:	e7c7      	b.n	80013cc <__aeabi_ddiv+0x590>
 800143c:	2480      	movs	r4, #128	@ 0x80
 800143e:	465b      	mov	r3, fp
 8001440:	0324      	lsls	r4, r4, #12
 8001442:	431c      	orrs	r4, r3
 8001444:	0324      	lsls	r4, r4, #12
 8001446:	4690      	mov	r8, r2
 8001448:	4b04      	ldr	r3, [pc, #16]	@ (800145c <__aeabi_ddiv+0x620>)
 800144a:	0b24      	lsrs	r4, r4, #12
 800144c:	e556      	b.n	8000efc <__aeabi_ddiv+0xc0>
 800144e:	4599      	cmp	r9, r3
 8001450:	d3e8      	bcc.n	8001424 <__aeabi_ddiv+0x5e8>
 8001452:	000a      	movs	r2, r1
 8001454:	e7bd      	b.n	80013d2 <__aeabi_ddiv+0x596>
 8001456:	2300      	movs	r3, #0
 8001458:	e708      	b.n	800126c <__aeabi_ddiv+0x430>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	000007ff 	.word	0x000007ff
 8001460:	0000043e 	.word	0x0000043e
 8001464:	0000041e 	.word	0x0000041e
 8001468:	000003ff 	.word	0x000003ff
 800146c:	fffffc02 	.word	0xfffffc02

08001470 <__eqdf2>:
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	4657      	mov	r7, sl
 8001474:	46de      	mov	lr, fp
 8001476:	464e      	mov	r6, r9
 8001478:	4645      	mov	r5, r8
 800147a:	b5e0      	push	{r5, r6, r7, lr}
 800147c:	000d      	movs	r5, r1
 800147e:	0004      	movs	r4, r0
 8001480:	0fe8      	lsrs	r0, r5, #31
 8001482:	4683      	mov	fp, r0
 8001484:	0309      	lsls	r1, r1, #12
 8001486:	0fd8      	lsrs	r0, r3, #31
 8001488:	0b09      	lsrs	r1, r1, #12
 800148a:	4682      	mov	sl, r0
 800148c:	4819      	ldr	r0, [pc, #100]	@ (80014f4 <__eqdf2+0x84>)
 800148e:	468c      	mov	ip, r1
 8001490:	031f      	lsls	r7, r3, #12
 8001492:	0069      	lsls	r1, r5, #1
 8001494:	005e      	lsls	r6, r3, #1
 8001496:	0d49      	lsrs	r1, r1, #21
 8001498:	0b3f      	lsrs	r7, r7, #12
 800149a:	0d76      	lsrs	r6, r6, #21
 800149c:	4281      	cmp	r1, r0
 800149e:	d018      	beq.n	80014d2 <__eqdf2+0x62>
 80014a0:	4286      	cmp	r6, r0
 80014a2:	d00f      	beq.n	80014c4 <__eqdf2+0x54>
 80014a4:	2001      	movs	r0, #1
 80014a6:	42b1      	cmp	r1, r6
 80014a8:	d10d      	bne.n	80014c6 <__eqdf2+0x56>
 80014aa:	45bc      	cmp	ip, r7
 80014ac:	d10b      	bne.n	80014c6 <__eqdf2+0x56>
 80014ae:	4294      	cmp	r4, r2
 80014b0:	d109      	bne.n	80014c6 <__eqdf2+0x56>
 80014b2:	45d3      	cmp	fp, sl
 80014b4:	d01c      	beq.n	80014f0 <__eqdf2+0x80>
 80014b6:	2900      	cmp	r1, #0
 80014b8:	d105      	bne.n	80014c6 <__eqdf2+0x56>
 80014ba:	4660      	mov	r0, ip
 80014bc:	4320      	orrs	r0, r4
 80014be:	1e43      	subs	r3, r0, #1
 80014c0:	4198      	sbcs	r0, r3
 80014c2:	e000      	b.n	80014c6 <__eqdf2+0x56>
 80014c4:	2001      	movs	r0, #1
 80014c6:	bcf0      	pop	{r4, r5, r6, r7}
 80014c8:	46bb      	mov	fp, r7
 80014ca:	46b2      	mov	sl, r6
 80014cc:	46a9      	mov	r9, r5
 80014ce:	46a0      	mov	r8, r4
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	2001      	movs	r0, #1
 80014d4:	428e      	cmp	r6, r1
 80014d6:	d1f6      	bne.n	80014c6 <__eqdf2+0x56>
 80014d8:	4661      	mov	r1, ip
 80014da:	4339      	orrs	r1, r7
 80014dc:	000f      	movs	r7, r1
 80014de:	4317      	orrs	r7, r2
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d1f0      	bne.n	80014c6 <__eqdf2+0x56>
 80014e4:	465b      	mov	r3, fp
 80014e6:	4652      	mov	r2, sl
 80014e8:	1a98      	subs	r0, r3, r2
 80014ea:	1e43      	subs	r3, r0, #1
 80014ec:	4198      	sbcs	r0, r3
 80014ee:	e7ea      	b.n	80014c6 <__eqdf2+0x56>
 80014f0:	2000      	movs	r0, #0
 80014f2:	e7e8      	b.n	80014c6 <__eqdf2+0x56>
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__gedf2>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4657      	mov	r7, sl
 80014fc:	464e      	mov	r6, r9
 80014fe:	4645      	mov	r5, r8
 8001500:	46de      	mov	lr, fp
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	000d      	movs	r5, r1
 8001506:	030f      	lsls	r7, r1, #12
 8001508:	0b39      	lsrs	r1, r7, #12
 800150a:	b083      	sub	sp, #12
 800150c:	0004      	movs	r4, r0
 800150e:	4680      	mov	r8, r0
 8001510:	9101      	str	r1, [sp, #4]
 8001512:	0058      	lsls	r0, r3, #1
 8001514:	0fe9      	lsrs	r1, r5, #31
 8001516:	4f31      	ldr	r7, [pc, #196]	@ (80015dc <__gedf2+0xe4>)
 8001518:	0d40      	lsrs	r0, r0, #21
 800151a:	468c      	mov	ip, r1
 800151c:	006e      	lsls	r6, r5, #1
 800151e:	0319      	lsls	r1, r3, #12
 8001520:	4682      	mov	sl, r0
 8001522:	4691      	mov	r9, r2
 8001524:	0d76      	lsrs	r6, r6, #21
 8001526:	0b09      	lsrs	r1, r1, #12
 8001528:	0fd8      	lsrs	r0, r3, #31
 800152a:	42be      	cmp	r6, r7
 800152c:	d01f      	beq.n	800156e <__gedf2+0x76>
 800152e:	45ba      	cmp	sl, r7
 8001530:	d00f      	beq.n	8001552 <__gedf2+0x5a>
 8001532:	2e00      	cmp	r6, #0
 8001534:	d12f      	bne.n	8001596 <__gedf2+0x9e>
 8001536:	4655      	mov	r5, sl
 8001538:	9e01      	ldr	r6, [sp, #4]
 800153a:	4334      	orrs	r4, r6
 800153c:	2d00      	cmp	r5, #0
 800153e:	d127      	bne.n	8001590 <__gedf2+0x98>
 8001540:	430a      	orrs	r2, r1
 8001542:	d03a      	beq.n	80015ba <__gedf2+0xc2>
 8001544:	2c00      	cmp	r4, #0
 8001546:	d145      	bne.n	80015d4 <__gedf2+0xdc>
 8001548:	2800      	cmp	r0, #0
 800154a:	d11a      	bne.n	8001582 <__gedf2+0x8a>
 800154c:	2001      	movs	r0, #1
 800154e:	4240      	negs	r0, r0
 8001550:	e017      	b.n	8001582 <__gedf2+0x8a>
 8001552:	4311      	orrs	r1, r2
 8001554:	d13b      	bne.n	80015ce <__gedf2+0xd6>
 8001556:	2e00      	cmp	r6, #0
 8001558:	d102      	bne.n	8001560 <__gedf2+0x68>
 800155a:	9f01      	ldr	r7, [sp, #4]
 800155c:	4327      	orrs	r7, r4
 800155e:	d0f3      	beq.n	8001548 <__gedf2+0x50>
 8001560:	4584      	cmp	ip, r0
 8001562:	d109      	bne.n	8001578 <__gedf2+0x80>
 8001564:	4663      	mov	r3, ip
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <__gedf2+0x54>
 800156a:	4660      	mov	r0, ip
 800156c:	e009      	b.n	8001582 <__gedf2+0x8a>
 800156e:	9f01      	ldr	r7, [sp, #4]
 8001570:	4327      	orrs	r7, r4
 8001572:	d12c      	bne.n	80015ce <__gedf2+0xd6>
 8001574:	45b2      	cmp	sl, r6
 8001576:	d024      	beq.n	80015c2 <__gedf2+0xca>
 8001578:	4663      	mov	r3, ip
 800157a:	2002      	movs	r0, #2
 800157c:	3b01      	subs	r3, #1
 800157e:	4018      	ands	r0, r3
 8001580:	3801      	subs	r0, #1
 8001582:	b003      	add	sp, #12
 8001584:	bcf0      	pop	{r4, r5, r6, r7}
 8001586:	46bb      	mov	fp, r7
 8001588:	46b2      	mov	sl, r6
 800158a:	46a9      	mov	r9, r5
 800158c:	46a0      	mov	r8, r4
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001590:	2c00      	cmp	r4, #0
 8001592:	d0d9      	beq.n	8001548 <__gedf2+0x50>
 8001594:	e7e4      	b.n	8001560 <__gedf2+0x68>
 8001596:	4654      	mov	r4, sl
 8001598:	2c00      	cmp	r4, #0
 800159a:	d0ed      	beq.n	8001578 <__gedf2+0x80>
 800159c:	4584      	cmp	ip, r0
 800159e:	d1eb      	bne.n	8001578 <__gedf2+0x80>
 80015a0:	4556      	cmp	r6, sl
 80015a2:	dce9      	bgt.n	8001578 <__gedf2+0x80>
 80015a4:	dbde      	blt.n	8001564 <__gedf2+0x6c>
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	428b      	cmp	r3, r1
 80015aa:	d8e5      	bhi.n	8001578 <__gedf2+0x80>
 80015ac:	d1da      	bne.n	8001564 <__gedf2+0x6c>
 80015ae:	45c8      	cmp	r8, r9
 80015b0:	d8e2      	bhi.n	8001578 <__gedf2+0x80>
 80015b2:	2000      	movs	r0, #0
 80015b4:	45c8      	cmp	r8, r9
 80015b6:	d2e4      	bcs.n	8001582 <__gedf2+0x8a>
 80015b8:	e7d4      	b.n	8001564 <__gedf2+0x6c>
 80015ba:	2000      	movs	r0, #0
 80015bc:	2c00      	cmp	r4, #0
 80015be:	d0e0      	beq.n	8001582 <__gedf2+0x8a>
 80015c0:	e7da      	b.n	8001578 <__gedf2+0x80>
 80015c2:	4311      	orrs	r1, r2
 80015c4:	d103      	bne.n	80015ce <__gedf2+0xd6>
 80015c6:	4584      	cmp	ip, r0
 80015c8:	d1d6      	bne.n	8001578 <__gedf2+0x80>
 80015ca:	2000      	movs	r0, #0
 80015cc:	e7d9      	b.n	8001582 <__gedf2+0x8a>
 80015ce:	2002      	movs	r0, #2
 80015d0:	4240      	negs	r0, r0
 80015d2:	e7d6      	b.n	8001582 <__gedf2+0x8a>
 80015d4:	4584      	cmp	ip, r0
 80015d6:	d0e6      	beq.n	80015a6 <__gedf2+0xae>
 80015d8:	e7ce      	b.n	8001578 <__gedf2+0x80>
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	000007ff 	.word	0x000007ff

080015e0 <__ledf2>:
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	4657      	mov	r7, sl
 80015e4:	464e      	mov	r6, r9
 80015e6:	4645      	mov	r5, r8
 80015e8:	46de      	mov	lr, fp
 80015ea:	b5e0      	push	{r5, r6, r7, lr}
 80015ec:	000d      	movs	r5, r1
 80015ee:	030f      	lsls	r7, r1, #12
 80015f0:	0004      	movs	r4, r0
 80015f2:	4680      	mov	r8, r0
 80015f4:	0fe8      	lsrs	r0, r5, #31
 80015f6:	0b39      	lsrs	r1, r7, #12
 80015f8:	4684      	mov	ip, r0
 80015fa:	b083      	sub	sp, #12
 80015fc:	0058      	lsls	r0, r3, #1
 80015fe:	4f30      	ldr	r7, [pc, #192]	@ (80016c0 <__ledf2+0xe0>)
 8001600:	0d40      	lsrs	r0, r0, #21
 8001602:	9101      	str	r1, [sp, #4]
 8001604:	031e      	lsls	r6, r3, #12
 8001606:	0069      	lsls	r1, r5, #1
 8001608:	4682      	mov	sl, r0
 800160a:	4691      	mov	r9, r2
 800160c:	0d49      	lsrs	r1, r1, #21
 800160e:	0b36      	lsrs	r6, r6, #12
 8001610:	0fd8      	lsrs	r0, r3, #31
 8001612:	42b9      	cmp	r1, r7
 8001614:	d020      	beq.n	8001658 <__ledf2+0x78>
 8001616:	45ba      	cmp	sl, r7
 8001618:	d00f      	beq.n	800163a <__ledf2+0x5a>
 800161a:	2900      	cmp	r1, #0
 800161c:	d12b      	bne.n	8001676 <__ledf2+0x96>
 800161e:	9901      	ldr	r1, [sp, #4]
 8001620:	430c      	orrs	r4, r1
 8001622:	4651      	mov	r1, sl
 8001624:	2900      	cmp	r1, #0
 8001626:	d137      	bne.n	8001698 <__ledf2+0xb8>
 8001628:	4332      	orrs	r2, r6
 800162a:	d038      	beq.n	800169e <__ledf2+0xbe>
 800162c:	2c00      	cmp	r4, #0
 800162e:	d144      	bne.n	80016ba <__ledf2+0xda>
 8001630:	2800      	cmp	r0, #0
 8001632:	d119      	bne.n	8001668 <__ledf2+0x88>
 8001634:	2001      	movs	r0, #1
 8001636:	4240      	negs	r0, r0
 8001638:	e016      	b.n	8001668 <__ledf2+0x88>
 800163a:	4316      	orrs	r6, r2
 800163c:	d113      	bne.n	8001666 <__ledf2+0x86>
 800163e:	2900      	cmp	r1, #0
 8001640:	d102      	bne.n	8001648 <__ledf2+0x68>
 8001642:	9f01      	ldr	r7, [sp, #4]
 8001644:	4327      	orrs	r7, r4
 8001646:	d0f3      	beq.n	8001630 <__ledf2+0x50>
 8001648:	4584      	cmp	ip, r0
 800164a:	d020      	beq.n	800168e <__ledf2+0xae>
 800164c:	4663      	mov	r3, ip
 800164e:	2002      	movs	r0, #2
 8001650:	3b01      	subs	r3, #1
 8001652:	4018      	ands	r0, r3
 8001654:	3801      	subs	r0, #1
 8001656:	e007      	b.n	8001668 <__ledf2+0x88>
 8001658:	9f01      	ldr	r7, [sp, #4]
 800165a:	4327      	orrs	r7, r4
 800165c:	d103      	bne.n	8001666 <__ledf2+0x86>
 800165e:	458a      	cmp	sl, r1
 8001660:	d1f4      	bne.n	800164c <__ledf2+0x6c>
 8001662:	4316      	orrs	r6, r2
 8001664:	d01f      	beq.n	80016a6 <__ledf2+0xc6>
 8001666:	2002      	movs	r0, #2
 8001668:	b003      	add	sp, #12
 800166a:	bcf0      	pop	{r4, r5, r6, r7}
 800166c:	46bb      	mov	fp, r7
 800166e:	46b2      	mov	sl, r6
 8001670:	46a9      	mov	r9, r5
 8001672:	46a0      	mov	r8, r4
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	4654      	mov	r4, sl
 8001678:	2c00      	cmp	r4, #0
 800167a:	d0e7      	beq.n	800164c <__ledf2+0x6c>
 800167c:	4584      	cmp	ip, r0
 800167e:	d1e5      	bne.n	800164c <__ledf2+0x6c>
 8001680:	4551      	cmp	r1, sl
 8001682:	dce3      	bgt.n	800164c <__ledf2+0x6c>
 8001684:	db03      	blt.n	800168e <__ledf2+0xae>
 8001686:	9b01      	ldr	r3, [sp, #4]
 8001688:	42b3      	cmp	r3, r6
 800168a:	d8df      	bhi.n	800164c <__ledf2+0x6c>
 800168c:	d00f      	beq.n	80016ae <__ledf2+0xce>
 800168e:	4663      	mov	r3, ip
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0cf      	beq.n	8001634 <__ledf2+0x54>
 8001694:	4660      	mov	r0, ip
 8001696:	e7e7      	b.n	8001668 <__ledf2+0x88>
 8001698:	2c00      	cmp	r4, #0
 800169a:	d0c9      	beq.n	8001630 <__ledf2+0x50>
 800169c:	e7d4      	b.n	8001648 <__ledf2+0x68>
 800169e:	2000      	movs	r0, #0
 80016a0:	2c00      	cmp	r4, #0
 80016a2:	d0e1      	beq.n	8001668 <__ledf2+0x88>
 80016a4:	e7d2      	b.n	800164c <__ledf2+0x6c>
 80016a6:	4584      	cmp	ip, r0
 80016a8:	d1d0      	bne.n	800164c <__ledf2+0x6c>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7dc      	b.n	8001668 <__ledf2+0x88>
 80016ae:	45c8      	cmp	r8, r9
 80016b0:	d8cc      	bhi.n	800164c <__ledf2+0x6c>
 80016b2:	2000      	movs	r0, #0
 80016b4:	45c8      	cmp	r8, r9
 80016b6:	d2d7      	bcs.n	8001668 <__ledf2+0x88>
 80016b8:	e7e9      	b.n	800168e <__ledf2+0xae>
 80016ba:	4584      	cmp	ip, r0
 80016bc:	d0e3      	beq.n	8001686 <__ledf2+0xa6>
 80016be:	e7c5      	b.n	800164c <__ledf2+0x6c>
 80016c0:	000007ff 	.word	0x000007ff

080016c4 <__aeabi_dmul>:
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	4657      	mov	r7, sl
 80016c8:	46de      	mov	lr, fp
 80016ca:	464e      	mov	r6, r9
 80016cc:	4645      	mov	r5, r8
 80016ce:	b5e0      	push	{r5, r6, r7, lr}
 80016d0:	001f      	movs	r7, r3
 80016d2:	030b      	lsls	r3, r1, #12
 80016d4:	0b1b      	lsrs	r3, r3, #12
 80016d6:	0016      	movs	r6, r2
 80016d8:	469a      	mov	sl, r3
 80016da:	0fca      	lsrs	r2, r1, #31
 80016dc:	004b      	lsls	r3, r1, #1
 80016de:	0004      	movs	r4, r0
 80016e0:	4693      	mov	fp, r2
 80016e2:	b087      	sub	sp, #28
 80016e4:	0d5b      	lsrs	r3, r3, #21
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0x26>
 80016e8:	e0d5      	b.n	8001896 <__aeabi_dmul+0x1d2>
 80016ea:	4abb      	ldr	r2, [pc, #748]	@ (80019d8 <__aeabi_dmul+0x314>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2e>
 80016f0:	e0f8      	b.n	80018e4 <__aeabi_dmul+0x220>
 80016f2:	4651      	mov	r1, sl
 80016f4:	0f42      	lsrs	r2, r0, #29
 80016f6:	00c9      	lsls	r1, r1, #3
 80016f8:	430a      	orrs	r2, r1
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	0409      	lsls	r1, r1, #16
 80016fe:	4311      	orrs	r1, r2
 8001700:	00c2      	lsls	r2, r0, #3
 8001702:	4691      	mov	r9, r2
 8001704:	4ab5      	ldr	r2, [pc, #724]	@ (80019dc <__aeabi_dmul+0x318>)
 8001706:	468a      	mov	sl, r1
 8001708:	189d      	adds	r5, r3, r2
 800170a:	2300      	movs	r3, #0
 800170c:	4698      	mov	r8, r3
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	033c      	lsls	r4, r7, #12
 8001712:	007b      	lsls	r3, r7, #1
 8001714:	0ffa      	lsrs	r2, r7, #31
 8001716:	0030      	movs	r0, r6
 8001718:	0b24      	lsrs	r4, r4, #12
 800171a:	0d5b      	lsrs	r3, r3, #21
 800171c:	9200      	str	r2, [sp, #0]
 800171e:	d100      	bne.n	8001722 <__aeabi_dmul+0x5e>
 8001720:	e096      	b.n	8001850 <__aeabi_dmul+0x18c>
 8001722:	4aad      	ldr	r2, [pc, #692]	@ (80019d8 <__aeabi_dmul+0x314>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d031      	beq.n	800178c <__aeabi_dmul+0xc8>
 8001728:	0f72      	lsrs	r2, r6, #29
 800172a:	00e4      	lsls	r4, r4, #3
 800172c:	4322      	orrs	r2, r4
 800172e:	2480      	movs	r4, #128	@ 0x80
 8001730:	0424      	lsls	r4, r4, #16
 8001732:	4314      	orrs	r4, r2
 8001734:	4aa9      	ldr	r2, [pc, #676]	@ (80019dc <__aeabi_dmul+0x318>)
 8001736:	00f0      	lsls	r0, r6, #3
 8001738:	4694      	mov	ip, r2
 800173a:	4463      	add	r3, ip
 800173c:	195b      	adds	r3, r3, r5
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	9201      	str	r2, [sp, #4]
 8001742:	4642      	mov	r2, r8
 8001744:	2600      	movs	r6, #0
 8001746:	2a0a      	cmp	r2, #10
 8001748:	dc42      	bgt.n	80017d0 <__aeabi_dmul+0x10c>
 800174a:	465a      	mov	r2, fp
 800174c:	9900      	ldr	r1, [sp, #0]
 800174e:	404a      	eors	r2, r1
 8001750:	4693      	mov	fp, r2
 8001752:	4642      	mov	r2, r8
 8001754:	2a02      	cmp	r2, #2
 8001756:	dc32      	bgt.n	80017be <__aeabi_dmul+0xfa>
 8001758:	3a01      	subs	r2, #1
 800175a:	2a01      	cmp	r2, #1
 800175c:	d900      	bls.n	8001760 <__aeabi_dmul+0x9c>
 800175e:	e149      	b.n	80019f4 <__aeabi_dmul+0x330>
 8001760:	2e02      	cmp	r6, #2
 8001762:	d100      	bne.n	8001766 <__aeabi_dmul+0xa2>
 8001764:	e0ca      	b.n	80018fc <__aeabi_dmul+0x238>
 8001766:	2e01      	cmp	r6, #1
 8001768:	d13d      	bne.n	80017e6 <__aeabi_dmul+0x122>
 800176a:	2300      	movs	r3, #0
 800176c:	2400      	movs	r4, #0
 800176e:	2200      	movs	r2, #0
 8001770:	0010      	movs	r0, r2
 8001772:	465a      	mov	r2, fp
 8001774:	051b      	lsls	r3, r3, #20
 8001776:	4323      	orrs	r3, r4
 8001778:	07d2      	lsls	r2, r2, #31
 800177a:	4313      	orrs	r3, r2
 800177c:	0019      	movs	r1, r3
 800177e:	b007      	add	sp, #28
 8001780:	bcf0      	pop	{r4, r5, r6, r7}
 8001782:	46bb      	mov	fp, r7
 8001784:	46b2      	mov	sl, r6
 8001786:	46a9      	mov	r9, r5
 8001788:	46a0      	mov	r8, r4
 800178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178c:	4b92      	ldr	r3, [pc, #584]	@ (80019d8 <__aeabi_dmul+0x314>)
 800178e:	4326      	orrs	r6, r4
 8001790:	18eb      	adds	r3, r5, r3
 8001792:	2e00      	cmp	r6, #0
 8001794:	d100      	bne.n	8001798 <__aeabi_dmul+0xd4>
 8001796:	e0bb      	b.n	8001910 <__aeabi_dmul+0x24c>
 8001798:	2203      	movs	r2, #3
 800179a:	4641      	mov	r1, r8
 800179c:	4311      	orrs	r1, r2
 800179e:	465a      	mov	r2, fp
 80017a0:	4688      	mov	r8, r1
 80017a2:	9900      	ldr	r1, [sp, #0]
 80017a4:	404a      	eors	r2, r1
 80017a6:	2180      	movs	r1, #128	@ 0x80
 80017a8:	0109      	lsls	r1, r1, #4
 80017aa:	468c      	mov	ip, r1
 80017ac:	0029      	movs	r1, r5
 80017ae:	4461      	add	r1, ip
 80017b0:	9101      	str	r1, [sp, #4]
 80017b2:	4641      	mov	r1, r8
 80017b4:	290a      	cmp	r1, #10
 80017b6:	dd00      	ble.n	80017ba <__aeabi_dmul+0xf6>
 80017b8:	e233      	b.n	8001c22 <__aeabi_dmul+0x55e>
 80017ba:	4693      	mov	fp, r2
 80017bc:	2603      	movs	r6, #3
 80017be:	4642      	mov	r2, r8
 80017c0:	2701      	movs	r7, #1
 80017c2:	4097      	lsls	r7, r2
 80017c4:	21a6      	movs	r1, #166	@ 0xa6
 80017c6:	003a      	movs	r2, r7
 80017c8:	00c9      	lsls	r1, r1, #3
 80017ca:	400a      	ands	r2, r1
 80017cc:	420f      	tst	r7, r1
 80017ce:	d031      	beq.n	8001834 <__aeabi_dmul+0x170>
 80017d0:	9e02      	ldr	r6, [sp, #8]
 80017d2:	2e02      	cmp	r6, #2
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dmul+0x114>
 80017d6:	e235      	b.n	8001c44 <__aeabi_dmul+0x580>
 80017d8:	2e03      	cmp	r6, #3
 80017da:	d100      	bne.n	80017de <__aeabi_dmul+0x11a>
 80017dc:	e1d2      	b.n	8001b84 <__aeabi_dmul+0x4c0>
 80017de:	4654      	mov	r4, sl
 80017e0:	4648      	mov	r0, r9
 80017e2:	2e01      	cmp	r6, #1
 80017e4:	d0c1      	beq.n	800176a <__aeabi_dmul+0xa6>
 80017e6:	9a01      	ldr	r2, [sp, #4]
 80017e8:	4b7d      	ldr	r3, [pc, #500]	@ (80019e0 <__aeabi_dmul+0x31c>)
 80017ea:	4694      	mov	ip, r2
 80017ec:	4463      	add	r3, ip
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	dc00      	bgt.n	80017f4 <__aeabi_dmul+0x130>
 80017f2:	e0c0      	b.n	8001976 <__aeabi_dmul+0x2b2>
 80017f4:	0742      	lsls	r2, r0, #29
 80017f6:	d009      	beq.n	800180c <__aeabi_dmul+0x148>
 80017f8:	220f      	movs	r2, #15
 80017fa:	4002      	ands	r2, r0
 80017fc:	2a04      	cmp	r2, #4
 80017fe:	d005      	beq.n	800180c <__aeabi_dmul+0x148>
 8001800:	1d02      	adds	r2, r0, #4
 8001802:	4282      	cmp	r2, r0
 8001804:	4180      	sbcs	r0, r0
 8001806:	4240      	negs	r0, r0
 8001808:	1824      	adds	r4, r4, r0
 800180a:	0010      	movs	r0, r2
 800180c:	01e2      	lsls	r2, r4, #7
 800180e:	d506      	bpl.n	800181e <__aeabi_dmul+0x15a>
 8001810:	4b74      	ldr	r3, [pc, #464]	@ (80019e4 <__aeabi_dmul+0x320>)
 8001812:	9a01      	ldr	r2, [sp, #4]
 8001814:	401c      	ands	r4, r3
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	4694      	mov	ip, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4463      	add	r3, ip
 800181e:	4a72      	ldr	r2, [pc, #456]	@ (80019e8 <__aeabi_dmul+0x324>)
 8001820:	4293      	cmp	r3, r2
 8001822:	dc6b      	bgt.n	80018fc <__aeabi_dmul+0x238>
 8001824:	0762      	lsls	r2, r4, #29
 8001826:	08c0      	lsrs	r0, r0, #3
 8001828:	0264      	lsls	r4, r4, #9
 800182a:	055b      	lsls	r3, r3, #21
 800182c:	4302      	orrs	r2, r0
 800182e:	0b24      	lsrs	r4, r4, #12
 8001830:	0d5b      	lsrs	r3, r3, #21
 8001832:	e79d      	b.n	8001770 <__aeabi_dmul+0xac>
 8001834:	2190      	movs	r1, #144	@ 0x90
 8001836:	0089      	lsls	r1, r1, #2
 8001838:	420f      	tst	r7, r1
 800183a:	d163      	bne.n	8001904 <__aeabi_dmul+0x240>
 800183c:	2288      	movs	r2, #136	@ 0x88
 800183e:	423a      	tst	r2, r7
 8001840:	d100      	bne.n	8001844 <__aeabi_dmul+0x180>
 8001842:	e0d7      	b.n	80019f4 <__aeabi_dmul+0x330>
 8001844:	9b00      	ldr	r3, [sp, #0]
 8001846:	46a2      	mov	sl, r4
 8001848:	469b      	mov	fp, r3
 800184a:	4681      	mov	r9, r0
 800184c:	9602      	str	r6, [sp, #8]
 800184e:	e7bf      	b.n	80017d0 <__aeabi_dmul+0x10c>
 8001850:	0023      	movs	r3, r4
 8001852:	4333      	orrs	r3, r6
 8001854:	d100      	bne.n	8001858 <__aeabi_dmul+0x194>
 8001856:	e07f      	b.n	8001958 <__aeabi_dmul+0x294>
 8001858:	2c00      	cmp	r4, #0
 800185a:	d100      	bne.n	800185e <__aeabi_dmul+0x19a>
 800185c:	e1ad      	b.n	8001bba <__aeabi_dmul+0x4f6>
 800185e:	0020      	movs	r0, r4
 8001860:	f000 ff10 	bl	8002684 <__clzsi2>
 8001864:	0002      	movs	r2, r0
 8001866:	0003      	movs	r3, r0
 8001868:	3a0b      	subs	r2, #11
 800186a:	201d      	movs	r0, #29
 800186c:	0019      	movs	r1, r3
 800186e:	1a82      	subs	r2, r0, r2
 8001870:	0030      	movs	r0, r6
 8001872:	3908      	subs	r1, #8
 8001874:	40d0      	lsrs	r0, r2
 8001876:	408c      	lsls	r4, r1
 8001878:	4304      	orrs	r4, r0
 800187a:	0030      	movs	r0, r6
 800187c:	4088      	lsls	r0, r1
 800187e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ec <__aeabi_dmul+0x328>)
 8001880:	1aeb      	subs	r3, r5, r3
 8001882:	4694      	mov	ip, r2
 8001884:	4463      	add	r3, ip
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	9201      	str	r2, [sp, #4]
 800188a:	4642      	mov	r2, r8
 800188c:	2600      	movs	r6, #0
 800188e:	2a0a      	cmp	r2, #10
 8001890:	dc00      	bgt.n	8001894 <__aeabi_dmul+0x1d0>
 8001892:	e75a      	b.n	800174a <__aeabi_dmul+0x86>
 8001894:	e79c      	b.n	80017d0 <__aeabi_dmul+0x10c>
 8001896:	4653      	mov	r3, sl
 8001898:	4303      	orrs	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	d054      	beq.n	8001948 <__aeabi_dmul+0x284>
 800189e:	4653      	mov	r3, sl
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dmul+0x1e2>
 80018a4:	e177      	b.n	8001b96 <__aeabi_dmul+0x4d2>
 80018a6:	4650      	mov	r0, sl
 80018a8:	f000 feec 	bl	8002684 <__clzsi2>
 80018ac:	230b      	movs	r3, #11
 80018ae:	425b      	negs	r3, r3
 80018b0:	469c      	mov	ip, r3
 80018b2:	0002      	movs	r2, r0
 80018b4:	4484      	add	ip, r0
 80018b6:	0011      	movs	r1, r2
 80018b8:	4650      	mov	r0, sl
 80018ba:	3908      	subs	r1, #8
 80018bc:	4088      	lsls	r0, r1
 80018be:	231d      	movs	r3, #29
 80018c0:	4680      	mov	r8, r0
 80018c2:	4660      	mov	r0, ip
 80018c4:	1a1b      	subs	r3, r3, r0
 80018c6:	0020      	movs	r0, r4
 80018c8:	40d8      	lsrs	r0, r3
 80018ca:	0003      	movs	r3, r0
 80018cc:	4640      	mov	r0, r8
 80018ce:	4303      	orrs	r3, r0
 80018d0:	469a      	mov	sl, r3
 80018d2:	0023      	movs	r3, r4
 80018d4:	408b      	lsls	r3, r1
 80018d6:	4699      	mov	r9, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	4d44      	ldr	r5, [pc, #272]	@ (80019ec <__aeabi_dmul+0x328>)
 80018dc:	4698      	mov	r8, r3
 80018de:	1aad      	subs	r5, r5, r2
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	e715      	b.n	8001710 <__aeabi_dmul+0x4c>
 80018e4:	4652      	mov	r2, sl
 80018e6:	4302      	orrs	r2, r0
 80018e8:	4691      	mov	r9, r2
 80018ea:	d126      	bne.n	800193a <__aeabi_dmul+0x276>
 80018ec:	2200      	movs	r2, #0
 80018ee:	001d      	movs	r5, r3
 80018f0:	2302      	movs	r3, #2
 80018f2:	4692      	mov	sl, r2
 80018f4:	3208      	adds	r2, #8
 80018f6:	4690      	mov	r8, r2
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	e709      	b.n	8001710 <__aeabi_dmul+0x4c>
 80018fc:	2400      	movs	r4, #0
 80018fe:	2200      	movs	r2, #0
 8001900:	4b35      	ldr	r3, [pc, #212]	@ (80019d8 <__aeabi_dmul+0x314>)
 8001902:	e735      	b.n	8001770 <__aeabi_dmul+0xac>
 8001904:	2300      	movs	r3, #0
 8001906:	2480      	movs	r4, #128	@ 0x80
 8001908:	469b      	mov	fp, r3
 800190a:	0324      	lsls	r4, r4, #12
 800190c:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <__aeabi_dmul+0x314>)
 800190e:	e72f      	b.n	8001770 <__aeabi_dmul+0xac>
 8001910:	2202      	movs	r2, #2
 8001912:	4641      	mov	r1, r8
 8001914:	4311      	orrs	r1, r2
 8001916:	2280      	movs	r2, #128	@ 0x80
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	4694      	mov	ip, r2
 800191c:	002a      	movs	r2, r5
 800191e:	4462      	add	r2, ip
 8001920:	4688      	mov	r8, r1
 8001922:	9201      	str	r2, [sp, #4]
 8001924:	290a      	cmp	r1, #10
 8001926:	dd00      	ble.n	800192a <__aeabi_dmul+0x266>
 8001928:	e752      	b.n	80017d0 <__aeabi_dmul+0x10c>
 800192a:	465a      	mov	r2, fp
 800192c:	2000      	movs	r0, #0
 800192e:	9900      	ldr	r1, [sp, #0]
 8001930:	0004      	movs	r4, r0
 8001932:	404a      	eors	r2, r1
 8001934:	4693      	mov	fp, r2
 8001936:	2602      	movs	r6, #2
 8001938:	e70b      	b.n	8001752 <__aeabi_dmul+0x8e>
 800193a:	220c      	movs	r2, #12
 800193c:	001d      	movs	r5, r3
 800193e:	2303      	movs	r3, #3
 8001940:	4681      	mov	r9, r0
 8001942:	4690      	mov	r8, r2
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	e6e3      	b.n	8001710 <__aeabi_dmul+0x4c>
 8001948:	2300      	movs	r3, #0
 800194a:	469a      	mov	sl, r3
 800194c:	3304      	adds	r3, #4
 800194e:	4698      	mov	r8, r3
 8001950:	3b03      	subs	r3, #3
 8001952:	2500      	movs	r5, #0
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	e6db      	b.n	8001710 <__aeabi_dmul+0x4c>
 8001958:	4642      	mov	r2, r8
 800195a:	3301      	adds	r3, #1
 800195c:	431a      	orrs	r2, r3
 800195e:	002b      	movs	r3, r5
 8001960:	4690      	mov	r8, r2
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	9201      	str	r2, [sp, #4]
 8001966:	4642      	mov	r2, r8
 8001968:	2400      	movs	r4, #0
 800196a:	2000      	movs	r0, #0
 800196c:	2601      	movs	r6, #1
 800196e:	2a0a      	cmp	r2, #10
 8001970:	dc00      	bgt.n	8001974 <__aeabi_dmul+0x2b0>
 8001972:	e6ea      	b.n	800174a <__aeabi_dmul+0x86>
 8001974:	e72c      	b.n	80017d0 <__aeabi_dmul+0x10c>
 8001976:	2201      	movs	r2, #1
 8001978:	1ad2      	subs	r2, r2, r3
 800197a:	2a38      	cmp	r2, #56	@ 0x38
 800197c:	dd00      	ble.n	8001980 <__aeabi_dmul+0x2bc>
 800197e:	e6f4      	b.n	800176a <__aeabi_dmul+0xa6>
 8001980:	2a1f      	cmp	r2, #31
 8001982:	dc00      	bgt.n	8001986 <__aeabi_dmul+0x2c2>
 8001984:	e12a      	b.n	8001bdc <__aeabi_dmul+0x518>
 8001986:	211f      	movs	r1, #31
 8001988:	4249      	negs	r1, r1
 800198a:	1acb      	subs	r3, r1, r3
 800198c:	0021      	movs	r1, r4
 800198e:	40d9      	lsrs	r1, r3
 8001990:	000b      	movs	r3, r1
 8001992:	2a20      	cmp	r2, #32
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x2de>
 8001996:	4a16      	ldr	r2, [pc, #88]	@ (80019f0 <__aeabi_dmul+0x32c>)
 8001998:	9d01      	ldr	r5, [sp, #4]
 800199a:	4694      	mov	ip, r2
 800199c:	4465      	add	r5, ip
 800199e:	40ac      	lsls	r4, r5
 80019a0:	4320      	orrs	r0, r4
 80019a2:	1e42      	subs	r2, r0, #1
 80019a4:	4190      	sbcs	r0, r2
 80019a6:	4318      	orrs	r0, r3
 80019a8:	2307      	movs	r3, #7
 80019aa:	0019      	movs	r1, r3
 80019ac:	2400      	movs	r4, #0
 80019ae:	4001      	ands	r1, r0
 80019b0:	4203      	tst	r3, r0
 80019b2:	d00c      	beq.n	80019ce <__aeabi_dmul+0x30a>
 80019b4:	230f      	movs	r3, #15
 80019b6:	4003      	ands	r3, r0
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d100      	bne.n	80019be <__aeabi_dmul+0x2fa>
 80019bc:	e140      	b.n	8001c40 <__aeabi_dmul+0x57c>
 80019be:	1d03      	adds	r3, r0, #4
 80019c0:	4283      	cmp	r3, r0
 80019c2:	41a4      	sbcs	r4, r4
 80019c4:	0018      	movs	r0, r3
 80019c6:	4264      	negs	r4, r4
 80019c8:	0761      	lsls	r1, r4, #29
 80019ca:	0264      	lsls	r4, r4, #9
 80019cc:	0b24      	lsrs	r4, r4, #12
 80019ce:	08c2      	lsrs	r2, r0, #3
 80019d0:	2300      	movs	r3, #0
 80019d2:	430a      	orrs	r2, r1
 80019d4:	e6cc      	b.n	8001770 <__aeabi_dmul+0xac>
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	000007ff 	.word	0x000007ff
 80019dc:	fffffc01 	.word	0xfffffc01
 80019e0:	000003ff 	.word	0x000003ff
 80019e4:	feffffff 	.word	0xfeffffff
 80019e8:	000007fe 	.word	0x000007fe
 80019ec:	fffffc0d 	.word	0xfffffc0d
 80019f0:	0000043e 	.word	0x0000043e
 80019f4:	4649      	mov	r1, r9
 80019f6:	464a      	mov	r2, r9
 80019f8:	0409      	lsls	r1, r1, #16
 80019fa:	0c09      	lsrs	r1, r1, #16
 80019fc:	000d      	movs	r5, r1
 80019fe:	0c16      	lsrs	r6, r2, #16
 8001a00:	0c02      	lsrs	r2, r0, #16
 8001a02:	0400      	lsls	r0, r0, #16
 8001a04:	0c00      	lsrs	r0, r0, #16
 8001a06:	4345      	muls	r5, r0
 8001a08:	46ac      	mov	ip, r5
 8001a0a:	0005      	movs	r5, r0
 8001a0c:	4375      	muls	r5, r6
 8001a0e:	46a8      	mov	r8, r5
 8001a10:	0015      	movs	r5, r2
 8001a12:	000f      	movs	r7, r1
 8001a14:	4375      	muls	r5, r6
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	9502      	str	r5, [sp, #8]
 8001a1a:	002a      	movs	r2, r5
 8001a1c:	9d00      	ldr	r5, [sp, #0]
 8001a1e:	436f      	muls	r7, r5
 8001a20:	4665      	mov	r5, ip
 8001a22:	0c2d      	lsrs	r5, r5, #16
 8001a24:	46a9      	mov	r9, r5
 8001a26:	4447      	add	r7, r8
 8001a28:	444f      	add	r7, r9
 8001a2a:	45b8      	cmp	r8, r7
 8001a2c:	d905      	bls.n	8001a3a <__aeabi_dmul+0x376>
 8001a2e:	0015      	movs	r5, r2
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	0252      	lsls	r2, r2, #9
 8001a34:	4690      	mov	r8, r2
 8001a36:	4445      	add	r5, r8
 8001a38:	9502      	str	r5, [sp, #8]
 8001a3a:	0c3d      	lsrs	r5, r7, #16
 8001a3c:	9503      	str	r5, [sp, #12]
 8001a3e:	4665      	mov	r5, ip
 8001a40:	042d      	lsls	r5, r5, #16
 8001a42:	043f      	lsls	r7, r7, #16
 8001a44:	0c2d      	lsrs	r5, r5, #16
 8001a46:	46ac      	mov	ip, r5
 8001a48:	003d      	movs	r5, r7
 8001a4a:	4465      	add	r5, ip
 8001a4c:	9504      	str	r5, [sp, #16]
 8001a4e:	0c25      	lsrs	r5, r4, #16
 8001a50:	0424      	lsls	r4, r4, #16
 8001a52:	0c24      	lsrs	r4, r4, #16
 8001a54:	46ac      	mov	ip, r5
 8001a56:	0025      	movs	r5, r4
 8001a58:	4375      	muls	r5, r6
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	4665      	mov	r5, ip
 8001a5e:	000f      	movs	r7, r1
 8001a60:	4369      	muls	r1, r5
 8001a62:	4441      	add	r1, r8
 8001a64:	4689      	mov	r9, r1
 8001a66:	4367      	muls	r7, r4
 8001a68:	0c39      	lsrs	r1, r7, #16
 8001a6a:	4449      	add	r1, r9
 8001a6c:	436e      	muls	r6, r5
 8001a6e:	4588      	cmp	r8, r1
 8001a70:	d903      	bls.n	8001a7a <__aeabi_dmul+0x3b6>
 8001a72:	2280      	movs	r2, #128	@ 0x80
 8001a74:	0252      	lsls	r2, r2, #9
 8001a76:	4690      	mov	r8, r2
 8001a78:	4446      	add	r6, r8
 8001a7a:	0c0d      	lsrs	r5, r1, #16
 8001a7c:	46a8      	mov	r8, r5
 8001a7e:	0035      	movs	r5, r6
 8001a80:	4445      	add	r5, r8
 8001a82:	9505      	str	r5, [sp, #20]
 8001a84:	9d03      	ldr	r5, [sp, #12]
 8001a86:	043f      	lsls	r7, r7, #16
 8001a88:	46a8      	mov	r8, r5
 8001a8a:	0c3f      	lsrs	r7, r7, #16
 8001a8c:	0409      	lsls	r1, r1, #16
 8001a8e:	19c9      	adds	r1, r1, r7
 8001a90:	4488      	add	r8, r1
 8001a92:	4645      	mov	r5, r8
 8001a94:	9503      	str	r5, [sp, #12]
 8001a96:	4655      	mov	r5, sl
 8001a98:	042e      	lsls	r6, r5, #16
 8001a9a:	0c36      	lsrs	r6, r6, #16
 8001a9c:	0c2f      	lsrs	r7, r5, #16
 8001a9e:	0035      	movs	r5, r6
 8001aa0:	4345      	muls	r5, r0
 8001aa2:	4378      	muls	r0, r7
 8001aa4:	4681      	mov	r9, r0
 8001aa6:	0038      	movs	r0, r7
 8001aa8:	46a8      	mov	r8, r5
 8001aaa:	0c2d      	lsrs	r5, r5, #16
 8001aac:	46aa      	mov	sl, r5
 8001aae:	9a00      	ldr	r2, [sp, #0]
 8001ab0:	4350      	muls	r0, r2
 8001ab2:	4372      	muls	r2, r6
 8001ab4:	444a      	add	r2, r9
 8001ab6:	4452      	add	r2, sl
 8001ab8:	4591      	cmp	r9, r2
 8001aba:	d903      	bls.n	8001ac4 <__aeabi_dmul+0x400>
 8001abc:	2580      	movs	r5, #128	@ 0x80
 8001abe:	026d      	lsls	r5, r5, #9
 8001ac0:	46a9      	mov	r9, r5
 8001ac2:	4448      	add	r0, r9
 8001ac4:	0c15      	lsrs	r5, r2, #16
 8001ac6:	46a9      	mov	r9, r5
 8001ac8:	4645      	mov	r5, r8
 8001aca:	042d      	lsls	r5, r5, #16
 8001acc:	0c2d      	lsrs	r5, r5, #16
 8001ace:	46a8      	mov	r8, r5
 8001ad0:	4665      	mov	r5, ip
 8001ad2:	437d      	muls	r5, r7
 8001ad4:	0412      	lsls	r2, r2, #16
 8001ad6:	4448      	add	r0, r9
 8001ad8:	4490      	add	r8, r2
 8001ada:	46a9      	mov	r9, r5
 8001adc:	0032      	movs	r2, r6
 8001ade:	4665      	mov	r5, ip
 8001ae0:	4362      	muls	r2, r4
 8001ae2:	436e      	muls	r6, r5
 8001ae4:	437c      	muls	r4, r7
 8001ae6:	0c17      	lsrs	r7, r2, #16
 8001ae8:	1936      	adds	r6, r6, r4
 8001aea:	19bf      	adds	r7, r7, r6
 8001aec:	42bc      	cmp	r4, r7
 8001aee:	d903      	bls.n	8001af8 <__aeabi_dmul+0x434>
 8001af0:	2480      	movs	r4, #128	@ 0x80
 8001af2:	0264      	lsls	r4, r4, #9
 8001af4:	46a4      	mov	ip, r4
 8001af6:	44e1      	add	r9, ip
 8001af8:	9c02      	ldr	r4, [sp, #8]
 8001afa:	9e03      	ldr	r6, [sp, #12]
 8001afc:	46a4      	mov	ip, r4
 8001afe:	9d05      	ldr	r5, [sp, #20]
 8001b00:	4466      	add	r6, ip
 8001b02:	428e      	cmp	r6, r1
 8001b04:	4189      	sbcs	r1, r1
 8001b06:	46ac      	mov	ip, r5
 8001b08:	0412      	lsls	r2, r2, #16
 8001b0a:	043c      	lsls	r4, r7, #16
 8001b0c:	0c12      	lsrs	r2, r2, #16
 8001b0e:	18a2      	adds	r2, r4, r2
 8001b10:	4462      	add	r2, ip
 8001b12:	4249      	negs	r1, r1
 8001b14:	1854      	adds	r4, r2, r1
 8001b16:	4446      	add	r6, r8
 8001b18:	46a4      	mov	ip, r4
 8001b1a:	4546      	cmp	r6, r8
 8001b1c:	41a4      	sbcs	r4, r4
 8001b1e:	4682      	mov	sl, r0
 8001b20:	4264      	negs	r4, r4
 8001b22:	46a0      	mov	r8, r4
 8001b24:	42aa      	cmp	r2, r5
 8001b26:	4192      	sbcs	r2, r2
 8001b28:	458c      	cmp	ip, r1
 8001b2a:	4189      	sbcs	r1, r1
 8001b2c:	44e2      	add	sl, ip
 8001b2e:	44d0      	add	r8, sl
 8001b30:	4249      	negs	r1, r1
 8001b32:	4252      	negs	r2, r2
 8001b34:	430a      	orrs	r2, r1
 8001b36:	45a0      	cmp	r8, r4
 8001b38:	41a4      	sbcs	r4, r4
 8001b3a:	4582      	cmp	sl, r0
 8001b3c:	4189      	sbcs	r1, r1
 8001b3e:	4264      	negs	r4, r4
 8001b40:	4249      	negs	r1, r1
 8001b42:	430c      	orrs	r4, r1
 8001b44:	4641      	mov	r1, r8
 8001b46:	0c3f      	lsrs	r7, r7, #16
 8001b48:	19d2      	adds	r2, r2, r7
 8001b4a:	1912      	adds	r2, r2, r4
 8001b4c:	0dcc      	lsrs	r4, r1, #23
 8001b4e:	9904      	ldr	r1, [sp, #16]
 8001b50:	0270      	lsls	r0, r6, #9
 8001b52:	4308      	orrs	r0, r1
 8001b54:	1e41      	subs	r1, r0, #1
 8001b56:	4188      	sbcs	r0, r1
 8001b58:	4641      	mov	r1, r8
 8001b5a:	444a      	add	r2, r9
 8001b5c:	0df6      	lsrs	r6, r6, #23
 8001b5e:	0252      	lsls	r2, r2, #9
 8001b60:	4330      	orrs	r0, r6
 8001b62:	0249      	lsls	r1, r1, #9
 8001b64:	4314      	orrs	r4, r2
 8001b66:	4308      	orrs	r0, r1
 8001b68:	01d2      	lsls	r2, r2, #7
 8001b6a:	d535      	bpl.n	8001bd8 <__aeabi_dmul+0x514>
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	0843      	lsrs	r3, r0, #1
 8001b70:	4002      	ands	r2, r0
 8001b72:	4313      	orrs	r3, r2
 8001b74:	07e0      	lsls	r0, r4, #31
 8001b76:	4318      	orrs	r0, r3
 8001b78:	0864      	lsrs	r4, r4, #1
 8001b7a:	e634      	b.n	80017e6 <__aeabi_dmul+0x122>
 8001b7c:	9b00      	ldr	r3, [sp, #0]
 8001b7e:	46a2      	mov	sl, r4
 8001b80:	469b      	mov	fp, r3
 8001b82:	4681      	mov	r9, r0
 8001b84:	2480      	movs	r4, #128	@ 0x80
 8001b86:	4653      	mov	r3, sl
 8001b88:	0324      	lsls	r4, r4, #12
 8001b8a:	431c      	orrs	r4, r3
 8001b8c:	0324      	lsls	r4, r4, #12
 8001b8e:	464a      	mov	r2, r9
 8001b90:	4b2e      	ldr	r3, [pc, #184]	@ (8001c4c <__aeabi_dmul+0x588>)
 8001b92:	0b24      	lsrs	r4, r4, #12
 8001b94:	e5ec      	b.n	8001770 <__aeabi_dmul+0xac>
 8001b96:	f000 fd75 	bl	8002684 <__clzsi2>
 8001b9a:	2315      	movs	r3, #21
 8001b9c:	469c      	mov	ip, r3
 8001b9e:	4484      	add	ip, r0
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	4663      	mov	r3, ip
 8001ba4:	3220      	adds	r2, #32
 8001ba6:	2b1c      	cmp	r3, #28
 8001ba8:	dc00      	bgt.n	8001bac <__aeabi_dmul+0x4e8>
 8001baa:	e684      	b.n	80018b6 <__aeabi_dmul+0x1f2>
 8001bac:	2300      	movs	r3, #0
 8001bae:	4699      	mov	r9, r3
 8001bb0:	0023      	movs	r3, r4
 8001bb2:	3808      	subs	r0, #8
 8001bb4:	4083      	lsls	r3, r0
 8001bb6:	469a      	mov	sl, r3
 8001bb8:	e68e      	b.n	80018d8 <__aeabi_dmul+0x214>
 8001bba:	f000 fd63 	bl	8002684 <__clzsi2>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	3215      	adds	r2, #21
 8001bc4:	3320      	adds	r3, #32
 8001bc6:	2a1c      	cmp	r2, #28
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dmul+0x508>
 8001bca:	e64e      	b.n	800186a <__aeabi_dmul+0x1a6>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	0034      	movs	r4, r6
 8001bd0:	3a08      	subs	r2, #8
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	4094      	lsls	r4, r2
 8001bd6:	e652      	b.n	800187e <__aeabi_dmul+0x1ba>
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	e604      	b.n	80017e6 <__aeabi_dmul+0x122>
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <__aeabi_dmul+0x58c>)
 8001bde:	0021      	movs	r1, r4
 8001be0:	469c      	mov	ip, r3
 8001be2:	0003      	movs	r3, r0
 8001be4:	9d01      	ldr	r5, [sp, #4]
 8001be6:	40d3      	lsrs	r3, r2
 8001be8:	4465      	add	r5, ip
 8001bea:	40a9      	lsls	r1, r5
 8001bec:	4319      	orrs	r1, r3
 8001bee:	0003      	movs	r3, r0
 8001bf0:	40ab      	lsls	r3, r5
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	4183      	sbcs	r3, r0
 8001bf6:	4319      	orrs	r1, r3
 8001bf8:	0008      	movs	r0, r1
 8001bfa:	40d4      	lsrs	r4, r2
 8001bfc:	074b      	lsls	r3, r1, #29
 8001bfe:	d009      	beq.n	8001c14 <__aeabi_dmul+0x550>
 8001c00:	230f      	movs	r3, #15
 8001c02:	400b      	ands	r3, r1
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d005      	beq.n	8001c14 <__aeabi_dmul+0x550>
 8001c08:	1d0b      	adds	r3, r1, #4
 8001c0a:	428b      	cmp	r3, r1
 8001c0c:	4180      	sbcs	r0, r0
 8001c0e:	4240      	negs	r0, r0
 8001c10:	1824      	adds	r4, r4, r0
 8001c12:	0018      	movs	r0, r3
 8001c14:	0223      	lsls	r3, r4, #8
 8001c16:	d400      	bmi.n	8001c1a <__aeabi_dmul+0x556>
 8001c18:	e6d6      	b.n	80019c8 <__aeabi_dmul+0x304>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	e5a6      	b.n	8001770 <__aeabi_dmul+0xac>
 8001c22:	290f      	cmp	r1, #15
 8001c24:	d1aa      	bne.n	8001b7c <__aeabi_dmul+0x4b8>
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	4652      	mov	r2, sl
 8001c2a:	031b      	lsls	r3, r3, #12
 8001c2c:	421a      	tst	r2, r3
 8001c2e:	d0a9      	beq.n	8001b84 <__aeabi_dmul+0x4c0>
 8001c30:	421c      	tst	r4, r3
 8001c32:	d1a7      	bne.n	8001b84 <__aeabi_dmul+0x4c0>
 8001c34:	431c      	orrs	r4, r3
 8001c36:	9b00      	ldr	r3, [sp, #0]
 8001c38:	0002      	movs	r2, r0
 8001c3a:	469b      	mov	fp, r3
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <__aeabi_dmul+0x588>)
 8001c3e:	e597      	b.n	8001770 <__aeabi_dmul+0xac>
 8001c40:	2400      	movs	r4, #0
 8001c42:	e6c1      	b.n	80019c8 <__aeabi_dmul+0x304>
 8001c44:	2400      	movs	r4, #0
 8001c46:	4b01      	ldr	r3, [pc, #4]	@ (8001c4c <__aeabi_dmul+0x588>)
 8001c48:	0022      	movs	r2, r4
 8001c4a:	e591      	b.n	8001770 <__aeabi_dmul+0xac>
 8001c4c:	000007ff 	.word	0x000007ff
 8001c50:	0000041e 	.word	0x0000041e

08001c54 <__aeabi_dsub>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	464e      	mov	r6, r9
 8001c58:	4645      	mov	r5, r8
 8001c5a:	46de      	mov	lr, fp
 8001c5c:	4657      	mov	r7, sl
 8001c5e:	b5e0      	push	{r5, r6, r7, lr}
 8001c60:	b085      	sub	sp, #20
 8001c62:	9000      	str	r0, [sp, #0]
 8001c64:	9101      	str	r1, [sp, #4]
 8001c66:	030c      	lsls	r4, r1, #12
 8001c68:	004f      	lsls	r7, r1, #1
 8001c6a:	0fce      	lsrs	r6, r1, #31
 8001c6c:	0a61      	lsrs	r1, r4, #9
 8001c6e:	9c00      	ldr	r4, [sp, #0]
 8001c70:	46b0      	mov	r8, r6
 8001c72:	0f64      	lsrs	r4, r4, #29
 8001c74:	430c      	orrs	r4, r1
 8001c76:	9900      	ldr	r1, [sp, #0]
 8001c78:	0d7f      	lsrs	r7, r7, #21
 8001c7a:	00c8      	lsls	r0, r1, #3
 8001c7c:	0011      	movs	r1, r2
 8001c7e:	001a      	movs	r2, r3
 8001c80:	031b      	lsls	r3, r3, #12
 8001c82:	469c      	mov	ip, r3
 8001c84:	9100      	str	r1, [sp, #0]
 8001c86:	9201      	str	r2, [sp, #4]
 8001c88:	0051      	lsls	r1, r2, #1
 8001c8a:	0d4b      	lsrs	r3, r1, #21
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	9d00      	ldr	r5, [sp, #0]
 8001c92:	0fd9      	lsrs	r1, r3, #31
 8001c94:	4663      	mov	r3, ip
 8001c96:	0f6a      	lsrs	r2, r5, #29
 8001c98:	0a5b      	lsrs	r3, r3, #9
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	00ea      	lsls	r2, r5, #3
 8001c9e:	4694      	mov	ip, r2
 8001ca0:	4693      	mov	fp, r2
 8001ca2:	4ac1      	ldr	r2, [pc, #772]	@ (8001fa8 <__aeabi_dsub+0x354>)
 8001ca4:	9003      	str	r0, [sp, #12]
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	4591      	cmp	r9, r2
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x5a>
 8001cac:	e0cd      	b.n	8001e4a <__aeabi_dsub+0x1f6>
 8001cae:	2501      	movs	r5, #1
 8001cb0:	4069      	eors	r1, r5
 8001cb2:	464d      	mov	r5, r9
 8001cb4:	1b7d      	subs	r5, r7, r5
 8001cb6:	46aa      	mov	sl, r5
 8001cb8:	428e      	cmp	r6, r1
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x6a>
 8001cbc:	e080      	b.n	8001dc0 <__aeabi_dsub+0x16c>
 8001cbe:	2d00      	cmp	r5, #0
 8001cc0:	dc00      	bgt.n	8001cc4 <__aeabi_dsub+0x70>
 8001cc2:	e335      	b.n	8002330 <__aeabi_dsub+0x6dc>
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	2900      	cmp	r1, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x78>
 8001cca:	e0df      	b.n	8001e8c <__aeabi_dsub+0x238>
 8001ccc:	4297      	cmp	r7, r2
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x7e>
 8001cd0:	e194      	b.n	8001ffc <__aeabi_dsub+0x3a8>
 8001cd2:	4652      	mov	r2, sl
 8001cd4:	2501      	movs	r5, #1
 8001cd6:	2a38      	cmp	r2, #56	@ 0x38
 8001cd8:	dc19      	bgt.n	8001d0e <__aeabi_dsub+0xba>
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	9b02      	ldr	r3, [sp, #8]
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	4652      	mov	r2, sl
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0x98>
 8001cea:	e1e3      	b.n	80020b4 <__aeabi_dsub+0x460>
 8001cec:	4653      	mov	r3, sl
 8001cee:	2220      	movs	r2, #32
 8001cf0:	4661      	mov	r1, ip
 8001cf2:	9d02      	ldr	r5, [sp, #8]
 8001cf4:	1ad2      	subs	r2, r2, r3
 8001cf6:	4095      	lsls	r5, r2
 8001cf8:	40d9      	lsrs	r1, r3
 8001cfa:	430d      	orrs	r5, r1
 8001cfc:	4661      	mov	r1, ip
 8001cfe:	4091      	lsls	r1, r2
 8001d00:	000a      	movs	r2, r1
 8001d02:	1e51      	subs	r1, r2, #1
 8001d04:	418a      	sbcs	r2, r1
 8001d06:	4315      	orrs	r5, r2
 8001d08:	9a02      	ldr	r2, [sp, #8]
 8001d0a:	40da      	lsrs	r2, r3
 8001d0c:	1aa4      	subs	r4, r4, r2
 8001d0e:	1b45      	subs	r5, r0, r5
 8001d10:	42a8      	cmp	r0, r5
 8001d12:	4180      	sbcs	r0, r0
 8001d14:	4240      	negs	r0, r0
 8001d16:	1a24      	subs	r4, r4, r0
 8001d18:	0223      	lsls	r3, r4, #8
 8001d1a:	d400      	bmi.n	8001d1e <__aeabi_dsub+0xca>
 8001d1c:	e13d      	b.n	8001f9a <__aeabi_dsub+0x346>
 8001d1e:	0264      	lsls	r4, r4, #9
 8001d20:	0a64      	lsrs	r4, r4, #9
 8001d22:	2c00      	cmp	r4, #0
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0xd4>
 8001d26:	e147      	b.n	8001fb8 <__aeabi_dsub+0x364>
 8001d28:	0020      	movs	r0, r4
 8001d2a:	f000 fcab 	bl	8002684 <__clzsi2>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	3b08      	subs	r3, #8
 8001d32:	2120      	movs	r1, #32
 8001d34:	0028      	movs	r0, r5
 8001d36:	1aca      	subs	r2, r1, r3
 8001d38:	40d0      	lsrs	r0, r2
 8001d3a:	409c      	lsls	r4, r3
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	409d      	lsls	r5, r3
 8001d40:	4322      	orrs	r2, r4
 8001d42:	429f      	cmp	r7, r3
 8001d44:	dd00      	ble.n	8001d48 <__aeabi_dsub+0xf4>
 8001d46:	e177      	b.n	8002038 <__aeabi_dsub+0x3e4>
 8001d48:	1bd8      	subs	r0, r3, r7
 8001d4a:	3001      	adds	r0, #1
 8001d4c:	1a09      	subs	r1, r1, r0
 8001d4e:	002c      	movs	r4, r5
 8001d50:	408d      	lsls	r5, r1
 8001d52:	40c4      	lsrs	r4, r0
 8001d54:	1e6b      	subs	r3, r5, #1
 8001d56:	419d      	sbcs	r5, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	40c2      	lsrs	r2, r0
 8001d5c:	408b      	lsls	r3, r1
 8001d5e:	4325      	orrs	r5, r4
 8001d60:	2700      	movs	r7, #0
 8001d62:	0014      	movs	r4, r2
 8001d64:	431d      	orrs	r5, r3
 8001d66:	076b      	lsls	r3, r5, #29
 8001d68:	d009      	beq.n	8001d7e <__aeabi_dsub+0x12a>
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	402b      	ands	r3, r5
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d005      	beq.n	8001d7e <__aeabi_dsub+0x12a>
 8001d72:	1d2b      	adds	r3, r5, #4
 8001d74:	42ab      	cmp	r3, r5
 8001d76:	41ad      	sbcs	r5, r5
 8001d78:	426d      	negs	r5, r5
 8001d7a:	1964      	adds	r4, r4, r5
 8001d7c:	001d      	movs	r5, r3
 8001d7e:	0223      	lsls	r3, r4, #8
 8001d80:	d400      	bmi.n	8001d84 <__aeabi_dsub+0x130>
 8001d82:	e140      	b.n	8002006 <__aeabi_dsub+0x3b2>
 8001d84:	4a88      	ldr	r2, [pc, #544]	@ (8001fa8 <__aeabi_dsub+0x354>)
 8001d86:	3701      	adds	r7, #1
 8001d88:	4297      	cmp	r7, r2
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x13a>
 8001d8c:	e101      	b.n	8001f92 <__aeabi_dsub+0x33e>
 8001d8e:	2601      	movs	r6, #1
 8001d90:	4643      	mov	r3, r8
 8001d92:	4986      	ldr	r1, [pc, #536]	@ (8001fac <__aeabi_dsub+0x358>)
 8001d94:	08ed      	lsrs	r5, r5, #3
 8001d96:	4021      	ands	r1, r4
 8001d98:	074a      	lsls	r2, r1, #29
 8001d9a:	432a      	orrs	r2, r5
 8001d9c:	057c      	lsls	r4, r7, #21
 8001d9e:	024d      	lsls	r5, r1, #9
 8001da0:	0b2d      	lsrs	r5, r5, #12
 8001da2:	0d64      	lsrs	r4, r4, #21
 8001da4:	401e      	ands	r6, r3
 8001da6:	0524      	lsls	r4, r4, #20
 8001da8:	432c      	orrs	r4, r5
 8001daa:	07f6      	lsls	r6, r6, #31
 8001dac:	4334      	orrs	r4, r6
 8001dae:	0010      	movs	r0, r2
 8001db0:	0021      	movs	r1, r4
 8001db2:	b005      	add	sp, #20
 8001db4:	bcf0      	pop	{r4, r5, r6, r7}
 8001db6:	46bb      	mov	fp, r7
 8001db8:	46b2      	mov	sl, r6
 8001dba:	46a9      	mov	r9, r5
 8001dbc:	46a0      	mov	r8, r4
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc0:	2d00      	cmp	r5, #0
 8001dc2:	dc00      	bgt.n	8001dc6 <__aeabi_dsub+0x172>
 8001dc4:	e2d0      	b.n	8002368 <__aeabi_dsub+0x714>
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	2900      	cmp	r1, #0
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x17a>
 8001dcc:	e0d4      	b.n	8001f78 <__aeabi_dsub+0x324>
 8001dce:	4661      	mov	r1, ip
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4319      	orrs	r1, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x184>
 8001dd6:	e12b      	b.n	8002030 <__aeabi_dsub+0x3dc>
 8001dd8:	1e69      	subs	r1, r5, #1
 8001dda:	2d01      	cmp	r5, #1
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dsub+0x18c>
 8001dde:	e1d9      	b.n	8002194 <__aeabi_dsub+0x540>
 8001de0:	4295      	cmp	r5, r2
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x192>
 8001de4:	e10a      	b.n	8001ffc <__aeabi_dsub+0x3a8>
 8001de6:	2501      	movs	r5, #1
 8001de8:	2938      	cmp	r1, #56	@ 0x38
 8001dea:	dc17      	bgt.n	8001e1c <__aeabi_dsub+0x1c8>
 8001dec:	468a      	mov	sl, r1
 8001dee:	4653      	mov	r3, sl
 8001df0:	2b1f      	cmp	r3, #31
 8001df2:	dd00      	ble.n	8001df6 <__aeabi_dsub+0x1a2>
 8001df4:	e1e7      	b.n	80021c6 <__aeabi_dsub+0x572>
 8001df6:	2220      	movs	r2, #32
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	9b02      	ldr	r3, [sp, #8]
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	001d      	movs	r5, r3
 8001e02:	4653      	mov	r3, sl
 8001e04:	40d9      	lsrs	r1, r3
 8001e06:	4663      	mov	r3, ip
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	430d      	orrs	r5, r1
 8001e0e:	1e51      	subs	r1, r2, #1
 8001e10:	418a      	sbcs	r2, r1
 8001e12:	4653      	mov	r3, sl
 8001e14:	4315      	orrs	r5, r2
 8001e16:	9a02      	ldr	r2, [sp, #8]
 8001e18:	40da      	lsrs	r2, r3
 8001e1a:	18a4      	adds	r4, r4, r2
 8001e1c:	182d      	adds	r5, r5, r0
 8001e1e:	4285      	cmp	r5, r0
 8001e20:	4180      	sbcs	r0, r0
 8001e22:	4240      	negs	r0, r0
 8001e24:	1824      	adds	r4, r4, r0
 8001e26:	0223      	lsls	r3, r4, #8
 8001e28:	d400      	bmi.n	8001e2c <__aeabi_dsub+0x1d8>
 8001e2a:	e0b6      	b.n	8001f9a <__aeabi_dsub+0x346>
 8001e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa8 <__aeabi_dsub+0x354>)
 8001e2e:	3701      	adds	r7, #1
 8001e30:	429f      	cmp	r7, r3
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dsub+0x1e2>
 8001e34:	e0ad      	b.n	8001f92 <__aeabi_dsub+0x33e>
 8001e36:	2101      	movs	r1, #1
 8001e38:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <__aeabi_dsub+0x358>)
 8001e3a:	086a      	lsrs	r2, r5, #1
 8001e3c:	401c      	ands	r4, r3
 8001e3e:	4029      	ands	r1, r5
 8001e40:	430a      	orrs	r2, r1
 8001e42:	07e5      	lsls	r5, r4, #31
 8001e44:	4315      	orrs	r5, r2
 8001e46:	0864      	lsrs	r4, r4, #1
 8001e48:	e78d      	b.n	8001d66 <__aeabi_dsub+0x112>
 8001e4a:	4a59      	ldr	r2, [pc, #356]	@ (8001fb0 <__aeabi_dsub+0x35c>)
 8001e4c:	9b02      	ldr	r3, [sp, #8]
 8001e4e:	4692      	mov	sl, r2
 8001e50:	4662      	mov	r2, ip
 8001e52:	44ba      	add	sl, r7
 8001e54:	431a      	orrs	r2, r3
 8001e56:	d02c      	beq.n	8001eb2 <__aeabi_dsub+0x25e>
 8001e58:	428e      	cmp	r6, r1
 8001e5a:	d02e      	beq.n	8001eba <__aeabi_dsub+0x266>
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d060      	beq.n	8001f24 <__aeabi_dsub+0x2d0>
 8001e62:	2f00      	cmp	r7, #0
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x214>
 8001e66:	e0db      	b.n	8002020 <__aeabi_dsub+0x3cc>
 8001e68:	4663      	mov	r3, ip
 8001e6a:	000e      	movs	r6, r1
 8001e6c:	9c02      	ldr	r4, [sp, #8]
 8001e6e:	08d8      	lsrs	r0, r3, #3
 8001e70:	0762      	lsls	r2, r4, #29
 8001e72:	4302      	orrs	r2, r0
 8001e74:	08e4      	lsrs	r4, r4, #3
 8001e76:	0013      	movs	r3, r2
 8001e78:	4323      	orrs	r3, r4
 8001e7a:	d100      	bne.n	8001e7e <__aeabi_dsub+0x22a>
 8001e7c:	e254      	b.n	8002328 <__aeabi_dsub+0x6d4>
 8001e7e:	2580      	movs	r5, #128	@ 0x80
 8001e80:	032d      	lsls	r5, r5, #12
 8001e82:	4325      	orrs	r5, r4
 8001e84:	032d      	lsls	r5, r5, #12
 8001e86:	4c48      	ldr	r4, [pc, #288]	@ (8001fa8 <__aeabi_dsub+0x354>)
 8001e88:	0b2d      	lsrs	r5, r5, #12
 8001e8a:	e78c      	b.n	8001da6 <__aeabi_dsub+0x152>
 8001e8c:	4661      	mov	r1, ip
 8001e8e:	9b02      	ldr	r3, [sp, #8]
 8001e90:	4319      	orrs	r1, r3
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x242>
 8001e94:	e0cc      	b.n	8002030 <__aeabi_dsub+0x3dc>
 8001e96:	0029      	movs	r1, r5
 8001e98:	3901      	subs	r1, #1
 8001e9a:	2d01      	cmp	r5, #1
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x24c>
 8001e9e:	e188      	b.n	80021b2 <__aeabi_dsub+0x55e>
 8001ea0:	4295      	cmp	r5, r2
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x252>
 8001ea4:	e0aa      	b.n	8001ffc <__aeabi_dsub+0x3a8>
 8001ea6:	2501      	movs	r5, #1
 8001ea8:	2938      	cmp	r1, #56	@ 0x38
 8001eaa:	dd00      	ble.n	8001eae <__aeabi_dsub+0x25a>
 8001eac:	e72f      	b.n	8001d0e <__aeabi_dsub+0xba>
 8001eae:	468a      	mov	sl, r1
 8001eb0:	e718      	b.n	8001ce4 <__aeabi_dsub+0x90>
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4051      	eors	r1, r2
 8001eb6:	428e      	cmp	r6, r1
 8001eb8:	d1d0      	bne.n	8001e5c <__aeabi_dsub+0x208>
 8001eba:	4653      	mov	r3, sl
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x26e>
 8001ec0:	e0be      	b.n	8002040 <__aeabi_dsub+0x3ec>
 8001ec2:	2f00      	cmp	r7, #0
 8001ec4:	d000      	beq.n	8001ec8 <__aeabi_dsub+0x274>
 8001ec6:	e138      	b.n	800213a <__aeabi_dsub+0x4e6>
 8001ec8:	46ca      	mov	sl, r9
 8001eca:	0022      	movs	r2, r4
 8001ecc:	4302      	orrs	r2, r0
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x27e>
 8001ed0:	e1e2      	b.n	8002298 <__aeabi_dsub+0x644>
 8001ed2:	4653      	mov	r3, sl
 8001ed4:	1e59      	subs	r1, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x288>
 8001eda:	e20d      	b.n	80022f8 <__aeabi_dsub+0x6a4>
 8001edc:	4a32      	ldr	r2, [pc, #200]	@ (8001fa8 <__aeabi_dsub+0x354>)
 8001ede:	4592      	cmp	sl, r2
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x290>
 8001ee2:	e1d2      	b.n	800228a <__aeabi_dsub+0x636>
 8001ee4:	2701      	movs	r7, #1
 8001ee6:	2938      	cmp	r1, #56	@ 0x38
 8001ee8:	dc13      	bgt.n	8001f12 <__aeabi_dsub+0x2be>
 8001eea:	291f      	cmp	r1, #31
 8001eec:	dd00      	ble.n	8001ef0 <__aeabi_dsub+0x29c>
 8001eee:	e1ee      	b.n	80022ce <__aeabi_dsub+0x67a>
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	9b02      	ldr	r3, [sp, #8]
 8001ef4:	1a52      	subs	r2, r2, r1
 8001ef6:	0025      	movs	r5, r4
 8001ef8:	0007      	movs	r7, r0
 8001efa:	469a      	mov	sl, r3
 8001efc:	40cc      	lsrs	r4, r1
 8001efe:	4090      	lsls	r0, r2
 8001f00:	4095      	lsls	r5, r2
 8001f02:	40cf      	lsrs	r7, r1
 8001f04:	44a2      	add	sl, r4
 8001f06:	1e42      	subs	r2, r0, #1
 8001f08:	4190      	sbcs	r0, r2
 8001f0a:	4653      	mov	r3, sl
 8001f0c:	432f      	orrs	r7, r5
 8001f0e:	4307      	orrs	r7, r0
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	003d      	movs	r5, r7
 8001f14:	4465      	add	r5, ip
 8001f16:	4565      	cmp	r5, ip
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	9b02      	ldr	r3, [sp, #8]
 8001f1c:	4252      	negs	r2, r2
 8001f1e:	464f      	mov	r7, r9
 8001f20:	18d4      	adds	r4, r2, r3
 8001f22:	e780      	b.n	8001e26 <__aeabi_dsub+0x1d2>
 8001f24:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <__aeabi_dsub+0x360>)
 8001f26:	1c7d      	adds	r5, r7, #1
 8001f28:	4215      	tst	r5, r2
 8001f2a:	d000      	beq.n	8001f2e <__aeabi_dsub+0x2da>
 8001f2c:	e0aa      	b.n	8002084 <__aeabi_dsub+0x430>
 8001f2e:	4662      	mov	r2, ip
 8001f30:	0025      	movs	r5, r4
 8001f32:	9b02      	ldr	r3, [sp, #8]
 8001f34:	4305      	orrs	r5, r0
 8001f36:	431a      	orrs	r2, r3
 8001f38:	2f00      	cmp	r7, #0
 8001f3a:	d000      	beq.n	8001f3e <__aeabi_dsub+0x2ea>
 8001f3c:	e0f5      	b.n	800212a <__aeabi_dsub+0x4d6>
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x2f0>
 8001f42:	e16b      	b.n	800221c <__aeabi_dsub+0x5c8>
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x2f6>
 8001f48:	e152      	b.n	80021f0 <__aeabi_dsub+0x59c>
 8001f4a:	4663      	mov	r3, ip
 8001f4c:	1ac5      	subs	r5, r0, r3
 8001f4e:	9b02      	ldr	r3, [sp, #8]
 8001f50:	1ae2      	subs	r2, r4, r3
 8001f52:	42a8      	cmp	r0, r5
 8001f54:	419b      	sbcs	r3, r3
 8001f56:	425b      	negs	r3, r3
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	021a      	lsls	r2, r3, #8
 8001f5c:	d400      	bmi.n	8001f60 <__aeabi_dsub+0x30c>
 8001f5e:	e1d5      	b.n	800230c <__aeabi_dsub+0x6b8>
 8001f60:	4663      	mov	r3, ip
 8001f62:	1a1d      	subs	r5, r3, r0
 8001f64:	45ac      	cmp	ip, r5
 8001f66:	4192      	sbcs	r2, r2
 8001f68:	2601      	movs	r6, #1
 8001f6a:	9b02      	ldr	r3, [sp, #8]
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	1b1c      	subs	r4, r3, r4
 8001f70:	4688      	mov	r8, r1
 8001f72:	1aa4      	subs	r4, r4, r2
 8001f74:	400e      	ands	r6, r1
 8001f76:	e6f6      	b.n	8001d66 <__aeabi_dsub+0x112>
 8001f78:	4297      	cmp	r7, r2
 8001f7a:	d03f      	beq.n	8001ffc <__aeabi_dsub+0x3a8>
 8001f7c:	4652      	mov	r2, sl
 8001f7e:	2501      	movs	r5, #1
 8001f80:	2a38      	cmp	r2, #56	@ 0x38
 8001f82:	dd00      	ble.n	8001f86 <__aeabi_dsub+0x332>
 8001f84:	e74a      	b.n	8001e1c <__aeabi_dsub+0x1c8>
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	9b02      	ldr	r3, [sp, #8]
 8001f8a:	0412      	lsls	r2, r2, #16
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	e72d      	b.n	8001dee <__aeabi_dsub+0x19a>
 8001f92:	003c      	movs	r4, r7
 8001f94:	2500      	movs	r5, #0
 8001f96:	2200      	movs	r2, #0
 8001f98:	e705      	b.n	8001da6 <__aeabi_dsub+0x152>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	402b      	ands	r3, r5
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d000      	beq.n	8001fa4 <__aeabi_dsub+0x350>
 8001fa2:	e6e2      	b.n	8001d6a <__aeabi_dsub+0x116>
 8001fa4:	e06b      	b.n	800207e <__aeabi_dsub+0x42a>
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	000007ff 	.word	0x000007ff
 8001fac:	ff7fffff 	.word	0xff7fffff
 8001fb0:	fffff801 	.word	0xfffff801
 8001fb4:	000007fe 	.word	0x000007fe
 8001fb8:	0028      	movs	r0, r5
 8001fba:	f000 fb63 	bl	8002684 <__clzsi2>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	3318      	adds	r3, #24
 8001fc2:	2b1f      	cmp	r3, #31
 8001fc4:	dc00      	bgt.n	8001fc8 <__aeabi_dsub+0x374>
 8001fc6:	e6b4      	b.n	8001d32 <__aeabi_dsub+0xde>
 8001fc8:	002a      	movs	r2, r5
 8001fca:	3808      	subs	r0, #8
 8001fcc:	4082      	lsls	r2, r0
 8001fce:	429f      	cmp	r7, r3
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dsub+0x380>
 8001fd2:	e0b9      	b.n	8002148 <__aeabi_dsub+0x4f4>
 8001fd4:	1bdb      	subs	r3, r3, r7
 8001fd6:	1c58      	adds	r0, r3, #1
 8001fd8:	281f      	cmp	r0, #31
 8001fda:	dc00      	bgt.n	8001fde <__aeabi_dsub+0x38a>
 8001fdc:	e1a0      	b.n	8002320 <__aeabi_dsub+0x6cc>
 8001fde:	0015      	movs	r5, r2
 8001fe0:	3b1f      	subs	r3, #31
 8001fe2:	40dd      	lsrs	r5, r3
 8001fe4:	2820      	cmp	r0, #32
 8001fe6:	d005      	beq.n	8001ff4 <__aeabi_dsub+0x3a0>
 8001fe8:	2340      	movs	r3, #64	@ 0x40
 8001fea:	1a1b      	subs	r3, r3, r0
 8001fec:	409a      	lsls	r2, r3
 8001fee:	1e53      	subs	r3, r2, #1
 8001ff0:	419a      	sbcs	r2, r3
 8001ff2:	4315      	orrs	r5, r2
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	2700      	movs	r7, #0
 8001ff8:	402b      	ands	r3, r5
 8001ffa:	e7d0      	b.n	8001f9e <__aeabi_dsub+0x34a>
 8001ffc:	08c0      	lsrs	r0, r0, #3
 8001ffe:	0762      	lsls	r2, r4, #29
 8002000:	4302      	orrs	r2, r0
 8002002:	08e4      	lsrs	r4, r4, #3
 8002004:	e737      	b.n	8001e76 <__aeabi_dsub+0x222>
 8002006:	08ea      	lsrs	r2, r5, #3
 8002008:	0763      	lsls	r3, r4, #29
 800200a:	431a      	orrs	r2, r3
 800200c:	4bd3      	ldr	r3, [pc, #844]	@ (800235c <__aeabi_dsub+0x708>)
 800200e:	08e4      	lsrs	r4, r4, #3
 8002010:	429f      	cmp	r7, r3
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x3c2>
 8002014:	e72f      	b.n	8001e76 <__aeabi_dsub+0x222>
 8002016:	0324      	lsls	r4, r4, #12
 8002018:	0b25      	lsrs	r5, r4, #12
 800201a:	057c      	lsls	r4, r7, #21
 800201c:	0d64      	lsrs	r4, r4, #21
 800201e:	e6c2      	b.n	8001da6 <__aeabi_dsub+0x152>
 8002020:	46ca      	mov	sl, r9
 8002022:	0022      	movs	r2, r4
 8002024:	4302      	orrs	r2, r0
 8002026:	d158      	bne.n	80020da <__aeabi_dsub+0x486>
 8002028:	4663      	mov	r3, ip
 800202a:	000e      	movs	r6, r1
 800202c:	9c02      	ldr	r4, [sp, #8]
 800202e:	9303      	str	r3, [sp, #12]
 8002030:	9b03      	ldr	r3, [sp, #12]
 8002032:	4657      	mov	r7, sl
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	e7e7      	b.n	8002008 <__aeabi_dsub+0x3b4>
 8002038:	4cc9      	ldr	r4, [pc, #804]	@ (8002360 <__aeabi_dsub+0x70c>)
 800203a:	1aff      	subs	r7, r7, r3
 800203c:	4014      	ands	r4, r2
 800203e:	e692      	b.n	8001d66 <__aeabi_dsub+0x112>
 8002040:	4dc8      	ldr	r5, [pc, #800]	@ (8002364 <__aeabi_dsub+0x710>)
 8002042:	1c7a      	adds	r2, r7, #1
 8002044:	422a      	tst	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x3f6>
 8002048:	e084      	b.n	8002154 <__aeabi_dsub+0x500>
 800204a:	0022      	movs	r2, r4
 800204c:	4302      	orrs	r2, r0
 800204e:	2f00      	cmp	r7, #0
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x400>
 8002052:	e0ef      	b.n	8002234 <__aeabi_dsub+0x5e0>
 8002054:	2a00      	cmp	r2, #0
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x406>
 8002058:	e0e5      	b.n	8002226 <__aeabi_dsub+0x5d2>
 800205a:	4662      	mov	r2, ip
 800205c:	9902      	ldr	r1, [sp, #8]
 800205e:	430a      	orrs	r2, r1
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x410>
 8002062:	e0c5      	b.n	80021f0 <__aeabi_dsub+0x59c>
 8002064:	4663      	mov	r3, ip
 8002066:	18c5      	adds	r5, r0, r3
 8002068:	468c      	mov	ip, r1
 800206a:	4285      	cmp	r5, r0
 800206c:	4180      	sbcs	r0, r0
 800206e:	4464      	add	r4, ip
 8002070:	4240      	negs	r0, r0
 8002072:	1824      	adds	r4, r4, r0
 8002074:	0223      	lsls	r3, r4, #8
 8002076:	d502      	bpl.n	800207e <__aeabi_dsub+0x42a>
 8002078:	4bb9      	ldr	r3, [pc, #740]	@ (8002360 <__aeabi_dsub+0x70c>)
 800207a:	3701      	adds	r7, #1
 800207c:	401c      	ands	r4, r3
 800207e:	46ba      	mov	sl, r7
 8002080:	9503      	str	r5, [sp, #12]
 8002082:	e7d5      	b.n	8002030 <__aeabi_dsub+0x3dc>
 8002084:	4662      	mov	r2, ip
 8002086:	1a85      	subs	r5, r0, r2
 8002088:	42a8      	cmp	r0, r5
 800208a:	4192      	sbcs	r2, r2
 800208c:	4252      	negs	r2, r2
 800208e:	4691      	mov	r9, r2
 8002090:	9b02      	ldr	r3, [sp, #8]
 8002092:	1ae3      	subs	r3, r4, r3
 8002094:	001a      	movs	r2, r3
 8002096:	464b      	mov	r3, r9
 8002098:	1ad2      	subs	r2, r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	4691      	mov	r9, r2
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	d46c      	bmi.n	800217c <__aeabi_dsub+0x528>
 80020a2:	464a      	mov	r2, r9
 80020a4:	464c      	mov	r4, r9
 80020a6:	432a      	orrs	r2, r5
 80020a8:	d000      	beq.n	80020ac <__aeabi_dsub+0x458>
 80020aa:	e63a      	b.n	8001d22 <__aeabi_dsub+0xce>
 80020ac:	2600      	movs	r6, #0
 80020ae:	2400      	movs	r4, #0
 80020b0:	2500      	movs	r5, #0
 80020b2:	e678      	b.n	8001da6 <__aeabi_dsub+0x152>
 80020b4:	9902      	ldr	r1, [sp, #8]
 80020b6:	4653      	mov	r3, sl
 80020b8:	000d      	movs	r5, r1
 80020ba:	3a20      	subs	r2, #32
 80020bc:	40d5      	lsrs	r5, r2
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d006      	beq.n	80020d0 <__aeabi_dsub+0x47c>
 80020c2:	2240      	movs	r2, #64	@ 0x40
 80020c4:	1ad2      	subs	r2, r2, r3
 80020c6:	000b      	movs	r3, r1
 80020c8:	4093      	lsls	r3, r2
 80020ca:	4662      	mov	r2, ip
 80020cc:	431a      	orrs	r2, r3
 80020ce:	4693      	mov	fp, r2
 80020d0:	465b      	mov	r3, fp
 80020d2:	1e5a      	subs	r2, r3, #1
 80020d4:	4193      	sbcs	r3, r2
 80020d6:	431d      	orrs	r5, r3
 80020d8:	e619      	b.n	8001d0e <__aeabi_dsub+0xba>
 80020da:	4653      	mov	r3, sl
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x490>
 80020e2:	e0c6      	b.n	8002272 <__aeabi_dsub+0x61e>
 80020e4:	4e9d      	ldr	r6, [pc, #628]	@ (800235c <__aeabi_dsub+0x708>)
 80020e6:	45b2      	cmp	sl, r6
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x498>
 80020ea:	e6bd      	b.n	8001e68 <__aeabi_dsub+0x214>
 80020ec:	4688      	mov	r8, r1
 80020ee:	000e      	movs	r6, r1
 80020f0:	2501      	movs	r5, #1
 80020f2:	2a38      	cmp	r2, #56	@ 0x38
 80020f4:	dc10      	bgt.n	8002118 <__aeabi_dsub+0x4c4>
 80020f6:	2a1f      	cmp	r2, #31
 80020f8:	dc7f      	bgt.n	80021fa <__aeabi_dsub+0x5a6>
 80020fa:	2120      	movs	r1, #32
 80020fc:	0025      	movs	r5, r4
 80020fe:	1a89      	subs	r1, r1, r2
 8002100:	0007      	movs	r7, r0
 8002102:	4088      	lsls	r0, r1
 8002104:	408d      	lsls	r5, r1
 8002106:	40d7      	lsrs	r7, r2
 8002108:	40d4      	lsrs	r4, r2
 800210a:	1e41      	subs	r1, r0, #1
 800210c:	4188      	sbcs	r0, r1
 800210e:	9b02      	ldr	r3, [sp, #8]
 8002110:	433d      	orrs	r5, r7
 8002112:	1b1b      	subs	r3, r3, r4
 8002114:	4305      	orrs	r5, r0
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	4662      	mov	r2, ip
 800211a:	1b55      	subs	r5, r2, r5
 800211c:	45ac      	cmp	ip, r5
 800211e:	4192      	sbcs	r2, r2
 8002120:	9b02      	ldr	r3, [sp, #8]
 8002122:	4252      	negs	r2, r2
 8002124:	464f      	mov	r7, r9
 8002126:	1a9c      	subs	r4, r3, r2
 8002128:	e5f6      	b.n	8001d18 <__aeabi_dsub+0xc4>
 800212a:	2d00      	cmp	r5, #0
 800212c:	d000      	beq.n	8002130 <__aeabi_dsub+0x4dc>
 800212e:	e0b7      	b.n	80022a0 <__aeabi_dsub+0x64c>
 8002130:	2a00      	cmp	r2, #0
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x4e2>
 8002134:	e0f0      	b.n	8002318 <__aeabi_dsub+0x6c4>
 8002136:	2601      	movs	r6, #1
 8002138:	400e      	ands	r6, r1
 800213a:	4663      	mov	r3, ip
 800213c:	9802      	ldr	r0, [sp, #8]
 800213e:	08d9      	lsrs	r1, r3, #3
 8002140:	0742      	lsls	r2, r0, #29
 8002142:	430a      	orrs	r2, r1
 8002144:	08c4      	lsrs	r4, r0, #3
 8002146:	e696      	b.n	8001e76 <__aeabi_dsub+0x222>
 8002148:	4c85      	ldr	r4, [pc, #532]	@ (8002360 <__aeabi_dsub+0x70c>)
 800214a:	1aff      	subs	r7, r7, r3
 800214c:	4014      	ands	r4, r2
 800214e:	0762      	lsls	r2, r4, #29
 8002150:	08e4      	lsrs	r4, r4, #3
 8002152:	e760      	b.n	8002016 <__aeabi_dsub+0x3c2>
 8002154:	4981      	ldr	r1, [pc, #516]	@ (800235c <__aeabi_dsub+0x708>)
 8002156:	428a      	cmp	r2, r1
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x508>
 800215a:	e0c9      	b.n	80022f0 <__aeabi_dsub+0x69c>
 800215c:	4663      	mov	r3, ip
 800215e:	18c1      	adds	r1, r0, r3
 8002160:	4281      	cmp	r1, r0
 8002162:	4180      	sbcs	r0, r0
 8002164:	9b02      	ldr	r3, [sp, #8]
 8002166:	4240      	negs	r0, r0
 8002168:	18e3      	adds	r3, r4, r3
 800216a:	181b      	adds	r3, r3, r0
 800216c:	07dd      	lsls	r5, r3, #31
 800216e:	085c      	lsrs	r4, r3, #1
 8002170:	2307      	movs	r3, #7
 8002172:	0849      	lsrs	r1, r1, #1
 8002174:	430d      	orrs	r5, r1
 8002176:	0017      	movs	r7, r2
 8002178:	402b      	ands	r3, r5
 800217a:	e710      	b.n	8001f9e <__aeabi_dsub+0x34a>
 800217c:	4663      	mov	r3, ip
 800217e:	1a1d      	subs	r5, r3, r0
 8002180:	45ac      	cmp	ip, r5
 8002182:	4192      	sbcs	r2, r2
 8002184:	2601      	movs	r6, #1
 8002186:	9b02      	ldr	r3, [sp, #8]
 8002188:	4252      	negs	r2, r2
 800218a:	1b1c      	subs	r4, r3, r4
 800218c:	4688      	mov	r8, r1
 800218e:	1aa4      	subs	r4, r4, r2
 8002190:	400e      	ands	r6, r1
 8002192:	e5c6      	b.n	8001d22 <__aeabi_dsub+0xce>
 8002194:	4663      	mov	r3, ip
 8002196:	18c5      	adds	r5, r0, r3
 8002198:	9b02      	ldr	r3, [sp, #8]
 800219a:	4285      	cmp	r5, r0
 800219c:	4180      	sbcs	r0, r0
 800219e:	469c      	mov	ip, r3
 80021a0:	4240      	negs	r0, r0
 80021a2:	4464      	add	r4, ip
 80021a4:	1824      	adds	r4, r4, r0
 80021a6:	2701      	movs	r7, #1
 80021a8:	0223      	lsls	r3, r4, #8
 80021aa:	d400      	bmi.n	80021ae <__aeabi_dsub+0x55a>
 80021ac:	e6f5      	b.n	8001f9a <__aeabi_dsub+0x346>
 80021ae:	2702      	movs	r7, #2
 80021b0:	e641      	b.n	8001e36 <__aeabi_dsub+0x1e2>
 80021b2:	4663      	mov	r3, ip
 80021b4:	1ac5      	subs	r5, r0, r3
 80021b6:	42a8      	cmp	r0, r5
 80021b8:	4180      	sbcs	r0, r0
 80021ba:	9b02      	ldr	r3, [sp, #8]
 80021bc:	4240      	negs	r0, r0
 80021be:	1ae4      	subs	r4, r4, r3
 80021c0:	2701      	movs	r7, #1
 80021c2:	1a24      	subs	r4, r4, r0
 80021c4:	e5a8      	b.n	8001d18 <__aeabi_dsub+0xc4>
 80021c6:	9d02      	ldr	r5, [sp, #8]
 80021c8:	4652      	mov	r2, sl
 80021ca:	002b      	movs	r3, r5
 80021cc:	3a20      	subs	r2, #32
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	4653      	mov	r3, sl
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d006      	beq.n	80021e6 <__aeabi_dsub+0x592>
 80021d8:	2240      	movs	r2, #64	@ 0x40
 80021da:	1ad2      	subs	r2, r2, r3
 80021dc:	002b      	movs	r3, r5
 80021de:	4093      	lsls	r3, r2
 80021e0:	4662      	mov	r2, ip
 80021e2:	431a      	orrs	r2, r3
 80021e4:	4693      	mov	fp, r2
 80021e6:	465d      	mov	r5, fp
 80021e8:	1e6b      	subs	r3, r5, #1
 80021ea:	419d      	sbcs	r5, r3
 80021ec:	430d      	orrs	r5, r1
 80021ee:	e615      	b.n	8001e1c <__aeabi_dsub+0x1c8>
 80021f0:	0762      	lsls	r2, r4, #29
 80021f2:	08c0      	lsrs	r0, r0, #3
 80021f4:	4302      	orrs	r2, r0
 80021f6:	08e4      	lsrs	r4, r4, #3
 80021f8:	e70d      	b.n	8002016 <__aeabi_dsub+0x3c2>
 80021fa:	0011      	movs	r1, r2
 80021fc:	0027      	movs	r7, r4
 80021fe:	3920      	subs	r1, #32
 8002200:	40cf      	lsrs	r7, r1
 8002202:	2a20      	cmp	r2, #32
 8002204:	d005      	beq.n	8002212 <__aeabi_dsub+0x5be>
 8002206:	2140      	movs	r1, #64	@ 0x40
 8002208:	1a8a      	subs	r2, r1, r2
 800220a:	4094      	lsls	r4, r2
 800220c:	0025      	movs	r5, r4
 800220e:	4305      	orrs	r5, r0
 8002210:	9503      	str	r5, [sp, #12]
 8002212:	9d03      	ldr	r5, [sp, #12]
 8002214:	1e6a      	subs	r2, r5, #1
 8002216:	4195      	sbcs	r5, r2
 8002218:	433d      	orrs	r5, r7
 800221a:	e77d      	b.n	8002118 <__aeabi_dsub+0x4c4>
 800221c:	2a00      	cmp	r2, #0
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x5ce>
 8002220:	e744      	b.n	80020ac <__aeabi_dsub+0x458>
 8002222:	2601      	movs	r6, #1
 8002224:	400e      	ands	r6, r1
 8002226:	4663      	mov	r3, ip
 8002228:	08d9      	lsrs	r1, r3, #3
 800222a:	9b02      	ldr	r3, [sp, #8]
 800222c:	075a      	lsls	r2, r3, #29
 800222e:	430a      	orrs	r2, r1
 8002230:	08dc      	lsrs	r4, r3, #3
 8002232:	e6f0      	b.n	8002016 <__aeabi_dsub+0x3c2>
 8002234:	2a00      	cmp	r2, #0
 8002236:	d028      	beq.n	800228a <__aeabi_dsub+0x636>
 8002238:	4662      	mov	r2, ip
 800223a:	9f02      	ldr	r7, [sp, #8]
 800223c:	08c0      	lsrs	r0, r0, #3
 800223e:	433a      	orrs	r2, r7
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x5f0>
 8002242:	e6dc      	b.n	8001ffe <__aeabi_dsub+0x3aa>
 8002244:	0762      	lsls	r2, r4, #29
 8002246:	4310      	orrs	r0, r2
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	08e4      	lsrs	r4, r4, #3
 800224c:	0312      	lsls	r2, r2, #12
 800224e:	4214      	tst	r4, r2
 8002250:	d009      	beq.n	8002266 <__aeabi_dsub+0x612>
 8002252:	08fd      	lsrs	r5, r7, #3
 8002254:	4215      	tst	r5, r2
 8002256:	d106      	bne.n	8002266 <__aeabi_dsub+0x612>
 8002258:	4663      	mov	r3, ip
 800225a:	2601      	movs	r6, #1
 800225c:	002c      	movs	r4, r5
 800225e:	08d8      	lsrs	r0, r3, #3
 8002260:	077b      	lsls	r3, r7, #29
 8002262:	4318      	orrs	r0, r3
 8002264:	400e      	ands	r6, r1
 8002266:	0f42      	lsrs	r2, r0, #29
 8002268:	00c0      	lsls	r0, r0, #3
 800226a:	08c0      	lsrs	r0, r0, #3
 800226c:	0752      	lsls	r2, r2, #29
 800226e:	4302      	orrs	r2, r0
 8002270:	e601      	b.n	8001e76 <__aeabi_dsub+0x222>
 8002272:	4663      	mov	r3, ip
 8002274:	1a1d      	subs	r5, r3, r0
 8002276:	45ac      	cmp	ip, r5
 8002278:	4192      	sbcs	r2, r2
 800227a:	9b02      	ldr	r3, [sp, #8]
 800227c:	4252      	negs	r2, r2
 800227e:	1b1c      	subs	r4, r3, r4
 8002280:	000e      	movs	r6, r1
 8002282:	4688      	mov	r8, r1
 8002284:	2701      	movs	r7, #1
 8002286:	1aa4      	subs	r4, r4, r2
 8002288:	e546      	b.n	8001d18 <__aeabi_dsub+0xc4>
 800228a:	4663      	mov	r3, ip
 800228c:	08d9      	lsrs	r1, r3, #3
 800228e:	9b02      	ldr	r3, [sp, #8]
 8002290:	075a      	lsls	r2, r3, #29
 8002292:	430a      	orrs	r2, r1
 8002294:	08dc      	lsrs	r4, r3, #3
 8002296:	e5ee      	b.n	8001e76 <__aeabi_dsub+0x222>
 8002298:	4663      	mov	r3, ip
 800229a:	9c02      	ldr	r4, [sp, #8]
 800229c:	9303      	str	r3, [sp, #12]
 800229e:	e6c7      	b.n	8002030 <__aeabi_dsub+0x3dc>
 80022a0:	08c0      	lsrs	r0, r0, #3
 80022a2:	2a00      	cmp	r2, #0
 80022a4:	d100      	bne.n	80022a8 <__aeabi_dsub+0x654>
 80022a6:	e6aa      	b.n	8001ffe <__aeabi_dsub+0x3aa>
 80022a8:	0762      	lsls	r2, r4, #29
 80022aa:	4310      	orrs	r0, r2
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	08e4      	lsrs	r4, r4, #3
 80022b0:	0312      	lsls	r2, r2, #12
 80022b2:	4214      	tst	r4, r2
 80022b4:	d0d7      	beq.n	8002266 <__aeabi_dsub+0x612>
 80022b6:	9f02      	ldr	r7, [sp, #8]
 80022b8:	08fd      	lsrs	r5, r7, #3
 80022ba:	4215      	tst	r5, r2
 80022bc:	d1d3      	bne.n	8002266 <__aeabi_dsub+0x612>
 80022be:	4663      	mov	r3, ip
 80022c0:	2601      	movs	r6, #1
 80022c2:	08d8      	lsrs	r0, r3, #3
 80022c4:	077b      	lsls	r3, r7, #29
 80022c6:	002c      	movs	r4, r5
 80022c8:	4318      	orrs	r0, r3
 80022ca:	400e      	ands	r6, r1
 80022cc:	e7cb      	b.n	8002266 <__aeabi_dsub+0x612>
 80022ce:	000a      	movs	r2, r1
 80022d0:	0027      	movs	r7, r4
 80022d2:	3a20      	subs	r2, #32
 80022d4:	40d7      	lsrs	r7, r2
 80022d6:	2920      	cmp	r1, #32
 80022d8:	d005      	beq.n	80022e6 <__aeabi_dsub+0x692>
 80022da:	2240      	movs	r2, #64	@ 0x40
 80022dc:	1a52      	subs	r2, r2, r1
 80022de:	4094      	lsls	r4, r2
 80022e0:	0025      	movs	r5, r4
 80022e2:	4305      	orrs	r5, r0
 80022e4:	9503      	str	r5, [sp, #12]
 80022e6:	9d03      	ldr	r5, [sp, #12]
 80022e8:	1e6a      	subs	r2, r5, #1
 80022ea:	4195      	sbcs	r5, r2
 80022ec:	432f      	orrs	r7, r5
 80022ee:	e610      	b.n	8001f12 <__aeabi_dsub+0x2be>
 80022f0:	0014      	movs	r4, r2
 80022f2:	2500      	movs	r5, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	e556      	b.n	8001da6 <__aeabi_dsub+0x152>
 80022f8:	9b02      	ldr	r3, [sp, #8]
 80022fa:	4460      	add	r0, ip
 80022fc:	4699      	mov	r9, r3
 80022fe:	4560      	cmp	r0, ip
 8002300:	4192      	sbcs	r2, r2
 8002302:	444c      	add	r4, r9
 8002304:	4252      	negs	r2, r2
 8002306:	0005      	movs	r5, r0
 8002308:	18a4      	adds	r4, r4, r2
 800230a:	e74c      	b.n	80021a6 <__aeabi_dsub+0x552>
 800230c:	001a      	movs	r2, r3
 800230e:	001c      	movs	r4, r3
 8002310:	432a      	orrs	r2, r5
 8002312:	d000      	beq.n	8002316 <__aeabi_dsub+0x6c2>
 8002314:	e6b3      	b.n	800207e <__aeabi_dsub+0x42a>
 8002316:	e6c9      	b.n	80020ac <__aeabi_dsub+0x458>
 8002318:	2480      	movs	r4, #128	@ 0x80
 800231a:	2600      	movs	r6, #0
 800231c:	0324      	lsls	r4, r4, #12
 800231e:	e5ae      	b.n	8001e7e <__aeabi_dsub+0x22a>
 8002320:	2120      	movs	r1, #32
 8002322:	2500      	movs	r5, #0
 8002324:	1a09      	subs	r1, r1, r0
 8002326:	e517      	b.n	8001d58 <__aeabi_dsub+0x104>
 8002328:	2200      	movs	r2, #0
 800232a:	2500      	movs	r5, #0
 800232c:	4c0b      	ldr	r4, [pc, #44]	@ (800235c <__aeabi_dsub+0x708>)
 800232e:	e53a      	b.n	8001da6 <__aeabi_dsub+0x152>
 8002330:	2d00      	cmp	r5, #0
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x6e2>
 8002334:	e5f6      	b.n	8001f24 <__aeabi_dsub+0x2d0>
 8002336:	464b      	mov	r3, r9
 8002338:	1bda      	subs	r2, r3, r7
 800233a:	4692      	mov	sl, r2
 800233c:	2f00      	cmp	r7, #0
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x6ee>
 8002340:	e66f      	b.n	8002022 <__aeabi_dsub+0x3ce>
 8002342:	2a38      	cmp	r2, #56	@ 0x38
 8002344:	dc05      	bgt.n	8002352 <__aeabi_dsub+0x6fe>
 8002346:	2680      	movs	r6, #128	@ 0x80
 8002348:	0436      	lsls	r6, r6, #16
 800234a:	4334      	orrs	r4, r6
 800234c:	4688      	mov	r8, r1
 800234e:	000e      	movs	r6, r1
 8002350:	e6d1      	b.n	80020f6 <__aeabi_dsub+0x4a2>
 8002352:	4688      	mov	r8, r1
 8002354:	000e      	movs	r6, r1
 8002356:	2501      	movs	r5, #1
 8002358:	e6de      	b.n	8002118 <__aeabi_dsub+0x4c4>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	ff7fffff 	.word	0xff7fffff
 8002364:	000007fe 	.word	0x000007fe
 8002368:	2d00      	cmp	r5, #0
 800236a:	d100      	bne.n	800236e <__aeabi_dsub+0x71a>
 800236c:	e668      	b.n	8002040 <__aeabi_dsub+0x3ec>
 800236e:	464b      	mov	r3, r9
 8002370:	1bd9      	subs	r1, r3, r7
 8002372:	2f00      	cmp	r7, #0
 8002374:	d101      	bne.n	800237a <__aeabi_dsub+0x726>
 8002376:	468a      	mov	sl, r1
 8002378:	e5a7      	b.n	8001eca <__aeabi_dsub+0x276>
 800237a:	2701      	movs	r7, #1
 800237c:	2938      	cmp	r1, #56	@ 0x38
 800237e:	dd00      	ble.n	8002382 <__aeabi_dsub+0x72e>
 8002380:	e5c7      	b.n	8001f12 <__aeabi_dsub+0x2be>
 8002382:	2280      	movs	r2, #128	@ 0x80
 8002384:	0412      	lsls	r2, r2, #16
 8002386:	4314      	orrs	r4, r2
 8002388:	e5af      	b.n	8001eea <__aeabi_dsub+0x296>
 800238a:	46c0      	nop			@ (mov r8, r8)

0800238c <__aeabi_dcmpun>:
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	46c6      	mov	lr, r8
 8002390:	031e      	lsls	r6, r3, #12
 8002392:	0b36      	lsrs	r6, r6, #12
 8002394:	46b0      	mov	r8, r6
 8002396:	4e0d      	ldr	r6, [pc, #52]	@ (80023cc <__aeabi_dcmpun+0x40>)
 8002398:	030c      	lsls	r4, r1, #12
 800239a:	004d      	lsls	r5, r1, #1
 800239c:	005f      	lsls	r7, r3, #1
 800239e:	b500      	push	{lr}
 80023a0:	0b24      	lsrs	r4, r4, #12
 80023a2:	0d6d      	lsrs	r5, r5, #21
 80023a4:	0d7f      	lsrs	r7, r7, #21
 80023a6:	42b5      	cmp	r5, r6
 80023a8:	d00b      	beq.n	80023c2 <__aeabi_dcmpun+0x36>
 80023aa:	4908      	ldr	r1, [pc, #32]	@ (80023cc <__aeabi_dcmpun+0x40>)
 80023ac:	2000      	movs	r0, #0
 80023ae:	428f      	cmp	r7, r1
 80023b0:	d104      	bne.n	80023bc <__aeabi_dcmpun+0x30>
 80023b2:	4646      	mov	r6, r8
 80023b4:	4316      	orrs	r6, r2
 80023b6:	0030      	movs	r0, r6
 80023b8:	1e43      	subs	r3, r0, #1
 80023ba:	4198      	sbcs	r0, r3
 80023bc:	bc80      	pop	{r7}
 80023be:	46b8      	mov	r8, r7
 80023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c2:	4304      	orrs	r4, r0
 80023c4:	2001      	movs	r0, #1
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	d1f8      	bne.n	80023bc <__aeabi_dcmpun+0x30>
 80023ca:	e7ee      	b.n	80023aa <__aeabi_dcmpun+0x1e>
 80023cc:	000007ff 	.word	0x000007ff

080023d0 <__aeabi_d2iz>:
 80023d0:	000b      	movs	r3, r1
 80023d2:	0002      	movs	r2, r0
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	4d16      	ldr	r5, [pc, #88]	@ (8002430 <__aeabi_d2iz+0x60>)
 80023d8:	030c      	lsls	r4, r1, #12
 80023da:	b082      	sub	sp, #8
 80023dc:	0049      	lsls	r1, r1, #1
 80023de:	2000      	movs	r0, #0
 80023e0:	9200      	str	r2, [sp, #0]
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	0b24      	lsrs	r4, r4, #12
 80023e6:	0d49      	lsrs	r1, r1, #21
 80023e8:	0fde      	lsrs	r6, r3, #31
 80023ea:	42a9      	cmp	r1, r5
 80023ec:	dd04      	ble.n	80023f8 <__aeabi_d2iz+0x28>
 80023ee:	4811      	ldr	r0, [pc, #68]	@ (8002434 <__aeabi_d2iz+0x64>)
 80023f0:	4281      	cmp	r1, r0
 80023f2:	dd03      	ble.n	80023fc <__aeabi_d2iz+0x2c>
 80023f4:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <__aeabi_d2iz+0x68>)
 80023f6:	18f0      	adds	r0, r6, r3
 80023f8:	b002      	add	sp, #8
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	2080      	movs	r0, #128	@ 0x80
 80023fe:	0340      	lsls	r0, r0, #13
 8002400:	4320      	orrs	r0, r4
 8002402:	4c0e      	ldr	r4, [pc, #56]	@ (800243c <__aeabi_d2iz+0x6c>)
 8002404:	1a64      	subs	r4, r4, r1
 8002406:	2c1f      	cmp	r4, #31
 8002408:	dd08      	ble.n	800241c <__aeabi_d2iz+0x4c>
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <__aeabi_d2iz+0x70>)
 800240c:	1a5b      	subs	r3, r3, r1
 800240e:	40d8      	lsrs	r0, r3
 8002410:	0003      	movs	r3, r0
 8002412:	4258      	negs	r0, r3
 8002414:	2e00      	cmp	r6, #0
 8002416:	d1ef      	bne.n	80023f8 <__aeabi_d2iz+0x28>
 8002418:	0018      	movs	r0, r3
 800241a:	e7ed      	b.n	80023f8 <__aeabi_d2iz+0x28>
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <__aeabi_d2iz+0x74>)
 800241e:	9a00      	ldr	r2, [sp, #0]
 8002420:	469c      	mov	ip, r3
 8002422:	0003      	movs	r3, r0
 8002424:	4461      	add	r1, ip
 8002426:	408b      	lsls	r3, r1
 8002428:	40e2      	lsrs	r2, r4
 800242a:	4313      	orrs	r3, r2
 800242c:	e7f1      	b.n	8002412 <__aeabi_d2iz+0x42>
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	000003fe 	.word	0x000003fe
 8002434:	0000041d 	.word	0x0000041d
 8002438:	7fffffff 	.word	0x7fffffff
 800243c:	00000433 	.word	0x00000433
 8002440:	00000413 	.word	0x00000413
 8002444:	fffffbed 	.word	0xfffffbed

08002448 <__aeabi_i2d>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	2800      	cmp	r0, #0
 800244c:	d016      	beq.n	800247c <__aeabi_i2d+0x34>
 800244e:	17c3      	asrs	r3, r0, #31
 8002450:	18c5      	adds	r5, r0, r3
 8002452:	405d      	eors	r5, r3
 8002454:	0fc4      	lsrs	r4, r0, #31
 8002456:	0028      	movs	r0, r5
 8002458:	f000 f914 	bl	8002684 <__clzsi2>
 800245c:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <__aeabi_i2d+0x58>)
 800245e:	1a1b      	subs	r3, r3, r0
 8002460:	055b      	lsls	r3, r3, #21
 8002462:	0d5b      	lsrs	r3, r3, #21
 8002464:	280a      	cmp	r0, #10
 8002466:	dc14      	bgt.n	8002492 <__aeabi_i2d+0x4a>
 8002468:	0002      	movs	r2, r0
 800246a:	002e      	movs	r6, r5
 800246c:	3215      	adds	r2, #21
 800246e:	4096      	lsls	r6, r2
 8002470:	220b      	movs	r2, #11
 8002472:	1a12      	subs	r2, r2, r0
 8002474:	40d5      	lsrs	r5, r2
 8002476:	032d      	lsls	r5, r5, #12
 8002478:	0b2d      	lsrs	r5, r5, #12
 800247a:	e003      	b.n	8002484 <__aeabi_i2d+0x3c>
 800247c:	2400      	movs	r4, #0
 800247e:	2300      	movs	r3, #0
 8002480:	2500      	movs	r5, #0
 8002482:	2600      	movs	r6, #0
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	432b      	orrs	r3, r5
 8002488:	07e4      	lsls	r4, r4, #31
 800248a:	4323      	orrs	r3, r4
 800248c:	0030      	movs	r0, r6
 800248e:	0019      	movs	r1, r3
 8002490:	bd70      	pop	{r4, r5, r6, pc}
 8002492:	380b      	subs	r0, #11
 8002494:	4085      	lsls	r5, r0
 8002496:	032d      	lsls	r5, r5, #12
 8002498:	2600      	movs	r6, #0
 800249a:	0b2d      	lsrs	r5, r5, #12
 800249c:	e7f2      	b.n	8002484 <__aeabi_i2d+0x3c>
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	0000041e 	.word	0x0000041e

080024a4 <__aeabi_ui2d>:
 80024a4:	b510      	push	{r4, lr}
 80024a6:	1e04      	subs	r4, r0, #0
 80024a8:	d010      	beq.n	80024cc <__aeabi_ui2d+0x28>
 80024aa:	f000 f8eb 	bl	8002684 <__clzsi2>
 80024ae:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <__aeabi_ui2d+0x44>)
 80024b0:	1a1b      	subs	r3, r3, r0
 80024b2:	055b      	lsls	r3, r3, #21
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	280a      	cmp	r0, #10
 80024b8:	dc0f      	bgt.n	80024da <__aeabi_ui2d+0x36>
 80024ba:	220b      	movs	r2, #11
 80024bc:	0021      	movs	r1, r4
 80024be:	1a12      	subs	r2, r2, r0
 80024c0:	40d1      	lsrs	r1, r2
 80024c2:	3015      	adds	r0, #21
 80024c4:	030a      	lsls	r2, r1, #12
 80024c6:	4084      	lsls	r4, r0
 80024c8:	0b12      	lsrs	r2, r2, #12
 80024ca:	e001      	b.n	80024d0 <__aeabi_ui2d+0x2c>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2200      	movs	r2, #0
 80024d0:	051b      	lsls	r3, r3, #20
 80024d2:	4313      	orrs	r3, r2
 80024d4:	0020      	movs	r0, r4
 80024d6:	0019      	movs	r1, r3
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	0022      	movs	r2, r4
 80024dc:	380b      	subs	r0, #11
 80024de:	4082      	lsls	r2, r0
 80024e0:	0312      	lsls	r2, r2, #12
 80024e2:	2400      	movs	r4, #0
 80024e4:	0b12      	lsrs	r2, r2, #12
 80024e6:	e7f3      	b.n	80024d0 <__aeabi_ui2d+0x2c>
 80024e8:	0000041e 	.word	0x0000041e

080024ec <__aeabi_f2d>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	0242      	lsls	r2, r0, #9
 80024f0:	0043      	lsls	r3, r0, #1
 80024f2:	0fc4      	lsrs	r4, r0, #31
 80024f4:	20fe      	movs	r0, #254	@ 0xfe
 80024f6:	0e1b      	lsrs	r3, r3, #24
 80024f8:	1c59      	adds	r1, r3, #1
 80024fa:	0a55      	lsrs	r5, r2, #9
 80024fc:	4208      	tst	r0, r1
 80024fe:	d00c      	beq.n	800251a <__aeabi_f2d+0x2e>
 8002500:	21e0      	movs	r1, #224	@ 0xe0
 8002502:	0089      	lsls	r1, r1, #2
 8002504:	468c      	mov	ip, r1
 8002506:	076d      	lsls	r5, r5, #29
 8002508:	0b12      	lsrs	r2, r2, #12
 800250a:	4463      	add	r3, ip
 800250c:	051b      	lsls	r3, r3, #20
 800250e:	4313      	orrs	r3, r2
 8002510:	07e4      	lsls	r4, r4, #31
 8002512:	4323      	orrs	r3, r4
 8002514:	0028      	movs	r0, r5
 8002516:	0019      	movs	r1, r3
 8002518:	bd70      	pop	{r4, r5, r6, pc}
 800251a:	2b00      	cmp	r3, #0
 800251c:	d114      	bne.n	8002548 <__aeabi_f2d+0x5c>
 800251e:	2d00      	cmp	r5, #0
 8002520:	d01b      	beq.n	800255a <__aeabi_f2d+0x6e>
 8002522:	0028      	movs	r0, r5
 8002524:	f000 f8ae 	bl	8002684 <__clzsi2>
 8002528:	280a      	cmp	r0, #10
 800252a:	dc1c      	bgt.n	8002566 <__aeabi_f2d+0x7a>
 800252c:	230b      	movs	r3, #11
 800252e:	002a      	movs	r2, r5
 8002530:	1a1b      	subs	r3, r3, r0
 8002532:	40da      	lsrs	r2, r3
 8002534:	0003      	movs	r3, r0
 8002536:	3315      	adds	r3, #21
 8002538:	409d      	lsls	r5, r3
 800253a:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <__aeabi_f2d+0x88>)
 800253c:	0312      	lsls	r2, r2, #12
 800253e:	1a1b      	subs	r3, r3, r0
 8002540:	055b      	lsls	r3, r3, #21
 8002542:	0b12      	lsrs	r2, r2, #12
 8002544:	0d5b      	lsrs	r3, r3, #21
 8002546:	e7e1      	b.n	800250c <__aeabi_f2d+0x20>
 8002548:	2d00      	cmp	r5, #0
 800254a:	d009      	beq.n	8002560 <__aeabi_f2d+0x74>
 800254c:	0b13      	lsrs	r3, r2, #12
 800254e:	2280      	movs	r2, #128	@ 0x80
 8002550:	0312      	lsls	r2, r2, #12
 8002552:	431a      	orrs	r2, r3
 8002554:	076d      	lsls	r5, r5, #29
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <__aeabi_f2d+0x8c>)
 8002558:	e7d8      	b.n	800250c <__aeabi_f2d+0x20>
 800255a:	2300      	movs	r3, #0
 800255c:	2200      	movs	r2, #0
 800255e:	e7d5      	b.n	800250c <__aeabi_f2d+0x20>
 8002560:	2200      	movs	r2, #0
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <__aeabi_f2d+0x8c>)
 8002564:	e7d2      	b.n	800250c <__aeabi_f2d+0x20>
 8002566:	0003      	movs	r3, r0
 8002568:	002a      	movs	r2, r5
 800256a:	3b0b      	subs	r3, #11
 800256c:	409a      	lsls	r2, r3
 800256e:	2500      	movs	r5, #0
 8002570:	e7e3      	b.n	800253a <__aeabi_f2d+0x4e>
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	00000389 	.word	0x00000389
 8002578:	000007ff 	.word	0x000007ff

0800257c <__aeabi_d2f>:
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	004b      	lsls	r3, r1, #1
 8002580:	030f      	lsls	r7, r1, #12
 8002582:	0d5b      	lsrs	r3, r3, #21
 8002584:	4c3b      	ldr	r4, [pc, #236]	@ (8002674 <__aeabi_d2f+0xf8>)
 8002586:	0f45      	lsrs	r5, r0, #29
 8002588:	b083      	sub	sp, #12
 800258a:	0a7f      	lsrs	r7, r7, #9
 800258c:	1c5e      	adds	r6, r3, #1
 800258e:	432f      	orrs	r7, r5
 8002590:	9000      	str	r0, [sp, #0]
 8002592:	9101      	str	r1, [sp, #4]
 8002594:	0fca      	lsrs	r2, r1, #31
 8002596:	00c5      	lsls	r5, r0, #3
 8002598:	4226      	tst	r6, r4
 800259a:	d00b      	beq.n	80025b4 <__aeabi_d2f+0x38>
 800259c:	4936      	ldr	r1, [pc, #216]	@ (8002678 <__aeabi_d2f+0xfc>)
 800259e:	185c      	adds	r4, r3, r1
 80025a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80025a2:	dd13      	ble.n	80025cc <__aeabi_d2f+0x50>
 80025a4:	20ff      	movs	r0, #255	@ 0xff
 80025a6:	2300      	movs	r3, #0
 80025a8:	05c0      	lsls	r0, r0, #23
 80025aa:	4318      	orrs	r0, r3
 80025ac:	07d2      	lsls	r2, r2, #31
 80025ae:	4310      	orrs	r0, r2
 80025b0:	b003      	add	sp, #12
 80025b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <__aeabi_d2f+0x42>
 80025b8:	2000      	movs	r0, #0
 80025ba:	2300      	movs	r3, #0
 80025bc:	e7f4      	b.n	80025a8 <__aeabi_d2f+0x2c>
 80025be:	433d      	orrs	r5, r7
 80025c0:	d0f0      	beq.n	80025a4 <__aeabi_d2f+0x28>
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	03db      	lsls	r3, r3, #15
 80025c6:	20ff      	movs	r0, #255	@ 0xff
 80025c8:	433b      	orrs	r3, r7
 80025ca:	e7ed      	b.n	80025a8 <__aeabi_d2f+0x2c>
 80025cc:	2c00      	cmp	r4, #0
 80025ce:	dd14      	ble.n	80025fa <__aeabi_d2f+0x7e>
 80025d0:	9b00      	ldr	r3, [sp, #0]
 80025d2:	00ff      	lsls	r7, r7, #3
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	4183      	sbcs	r3, r0
 80025da:	0f69      	lsrs	r1, r5, #29
 80025dc:	433b      	orrs	r3, r7
 80025de:	430b      	orrs	r3, r1
 80025e0:	0759      	lsls	r1, r3, #29
 80025e2:	d041      	beq.n	8002668 <__aeabi_d2f+0xec>
 80025e4:	210f      	movs	r1, #15
 80025e6:	4019      	ands	r1, r3
 80025e8:	2904      	cmp	r1, #4
 80025ea:	d028      	beq.n	800263e <__aeabi_d2f+0xc2>
 80025ec:	3304      	adds	r3, #4
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	d525      	bpl.n	800263e <__aeabi_d2f+0xc2>
 80025f2:	3401      	adds	r4, #1
 80025f4:	2300      	movs	r3, #0
 80025f6:	b2e0      	uxtb	r0, r4
 80025f8:	e7d6      	b.n	80025a8 <__aeabi_d2f+0x2c>
 80025fa:	0021      	movs	r1, r4
 80025fc:	3117      	adds	r1, #23
 80025fe:	dbdb      	blt.n	80025b8 <__aeabi_d2f+0x3c>
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	201e      	movs	r0, #30
 8002604:	0409      	lsls	r1, r1, #16
 8002606:	4339      	orrs	r1, r7
 8002608:	1b00      	subs	r0, r0, r4
 800260a:	281f      	cmp	r0, #31
 800260c:	dd1b      	ble.n	8002646 <__aeabi_d2f+0xca>
 800260e:	2602      	movs	r6, #2
 8002610:	4276      	negs	r6, r6
 8002612:	1b34      	subs	r4, r6, r4
 8002614:	000e      	movs	r6, r1
 8002616:	40e6      	lsrs	r6, r4
 8002618:	0034      	movs	r4, r6
 800261a:	2820      	cmp	r0, #32
 800261c:	d004      	beq.n	8002628 <__aeabi_d2f+0xac>
 800261e:	4817      	ldr	r0, [pc, #92]	@ (800267c <__aeabi_d2f+0x100>)
 8002620:	4684      	mov	ip, r0
 8002622:	4463      	add	r3, ip
 8002624:	4099      	lsls	r1, r3
 8002626:	430d      	orrs	r5, r1
 8002628:	002b      	movs	r3, r5
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	418b      	sbcs	r3, r1
 800262e:	4323      	orrs	r3, r4
 8002630:	0759      	lsls	r1, r3, #29
 8002632:	d015      	beq.n	8002660 <__aeabi_d2f+0xe4>
 8002634:	210f      	movs	r1, #15
 8002636:	2400      	movs	r4, #0
 8002638:	4019      	ands	r1, r3
 800263a:	2904      	cmp	r1, #4
 800263c:	d117      	bne.n	800266e <__aeabi_d2f+0xf2>
 800263e:	019b      	lsls	r3, r3, #6
 8002640:	0a5b      	lsrs	r3, r3, #9
 8002642:	b2e0      	uxtb	r0, r4
 8002644:	e7b0      	b.n	80025a8 <__aeabi_d2f+0x2c>
 8002646:	4c0e      	ldr	r4, [pc, #56]	@ (8002680 <__aeabi_d2f+0x104>)
 8002648:	191c      	adds	r4, r3, r4
 800264a:	002b      	movs	r3, r5
 800264c:	40a5      	lsls	r5, r4
 800264e:	40c3      	lsrs	r3, r0
 8002650:	40a1      	lsls	r1, r4
 8002652:	1e68      	subs	r0, r5, #1
 8002654:	4185      	sbcs	r5, r0
 8002656:	4329      	orrs	r1, r5
 8002658:	430b      	orrs	r3, r1
 800265a:	2400      	movs	r4, #0
 800265c:	0759      	lsls	r1, r3, #29
 800265e:	d1c1      	bne.n	80025e4 <__aeabi_d2f+0x68>
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	2000      	movs	r0, #0
 8002664:	0a5b      	lsrs	r3, r3, #9
 8002666:	e79f      	b.n	80025a8 <__aeabi_d2f+0x2c>
 8002668:	08db      	lsrs	r3, r3, #3
 800266a:	b2e0      	uxtb	r0, r4
 800266c:	e79c      	b.n	80025a8 <__aeabi_d2f+0x2c>
 800266e:	3304      	adds	r3, #4
 8002670:	e7e5      	b.n	800263e <__aeabi_d2f+0xc2>
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	000007fe 	.word	0x000007fe
 8002678:	fffffc80 	.word	0xfffffc80
 800267c:	fffffca2 	.word	0xfffffca2
 8002680:	fffffc82 	.word	0xfffffc82

08002684 <__clzsi2>:
 8002684:	211c      	movs	r1, #28
 8002686:	2301      	movs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	4298      	cmp	r0, r3
 800268c:	d301      	bcc.n	8002692 <__clzsi2+0xe>
 800268e:	0c00      	lsrs	r0, r0, #16
 8002690:	3910      	subs	r1, #16
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	4298      	cmp	r0, r3
 8002696:	d301      	bcc.n	800269c <__clzsi2+0x18>
 8002698:	0a00      	lsrs	r0, r0, #8
 800269a:	3908      	subs	r1, #8
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	4298      	cmp	r0, r3
 80026a0:	d301      	bcc.n	80026a6 <__clzsi2+0x22>
 80026a2:	0900      	lsrs	r0, r0, #4
 80026a4:	3904      	subs	r1, #4
 80026a6:	a202      	add	r2, pc, #8	@ (adr r2, 80026b0 <__clzsi2+0x2c>)
 80026a8:	5c10      	ldrb	r0, [r2, r0]
 80026aa:	1840      	adds	r0, r0, r1
 80026ac:	4770      	bx	lr
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	02020304 	.word	0x02020304
 80026b4:	01010101 	.word	0x01010101
	...

080026c0 <__clzdi2>:
 80026c0:	b510      	push	{r4, lr}
 80026c2:	2900      	cmp	r1, #0
 80026c4:	d103      	bne.n	80026ce <__clzdi2+0xe>
 80026c6:	f7ff ffdd 	bl	8002684 <__clzsi2>
 80026ca:	3020      	adds	r0, #32
 80026cc:	e002      	b.n	80026d4 <__clzdi2+0x14>
 80026ce:	0008      	movs	r0, r1
 80026d0:	f7ff ffd8 	bl	8002684 <__clzsi2>
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)

080026d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026dc:	f3bf 8f4f 	dsb	sy
}
 80026e0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e2:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <__NVIC_SystemReset+0x1c>)
 80026e4:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <__NVIC_SystemReset+0x20>)
 80026e6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80026e8:	f3bf 8f4f 	dsb	sy
}
 80026ec:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	e7fd      	b.n	80026ee <__NVIC_SystemReset+0x16>
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	e000ed00 	.word	0xe000ed00
 80026f8:	05fa0004 	.word	0x05fa0004

080026fc <delayUS>:

/* USER CODE BEGIN PFP */

/* Helper Functions -----------------------------------------------*/

void delayUS(uint32_t us) {   // Sets the delay in microseconds.
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8002704:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <delayUS+0x28>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2200      	movs	r2, #0
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 800270c:	46c0      	nop			@ (mov r8, r8)
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <delayUS+0x28>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d8f9      	bhi.n	800270e <delayUS+0x12>
		;
}
 800271a:	46c0      	nop			@ (mov r8, r8)
 800271c:	46c0      	nop			@ (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200002a0 	.word	0x200002a0

08002728 <delayMS>:

void delayMS(uint32_t ms) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ms; i++) {
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e007      	b.n	8002746 <delayMS+0x1e>
		delayUS(1000);
 8002736:	23fa      	movs	r3, #250	@ 0xfa
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	0018      	movs	r0, r3
 800273c:	f7ff ffde 	bl	80026fc <delayUS>
	for (int i = 0; i < ms; i++) {
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d8f3      	bhi.n	8002736 <delayMS+0xe>
	}
}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}

08002758 <CopyArray>:

void CopyArray(uint8_t *source, uint8_t *dest, uint8_t count) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	1dfb      	adds	r3, r7, #7
 8002764:	701a      	strb	r2, [r3, #0]
	uint8_t copyIndex = 0;
 8002766:	2117      	movs	r1, #23
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
	for (copyIndex = 0; copyIndex < count; copyIndex++) {
 800276e:	187b      	adds	r3, r7, r1
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e00f      	b.n	8002796 <CopyArray+0x3e>
		dest[copyIndex] = source[copyIndex];
 8002776:	2017      	movs	r0, #23
 8002778:	183b      	adds	r3, r7, r0
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	18d2      	adds	r2, r2, r3
 8002780:	183b      	adds	r3, r7, r0
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	18cb      	adds	r3, r1, r3
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	701a      	strb	r2, [r3, #0]
	for (copyIndex = 0; copyIndex < count; copyIndex++) {
 800278c:	183b      	adds	r3, r7, r0
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	183b      	adds	r3, r7, r0
 8002792:	3201      	adds	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	2317      	movs	r3, #23
 8002798:	18fa      	adds	r2, r7, r3
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d3e8      	bcc.n	8002776 <CopyArray+0x1e>
	}
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}

080027ae <FloatToUInt>:
	returnFloat[3] = floatToConvert[0];

	return retVal;
}

uint32_t FloatToUInt(float n) {
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
	return (uint32_t) (*(uint32_t*) &n);
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b002      	add	sp, #8
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <Checksum>:
	return *((float*) &temp);
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	000a      	movs	r2, r1
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	unsigned char checksum = 0;
 80027d0:	230e      	movs	r3, #14
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < len; i++)
 80027d8:	230f      	movs	r3, #15
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e010      	b.n	8002804 <Checksum+0x42>
		checksum += ptr[i];
 80027e2:	200f      	movs	r0, #15
 80027e4:	183b      	adds	r3, r7, r0
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	18d3      	adds	r3, r2, r3
 80027ec:	7819      	ldrb	r1, [r3, #0]
 80027ee:	220e      	movs	r2, #14
 80027f0:	18bb      	adds	r3, r7, r2
 80027f2:	18ba      	adds	r2, r7, r2
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	188a      	adds	r2, r1, r2
 80027f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++)
 80027fa:	183b      	adds	r3, r7, r0
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	3201      	adds	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	230f      	movs	r3, #15
 8002806:	18fa      	adds	r2, r7, r3
 8002808:	1cfb      	adds	r3, r7, #3
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d3e7      	bcc.n	80027e2 <Checksum+0x20>

	checksum = 0xff & ~checksum;
 8002812:	210e      	movs	r1, #14
 8002814:	187b      	adds	r3, r7, r1
 8002816:	187a      	adds	r2, r7, r1
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	43d2      	mvns	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

	return (checksum);
 800281e:	187b      	adds	r3, r7, r1
 8002820:	781b      	ldrb	r3, [r3, #0]
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b004      	add	sp, #16
 8002828:	bd80      	pop	{r7, pc}

0800282a <CRC8>:

unsigned char CRC8(unsigned char *ptr, unsigned char len)
//Calculates CRC8 for passed bytes. Used in i2c read and write functions
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	000a      	movs	r2, r1
 8002834:	1cfb      	adds	r3, r7, #3
 8002836:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	unsigned char crc = 0;
 8002838:	230e      	movs	r3, #14
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
	while (len-- != 0) {
 8002840:	e03e      	b.n	80028c0 <CRC8+0x96>
		for (i = 0x80; i != 0; i /= 2) {
 8002842:	230f      	movs	r3, #15
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e031      	b.n	80028b0 <CRC8+0x86>
			if ((crc & 0x80) != 0) {
 800284c:	210e      	movs	r1, #14
 800284e:	187b      	adds	r3, r7, r1
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b25b      	sxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	da0d      	bge.n	8002874 <CRC8+0x4a>
				crc *= 2;
 8002858:	187a      	adds	r2, r7, r1
 800285a:	187b      	adds	r3, r7, r1
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	18db      	adds	r3, r3, r3
 8002860:	7013      	strb	r3, [r2, #0]
				crc ^= 0x107;
 8002862:	187b      	adds	r3, r7, r1
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b25b      	sxtb	r3, r3
 8002868:	2207      	movs	r2, #7
 800286a:	4053      	eors	r3, r2
 800286c:	b25a      	sxtb	r2, r3
 800286e:	187b      	adds	r3, r7, r1
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e005      	b.n	8002880 <CRC8+0x56>
			} else
				crc *= 2;
 8002874:	230e      	movs	r3, #14
 8002876:	18fa      	adds	r2, r7, r3
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	18db      	adds	r3, r3, r3
 800287e:	7013      	strb	r3, [r2, #0]

			if ((*ptr & i) != 0)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	220f      	movs	r2, #15
 8002886:	18ba      	adds	r2, r7, r2
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	4013      	ands	r3, r2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <CRC8+0x7a>
				crc ^= 0x107;
 8002892:	210e      	movs	r1, #14
 8002894:	187b      	adds	r3, r7, r1
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b25b      	sxtb	r3, r3
 800289a:	2207      	movs	r2, #7
 800289c:	4053      	eors	r3, r2
 800289e:	b25a      	sxtb	r2, r3
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	701a      	strb	r2, [r3, #0]
		for (i = 0x80; i != 0; i /= 2) {
 80028a4:	220f      	movs	r2, #15
 80028a6:	18bb      	adds	r3, r7, r2
 80028a8:	18ba      	adds	r2, r7, r2
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	230f      	movs	r3, #15
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1c8      	bne.n	800284c <CRC8+0x22>
		}
		ptr++;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3301      	adds	r3, #1
 80028be:	607b      	str	r3, [r7, #4]
	while (len-- != 0) {
 80028c0:	1cfb      	adds	r3, r7, #3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	1cfa      	adds	r2, r7, #3
 80028c6:	1e59      	subs	r1, r3, #1
 80028c8:	7011      	strb	r1, [r2, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1b9      	bne.n	8002842 <CRC8+0x18>
	}
	return (crc);
 80028ce:	230e      	movs	r3, #14
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	781b      	ldrb	r3, [r3, #0]
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b004      	add	sp, #16
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WriteReg>:

/* BQ Specific I2C Functions -----------------------------------------------*/
void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count) {
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b094      	sub	sp, #80	@ 0x50
 80028e0:	af04      	add	r7, sp, #16
 80028e2:	6039      	str	r1, [r7, #0]
 80028e4:	0011      	movs	r1, r2
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	1c02      	adds	r2, r0, #0
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	1dbb      	adds	r3, r7, #6
 80028ee:	1c0a      	adds	r2, r1, #0
 80028f0:	701a      	strb	r2, [r3, #0]
	uint8_t TX_Buffer[MAX_BUFFER_SIZE] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 80028f2:	2514      	movs	r5, #20
 80028f4:	1979      	adds	r1, r7, r5
 80028f6:	4a3c      	ldr	r2, [pc, #240]	@ (80029e8 <I2C_WriteReg+0x10c>)
 80028f8:	000b      	movs	r3, r1
 80028fa:	ca11      	ldmia	r2!, {r0, r4}
 80028fc:	c311      	stmia	r3!, {r0, r4}
 80028fe:	8810      	ldrh	r0, [r2, #0]
 8002900:	8018      	strh	r0, [r3, #0]
 8002902:	7892      	ldrb	r2, [r2, #2]
 8002904:	709a      	strb	r2, [r3, #2]
 8002906:	230b      	movs	r3, #11
 8002908:	18cb      	adds	r3, r1, r3
 800290a:	2215      	movs	r2, #21
 800290c:	2100      	movs	r1, #0
 800290e:	0018      	movs	r0, r3
 8002910:	f007 fe02 	bl	800a518 <memset>
			0x00, 0x00, 0x00, 0x00 };
#if CRC_MODE
	{
		uint8_t crc_count = 0;
 8002914:	2137      	movs	r1, #55	@ 0x37
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
		crc_count = count * 2;
 800291c:	187a      	adds	r2, r7, r1
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	18db      	adds	r3, r3, r3
 8002924:	7013      	strb	r3, [r2, #0]
		uint8_t crc1stByteBuffer[3] = { 0x10, reg_addr, reg_data[0] };
 8002926:	2110      	movs	r1, #16
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2210      	movs	r2, #16
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	187b      	adds	r3, r7, r1
 8002930:	1dfa      	adds	r2, r7, #7
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	705a      	strb	r2, [r3, #1]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	187b      	adds	r3, r7, r1
 800293c:	709a      	strb	r2, [r3, #2]
		unsigned int j;
		unsigned int i;
		uint8_t temp_crc_buffer[3];

		TX_Buffer[0] = reg_data[0];
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	197b      	adds	r3, r7, r5
 8002944:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = CRC8(crc1stByteBuffer, 3);
 8002946:	187b      	adds	r3, r7, r1
 8002948:	2103      	movs	r1, #3
 800294a:	0018      	movs	r0, r3
 800294c:	f7ff ff6d 	bl	800282a <CRC8>
 8002950:	0003      	movs	r3, r0
 8002952:	001a      	movs	r2, r3
 8002954:	197b      	adds	r3, r7, r5
 8002956:	705a      	strb	r2, [r3, #1]

		j = 2;
 8002958:	2302      	movs	r3, #2
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for (i = 1; i < count; i++) {
 800295c:	2301      	movs	r3, #1
 800295e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002960:	e025      	b.n	80029ae <I2C_WriteReg+0xd2>
			TX_Buffer[j] = reg_data[i];
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002966:	18d3      	adds	r3, r2, r3
 8002968:	7819      	ldrb	r1, [r3, #0]
 800296a:	2414      	movs	r4, #20
 800296c:	193a      	adds	r2, r7, r4
 800296e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002970:	18d3      	adds	r3, r2, r3
 8002972:	1c0a      	adds	r2, r1, #0
 8002974:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 8002976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002978:	3301      	adds	r3, #1
 800297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			temp_crc_buffer[0] = reg_data[i];
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	18d3      	adds	r3, r2, r3
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	210c      	movs	r1, #12
 8002986:	187b      	adds	r3, r7, r1
 8002988:	701a      	strb	r2, [r3, #0]
			TX_Buffer[j] = CRC8(temp_crc_buffer, 1);
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2101      	movs	r1, #1
 800298e:	0018      	movs	r0, r3
 8002990:	f7ff ff4b 	bl	800282a <CRC8>
 8002994:	0003      	movs	r3, r0
 8002996:	0019      	movs	r1, r3
 8002998:	193a      	adds	r2, r7, r4
 800299a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800299c:	18d3      	adds	r3, r2, r3
 800299e:	1c0a      	adds	r2, r1, #0
 80029a0:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 80029a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a4:	3301      	adds	r3, #1
 80029a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for (i = 1; i < count; i++) {
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	3301      	adds	r3, #1
 80029ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ae:	1dbb      	adds	r3, r7, #6
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d3d4      	bcc.n	8002962 <I2C_WriteReg+0x86>
		}

		HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count,
 80029b8:	1dfb      	adds	r3, r7, #7
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b299      	uxth	r1, r3
 80029be:	2337      	movs	r3, #55	@ 0x37
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	4809      	ldr	r0, [pc, #36]	@ (80029ec <I2C_WriteReg+0x110>)
 80029c8:	22fa      	movs	r2, #250	@ 0xfa
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	9202      	str	r2, [sp, #8]
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2314      	movs	r3, #20
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2301      	movs	r3, #1
 80029d8:	000a      	movs	r2, r1
 80029da:	2110      	movs	r1, #16
 80029dc:	f003 fabe 	bl	8005f5c <HAL_I2C_Mem_Write>

	}
#else
	HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, 1000);
#endif
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b010      	add	sp, #64	@ 0x40
 80029e6:	bdb0      	pop	{r4, r5, r7, pc}
 80029e8:	0800c4c8 	.word	0x0800c4c8
 80029ec:	2000024c 	.word	0x2000024c

080029f0 <I2C_BQ769x2_ReadReg>:

/* hacked version that doesn't segfault */
int I2C_BQ769x2_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count) {
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	b09d      	sub	sp, #116	@ 0x74
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	6039      	str	r1, [r7, #0]
 80029f8:	0011      	movs	r1, r2
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	1c02      	adds	r2, r0, #0
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	1dbb      	adds	r3, r7, #6
 8002a02:	1c0a      	adds	r2, r1, #0
 8002a04:	701a      	strb	r2, [r3, #0]
	unsigned int RX_CRC_Fail = 0; // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8002a06:	2300      	movs	r3, #0
 8002a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t RX_Buffer[MAX_BUFFER_SIZE] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8002a0a:	2330      	movs	r3, #48	@ 0x30
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	4a53      	ldr	r2, [pc, #332]	@ (8002b5c <I2C_BQ769x2_ReadReg+0x16c>)
 8002a10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a12:	c313      	stmia	r3!, {r0, r1, r4}
 8002a14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a16:	c313      	stmia	r3!, {r0, r1, r4}
 8002a18:	ca03      	ldmia	r2!, {r0, r1}
 8002a1a:	c303      	stmia	r3!, {r0, r1}
			0x00, 0x00, 0x00, 0x00 };

	//uint8_t RX_Buffer[MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
#if CRC_MODE
	{
		uint8_t crc_count = 0;
 8002a1c:	2653      	movs	r6, #83	@ 0x53
 8002a1e:	19bb      	adds	r3, r7, r6
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
		//uint8_t ReceiveBuffer [10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
		uint8_t ReceiveBuffer[32] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8002a24:	2508      	movs	r5, #8
 8002a26:	197b      	adds	r3, r7, r5
 8002a28:	4a4c      	ldr	r2, [pc, #304]	@ (8002b5c <I2C_BQ769x2_ReadReg+0x16c>)
 8002a2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a2c:	c313      	stmia	r3!, {r0, r1, r4}
 8002a2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a30:	c313      	stmia	r3!, {r0, r1, r4}
 8002a32:	ca03      	ldmia	r2!, {r0, r1}
 8002a34:	c303      	stmia	r3!, {r0, r1}
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00 };
		crc_count = count * 2;
 8002a36:	0030      	movs	r0, r6
 8002a38:	183a      	adds	r2, r7, r0
 8002a3a:	1dbb      	adds	r3, r7, #6
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	18db      	adds	r3, r3, r3
 8002a40:	7013      	strb	r3, [r2, #0]
		unsigned int j;
		unsigned int i;
		unsigned char CRCc = 0;
 8002a42:	2452      	movs	r4, #82	@ 0x52
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
		uint8_t temp_crc_buffer[3];

		HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, ReceiveBuffer,
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b299      	uxth	r1, r3
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4842      	ldr	r0, [pc, #264]	@ (8002b60 <I2C_BQ769x2_ReadReg+0x170>)
 8002a58:	22fa      	movs	r2, #250	@ 0xfa
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	9202      	str	r2, [sp, #8]
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	197b      	adds	r3, r7, r5
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	000a      	movs	r2, r1
 8002a68:	2110      	movs	r1, #16
 8002a6a:	f003 fba5 	bl	80061b8 <HAL_I2C_Mem_Read>
				crc_count, 1000);
		uint8_t crc1stByteBuffer[4] = { 0x10, reg_addr, 0x11, ReceiveBuffer[0] };
 8002a6e:	2128      	movs	r1, #40	@ 0x28
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2210      	movs	r2, #16
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	1dfa      	adds	r2, r7, #7
 8002a7a:	7812      	ldrb	r2, [r2, #0]
 8002a7c:	705a      	strb	r2, [r3, #1]
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	2211      	movs	r2, #17
 8002a82:	709a      	strb	r2, [r3, #2]
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	70da      	strb	r2, [r3, #3]
		CRCc = CRC8(crc1stByteBuffer, 4);
 8002a8c:	0026      	movs	r6, r4
 8002a8e:	193c      	adds	r4, r7, r4
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2104      	movs	r1, #4
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7ff fec8 	bl	800282a <CRC8>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	7023      	strb	r3, [r4, #0]
		if (CRCc != ReceiveBuffer[1]) {
 8002a9e:	197b      	adds	r3, r7, r5
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	19ba      	adds	r2, r7, r6
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d002      	beq.n	8002ab0 <I2C_BQ769x2_ReadReg+0xc0>
			RX_CRC_Fail += 1;
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aac:	3301      	adds	r3, #1
 8002aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		RX_Buffer[0] = ReceiveBuffer[0];
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	2330      	movs	r3, #48	@ 0x30
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	701a      	strb	r2, [r3, #0]

		j = 2;
 8002abc:	2302      	movs	r3, #2
 8002abe:	65bb      	str	r3, [r7, #88]	@ 0x58
		for (i = 1; i < count; i++) {
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ac4:	e02e      	b.n	8002b24 <I2C_BQ769x2_ReadReg+0x134>
			RX_Buffer[i] = ReceiveBuffer[j];
 8002ac6:	2508      	movs	r5, #8
 8002ac8:	197a      	adds	r2, r7, r5
 8002aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	7819      	ldrb	r1, [r3, #0]
 8002ad0:	2330      	movs	r3, #48	@ 0x30
 8002ad2:	18fa      	adds	r2, r7, r3
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad6:	18d3      	adds	r3, r2, r3
 8002ad8:	1c0a      	adds	r2, r1, #0
 8002ada:	701a      	strb	r2, [r3, #0]
			temp_crc_buffer[0] = ReceiveBuffer[j];
 8002adc:	197a      	adds	r2, r7, r5
 8002ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ae0:	18d3      	adds	r3, r2, r3
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	212c      	movs	r1, #44	@ 0x2c
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 8002aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aec:	3301      	adds	r3, #1
 8002aee:	65bb      	str	r3, [r7, #88]	@ 0x58
			CRCc = CRC8(temp_crc_buffer, 1);
 8002af0:	2652      	movs	r6, #82	@ 0x52
 8002af2:	19bc      	adds	r4, r7, r6
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2101      	movs	r1, #1
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fe96 	bl	800282a <CRC8>
 8002afe:	0003      	movs	r3, r0
 8002b00:	7023      	strb	r3, [r4, #0]
			if (CRCc != ReceiveBuffer[j])
 8002b02:	197a      	adds	r2, r7, r5
 8002b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b06:	18d3      	adds	r3, r2, r3
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	19ba      	adds	r2, r7, r6
 8002b0c:	7812      	ldrb	r2, [r2, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d002      	beq.n	8002b18 <I2C_BQ769x2_ReadReg+0x128>
				RX_CRC_Fail += 1;
 8002b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b14:	3301      	adds	r3, #1
 8002b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
			j = j + 1;
 8002b18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
		for (i = 1; i < count; i++) {
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b20:	3301      	adds	r3, #1
 8002b22:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b24:	1dbb      	adds	r3, r7, #6
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3cb      	bcc.n	8002ac6 <I2C_BQ769x2_ReadReg+0xd6>
		}
		CopyArray(RX_Buffer, reg_data, crc_count);
 8002b2e:	2353      	movs	r3, #83	@ 0x53
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	2330      	movs	r3, #48	@ 0x30
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff fe0c 	bl	8002758 <CopyArray>
		CRC_Fail += RX_CRC_Fail;
 8002b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <I2C_BQ769x2_ReadReg+0x174>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <I2C_BQ769x2_ReadReg+0x174>)
 8002b4e:	801a      	strh	r2, [r3, #0]
	}
#else
	HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, 1000);
#endif
	return 0;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b019      	add	sp, #100	@ 0x64
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	0800c4e8 	.word	0x0800c4e8
 8002b60:	2000024c 	.word	0x2000024c
 8002b64:	20000410 	.word	0x20000410

08002b68 <BQ769x2_SetRegister>:

/* BQ Functions -----------------------------------------------*/
void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen) {
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6039      	str	r1, [r7, #0]
 8002b70:	0011      	movs	r1, r2
 8002b72:	1dbb      	adds	r3, r7, #6
 8002b74:	1c02      	adds	r2, r0, #0
 8002b76:	801a      	strh	r2, [r3, #0]
 8002b78:	1d7b      	adds	r3, r7, #5
 8002b7a:	1c0a      	adds	r2, r1, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
	uint8_t TX_Buffer[2] = { 0x00, 0x00 };
 8002b7e:	2314      	movs	r3, #20
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2200      	movs	r2, #0
 8002b84:	801a      	strh	r2, [r3, #0]
	uint8_t TX_RegData[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002b86:	200c      	movs	r0, #12
 8002b88:	183b      	adds	r3, r7, r0
 8002b8a:	4a55      	ldr	r2, [pc, #340]	@ (8002ce0 <BQ769x2_SetRegister+0x178>)
 8002b8c:	6811      	ldr	r1, [r2, #0]
 8002b8e:	6019      	str	r1, [r3, #0]
 8002b90:	8892      	ldrh	r2, [r2, #4]
 8002b92:	809a      	strh	r2, [r3, #4]

	//TX_RegData in little endian format
	TX_RegData[0] = reg_addr & 0xff;
 8002b94:	1dbb      	adds	r3, r7, #6
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	183b      	adds	r3, r7, r0
 8002b9c:	701a      	strb	r2, [r3, #0]
	TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8002b9e:	1dbb      	adds	r3, r7, #6
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	183b      	adds	r3, r7, r0
 8002baa:	705a      	strb	r2, [r3, #1]
	TX_RegData[2] = reg_data & 0xff; //1st byte of data
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	183b      	adds	r3, r7, r0
 8002bb2:	709a      	strb	r2, [r3, #2]

	switch (datalen) {
 8002bb4:	1d7b      	adds	r3, r7, #5
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d055      	beq.n	8002c68 <BQ769x2_SetRegister+0x100>
 8002bbc:	dd00      	ble.n	8002bc0 <BQ769x2_SetRegister+0x58>
 8002bbe:	e088      	b.n	8002cd2 <BQ769x2_SetRegister+0x16a>
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d002      	beq.n	8002bca <BQ769x2_SetRegister+0x62>
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d025      	beq.n	8002c14 <BQ769x2_SetRegister+0xac>
 8002bc8:	e083      	b.n	8002cd2 <BQ769x2_SetRegister+0x16a>
	case 1: //1 byte datalength
		I2C_WriteReg(0x3E, TX_RegData, 3);
 8002bca:	240c      	movs	r4, #12
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	2203      	movs	r2, #3
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	203e      	movs	r0, #62	@ 0x3e
 8002bd4:	f7ff fe82 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002bd8:	23fa      	movs	r3, #250	@ 0xfa
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fd8d 	bl	80026fc <delayUS>
		TX_Buffer[0] = Checksum(TX_RegData, 3);
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	2103      	movs	r1, #3
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff fdeb 	bl	80027c2 <Checksum>
 8002bec:	0003      	movs	r3, r0
 8002bee:	001a      	movs	r2, r3
 8002bf0:	2114      	movs	r1, #20
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x05; //combined length of register address and data
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2202      	movs	r2, #2
 8002c00:	0019      	movs	r1, r3
 8002c02:	2060      	movs	r0, #96	@ 0x60
 8002c04:	f7ff fe6a 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002c08:	23fa      	movs	r3, #250	@ 0xfa
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7ff fd75 	bl	80026fc <delayUS>
		break;
 8002c12:	e05e      	b.n	8002cd2 <BQ769x2_SetRegister+0x16a>
	case 2: //2 byte datalength
		TX_RegData[3] = (reg_data >> 8) & 0xff;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	240c      	movs	r4, #12
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	70da      	strb	r2, [r3, #3]
		I2C_WriteReg(0x3E, TX_RegData, 4);
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	2204      	movs	r2, #4
 8002c24:	0019      	movs	r1, r3
 8002c26:	203e      	movs	r0, #62	@ 0x3e
 8002c28:	f7ff fe58 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002c2c:	23fa      	movs	r3, #250	@ 0xfa
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7ff fd63 	bl	80026fc <delayUS>
		TX_Buffer[0] = Checksum(TX_RegData, 4);
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	2104      	movs	r1, #4
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7ff fdc1 	bl	80027c2 <Checksum>
 8002c40:	0003      	movs	r3, r0
 8002c42:	001a      	movs	r2, r3
 8002c44:	2114      	movs	r1, #20
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x06; //combined length of register address and data
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2202      	movs	r2, #2
 8002c54:	0019      	movs	r1, r3
 8002c56:	2060      	movs	r0, #96	@ 0x60
 8002c58:	f7ff fe40 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002c5c:	23fa      	movs	r3, #250	@ 0xfa
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff fd4b 	bl	80026fc <delayUS>
		break;
 8002c66:	e034      	b.n	8002cd2 <BQ769x2_SetRegister+0x16a>
	case 4: //4 byte datalength, Only used for CCGain and Capacity Gain
		TX_RegData[3] = (reg_data >> 8) & 0xff;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	210c      	movs	r1, #12
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	70da      	strb	r2, [r3, #3]
		TX_RegData[4] = (reg_data >> 16) & 0xff;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	711a      	strb	r2, [r3, #4]
		TX_RegData[5] = (reg_data >> 24) & 0xff;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	0e1b      	lsrs	r3, r3, #24
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	715a      	strb	r2, [r3, #5]
		I2C_WriteReg(0x3E, TX_RegData, 6);
 8002c88:	000c      	movs	r4, r1
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2206      	movs	r2, #6
 8002c8e:	0019      	movs	r1, r3
 8002c90:	203e      	movs	r0, #62	@ 0x3e
 8002c92:	f7ff fe23 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002c96:	23fa      	movs	r3, #250	@ 0xfa
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7ff fd2e 	bl	80026fc <delayUS>
		TX_Buffer[0] = Checksum(TX_RegData, 6);
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	2106      	movs	r1, #6
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fd8c 	bl	80027c2 <Checksum>
 8002caa:	0003      	movs	r3, r0
 8002cac:	001a      	movs	r2, r3
 8002cae:	2114      	movs	r1, #20
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x08; //combined length of register address and data
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	2060      	movs	r0, #96	@ 0x60
 8002cc2:	f7ff fe0b 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002cc6:	23fa      	movs	r3, #250	@ 0xfa
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff fd16 	bl	80026fc <delayUS>
		break;
 8002cd0:	46c0      	nop			@ (mov r8, r8)
	}
	delayMS(2);
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	f7ff fd28 	bl	8002728 <delayMS>
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b007      	add	sp, #28
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	0800c508 	.word	0x0800c508

08002ce4 <BQ769x2_CommandSubcommand>:

void BQ769x2_CommandSubcommand(uint16_t command) //For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{ //For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	0002      	movs	r2, r0
 8002cec:	1dbb      	adds	r3, r7, #6
 8002cee:	801a      	strh	r2, [r3, #0]

	uint8_t TX_Reg[2] = { 0x00, 0x00 };
 8002cf0:	210c      	movs	r1, #12
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	801a      	strh	r2, [r3, #0]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 8002cf8:	1dbb      	adds	r3, r7, #6
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	701a      	strb	r2, [r3, #0]
	TX_Reg[1] = (command >> 8) & 0xff;
 8002d02:	1dbb      	adds	r3, r7, #6
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	705a      	strb	r2, [r3, #1]

	I2C_WriteReg(0x3E, TX_Reg, 2);
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	2202      	movs	r2, #2
 8002d14:	0019      	movs	r1, r3
 8002d16:	203e      	movs	r0, #62	@ 0x3e
 8002d18:	f7ff fde0 	bl	80028dc <I2C_WriteReg>
	delayMS(2);
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f7ff fd03 	bl	8002728 <delayMS>
}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b004      	add	sp, #16
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <BQ769x2_Subcommand>:
}

//read data from Subcommands. Max readback size is 16 bytes because of a bug that would cause CRC errors with readbacks longer than 16.
void BQ769x2_Subcommand(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	0004      	movs	r4, r0
 8002d34:	0008      	movs	r0, r1
 8002d36:	0011      	movs	r1, r2
 8002d38:	1dbb      	adds	r3, r7, #6
 8002d3a:	1c22      	adds	r2, r4, #0
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	1c02      	adds	r2, r0, #0
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	1cfb      	adds	r3, r7, #3
 8002d46:	1c0a      	adds	r2, r1, #0
 8002d48:	701a      	strb	r2, [r3, #0]
	//security keys and Manu_data writes dont work with this function (reading these commands works)
	//max readback size is 16 bytes i.e. DASTATUS, CUV/COV snapshot are not supported by this function
	uint8_t TX_Reg[4] = { 0x00, 0x00, 0x00, 0x00 };
 8002d4a:	210c      	movs	r1, #12
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
	uint8_t TX_Buffer[2] = { 0x00, 0x00 };
 8002d52:	2308      	movs	r3, #8
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	2200      	movs	r2, #0
 8002d58:	801a      	strh	r2, [r3, #0]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 8002d5a:	1dbb      	adds	r3, r7, #6
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	701a      	strb	r2, [r3, #0]
	TX_Reg[1] = (command >> 8) & 0xff;
 8002d64:	1dbb      	adds	r3, r7, #6
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	705a      	strb	r2, [r3, #1]

	if (type == R) {	//read
 8002d72:	1cfb      	adds	r3, r7, #3
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d111      	bne.n	8002d9e <BQ769x2_Subcommand+0x72>
		I2C_WriteReg(0x3E, TX_Reg, 2);
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	203e      	movs	r0, #62	@ 0x3e
 8002d82:	f7ff fdab 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002d86:	23fa      	movs	r3, #250	@ 0xfa
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7ff fcb6 	bl	80026fc <delayUS>
		//I2C_BQ769x2_ReadReg(0x40, RX_32Byte, 32); //RX_32Byte is a global variable
		I2C_BQ769x2_ReadReg(0x40, RX_32Byte, 16); //more then 16 would cause CRC errors for a reason I didn't dig into, so I limit this to 16. This does mean that large data reads are not supported.
 8002d90:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <BQ769x2_Subcommand+0x134>)
 8002d92:	2210      	movs	r2, #16
 8002d94:	0019      	movs	r1, r3
 8002d96:	2040      	movs	r0, #64	@ 0x40
 8002d98:	f7ff fe2a 	bl	80029f0 <I2C_BQ769x2_ReadReg>
 8002d9c:	e058      	b.n	8002e50 <BQ769x2_Subcommand+0x124>
	} else if (type == W) {
 8002d9e:	1cfb      	adds	r3, r7, #3
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d124      	bne.n	8002df0 <BQ769x2_Subcommand+0xc4>
		//FET_Control, REG12_Control
		TX_Reg[2] = data & 0xff;
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	240c      	movs	r4, #12
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	709a      	strb	r2, [r3, #2]
		I2C_WriteReg(0x3E, TX_Reg, 3);
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2203      	movs	r2, #3
 8002db6:	0019      	movs	r1, r3
 8002db8:	203e      	movs	r0, #62	@ 0x3e
 8002dba:	f7ff fd8f 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002dbe:	23fa      	movs	r3, #250	@ 0xfa
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff fc9a 	bl	80026fc <delayUS>
		TX_Buffer[0] = Checksum(TX_Reg, 3);
 8002dc8:	193b      	adds	r3, r7, r4
 8002dca:	2103      	movs	r1, #3
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff fcf8 	bl	80027c2 <Checksum>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	2108      	movs	r1, #8
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x05; //combined length of registers address and data
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2205      	movs	r2, #5
 8002de0:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(0x60, TX_Buffer, 2);
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2202      	movs	r2, #2
 8002de6:	0019      	movs	r1, r3
 8002de8:	2060      	movs	r0, #96	@ 0x60
 8002dea:	f7ff fd77 	bl	80028dc <I2C_WriteReg>
 8002dee:	e02f      	b.n	8002e50 <BQ769x2_Subcommand+0x124>
	} else if (type == W2) { //write data with 2 bytes
 8002df0:	1cfb      	adds	r3, r7, #3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d12b      	bne.n	8002e50 <BQ769x2_Subcommand+0x124>
		//CB_Active_Cells, CB_SET_LVL
		TX_Reg[2] = data & 0xff;
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	210c      	movs	r1, #12
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	709a      	strb	r2, [r3, #2]
		TX_Reg[3] = (data >> 8) & 0xff;
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	70da      	strb	r2, [r3, #3]
		I2C_WriteReg(0x3E, TX_Reg, 4);
 8002e12:	000c      	movs	r4, r1
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	2204      	movs	r2, #4
 8002e18:	0019      	movs	r1, r3
 8002e1a:	203e      	movs	r0, #62	@ 0x3e
 8002e1c:	f7ff fd5e 	bl	80028dc <I2C_WriteReg>
		delayUS(1000);
 8002e20:	23fa      	movs	r3, #250	@ 0xfa
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fc69 	bl	80026fc <delayUS>
		TX_Buffer[0] = Checksum(TX_Reg, 4);
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7ff fcc7 	bl	80027c2 <Checksum>
 8002e34:	0003      	movs	r3, r0
 8002e36:	001a      	movs	r2, r3
 8002e38:	2108      	movs	r1, #8
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
		TX_Buffer[1] = 0x06; //combined length of registers address and data
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2206      	movs	r2, #6
 8002e42:	705a      	strb	r2, [r3, #1]
		I2C_WriteReg(0x60, TX_Buffer, 2);
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2202      	movs	r2, #2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	2060      	movs	r0, #96	@ 0x60
 8002e4c:	f7ff fd46 	bl	80028dc <I2C_WriteReg>
	}
	delayMS(2);
 8002e50:	2002      	movs	r0, #2
 8002e52:	f7ff fc69 	bl	8002728 <delayMS>
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b005      	add	sp, #20
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	200003a4 	.word	0x200003a4

08002e64 <BQ769x2_DirectCommand>:

void BQ769x2_DirectCommand(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{	//type: R = read, W = write
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	0004      	movs	r4, r0
 8002e6c:	0008      	movs	r0, r1
 8002e6e:	0011      	movs	r1, r2
 8002e70:	1dfb      	adds	r3, r7, #7
 8002e72:	1c22      	adds	r2, r4, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	1c02      	adds	r2, r0, #0
 8002e7a:	801a      	strh	r2, [r3, #0]
 8002e7c:	1dbb      	adds	r3, r7, #6
 8002e7e:	1c0a      	adds	r2, r1, #0
 8002e80:	701a      	strb	r2, [r3, #0]
	uint8_t TX_data[2] = { 0x00, 0x00 };
 8002e82:	210c      	movs	r1, #12
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	2200      	movs	r2, #0
 8002e88:	801a      	strh	r2, [r3, #0]

	//little endian format
	TX_data[0] = data & 0xff;
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	701a      	strb	r2, [r3, #0]
	TX_data[1] = (data >> 8) & 0xff;
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	705a      	strb	r2, [r3, #1]

	if (type == R) {	//Read
 8002ea2:	1dbb      	adds	r3, r7, #6
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <BQ769x2_DirectCommand+0x5e>
		I2C_BQ769x2_ReadReg(command, RX_data, 2); //RX_data is a global variable
 8002eaa:	4910      	ldr	r1, [pc, #64]	@ (8002eec <BQ769x2_DirectCommand+0x88>)
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff fd9c 	bl	80029f0 <I2C_BQ769x2_ReadReg>
		delayUS(2000);
 8002eb8:	23fa      	movs	r3, #250	@ 0xfa
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7ff fc1d 	bl	80026fc <delayUS>
	}
	if (type == W) { //write
 8002ec2:	1dbb      	adds	r3, r7, #6
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10c      	bne.n	8002ee4 <BQ769x2_DirectCommand+0x80>
		//Control_status, alarm_status, alarm_enable all 2 bytes long
		I2C_WriteReg(command, TX_data, 2);
 8002eca:	230c      	movs	r3, #12
 8002ecc:	18f9      	adds	r1, r7, r3
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff fd01 	bl	80028dc <I2C_WriteReg>
		delayUS(2000);
 8002eda:	23fa      	movs	r3, #250	@ 0xfa
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7ff fc0c 	bl	80026fc <delayUS>
	}
}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b005      	add	sp, #20
 8002eea:	bd90      	pop	{r4, r7, pc}
 8002eec:	200003a0 	.word	0x200003a0

08002ef0 <BQ769x2_ReadUnsignedRegister>:



uint16_t BQ769x2_ReadUnsignedRegister(uint16_t reg_addr, uint8_t count) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	1dbb      	adds	r3, r7, #6
 8002efa:	801a      	strh	r2, [r3, #0]
 8002efc:	1d7b      	adds	r3, r7, #5
 8002efe:	1c0a      	adds	r2, r1, #0
 8002f00:	701a      	strb	r2, [r3, #0]
	// Read Unsigned Register of 1 or 2 byte length
	BQ769x2_Subcommand(reg_addr, 0x00, R);
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff ff0e 	bl	8002d2c <BQ769x2_Subcommand>
	switch (count) {
 8002f10:	1d7b      	adds	r3, r7, #5
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <BQ769x2_ReadUnsignedRegister+0x2e>
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d003      	beq.n	8002f24 <BQ769x2_ReadUnsignedRegister+0x34>
 8002f1c:	e00b      	b.n	8002f36 <BQ769x2_ReadUnsignedRegister+0x46>
	case 1:
		return RX_32Byte[0];
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <BQ769x2_ReadUnsignedRegister+0x50>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	e009      	b.n	8002f38 <BQ769x2_ReadUnsignedRegister+0x48>
	case 2:
		return (RX_32Byte[1] * 256 + RX_32Byte[0]);
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <BQ769x2_ReadUnsignedRegister+0x50>)
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <BQ769x2_ReadUnsignedRegister+0x50>)
 8002f2e:	7812      	ldrb	r2, [r2, #0]
 8002f30:	189b      	adds	r3, r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	e000      	b.n	8002f38 <BQ769x2_ReadUnsignedRegister+0x48>
	}
	return 0;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200003a4 	.word	0x200003a4

08002f44 <BQ769x2_ReadBatteryStatus>:
		}
		tries++;
	}
}

void BQ769x2_ReadBatteryStatus() {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	// Read Battery Status with DirectCommand
	// This shows which primary protections have been triggered
	BQ769x2_DirectCommand(BatteryStatus, 0x00, R);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2012      	movs	r0, #18
 8002f4e:	f7ff ff89 	bl	8002e64 <BQ769x2_DirectCommand>
	value_BatteryStatus = (RX_data[1] * 256 + RX_data[0]);
 8002f52:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <BQ769x2_ReadBatteryStatus+0x28>)
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <BQ769x2_ReadBatteryStatus+0x28>)
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <BQ769x2_ReadBatteryStatus+0x2c>)
 8002f64:	801a      	strh	r2, [r3, #0]
}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200003a0 	.word	0x200003a0
 8002f70:	20000406 	.word	0x20000406

08002f74 <BQ769x2_Configure>:
	// Read Device Number with SubCommand
	BQ769x2_Subcommand(DEVICE_NUMBER, 0x00, R);
	return (RX_32Byte[1] * 256 + RX_32Byte[0]);
}

void BQ769x2_Configure() {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	// Configures all parameters in device RAM

	// Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
	BQ769x2_CommandSubcommand(SET_CFGUPDATE);
 8002f78:	2090      	movs	r0, #144	@ 0x90
 8002f7a:	f7ff feb3 	bl	8002ce4 <BQ769x2_CommandSubcommand>

	delayUS(2000);
 8002f7e:	23fa      	movs	r3, #250	@ 0xfa
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fbba 	bl	80026fc <delayUS>
	 * BIT 6 - 0 for default ADC speed
	 * BIT 5/4 - 10 for quarter speed measurements during balancing, increases balancing power
	 * BIT 3-2 - 00 for standard loop ADC loop speed
	 * BIT 1-0 - 10 for default coulomb counter conversion speed
	 */
	BQ769x2_SetRegister(PowerConfig, 0b0010110010100010, 2);
 8002f88:	49b5      	ldr	r1, [pc, #724]	@ (8003260 <BQ769x2_Configure+0x2ec>)
 8002f8a:	4bb6      	ldr	r3, [pc, #728]	@ (8003264 <BQ769x2_Configure+0x2f0>)
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff fdea 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(FETOptions, 0x0D, 1); //device may not turn FETs on autonomously unless allowed to do so. Important because the STM32 is the only thing that can turn the pack off.
 8002f94:	4bb4      	ldr	r3, [pc, #720]	@ (8003268 <BQ769x2_Configure+0x2f4>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	210d      	movs	r1, #13
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff fde4 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(REG0Config, 0x01, 1); // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
 8002fa0:	4bb2      	ldr	r3, [pc, #712]	@ (800326c <BQ769x2_Configure+0x2f8>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7ff fdde 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(REG12Config, 0x0D, 1); // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V and disable REG2 as not used
 8002fac:	4bb0      	ldr	r3, [pc, #704]	@ (8003270 <BQ769x2_Configure+0x2fc>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	210d      	movs	r1, #13
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff fdd8 	bl	8002b68 <BQ769x2_SetRegister>

	/* MFG status - keep chip in FULLACCESS, but set FETs to autonomous mode */
	BQ769x2_SetRegister(MfgStatusInit, 0b0000000000010000, 2); //autonomous mode
 8002fb8:	4bae      	ldr	r3, [pc, #696]	@ (8003274 <BQ769x2_Configure+0x300>)
 8002fba:	2202      	movs	r2, #2
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7ff fdd2 	bl	8002b68 <BQ769x2_SetRegister>

	//BQ769x2_SetRegister(MfgStatusInit,0b0000000000000000,2); //debug mode, not for production

	/* Pin Function Configs */
	BQ769x2_SetRegister(DFETOFFPinConfig, 0b10000010, 1); // Set DFETOFF pin to control BOTH DSG FET - 0x92FB = 0x42 (set to 0x00 to disable)
 8002fc4:	4bac      	ldr	r3, [pc, #688]	@ (8003278 <BQ769x2_Configure+0x304>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2182      	movs	r1, #130	@ 0x82
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff fdcc 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CFETOFFPinConfig, 0b10000010, 1); // Set CFETOFF pin to control BOTH CHG FET - 0x92FA = 0x42 (set to 0x00 to disable). Configures as ALT function, active-low, individual control
 8002fd0:	4baa      	ldr	r3, [pc, #680]	@ (800327c <BQ769x2_Configure+0x308>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2182      	movs	r1, #130	@ 0x82
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff fdc6 	bl	8002b68 <BQ769x2_SetRegister>
	//OPT3:1 to use REG1 to drive rising edge
	//OPT2:0 for no pull-up to reg1
	//OPT1:0
	//OPT0:1 weak pull-down enabled
	//FXN1/FXN0: 10 for alert
	BQ769x2_SetRegister(ALERTPinConfig, 0b00100110, 1);
 8002fdc:	4ba8      	ldr	r3, [pc, #672]	@ (8003280 <BQ769x2_Configure+0x30c>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	2126      	movs	r1, #38	@ 0x26
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff fdc0 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(TS1Config, 0x07, 1); // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
 8002fe8:	4ba6      	ldr	r3, [pc, #664]	@ (8003284 <BQ769x2_Configure+0x310>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	2107      	movs	r1, #7
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff fdba 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(TS3Config, 0x07, 1); // Set TS3 to measure Cell Temperature - 0x74
 8002ff4:	4ba4      	ldr	r3, [pc, #656]	@ (8003288 <BQ769x2_Configure+0x314>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2107      	movs	r1, #7
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f7ff fdb4 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(HDQPinConfig, 0x07, 1); // Set HDQ pin to measure Cell temperature
 8003000:	2393      	movs	r3, #147	@ 0x93
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	2201      	movs	r2, #1
 8003006:	2107      	movs	r1, #7
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff fdad 	bl	8002b68 <BQ769x2_SetRegister>

	/* Alarm Configuration - what can pull the ALERT pin high */
	// 'Default Alarm Mask' - only use the FULLSCAN bit - this will be set to trigger the ALERT pin to wake from DEEPSLEEP
	BQ769x2_SetRegister(DefaultAlarmMask, 0x0080, 2);
 800300e:	4b9f      	ldr	r3, [pc, #636]	@ (800328c <BQ769x2_Configure+0x318>)
 8003010:	2202      	movs	r2, #2
 8003012:	2180      	movs	r1, #128	@ 0x80
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fda7 	bl	8002b68 <BQ769x2_SetRegister>

	/* Current measurement */
	BQ769x2_SetRegister(CCGain, FloatToUInt((float) 0.75684), 4); // 7.5684/R_sense(mOhm) = 7.5684/10 = 7.76
 800301a:	4b9d      	ldr	r3, [pc, #628]	@ (8003290 <BQ769x2_Configure+0x31c>)
 800301c:	1c18      	adds	r0, r3, #0
 800301e:	f7ff fbc6 	bl	80027ae <FloatToUInt>
 8003022:	0003      	movs	r3, r0
 8003024:	489b      	ldr	r0, [pc, #620]	@ (8003294 <BQ769x2_Configure+0x320>)
 8003026:	2204      	movs	r2, #4
 8003028:	0019      	movs	r1, r3
 800302a:	f7ff fd9d 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CapacityGain, FloatToUInt((float) 225736.32), 4); // CC Gain * 298261.6178 = = 7.5684/10 * 298261.6178 = 225736.32
 800302e:	4b9a      	ldr	r3, [pc, #616]	@ (8003298 <BQ769x2_Configure+0x324>)
 8003030:	1c18      	adds	r0, r3, #0
 8003032:	f7ff fbbc 	bl	80027ae <FloatToUInt>
 8003036:	0003      	movs	r3, r0
 8003038:	4898      	ldr	r0, [pc, #608]	@ (800329c <BQ769x2_Configure+0x328>)
 800303a:	2204      	movs	r2, #4
 800303c:	0019      	movs	r1, r3
 800303e:	f7ff fd93 	bl	8002b68 <BQ769x2_SetRegister>
	 *
	 bestA [A1 A2 A3 A4 A5] =  [-22175  31696 -16652  31696 4029]
	 bestB [B1 B2 B3 B4] =  [-23835  20738 -8470  4596]
	 Adc0 = 11703
	 */
	BQ769x2_SetRegister(T18kCoeffa1, (int16_t) -22175, 2);
 8003042:	4997      	ldr	r1, [pc, #604]	@ (80032a0 <BQ769x2_Configure+0x32c>)
 8003044:	4b97      	ldr	r3, [pc, #604]	@ (80032a4 <BQ769x2_Configure+0x330>)
 8003046:	2202      	movs	r2, #2
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff fd8d 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffa2, (int16_t) 31696, 2);
 800304e:	4996      	ldr	r1, [pc, #600]	@ (80032a8 <BQ769x2_Configure+0x334>)
 8003050:	4b96      	ldr	r3, [pc, #600]	@ (80032ac <BQ769x2_Configure+0x338>)
 8003052:	2202      	movs	r2, #2
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff fd87 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffa3, (int16_t) -16652, 2);
 800305a:	4995      	ldr	r1, [pc, #596]	@ (80032b0 <BQ769x2_Configure+0x33c>)
 800305c:	4b95      	ldr	r3, [pc, #596]	@ (80032b4 <BQ769x2_Configure+0x340>)
 800305e:	2202      	movs	r2, #2
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff fd81 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffa4, (int16_t) 31696, 2);
 8003066:	4990      	ldr	r1, [pc, #576]	@ (80032a8 <BQ769x2_Configure+0x334>)
 8003068:	4b93      	ldr	r3, [pc, #588]	@ (80032b8 <BQ769x2_Configure+0x344>)
 800306a:	2202      	movs	r2, #2
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff fd7b 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffa5, (int16_t) 4029, 2);
 8003072:	4992      	ldr	r1, [pc, #584]	@ (80032bc <BQ769x2_Configure+0x348>)
 8003074:	4b92      	ldr	r3, [pc, #584]	@ (80032c0 <BQ769x2_Configure+0x34c>)
 8003076:	2202      	movs	r2, #2
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fd75 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffb1, (int16_t) -23835, 2);
 800307e:	4991      	ldr	r1, [pc, #580]	@ (80032c4 <BQ769x2_Configure+0x350>)
 8003080:	4b91      	ldr	r3, [pc, #580]	@ (80032c8 <BQ769x2_Configure+0x354>)
 8003082:	2202      	movs	r2, #2
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff fd6f 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffb2, (int16_t) 20738, 2);
 800308a:	4990      	ldr	r1, [pc, #576]	@ (80032cc <BQ769x2_Configure+0x358>)
 800308c:	4b90      	ldr	r3, [pc, #576]	@ (80032d0 <BQ769x2_Configure+0x35c>)
 800308e:	2202      	movs	r2, #2
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff fd69 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffb3, (int16_t) -8470, 2);
 8003096:	498f      	ldr	r1, [pc, #572]	@ (80032d4 <BQ769x2_Configure+0x360>)
 8003098:	4b8f      	ldr	r3, [pc, #572]	@ (80032d8 <BQ769x2_Configure+0x364>)
 800309a:	2202      	movs	r2, #2
 800309c:	0018      	movs	r0, r3
 800309e:	f7ff fd63 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kCoeffb4, (int16_t) 4596, 2);
 80030a2:	498e      	ldr	r1, [pc, #568]	@ (80032dc <BQ769x2_Configure+0x368>)
 80030a4:	4b8e      	ldr	r3, [pc, #568]	@ (80032e0 <BQ769x2_Configure+0x36c>)
 80030a6:	2202      	movs	r2, #2
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7ff fd5d 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(T18kAdc0, (int16_t) 11703, 2);
 80030ae:	498d      	ldr	r1, [pc, #564]	@ (80032e4 <BQ769x2_Configure+0x370>)
 80030b0:	4b8d      	ldr	r3, [pc, #564]	@ (80032e8 <BQ769x2_Configure+0x374>)
 80030b2:	2202      	movs	r2, #2
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff fd57 	bl	8002b68 <BQ769x2_SetRegister>

	/* Protections Config */
	BQ769x2_SetRegister(VCellMode, ACTIVE_CELLS, 2); //Faraday BMS = 0xAAFF for 12 cells. See schematic
 80030ba:	498c      	ldr	r1, [pc, #560]	@ (80032ec <BQ769x2_Configure+0x378>)
 80030bc:	4b8c      	ldr	r3, [pc, #560]	@ (80032f0 <BQ769x2_Configure+0x37c>)
 80030be:	2202      	movs	r2, #2
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff fd51 	bl	8002b68 <BQ769x2_SetRegister>

	// Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
	// Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
	// COV (over-voltage), CUV (under-voltage)
	//BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
	BQ769x2_SetRegister(EnabledProtectionsA, 0b10111100, 1);
 80030c6:	4b8b      	ldr	r3, [pc, #556]	@ (80032f4 <BQ769x2_Configure+0x380>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	21bc      	movs	r1, #188	@ 0xbc
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff fd4b 	bl	8002b68 <BQ769x2_SetRegister>

	// Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
	// Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
	// OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
	BQ769x2_SetRegister(EnabledProtectionsB, 0b01110111, 1);
 80030d2:	4b89      	ldr	r3, [pc, #548]	@ (80032f8 <BQ769x2_Configure+0x384>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	2177      	movs	r1, #119	@ 0x77
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff fd45 	bl	8002b68 <BQ769x2_SetRegister>

	BQ769x2_SetRegister(UTCThreshold, (signed char) 5, 1); // Set undertemperature in charge threshold. Assume +/- 5C because of poor thermistor coupling
 80030de:	4b87      	ldr	r3, [pc, #540]	@ (80032fc <BQ769x2_Configure+0x388>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	2105      	movs	r1, #5
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff fd3f 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(UTDThreshold, (signed char) -10, 1); // Set undertemperature in discharge threshold. Assume +/- 5C because of poor thermistor coupling
 80030ea:	230a      	movs	r3, #10
 80030ec:	425b      	negs	r3, r3
 80030ee:	4884      	ldr	r0, [pc, #528]	@ (8003300 <BQ769x2_Configure+0x38c>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	0019      	movs	r1, r3
 80030f4:	f7ff fd38 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(OTCThreshold, (signed char) 40, 1); // Set overtemperature in charge threshold. Assume +/- 5C because of poor thermistor coupling
 80030f8:	4b82      	ldr	r3, [pc, #520]	@ (8003304 <BQ769x2_Configure+0x390>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	2128      	movs	r1, #40	@ 0x28
 80030fe:	0018      	movs	r0, r3
 8003100:	f7ff fd32 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(OTDThreshold, (signed char) 55, 1); // Set overtemperature in discharge threshold. Assume +/- 5C because of poor thermistor coupling
 8003104:	4b80      	ldr	r3, [pc, #512]	@ (8003308 <BQ769x2_Configure+0x394>)
 8003106:	2201      	movs	r2, #1
 8003108:	2137      	movs	r1, #55	@ 0x37
 800310a:	0018      	movs	r0, r3
 800310c:	f7ff fd2c 	bl	8002b68 <BQ769x2_SetRegister>

	/* Balancing Configuration - leaving defaults for deltas (>40mV to start, <20mV to stop*/
	BQ769x2_SetRegister(BalancingConfiguration, 0b00000011, 1); //Set balancing to autonomously operate while in RELAX and CHARGE configurations. Sleep is disabled.
 8003110:	4b7e      	ldr	r3, [pc, #504]	@ (800330c <BQ769x2_Configure+0x398>)
 8003112:	2201      	movs	r2, #1
 8003114:	2103      	movs	r1, #3
 8003116:	0018      	movs	r0, r3
 8003118:	f7ff fd26 	bl	8002b68 <BQ769x2_SetRegister>
	//BQ769x2_SetRegister(BalancingConfiguration, 0b00000000, 1); //Set balancing to autonomously operate while in RELAX and CHARGE configurations. Sleep is disabled.
	BQ769x2_SetRegister(CellBalanceMaxCells, 3, 1); //0x933A  - set maximum number of cells that may balance at once. Contributes to thermal limit
 800311c:	4b7c      	ldr	r3, [pc, #496]	@ (8003310 <BQ769x2_Configure+0x39c>)
 800311e:	2201      	movs	r2, #1
 8003120:	2103      	movs	r1, #3
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff fd20 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CellBalanceMinDeltaCharge, 25, 1); //0x933D - set minimum cell balance delta at which balancing starts to 15mV
 8003128:	4b7a      	ldr	r3, [pc, #488]	@ (8003314 <BQ769x2_Configure+0x3a0>)
 800312a:	2201      	movs	r2, #1
 800312c:	2119      	movs	r1, #25
 800312e:	0018      	movs	r0, r3
 8003130:	f7ff fd1a 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CellBalanceMinDeltaRelax, 25, 1); //0x933D - set minimum cell balance delta at which balancing starts to 15mV
 8003134:	4b78      	ldr	r3, [pc, #480]	@ (8003318 <BQ769x2_Configure+0x3a4>)
 8003136:	2201      	movs	r2, #1
 8003138:	2119      	movs	r1, #25
 800313a:	0018      	movs	r0, r3
 800313c:	f7ff fd14 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CellBalanceStopDeltaCharge, 15, 1); //0x933D - set minimum cell balance delta at which balancing starts to 15mV
 8003140:	4b76      	ldr	r3, [pc, #472]	@ (800331c <BQ769x2_Configure+0x3a8>)
 8003142:	2201      	movs	r2, #1
 8003144:	210f      	movs	r1, #15
 8003146:	0018      	movs	r0, r3
 8003148:	f7ff fd0e 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CellBalanceStopDeltaRelax, 15, 1); //0x933D - set minimum cell balance delta at which balancing starts to 15mV
 800314c:	4b74      	ldr	r3, [pc, #464]	@ (8003320 <BQ769x2_Configure+0x3ac>)
 800314e:	2201      	movs	r2, #1
 8003150:	210f      	movs	r1, #15
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff fd08 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CellBalanceMinCellVCharge, (int16_t) 0x0E74, 2); //0x933B -Minimum voltage at which cells start balancing. Set to 3700mV for now
 8003158:	4972      	ldr	r1, [pc, #456]	@ (8003324 <BQ769x2_Configure+0x3b0>)
 800315a:	4b73      	ldr	r3, [pc, #460]	@ (8003328 <BQ769x2_Configure+0x3b4>)
 800315c:	2202      	movs	r2, #2
 800315e:	0018      	movs	r0, r3
 8003160:	f7ff fd02 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CellBalanceMinCellVRelax, (int16_t) 0x0E74, 2); //0x933F -Minimum voltage at which cells start balancing. Set to 3700mV for now
 8003164:	496f      	ldr	r1, [pc, #444]	@ (8003324 <BQ769x2_Configure+0x3b0>)
 8003166:	4b71      	ldr	r3, [pc, #452]	@ (800332c <BQ769x2_Configure+0x3b8>)
 8003168:	2202      	movs	r2, #2
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff fcfc 	bl	8002b68 <BQ769x2_SetRegister>

	/*Over and Under Voltage configuration*/
	BQ769x2_SetRegister(CUVThreshold, 0x34, 1); //CUV (under-voltage) Threshold - 0x9275 = 0x34 (2631 mV) this value multiplied by 50.6mV = 2631mV
 8003170:	4b6f      	ldr	r3, [pc, #444]	@ (8003330 <BQ769x2_Configure+0x3bc>)
 8003172:	2201      	movs	r2, #1
 8003174:	2134      	movs	r1, #52	@ 0x34
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff fcf6 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(COVThreshold, 0x53, 1); //COV (over-voltage) Threshold - 0x9278 = 0x53 (4199 mV) this value multiplied by 50.6mV = 4199mV
 800317c:	4b6d      	ldr	r3, [pc, #436]	@ (8003334 <BQ769x2_Configure+0x3c0>)
 800317e:	2201      	movs	r2, #1
 8003180:	2153      	movs	r1, #83	@ 0x53
 8003182:	0018      	movs	r0, r3
 8003184:	f7ff fcf0 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(ShutdownCellVoltage, 0x0960, 2); // Shutdown 0x923F - enter SHUTDOWN when below this cell voltage to minimize power draw . Set to 2400mV
 8003188:	2396      	movs	r3, #150	@ 0x96
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	486a      	ldr	r0, [pc, #424]	@ (8003338 <BQ769x2_Configure+0x3c4>)
 800318e:	2202      	movs	r2, #2
 8003190:	0019      	movs	r1, r3
 8003192:	f7ff fce9 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(ShutdownStackVoltage, 0x0AC8, 2); //ShutdownStackVoltage 0x9241 - enter SHUTDOWn when the stack is below this voltage - set to 2300mV/cell -> 2760*10mV
 8003196:	4969      	ldr	r1, [pc, #420]	@ (800333c <BQ769x2_Configure+0x3c8>)
 8003198:	4b69      	ldr	r3, [pc, #420]	@ (8003340 <BQ769x2_Configure+0x3cc>)
 800319a:	2202      	movs	r2, #2
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff fce3 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(CUVRecoveryHysteresis, 0x04, 1); //CUVRecoveryHystersis 0x927B - hysteresis value after COV - set to 200mV -> 4* 50.6mV = 202.4mV
 80031a2:	4b68      	ldr	r3, [pc, #416]	@ (8003344 <BQ769x2_Configure+0x3d0>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	2104      	movs	r1, #4
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff fcdd 	bl	8002b68 <BQ769x2_SetRegister>

	/*Definitions of charge and discharge*/
	BQ769x2_SetRegister(DsgCurrentThreshold, 0x64, 2); //0x9310   Set definition of discharge in mA. 100mA. Balancing happens when current is above the negative of this current.
 80031ae:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <BQ769x2_Configure+0x3d4>)
 80031b0:	2202      	movs	r2, #2
 80031b2:	2164      	movs	r1, #100	@ 0x64
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff fcd7 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(ChgCurrentThreshold, 0x32, 2); //0x9312  Set definition of charge in mA. 50mA Balancing happens in charge when above this current
 80031ba:	4b64      	ldr	r3, [pc, #400]	@ (800334c <BQ769x2_Configure+0x3d8>)
 80031bc:	2202      	movs	r2, #2
 80031be:	2132      	movs	r1, #50	@ 0x32
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7ff fcd1 	bl	8002b68 <BQ769x2_SetRegister>

	/*Charge current limit*/
	BQ769x2_SetRegister(OCCThreshold, 0x0F, 1); //OCC (over-current in charge) Threshold - 0x9280 = 0x05 (30mV = 3A across 10mOhm sense resistor) Units in 2mV
 80031c6:	4b62      	ldr	r3, [pc, #392]	@ (8003350 <BQ769x2_Configure+0x3dc>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	210f      	movs	r1, #15
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff fccb 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(OCCDelay, 0x1E, 1); //OCC Delay (over current in charge delay) - 0x9281 = 0x0D (around 100ms)
 80031d2:	4b60      	ldr	r3, [pc, #384]	@ (8003354 <BQ769x2_Configure+0x3e0>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	211e      	movs	r1, #30
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff fcc5 	bl	8002b68 <BQ769x2_SetRegister>

	/*Overcurrent in Discharge Config*/
	BQ769x2_SetRegister(OCD1Threshold, 0x7D, 1); //OCD1 "fast"Threshold - 0x9282 = 0x62 (250 mV = -25A across 10mOhm sense resistor) units of 2mV
 80031de:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <BQ769x2_Configure+0x3e4>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	217d      	movs	r1, #125	@ 0x7d
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff fcbf 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(OCD1Delay, 0x04, 1); //OCD1 Delay- 0x9283 = 10 ms to 426 ms in units of 3.3 ms, with the actual delay being 3.3 ms × (2 + setting) = 20ms.
 80031ea:	4b5c      	ldr	r3, [pc, #368]	@ (800335c <BQ769x2_Configure+0x3e8>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	2104      	movs	r1, #4
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff fcb9 	bl	8002b68 <BQ769x2_SetRegister>

	BQ769x2_SetRegister(OCD2Threshold, 0x64, 1); //OCD1 Threshold - 0x9284 = (0x50 * 20 mV = 20A across 10mOhm sense resistor) units of 2mV
 80031f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003360 <BQ769x2_Configure+0x3ec>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	2164      	movs	r1, #100	@ 0x64
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff fcb3 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(OCD2Delay, 0x5A, 1); //OCD2 Threshold - 0x9285 = 10 ms to 426 ms in units of 3.3 ms, with the actual delay being 3.3 ms × (2 + 120) = 90ms.
 8003202:	4b58      	ldr	r3, [pc, #352]	@ (8003364 <BQ769x2_Configure+0x3f0>)
 8003204:	2201      	movs	r2, #1
 8003206:	215a      	movs	r1, #90	@ 0x5a
 8003208:	0018      	movs	r0, r3
 800320a:	f7ff fcad 	bl	8002b68 <BQ769x2_SetRegister>

	BQ769x2_SetRegister(OCD3Threshold, (int16_t) -16000, 2); //OCD3 Threshold - 0x928A (-16A in units of user Amps (mA))
 800320e:	4956      	ldr	r1, [pc, #344]	@ (8003368 <BQ769x2_Configure+0x3f4>)
 8003210:	4b56      	ldr	r3, [pc, #344]	@ (800336c <BQ769x2_Configure+0x3f8>)
 8003212:	2202      	movs	r2, #2
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fca7 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(OCD3Delay, 15, 2); //OCD3 Threshold - 0x928C (15 second delay)
 800321a:	4b55      	ldr	r3, [pc, #340]	@ (8003370 <BQ769x2_Configure+0x3fc>)
 800321c:	2202      	movs	r2, #2
 800321e:	210f      	movs	r1, #15
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff fca1 	bl	8002b68 <BQ769x2_SetRegister>

	/*Fast short circuit detection config */
	BQ769x2_SetRegister(SCDThreshold, 0x0D, 1); //Short circuit discharge Threshold - 0x9286 = 0x0B (400 mV = 40A across 10mOhm sense resistor)
 8003226:	4b53      	ldr	r3, [pc, #332]	@ (8003374 <BQ769x2_Configure+0x400>)
 8003228:	2201      	movs	r2, #1
 800322a:	210d      	movs	r1, #13
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff fc9b 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(SCDDelay, 0x11, 1); //SCD Delay - 0x9287 = 0x11 (240us = (17-1)*15us = 240us
 8003232:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <BQ769x2_Configure+0x404>)
 8003234:	2201      	movs	r2, #1
 8003236:	2111      	movs	r1, #17
 8003238:	0018      	movs	r0, r3
 800323a:	f7ff fc95 	bl	8002b68 <BQ769x2_SetRegister>
	BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1); //Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
 800323e:	4b4f      	ldr	r3, [pc, #316]	@ (800337c <BQ769x2_Configure+0x408>)
 8003240:	2201      	movs	r2, #1
 8003242:	2101      	movs	r1, #1
 8003244:	0018      	movs	r0, r3
 8003246:	f7ff fc8f 	bl	8002b68 <BQ769x2_SetRegister>

	// Exit CONFIGUPDATE mode  - Subcommand 0x0092
	BQ769x2_CommandSubcommand(EXIT_CFGUPDATE);
 800324a:	2092      	movs	r0, #146	@ 0x92
 800324c:	f7ff fd4a 	bl	8002ce4 <BQ769x2_CommandSubcommand>
	delayUS(60000); //wait for chip to be ready
 8003250:	4b4b      	ldr	r3, [pc, #300]	@ (8003380 <BQ769x2_Configure+0x40c>)
 8003252:	0018      	movs	r0, r3
 8003254:	f7ff fa52 	bl	80026fc <delayUS>
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	00002ca2 	.word	0x00002ca2
 8003264:	00009234 	.word	0x00009234
 8003268:	00009308 	.word	0x00009308
 800326c:	00009237 	.word	0x00009237
 8003270:	00009236 	.word	0x00009236
 8003274:	00009343 	.word	0x00009343
 8003278:	000092fb 	.word	0x000092fb
 800327c:	000092fa 	.word	0x000092fa
 8003280:	000092fc 	.word	0x000092fc
 8003284:	000092fd 	.word	0x000092fd
 8003288:	000092ff 	.word	0x000092ff
 800328c:	0000926d 	.word	0x0000926d
 8003290:	3f41c044 	.word	0x3f41c044
 8003294:	000091a8 	.word	0x000091a8
 8003298:	485c7214 	.word	0x485c7214
 800329c:	000091ac 	.word	0x000091ac
 80032a0:	ffffa961 	.word	0xffffa961
 80032a4:	000091ea 	.word	0x000091ea
 80032a8:	00007bd0 	.word	0x00007bd0
 80032ac:	000091ec 	.word	0x000091ec
 80032b0:	ffffbef4 	.word	0xffffbef4
 80032b4:	000091ee 	.word	0x000091ee
 80032b8:	000091f0 	.word	0x000091f0
 80032bc:	00000fbd 	.word	0x00000fbd
 80032c0:	000091f2 	.word	0x000091f2
 80032c4:	ffffa2e5 	.word	0xffffa2e5
 80032c8:	000091f4 	.word	0x000091f4
 80032cc:	00005102 	.word	0x00005102
 80032d0:	000091f6 	.word	0x000091f6
 80032d4:	ffffdeea 	.word	0xffffdeea
 80032d8:	000091f8 	.word	0x000091f8
 80032dc:	000011f4 	.word	0x000011f4
 80032e0:	000091fa 	.word	0x000091fa
 80032e4:	00002db7 	.word	0x00002db7
 80032e8:	000091fe 	.word	0x000091fe
 80032ec:	0000aaff 	.word	0x0000aaff
 80032f0:	00009304 	.word	0x00009304
 80032f4:	00009261 	.word	0x00009261
 80032f8:	00009262 	.word	0x00009262
 80032fc:	000092a6 	.word	0x000092a6
 8003300:	000092a9 	.word	0x000092a9
 8003304:	0000929a 	.word	0x0000929a
 8003308:	0000929d 	.word	0x0000929d
 800330c:	00009335 	.word	0x00009335
 8003310:	0000933a 	.word	0x0000933a
 8003314:	0000933d 	.word	0x0000933d
 8003318:	00009341 	.word	0x00009341
 800331c:	0000933e 	.word	0x0000933e
 8003320:	00009342 	.word	0x00009342
 8003324:	00000e74 	.word	0x00000e74
 8003328:	0000933b 	.word	0x0000933b
 800332c:	0000933f 	.word	0x0000933f
 8003330:	00009275 	.word	0x00009275
 8003334:	00009278 	.word	0x00009278
 8003338:	0000923f 	.word	0x0000923f
 800333c:	00000ac8 	.word	0x00000ac8
 8003340:	00009241 	.word	0x00009241
 8003344:	0000927b 	.word	0x0000927b
 8003348:	00009310 	.word	0x00009310
 800334c:	00009312 	.word	0x00009312
 8003350:	00009280 	.word	0x00009280
 8003354:	00009281 	.word	0x00009281
 8003358:	00009282 	.word	0x00009282
 800335c:	00009283 	.word	0x00009283
 8003360:	00009284 	.word	0x00009284
 8003364:	00009285 	.word	0x00009285
 8003368:	ffffc180 	.word	0xffffc180
 800336c:	0000928a 	.word	0x0000928a
 8003370:	0000928c 	.word	0x0000928c
 8003374:	00009286 	.word	0x00009286
 8003378:	00009287 	.word	0x00009287
 800337c:	00009295 	.word	0x00009295
 8003380:	0000ea60 	.word	0x0000ea60

08003384 <BQ769x2_Initialize>:

/*Initialize BQ chip by configuring registers and then checking that a critical register was written. Return 1 if successfully configured, 0 if failed*/
uint8_t BQ769x2_Initialize() {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0

	BQ769x2_Configure();
 8003388:	f7ff fdf4 	bl	8002f74 <BQ769x2_Configure>

	//Fail if device is still in config update mode.
	BQ769x2_ReadBatteryStatus();
 800338c:	f7ff fdda 	bl	8002f44 <BQ769x2_ReadBatteryStatus>
	if (value_BatteryStatus & 1) {
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <BQ769x2_Initialize+0x3c>)
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	001a      	movs	r2, r3
 8003396:	2301      	movs	r3, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d001      	beq.n	80033a0 <BQ769x2_Initialize+0x1c>
		return 0;
 800339c:	2300      	movs	r3, #0
 800339e:	e00c      	b.n	80033ba <BQ769x2_Initialize+0x36>
	}
	//Fail if the active cells register is not 0xAAFF
	if (BQ769x2_ReadUnsignedRegister(VCellMode, 2) != ACTIVE_CELLS) {
 80033a0:	4b08      	ldr	r3, [pc, #32]	@ (80033c4 <BQ769x2_Initialize+0x40>)
 80033a2:	2102      	movs	r1, #2
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7ff fda3 	bl	8002ef0 <BQ769x2_ReadUnsignedRegister>
 80033aa:	0003      	movs	r3, r0
 80033ac:	001a      	movs	r2, r3
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <BQ769x2_Initialize+0x44>)
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <BQ769x2_Initialize+0x34>
		return 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <BQ769x2_Initialize+0x36>
	}

	//config successful and register spot check complete
	return 1;
 80033b8:	2301      	movs	r3, #1

}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000406 	.word	0x20000406
 80033c4:	00009304 	.word	0x00009304
 80033c8:	0000aaff 	.word	0x0000aaff

080033cc <BQ769x2_ForceDisableFETs>:

//  ********************************* FET Control Commands  ***************************************

void BQ769x2_ForceDisableFETs() {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	// Disables all FETs using the DFETOFF (BOTHOFF) pin
	// The DFETOFF pin on the BQ76952EVM should be connected to the MCU board to use this function
	HAL_GPIO_WritePin(CFETOFF_PORT, CFETOFF_PIN, GPIO_PIN_RESET); // CFETOFF pin (BOTHOFF) set low
 80033d0:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <BQ769x2_ForceDisableFETs+0x24>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	2108      	movs	r1, #8
 80033d6:	0018      	movs	r0, r3
 80033d8:	f002 fce7 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DFETOFF_PORT, DFETOFF_PIN, GPIO_PIN_RESET); // DFETOFF pin (BOTHOFF) set low
 80033dc:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <BQ769x2_ForceDisableFETs+0x24>)
 80033de:	2200      	movs	r2, #0
 80033e0:	2110      	movs	r1, #16
 80033e2:	0018      	movs	r0, r3
 80033e4:	f002 fce1 	bl	8005daa <HAL_GPIO_WritePin>
}
 80033e8:	46c0      	nop			@ (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	50000400 	.word	0x50000400

080033f4 <BQ769x2_AllowFETs>:

void BQ769x2_AllowFETs() {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	// Resets DFETOFF (BOTHOFF) pin
	// The DFETOFF pin on the BQ76952EVM should be connected to the MCU board to use this function
	HAL_GPIO_WritePin(CFETOFF_PORT, CFETOFF_PIN, GPIO_PIN_SET); // CFETOFF pin set high
 80033f8:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <BQ769x2_AllowFETs+0x24>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	2108      	movs	r1, #8
 80033fe:	0018      	movs	r0, r3
 8003400:	f002 fcd3 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DFETOFF_PORT, DFETOFF_PIN, GPIO_PIN_SET); // DFETOFF pin set high
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <BQ769x2_AllowFETs+0x24>)
 8003406:	2201      	movs	r2, #1
 8003408:	2110      	movs	r1, #16
 800340a:	0018      	movs	r0, r3
 800340c:	f002 fccd 	bl	8005daa <HAL_GPIO_WritePin>
}
 8003410:	46c0      	nop			@ (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	50000400 	.word	0x50000400

0800341c <BQ769x2_ResetShutdownPin>:
	// Puts the device into SHUTDOWN mode using the RST_SHUT pin
	// The RST_SHUT pin on the BQ76952EVM should be connected to the MCU board to use this function
	HAL_GPIO_WritePin(RST_SHUT_CTRL_PORT, RST_SHUT_CTRL_PIN, GPIO_PIN_SET); // Sets RST_SHUT pin
}

void BQ769x2_ResetShutdownPin() {
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	// Releases the RST_SHUT pin
	// The RST_SHUT pin on the BQ76952EVM should be connected to the MCU board to use this function
	HAL_GPIO_WritePin(RST_SHUT_CTRL_PORT, RST_SHUT_CTRL_PIN, GPIO_PIN_RESET); // Resets RST_SHUT pin
 8003420:	23a0      	movs	r3, #160	@ 0xa0
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	2200      	movs	r2, #0
 8003426:	2102      	movs	r1, #2
 8003428:	0018      	movs	r0, r3
 800342a:	f002 fcbe 	bl	8005daa <HAL_GPIO_WritePin>
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <BQ769x2_EnterDeepSleep>:

/*Put the BQ into DEEPSLEEP by writing the DEEPSLEEP command twice. Returns 1 if successful, otherwise 0*/
uint8_t BQ769x2_EnterDeepSleep() {
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	BQ769x2_CommandSubcommand(DEEPSLEEP);
 8003438:	200f      	movs	r0, #15
 800343a:	f7ff fc53 	bl	8002ce4 <BQ769x2_CommandSubcommand>
	delayUS(2000);
 800343e:	23fa      	movs	r3, #250	@ 0xfa
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff f95a 	bl	80026fc <delayUS>
	BQ769x2_CommandSubcommand(DEEPSLEEP);
 8003448:	200f      	movs	r0, #15
 800344a:	f7ff fc4b 	bl	8002ce4 <BQ769x2_CommandSubcommand>
	delayUS(2000);
 800344e:	23fa      	movs	r3, #250	@ 0xfa
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff f952 	bl	80026fc <delayUS>
	if (BQ769x2_ReadControlStatus() & 0x04) //if bit 2 is high, then device is in DEEPSLEEP. Return 1 for success
 8003458:	f000 f89c 	bl	8003594 <BQ769x2_ReadControlStatus>
 800345c:	0003      	movs	r3, r0
 800345e:	001a      	movs	r2, r3
 8003460:	2304      	movs	r3, #4
 8003462:	4013      	ands	r3, r2
 8003464:	d001      	beq.n	800346a <BQ769x2_EnterDeepSleep+0x36>
			{
		return 1;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <BQ769x2_EnterDeepSleep+0x38>
	}
	return 0;
 800346a:	2300      	movs	r3, #0
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <BQ769x2_Wake>:

/*Wake up the BQ from DEEPSLEEP by toggling RST_SHUT once. Return 1 if successfully woken up, otherwise 0*/
uint8_t BQ769x2_Wake() {
 8003472:	b580      	push	{r7, lr}
 8003474:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_SHUT_CTRL_PORT, RST_SHUT_CTRL_PIN, GPIO_PIN_SET);
 8003476:	23a0      	movs	r3, #160	@ 0xa0
 8003478:	05db      	lsls	r3, r3, #23
 800347a:	2201      	movs	r2, #1
 800347c:	2102      	movs	r1, #2
 800347e:	0018      	movs	r0, r3
 8003480:	f002 fc93 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(2000);
 8003484:	23fa      	movs	r3, #250	@ 0xfa
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff f937 	bl	80026fc <delayUS>
	HAL_GPIO_WritePin(RST_SHUT_CTRL_PORT, RST_SHUT_CTRL_PIN, GPIO_PIN_RESET);
 800348e:	23a0      	movs	r3, #160	@ 0xa0
 8003490:	05db      	lsls	r3, r3, #23
 8003492:	2200      	movs	r2, #0
 8003494:	2102      	movs	r1, #2
 8003496:	0018      	movs	r0, r3
 8003498:	f002 fc87 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(2000);
 800349c:	23fa      	movs	r3, #250	@ 0xfa
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff f92b 	bl	80026fc <delayUS>

	if (BQ769x2_ReadControlStatus() & 0x04) { //if bit 2 is high, then device is in DEEPSLEEP
 80034a6:	f000 f875 	bl	8003594 <BQ769x2_ReadControlStatus>
 80034aa:	0003      	movs	r3, r0
 80034ac:	001a      	movs	r2, r3
 80034ae:	2304      	movs	r3, #4
 80034b0:	4013      	ands	r3, r2
 80034b2:	d001      	beq.n	80034b8 <BQ769x2_Wake+0x46>
		return 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <BQ769x2_Wake+0x48>
	}

	return 1;
 80034b8:	2301      	movs	r3, #1

}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <BQ769x2_Reset>:
	HAL_GPIO_WritePin(RST_SHUT_CTRL_PORT, RST_SHUT_CTRL_PIN, GPIO_PIN_RESET);
}

/* BQ769x2_Reset - hard reset of the BQ chip, which takes ~250ms. The 3V3 rail comes up 20ms after the rest begins
 * Should only be called if the 3v3 rail needs to be reset, which can fix some issues related to sleep with the STM32 after using the debugger */
void BQ769x2_Reset() {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
	uint8_t RetryCounter = 0;
 80034c6:	1dfb      	adds	r3, r7, #7
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
	while (RetryCounter < 20) {
 80034cc:	e00f      	b.n	80034ee <BQ769x2_Reset+0x2e>
		HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_SET);
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	0099      	lsls	r1, r3, #2
 80034d2:	23a0      	movs	r3, #160	@ 0xa0
 80034d4:	05db      	lsls	r3, r3, #23
 80034d6:	2201      	movs	r2, #1
 80034d8:	0018      	movs	r0, r3
 80034da:	f002 fc66 	bl	8005daa <HAL_GPIO_WritePin>
		BQ769x2_CommandSubcommand(BQ769x2_RESET); // Resets the BQ769x2 registers and kills the 3v3 Rail
 80034de:	2012      	movs	r0, #18
 80034e0:	f7ff fc00 	bl	8002ce4 <BQ769x2_CommandSubcommand>
		RetryCounter++;
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	3201      	adds	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
	while (RetryCounter < 20) {
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b13      	cmp	r3, #19
 80034f4:	d9eb      	bls.n	80034ce <BQ769x2_Reset+0xe>
	}

	Error_Handler(); //If we end up here, something is truly messed up
 80034f6:	f001 fb75 	bl	8004be4 <Error_Handler>
}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <BQ769x2_Ready>:
/* BQ769x2_Ready - return 1 if BQ is initialized, 0 otherwise */
uint8_t BQ769x2_Ready() {
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	BQ769x2_ReadBatteryStatus();
 8003508:	f7ff fd1c 	bl	8002f44 <BQ769x2_ReadBatteryStatus>
	if (value_BatteryStatus & 0x300) { //if bits 8 and 9 of battery status are set, device has finished booting
 800350c:	4b07      	ldr	r3, [pc, #28]	@ (800352c <BQ769x2_Ready+0x28>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	001a      	movs	r2, r3
 8003512:	23c0      	movs	r3, #192	@ 0xc0
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4013      	ands	r3, r2
 8003518:	d004      	beq.n	8003524 <BQ769x2_Ready+0x20>
		delayMS(60);
 800351a:	203c      	movs	r0, #60	@ 0x3c
 800351c:	f7ff f904 	bl	8002728 <delayMS>
		return 1;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <BQ769x2_Ready+0x22>
	};
	return 0;
 8003524:	2300      	movs	r3, #0
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000406 	.word	0x20000406

08003530 <BQ769x2_SoftWake>:

/* Quickly toggle RST_SHUT to wake the BQ chip. Simple function that doesn't block */
void BQ769x2_SoftWake() {
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_SHUT_CTRL_PORT, RST_SHUT_CTRL_PIN, GPIO_PIN_SET);
 8003534:	23a0      	movs	r3, #160	@ 0xa0
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2201      	movs	r2, #1
 800353a:	2102      	movs	r1, #2
 800353c:	0018      	movs	r0, r3
 800353e:	f002 fc34 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(2000);
 8003542:	23fa      	movs	r3, #250	@ 0xfa
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	0018      	movs	r0, r3
 8003548:	f7ff f8d8 	bl	80026fc <delayUS>
	HAL_GPIO_WritePin(RST_SHUT_CTRL_PORT, RST_SHUT_CTRL_PIN, GPIO_PIN_RESET);
 800354c:	23a0      	movs	r3, #160	@ 0xa0
 800354e:	05db      	lsls	r3, r3, #23
 8003550:	2200      	movs	r2, #0
 8003552:	2102      	movs	r1, #2
 8003554:	0018      	movs	r0, r3
 8003556:	f002 fc28 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(2000);
 800355a:	23fa      	movs	r3, #250	@ 0xfa
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	0018      	movs	r0, r3
 8003560:	f7ff f8cc 	bl	80026fc <delayUS>
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <BQ769x2_ReadAlarmStatus>:

// ********************************* End of BQ769x2 Power Commands   *****************************************

// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus() {
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
	// Read this register to find out why the ALERT pin was asserted
	BQ769x2_DirectCommand(AlarmStatus, 0x00, R);
 8003570:	2200      	movs	r2, #0
 8003572:	2100      	movs	r1, #0
 8003574:	2062      	movs	r0, #98	@ 0x62
 8003576:	f7ff fc75 	bl	8002e64 <BQ769x2_DirectCommand>
	return (RX_data[1] * 256 + RX_data[0]);
 800357a:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <BQ769x2_ReadAlarmStatus+0x24>)
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	b29b      	uxth	r3, r3
 8003582:	4a03      	ldr	r2, [pc, #12]	@ (8003590 <BQ769x2_ReadAlarmStatus+0x24>)
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	189b      	adds	r3, r3, r2
 8003588:	b29b      	uxth	r3, r3
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200003a0 	.word	0x200003a0

08003594 <BQ769x2_ReadControlStatus>:

uint16_t BQ769x2_ReadControlStatus() {
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
	// Read this register to get the Control Status Pins
	BQ769x2_DirectCommand(ControlStatus, 0x00, R);
 8003598:	2200      	movs	r2, #0
 800359a:	2100      	movs	r1, #0
 800359c:	2000      	movs	r0, #0
 800359e:	f7ff fc61 	bl	8002e64 <BQ769x2_DirectCommand>
	return (RX_data[1] * 256 + RX_data[0]);
 80035a2:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <BQ769x2_ReadControlStatus+0x24>)
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	4a03      	ldr	r2, [pc, #12]	@ (80035b8 <BQ769x2_ReadControlStatus+0x24>)
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	b29b      	uxth	r3, r3
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200003a0 	.word	0x200003a0

080035bc <BQ769x2_ReadSafetyStatus>:
	// Read this register to find out why the ALERT raw pin was asserted. Distinct from AlarmStatus in that these do not latch
	BQ769x2_DirectCommand(AlarmRawStatus, 0x00, R);
	return (RX_data[1] * 256 + RX_data[0]);
}

uint8_t BQ769x2_ReadSafetyStatus() {
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	// Read Safety Status A/B/C and find which bits are set
	// This shows which primary protections have been triggered
	// Return 1 at end to match structure of other functions
	BQ769x2_DirectCommand(SafetyStatusA, 0x00, R);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	2003      	movs	r0, #3
 80035c6:	f7ff fc4d 	bl	8002e64 <BQ769x2_DirectCommand>
	value_SafetyStatusA = (RX_data[1] * 256 + RX_data[0]);
 80035ca:	4b28      	ldr	r3, [pc, #160]	@ (800366c <BQ769x2_ReadSafetyStatus+0xb0>)
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <BQ769x2_ReadSafetyStatus+0xb4>)
 80035d0:	701a      	strb	r2, [r3, #0]
	//Example Fault Flags
	UV_Fault = ((0x4 & RX_data[0]) >> 2);
 80035d2:	4b26      	ldr	r3, [pc, #152]	@ (800366c <BQ769x2_ReadSafetyStatus+0xb0>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2201      	movs	r2, #1
 80035dc:	4013      	ands	r3, r2
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4b24      	ldr	r3, [pc, #144]	@ (8003674 <BQ769x2_ReadSafetyStatus+0xb8>)
 80035e2:	701a      	strb	r2, [r3, #0]
	OV_Fault = ((0x8 & RX_data[0]) >> 3);
 80035e4:	4b21      	ldr	r3, [pc, #132]	@ (800366c <BQ769x2_ReadSafetyStatus+0xb0>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <BQ769x2_ReadSafetyStatus+0xbc>)
 80035f4:	701a      	strb	r2, [r3, #0]
	SCD_Fault = ((0x8 & RX_data[1]) >> 3);
 80035f6:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <BQ769x2_ReadSafetyStatus+0xb0>)
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	08db      	lsrs	r3, r3, #3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	b2da      	uxtb	r2, r3
 8003604:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <BQ769x2_ReadSafetyStatus+0xc0>)
 8003606:	701a      	strb	r2, [r3, #0]
	OCD_Fault = ((0x2 & RX_data[1]) >> 1);
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <BQ769x2_ReadSafetyStatus+0xb0>)
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2201      	movs	r2, #1
 8003612:	4013      	ands	r3, r2
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <BQ769x2_ReadSafetyStatus+0xc4>)
 8003618:	701a      	strb	r2, [r3, #0]
	BQ769x2_DirectCommand(SafetyStatusB, 0x00, R);
 800361a:	2200      	movs	r2, #0
 800361c:	2100      	movs	r1, #0
 800361e:	2005      	movs	r0, #5
 8003620:	f7ff fc20 	bl	8002e64 <BQ769x2_DirectCommand>
	value_SafetyStatusB = (RX_data[1] * 256 + RX_data[0]);
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <BQ769x2_ReadSafetyStatus+0xb0>)
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	4b16      	ldr	r3, [pc, #88]	@ (8003684 <BQ769x2_ReadSafetyStatus+0xc8>)
 800362a:	701a      	strb	r2, [r3, #0]

	BQ769x2_DirectCommand(SafetyStatusC, 0x00, R);
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	2007      	movs	r0, #7
 8003632:	f7ff fc17 	bl	8002e64 <BQ769x2_DirectCommand>
	value_SafetyStatusC = (RX_data[1] * 256 + RX_data[0]);
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <BQ769x2_ReadSafetyStatus+0xb0>)
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <BQ769x2_ReadSafetyStatus+0xcc>)
 800363c:	701a      	strb	r2, [r3, #0]

	if ((value_SafetyStatusA + value_SafetyStatusB + value_SafetyStatusC) > 1) {
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <BQ769x2_ReadSafetyStatus+0xb4>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	001a      	movs	r2, r3
 8003644:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <BQ769x2_ReadSafetyStatus+0xc8>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	18d3      	adds	r3, r2, r3
 800364a:	4a0f      	ldr	r2, [pc, #60]	@ (8003688 <BQ769x2_ReadSafetyStatus+0xcc>)
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	189b      	adds	r3, r3, r2
 8003650:	2b01      	cmp	r3, #1
 8003652:	dd03      	ble.n	800365c <BQ769x2_ReadSafetyStatus+0xa0>
		ProtectionsTriggered = 1;
 8003654:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <BQ769x2_ReadSafetyStatus+0xd0>)
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e002      	b.n	8003662 <BQ769x2_ReadSafetyStatus+0xa6>
	} else {
		ProtectionsTriggered = 0;
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <BQ769x2_ReadSafetyStatus+0xd0>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8003662:	2301      	movs	r3, #1
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	200003a0 	.word	0x200003a0
 8003670:	20000402 	.word	0x20000402
 8003674:	2000040a 	.word	0x2000040a
 8003678:	2000040b 	.word	0x2000040b
 800367c:	2000040c 	.word	0x2000040c
 8003680:	2000040d 	.word	0x2000040d
 8003684:	20000403 	.word	0x20000403
 8003688:	20000404 	.word	0x20000404
 800368c:	2000040e 	.word	0x2000040e

08003690 <BQ769x2_ReadVoltage>:

// ********************************* BQ769x2 Measurement Commands   *****************************************

uint16_t BQ769x2_ReadVoltage(uint8_t command)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	0002      	movs	r2, r0
 8003698:	1dfb      	adds	r3, r7, #7
 800369a:	701a      	strb	r2, [r3, #0]
	//RX_data is global var
	BQ769x2_DirectCommand(command, 0x00, R);
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7ff fbdd 	bl	8002e64 <BQ769x2_DirectCommand>
	delayUS(2000);
 80036aa:	23fa      	movs	r3, #250	@ 0xfa
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	0018      	movs	r0, r3
 80036b0:	f7ff f824 	bl	80026fc <delayUS>
	if (command >= Cell1Voltage && command <= Cell16Voltage) {//Cells 1 through 16 (0x14 to 0x32)
 80036b4:	1dfb      	adds	r3, r7, #7
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b13      	cmp	r3, #19
 80036ba:	d90c      	bls.n	80036d6 <BQ769x2_ReadVoltage+0x46>
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b32      	cmp	r3, #50	@ 0x32
 80036c2:	d808      	bhi.n	80036d6 <BQ769x2_ReadVoltage+0x46>
		return (RX_data[1] * 256 + RX_data[0]); //voltage is reported in mV
 80036c4:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <BQ769x2_ReadVoltage+0x68>)
 80036c6:	785b      	ldrb	r3, [r3, #1]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <BQ769x2_ReadVoltage+0x68>)
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	e00b      	b.n	80036ee <BQ769x2_ReadVoltage+0x5e>
	} else { //stack, Pack, LD
		return 10 * (RX_data[1] * 256 + RX_data[0]); //voltage is reported in 0.01V units
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <BQ769x2_ReadVoltage+0x68>)
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	4a06      	ldr	r2, [pc, #24]	@ (80036f8 <BQ769x2_ReadVoltage+0x68>)
 80036de:	7812      	ldrb	r2, [r2, #0]
 80036e0:	189b      	adds	r3, r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	1c1a      	adds	r2, r3, #0
 80036e6:	0092      	lsls	r2, r2, #2
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	18db      	adds	r3, r3, r3
 80036ec:	b29b      	uxth	r3, r3
	}

}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	200003a0 	.word	0x200003a0

080036fc <BQ769x2_ReadAllVoltages>:
void BQ769x2_ReadAllVoltages()
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
	//int cellvoltageholder = Cell1Voltage; //Cell1Voltage is 0x14
	//for (int x = 0; x < 16; x++) { //Reads all cell voltages
	//	CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
	//	cellvoltageholder = cellvoltageholder + 2;
	//}
	for (int x = 0; x < 16; x++) { //Reads all cell voltages
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	e010      	b.n	800372a <BQ769x2_ReadAllVoltages+0x2e>
			CellVoltage[x] = BQ769x2_ReadVoltage(Cell1Voltage + 2 * x);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	330a      	adds	r3, #10
 800370c:	b2db      	uxtb	r3, r3
 800370e:	18db      	adds	r3, r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff ffbc 	bl	8003690 <BQ769x2_ReadVoltage>
 8003718:	0003      	movs	r3, r0
 800371a:	b219      	sxth	r1, r3
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <BQ769x2_ReadAllVoltages+0x68>)
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	0052      	lsls	r2, r2, #1
 8003722:	52d1      	strh	r1, [r2, r3]
	for (int x = 0; x < 16; x++) { //Reads all cell voltages
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	ddeb      	ble.n	8003708 <BQ769x2_ReadAllVoltages+0xc>
	}

	Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 8003730:	2034      	movs	r0, #52	@ 0x34
 8003732:	f7ff ffad 	bl	8003690 <BQ769x2_ReadVoltage>
 8003736:	0003      	movs	r3, r0
 8003738:	001a      	movs	r2, r3
 800373a:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <BQ769x2_ReadAllVoltages+0x6c>)
 800373c:	801a      	strh	r2, [r3, #0]
	Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage);
 800373e:	2036      	movs	r0, #54	@ 0x36
 8003740:	f7ff ffa6 	bl	8003690 <BQ769x2_ReadVoltage>
 8003744:	0003      	movs	r3, r0
 8003746:	001a      	movs	r2, r3
 8003748:	4b08      	ldr	r3, [pc, #32]	@ (800376c <BQ769x2_ReadAllVoltages+0x70>)
 800374a:	801a      	strh	r2, [r3, #0]
	LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 800374c:	2038      	movs	r0, #56	@ 0x38
 800374e:	f7ff ff9f 	bl	8003690 <BQ769x2_ReadVoltage>
 8003752:	0003      	movs	r3, r0
 8003754:	001a      	movs	r2, r3
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <BQ769x2_ReadAllVoltages+0x74>)
 8003758:	801a      	strh	r2, [r3, #0]
}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	200003c4 	.word	0x200003c4
 8003768:	200003f8 	.word	0x200003f8
 800376c:	200003fa 	.word	0x200003fa
 8003770:	200003fc 	.word	0x200003fc

08003774 <BQ769x2_ReadCurrent>:

int16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
	BQ769x2_DirectCommand(CC2Current, 0x00, R);
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	203a      	movs	r0, #58	@ 0x3a
 800377e:	f7ff fb71 	bl	8002e64 <BQ769x2_DirectCommand>
	return (RX_data[1] * 256 + RX_data[0]); // cell current is reported as an int16 in UserAmps
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <BQ769x2_ReadCurrent+0x28>)
 8003784:	785b      	ldrb	r3, [r3, #1]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	b29b      	uxth	r3, r3
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <BQ769x2_ReadCurrent+0x28>)
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	189b      	adds	r3, r3, r2
 8003790:	b29b      	uxth	r3, r3
 8003792:	b21b      	sxth	r3, r3
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	200003a0 	.word	0x200003a0

080037a0 <BQ769x2_ReadTemperature>:

float BQ769x2_ReadTemperature(uint8_t command) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	0002      	movs	r2, r0
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	701a      	strb	r2, [r3, #0]
	BQ769x2_DirectCommand(command, 0x00, R);
 80037ac:	1dfb      	adds	r3, r7, #7
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7ff fb55 	bl	8002e64 <BQ769x2_DirectCommand>
	//RX_data is a global var
	return (0.1 * (float) (RX_data[1] * 256 + RX_data[0])) - 273.15; // converts from 0.1K to Celcius
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <BQ769x2_ReadTemperature+0x64>)
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	4a10      	ldr	r2, [pc, #64]	@ (8003804 <BQ769x2_ReadTemperature+0x64>)
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	189b      	adds	r3, r3, r2
 80037c6:	0018      	movs	r0, r3
 80037c8:	f7fc ff88 	bl	80006dc <__aeabi_i2f>
 80037cc:	1c03      	adds	r3, r0, #0
 80037ce:	1c18      	adds	r0, r3, #0
 80037d0:	f7fe fe8c 	bl	80024ec <__aeabi_f2d>
 80037d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <BQ769x2_ReadTemperature+0x68>)
 80037d6:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <BQ769x2_ReadTemperature+0x6c>)
 80037d8:	f7fd ff74 	bl	80016c4 <__aeabi_dmul>
 80037dc:	0002      	movs	r2, r0
 80037de:	000b      	movs	r3, r1
 80037e0:	0010      	movs	r0, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <BQ769x2_ReadTemperature+0x70>)
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <BQ769x2_ReadTemperature+0x74>)
 80037e8:	f7fe fa34 	bl	8001c54 <__aeabi_dsub>
 80037ec:	0002      	movs	r2, r0
 80037ee:	000b      	movs	r3, r1
 80037f0:	0010      	movs	r0, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	f7fe fec2 	bl	800257c <__aeabi_d2f>
 80037f8:	1c03      	adds	r3, r0, #0
}
 80037fa:	1c18      	adds	r0, r3, #0
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	200003a0 	.word	0x200003a0
 8003808:	9999999a 	.word	0x9999999a
 800380c:	3fb99999 	.word	0x3fb99999
 8003810:	66666666 	.word	0x66666666
 8003814:	40711266 	.word	0x40711266

08003818 <BQ769x2_ReadBalancingStatus>:

void BQ769x2_ReadBalancingStatus() {
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	BQ769x2_Subcommand(CB_ACTIVE_CELLS, 0x00, R);
 800381c:	2200      	movs	r2, #0
 800381e:	2100      	movs	r1, #0
 8003820:	2083      	movs	r0, #131	@ 0x83
 8003822:	f7ff fa83 	bl	8002d2c <BQ769x2_Subcommand>
	CB_ActiveCells = (RX_32Byte[1] * 256 + RX_32Byte[0]); //CB_ACTIVE_CELLS returns a 2 byte bitfield of which cells are balancing
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <BQ769x2_ReadBalancingStatus+0x28>)
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	b29b      	uxth	r3, r3
 800382e:	4a04      	ldr	r2, [pc, #16]	@ (8003840 <BQ769x2_ReadBalancingStatus+0x28>)
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	189b      	adds	r3, r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	4b03      	ldr	r3, [pc, #12]	@ (8003844 <BQ769x2_ReadBalancingStatus+0x2c>)
 8003838:	801a      	strh	r2, [r3, #0]
}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200003a4 	.word	0x200003a4
 8003844:	20000408 	.word	0x20000408

08003848 <BQ769x2_ReadBatteryData>:
	AccumulatedCharge_Time = ((RX_32Byte[11] << 24) + (RX_32Byte[10] << 16)
			+ (RX_32Byte[9] << 8) + RX_32Byte[8]); //Bytes 8-11
}

/* update variables in STM32 with values from the BQ chip. Returns 1 if successful, 0 if failed or data not yet ready */
uint8_t BQ769x2_ReadBatteryData() {
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	AlarmBits = BQ769x2_ReadAlarmStatus();
 800384c:	f7ff fe8e 	bl	800356c <BQ769x2_ReadAlarmStatus>
 8003850:	0003      	movs	r3, r0
 8003852:	001a      	movs	r2, r3
 8003854:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <BQ769x2_ReadBatteryData+0x78>)
 8003856:	801a      	strh	r2, [r3, #0]
	if (AlarmBits & 0x80) { // Check if FULLSCAN is complete. If set, new measurements are available
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <BQ769x2_ReadBatteryData+0x78>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	001a      	movs	r2, r3
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	4013      	ands	r3, r2
 8003862:	d028      	beq.n	80038b6 <BQ769x2_ReadBatteryData+0x6e>
		Pack_Current = BQ769x2_ReadCurrent(); //needed for STM32_HandleInactivity, do not remove
 8003864:	f7ff ff86 	bl	8003774 <BQ769x2_ReadCurrent>
 8003868:	0003      	movs	r3, r0
 800386a:	001a      	movs	r2, r3
 800386c:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <BQ769x2_ReadBatteryData+0x7c>)
 800386e:	801a      	strh	r2, [r3, #0]
		BQ769x2_ReadAllVoltages(); //get most recent voltages
 8003870:	f7ff ff44 	bl	80036fc <BQ769x2_ReadAllVoltages>
		BQ769x2_ReadBalancingStatus(); //needed for balancing status message
 8003874:	f7ff ffd0 	bl	8003818 <BQ769x2_ReadBalancingStatus>
		Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
 8003878:	2070      	movs	r0, #112	@ 0x70
 800387a:	f7ff ff91 	bl	80037a0 <BQ769x2_ReadTemperature>
 800387e:	1c02      	adds	r2, r0, #0
 8003880:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <BQ769x2_ReadBatteryData+0x80>)
 8003882:	601a      	str	r2, [r3, #0]
		Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
 8003884:	2074      	movs	r0, #116	@ 0x74
 8003886:	f7ff ff8b 	bl	80037a0 <BQ769x2_ReadTemperature>
 800388a:	1c02      	adds	r2, r0, #0
 800388c:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <BQ769x2_ReadBatteryData+0x80>)
 800388e:	605a      	str	r2, [r3, #4]
		Temperature[2] = BQ769x2_ReadTemperature(HDQTemperature);
 8003890:	2076      	movs	r0, #118	@ 0x76
 8003892:	f7ff ff85 	bl	80037a0 <BQ769x2_ReadTemperature>
 8003896:	1c02      	adds	r2, r0, #0
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <BQ769x2_ReadBatteryData+0x80>)
 800389a:	609a      	str	r2, [r3, #8]
		Temperature[3] = BQ769x2_ReadTemperature(IntTemperature);
 800389c:	2068      	movs	r0, #104	@ 0x68
 800389e:	f7ff ff7f 	bl	80037a0 <BQ769x2_ReadTemperature>
 80038a2:	1c02      	adds	r2, r0, #0
 80038a4:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <BQ769x2_ReadBatteryData+0x80>)
 80038a6:	60da      	str	r2, [r3, #12]

		BQ769x2_DirectCommand(AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit
 80038a8:	2201      	movs	r2, #1
 80038aa:	2180      	movs	r1, #128	@ 0x80
 80038ac:	2062      	movs	r0, #98	@ 0x62
 80038ae:	f7ff fad9 	bl	8002e64 <BQ769x2_DirectCommand>
		return 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <BQ769x2_ReadBatteryData+0x70>
	} else {
		return 0;
 80038b6:	2300      	movs	r3, #0
	}
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	20000400 	.word	0x20000400
 80038c4:	200003fe 	.word	0x200003fe
 80038c8:	200003e8 	.word	0x200003e8

080038cc <BQ769x2_CalcMinMaxCellV>:

/* calculate min and max voltage, update globals. */
void BQ769x2_CalcMinMaxCellV() {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
	// Assume the first element is the minimum
	int maxV = 50;
 80038d2:	2332      	movs	r3, #50	@ 0x32
 80038d4:	60fb      	str	r3, [r7, #12]
	int minV = 6000;
 80038d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003948 <BQ769x2_CalcMinMaxCellV+0x7c>)
 80038d8:	60bb      	str	r3, [r7, #8]

	// Loop through the array to find the minimum
	for (int i = 0; i < 16; i++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	e023      	b.n	8003928 <BQ769x2_CalcMinMaxCellV+0x5c>
		if (ACTIVE_CELLS & (1 << i)) {
 80038e0:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <BQ769x2_CalcMinMaxCellV+0x80>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	411a      	asrs	r2, r3
 80038e6:	0013      	movs	r3, r2
 80038e8:	2201      	movs	r2, #1
 80038ea:	4013      	ands	r3, r2
 80038ec:	d019      	beq.n	8003922 <BQ769x2_CalcMinMaxCellV+0x56>
			if (CellVoltage[i] < minV) {
 80038ee:	4b18      	ldr	r3, [pc, #96]	@ (8003950 <BQ769x2_CalcMinMaxCellV+0x84>)
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	0052      	lsls	r2, r2, #1
 80038f4:	5ed3      	ldrsh	r3, [r2, r3]
 80038f6:	001a      	movs	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4293      	cmp	r3, r2
 80038fc:	dd04      	ble.n	8003908 <BQ769x2_CalcMinMaxCellV+0x3c>
				minV = CellVoltage[i];
 80038fe:	4b14      	ldr	r3, [pc, #80]	@ (8003950 <BQ769x2_CalcMinMaxCellV+0x84>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	0052      	lsls	r2, r2, #1
 8003904:	5ed3      	ldrsh	r3, [r2, r3]
 8003906:	60bb      	str	r3, [r7, #8]
			}
			if (CellVoltage[i] > maxV) {
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <BQ769x2_CalcMinMaxCellV+0x84>)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	0052      	lsls	r2, r2, #1
 800390e:	5ed3      	ldrsh	r3, [r2, r3]
 8003910:	001a      	movs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4293      	cmp	r3, r2
 8003916:	da04      	bge.n	8003922 <BQ769x2_CalcMinMaxCellV+0x56>
				maxV = CellVoltage[i];
 8003918:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <BQ769x2_CalcMinMaxCellV+0x84>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	0052      	lsls	r2, r2, #1
 800391e:	5ed3      	ldrsh	r3, [r2, r3]
 8003920:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3301      	adds	r3, #1
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b0f      	cmp	r3, #15
 800392c:	ddd8      	ble.n	80038e0 <BQ769x2_CalcMinMaxCellV+0x14>
			}
		}
	}
	CellMinV = minV;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	b21a      	sxth	r2, r3
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <BQ769x2_CalcMinMaxCellV+0x88>)
 8003934:	801a      	strh	r2, [r3, #0]
	CellMaxV = maxV;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	b21a      	sxth	r2, r3
 800393a:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <BQ769x2_CalcMinMaxCellV+0x8c>)
 800393c:	801a      	strh	r2, [r3, #0]
}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	00001770 	.word	0x00001770
 800394c:	0000aaff 	.word	0x0000aaff
 8003950:	200003c4 	.word	0x200003c4
 8003954:	200003e4 	.word	0x200003e4
 8003958:	200003e6 	.word	0x200003e6

0800395c <UART_CRC>:

/* UART Functions
 * ===================== */

//calculate faraday modbus CRC
uint16_t UART_CRC(uint8_t *buf, uint16_t size) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	000a      	movs	r2, r1
 8003966:	1cbb      	adds	r3, r7, #2
 8003968:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0xFFFF;
 800396a:	230e      	movs	r3, #14
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2201      	movs	r2, #1
 8003970:	4252      	negs	r2, r2
 8003972:	801a      	strh	r2, [r3, #0]

	uint8_t n;
	uint8_t i;
	for (n = 0; n < size; n++) {
 8003974:	230d      	movs	r3, #13
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e03a      	b.n	80039f4 <UART_CRC+0x98>
		crc = crc ^ buf[n];
 800397e:	230d      	movs	r3, #13
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	18d3      	adds	r3, r2, r3
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	0019      	movs	r1, r3
 800398c:	220e      	movs	r2, #14
 800398e:	18bb      	adds	r3, r7, r2
 8003990:	18ba      	adds	r2, r7, r2
 8003992:	8812      	ldrh	r2, [r2, #0]
 8003994:	404a      	eors	r2, r1
 8003996:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8003998:	230c      	movs	r3, #12
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e01d      	b.n	80039de <UART_CRC+0x82>
			if (crc & 1) {
 80039a2:	210e      	movs	r1, #14
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	4013      	ands	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <UART_CRC+0x6a>
				crc = crc >> 1;
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	187a      	adds	r2, r7, r1
 80039b2:	8812      	ldrh	r2, [r2, #0]
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	801a      	strh	r2, [r3, #0]
				crc = crc ^ 0xA001;
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	187a      	adds	r2, r7, r1
 80039bc:	8812      	ldrh	r2, [r2, #0]
 80039be:	4915      	ldr	r1, [pc, #84]	@ (8003a14 <UART_CRC+0xb8>)
 80039c0:	404a      	eors	r2, r1
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	e005      	b.n	80039d2 <UART_CRC+0x76>
			} else {
				crc = crc >> 1;
 80039c6:	220e      	movs	r2, #14
 80039c8:	18bb      	adds	r3, r7, r2
 80039ca:	18ba      	adds	r2, r7, r2
 80039cc:	8812      	ldrh	r2, [r2, #0]
 80039ce:	0852      	lsrs	r2, r2, #1
 80039d0:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 80039d2:	210c      	movs	r1, #12
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	3201      	adds	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	230c      	movs	r3, #12
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b07      	cmp	r3, #7
 80039e6:	d9dc      	bls.n	80039a2 <UART_CRC+0x46>
	for (n = 0; n < size; n++) {
 80039e8:	210d      	movs	r1, #13
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	3201      	adds	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	230d      	movs	r3, #13
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	1cba      	adds	r2, r7, #2
 80039fe:	8812      	ldrh	r2, [r2, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d8bc      	bhi.n	800397e <UART_CRC+0x22>
			}
		}
	}
	return crc;
 8003a04:	230e      	movs	r3, #14
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	881b      	ldrh	r3, [r3, #0]
}
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	ffffa001 	.word	0xffffa001

08003a18 <THVD2410_Sleep>:

void THVD2410_Sleep() {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_RESET);
 8003a1c:	23a0      	movs	r3, #160	@ 0xa0
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	2200      	movs	r2, #0
 8003a22:	2140      	movs	r1, #64	@ 0x40
 8003a24:	0018      	movs	r0, r3
 8003a26:	f002 f9c0 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET);
 8003a2a:	23a0      	movs	r3, #160	@ 0xa0
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2180      	movs	r1, #128	@ 0x80
 8003a32:	0018      	movs	r0, r3
 8003a34:	f002 f9b9 	bl	8005daa <HAL_GPIO_WritePin>
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <THVD2410_Transmit>:
;
void THVD2410_Transmit() {
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_SET);
 8003a42:	23a0      	movs	r3, #160	@ 0xa0
 8003a44:	05db      	lsls	r3, r3, #23
 8003a46:	2201      	movs	r2, #1
 8003a48:	2140      	movs	r1, #64	@ 0x40
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f002 f9ad 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET);
 8003a50:	23a0      	movs	r3, #160	@ 0xa0
 8003a52:	05db      	lsls	r3, r3, #23
 8003a54:	2201      	movs	r2, #1
 8003a56:	2180      	movs	r1, #128	@ 0x80
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f002 f9a6 	bl	8005daa <HAL_GPIO_WritePin>
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <THVD2410_Receive>:
;
void THVD2410_Receive() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_RESET);
 8003a68:	23a0      	movs	r3, #160	@ 0xa0
 8003a6a:	05db      	lsls	r3, r3, #23
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2140      	movs	r1, #64	@ 0x40
 8003a70:	0018      	movs	r0, r3
 8003a72:	f002 f99a 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_RESET);
 8003a76:	23a0      	movs	r3, #160	@ 0xa0
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2180      	movs	r1, #128	@ 0x80
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f002 f993 	bl	8005daa <HAL_GPIO_WritePin>
}
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <UART_WaitForCommand>:
;

void UART_WaitForCommand() {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0

	if (!UartBusy) {
 8003a92:	4b13      	ldr	r3, [pc, #76]	@ (8003ae0 <UART_WaitForCommand+0x54>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11d      	bne.n	8003ad8 <UART_WaitForCommand+0x4c>
		//set RX buffer to all zeros
		for (int i = 0; i < 8; i++) {
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	e007      	b.n	8003ab2 <UART_WaitForCommand+0x26>
			UART_RxData[i] = 0;
 8003aa2:	4a10      	ldr	r2, [pc, #64]	@ (8003ae4 <UART_WaitForCommand+0x58>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	ddf4      	ble.n	8003aa2 <UART_WaitForCommand+0x16>
		}

		//start recieve-to-idle interrupt
		THVD2410_Receive();
 8003ab8:	f7ff ffd4 	bl	8003a64 <THVD2410_Receive>
		huart2.RxState = HAL_UART_STATE_READY; //TODO EVALUATE THIS WITH SASHA
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <UART_WaitForCommand+0x5c>)
 8003abe:	2280      	movs	r2, #128	@ 0x80
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	5099      	str	r1, [r3, r2]

		if (HAL_UARTEx_ReceiveToIdle_IT(&huart2, UART_RxData, 8) != HAL_OK) {
 8003ac4:	4907      	ldr	r1, [pc, #28]	@ (8003ae4 <UART_WaitForCommand+0x58>)
 8003ac6:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <UART_WaitForCommand+0x5c>)
 8003ac8:	2208      	movs	r2, #8
 8003aca:	0018      	movs	r0, r3
 8003acc:	f005 ff4a 	bl	8009964 <HAL_UARTEx_ReceiveToIdle_IT>
 8003ad0:	1e03      	subs	r3, r0, #0
 8003ad2:	d001      	beq.n	8003ad8 <UART_WaitForCommand+0x4c>
			Error_Handler();
 8003ad4:	f001 f886 	bl	8004be4 <Error_Handler>
		}
	}

}
 8003ad8:	46c0      	nop			@ (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	2000039c 	.word	0x2000039c
 8003ae4:	20000418 	.word	0x20000418
 8003ae8:	200002e0 	.word	0x200002e0

08003aec <UART_PrepCellVoltageMessage>:

//prep the cell voltage message (30 bytes). Refer to documentation for packet format.
uint8_t UART_PrepCellVoltageMessage() {
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0

	for (int i = 0; i < 32; i++) {
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e007      	b.n	8003b08 <UART_PrepCellVoltageMessage+0x1c>
		UART_TxData[i] = 0;
 8003af8:	4a33      	ldr	r2, [pc, #204]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	18d3      	adds	r3, r2, r3
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b1f      	cmp	r3, #31
 8003b0c:	ddf4      	ble.n	8003af8 <UART_PrepCellVoltageMessage+0xc>
	}

	//device, fxn, length
	UART_TxData[0] = 0x02;
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003b10:	2202      	movs	r2, #2
 8003b12:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 8003b14:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003b16:	2203      	movs	r2, #3
 8003b18:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x18;
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003b1c:	2218      	movs	r2, #24
 8003b1e:	709a      	strb	r2, [r3, #2]

	// loop through voltage field and construct uints
	int k = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 16; i++) {
 8003b24:	2300      	movs	r3, #0
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e02e      	b.n	8003b88 <UART_PrepCellVoltageMessage+0x9c>
		if (ACTIVE_CELLS & (1 << i)) {
 8003b2a:	4a28      	ldr	r2, [pc, #160]	@ (8003bcc <UART_PrepCellVoltageMessage+0xe0>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	411a      	asrs	r2, r3
 8003b30:	0013      	movs	r3, r2
 8003b32:	2201      	movs	r2, #1
 8003b34:	4013      	ands	r3, r2
 8003b36:	d024      	beq.n	8003b82 <UART_PrepCellVoltageMessage+0x96>
			UART_TxData[2 * k + 3] = (CellVoltage[i] * 2 / 3) >> 8;
 8003b38:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <UART_PrepCellVoltageMessage+0xe4>)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	0052      	lsls	r2, r2, #1
 8003b3e:	5ed3      	ldrsh	r3, [r2, r3]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2103      	movs	r1, #3
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7fc fb85 	bl	8000254 <__divsi3>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	121a      	asrs	r2, r3, #8
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	3303      	adds	r3, #3
 8003b54:	b2d1      	uxtb	r1, r2
 8003b56:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003b58:	54d1      	strb	r1, [r2, r3]
			UART_TxData[2 * k + 4] = (CellVoltage[i] * 2 / 3) & 0xFF;
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <UART_PrepCellVoltageMessage+0xe4>)
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	0052      	lsls	r2, r2, #1
 8003b60:	5ed3      	ldrsh	r3, [r2, r3]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	2103      	movs	r1, #3
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7fc fb74 	bl	8000254 <__divsi3>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	001a      	movs	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3302      	adds	r3, #2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	b2d1      	uxtb	r1, r2
 8003b78:	4a13      	ldr	r2, [pc, #76]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003b7a:	54d1      	strb	r1, [r2, r3]

			//UART_TxData[2 * k + 3] = (3100 * 2 / 3) >> 8;
			//UART_TxData[2 * k + 4] = (3100 * 2 / 3) & 0xFF;
			k++;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 16; i++) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3301      	adds	r3, #1
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	ddcd      	ble.n	8003b2a <UART_PrepCellVoltageMessage+0x3e>
		}
	}

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 27);
 8003b8e:	1cbc      	adds	r4, r7, #2
 8003b90:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003b92:	211b      	movs	r1, #27
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7ff fee1 	bl	800395c <UART_CRC>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	8023      	strh	r3, [r4, #0]
	UART_TxData[27] = crc & 0xFF;
 8003b9e:	1cbb      	adds	r3, r7, #2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003ba6:	76da      	strb	r2, [r3, #27]
	UART_TxData[28] = crc >> 8;
 8003ba8:	1cbb      	adds	r3, r7, #2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003bb4:	771a      	strb	r2, [r3, #28]
	UART_TxData[29] = 0xFF; //add extra byte of zeros to match faraday protocol
 8003bb6:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <UART_PrepCellVoltageMessage+0xdc>)
 8003bb8:	22ff      	movs	r2, #255	@ 0xff
 8003bba:	775a      	strb	r2, [r3, #29]

	return 30;
 8003bbc:	231e      	movs	r3, #30
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b005      	add	sp, #20
 8003bc4:	bd90      	pop	{r4, r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	20000420 	.word	0x20000420
 8003bcc:	0000aaff 	.word	0x0000aaff
 8003bd0:	200003c4 	.word	0x200003c4

08003bd4 <UART_PrepCellBalancingMessage>:

//prep the cell balancing message (8 bytes). Refer to documentation for packet format
uint8_t UART_PrepCellBalancingMessage() {
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0

	for (int i = 0; i < 32; i++) {
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e007      	b.n	8003bf0 <UART_PrepCellBalancingMessage+0x1c>
		UART_TxData[i] = 0;
 8003be0:	4a35      	ldr	r2, [pc, #212]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	18d3      	adds	r3, r2, r3
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	3301      	adds	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b1f      	cmp	r3, #31
 8003bf4:	ddf4      	ble.n	8003be0 <UART_PrepCellBalancingMessage+0xc>
	}

	UART_TxData[0] = 0x02;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003bfe:	2203      	movs	r2, #3
 8003c00:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x02;
 8003c02:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003c04:	2202      	movs	r2, #2
 8003c06:	709a      	strb	r2, [r3, #2]

	// CB_ActiveCells is a bitfield of which of 16 channels are active. Bike expects a bitfield with the first byte blank and the remainder a bitfield
	uint16_t CB = 0x00;
 8003c08:	2312      	movs	r3, #18
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	801a      	strh	r2, [r3, #0]
	int k = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8003c14:	2300      	movs	r3, #0
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	e022      	b.n	8003c60 <UART_PrepCellBalancingMessage+0x8c>
		if (ACTIVE_CELLS & (1 << i)) {
 8003c1a:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <UART_PrepCellBalancingMessage+0xe8>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	411a      	asrs	r2, r3
 8003c20:	0013      	movs	r3, r2
 8003c22:	2201      	movs	r2, #1
 8003c24:	4013      	ands	r3, r2
 8003c26:	d018      	beq.n	8003c5a <UART_PrepCellBalancingMessage+0x86>
			//i is the cell number active cell bitfield (0xAAFF)
			//k is the cell number in faraday index
			if (CB_ActiveCells & (1 << i)) {
 8003c28:	4b25      	ldr	r3, [pc, #148]	@ (8003cc0 <UART_PrepCellBalancingMessage+0xec>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	411a      	asrs	r2, r3
 8003c32:	0013      	movs	r3, r2
 8003c34:	2201      	movs	r2, #1
 8003c36:	4013      	ands	r3, r2
 8003c38:	d00c      	beq.n	8003c54 <UART_PrepCellBalancingMessage+0x80>
				CB = CB | (1 << k); //TODO determine whether the cell number is mapped correctly
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	2112      	movs	r1, #18
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	2000      	movs	r0, #0
 8003c4a:	5e1b      	ldrsh	r3, [r3, r0]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	b21a      	sxth	r2, r3
 8003c50:	187b      	adds	r3, r7, r1
 8003c52:	801a      	strh	r2, [r3, #0]
			};
			k++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b0f      	cmp	r3, #15
 8003c64:	ddd9      	ble.n	8003c1a <UART_PrepCellBalancingMessage+0x46>
		}
	}

	UART_TxData[3] = CB >> 8;
 8003c66:	2112      	movs	r1, #18
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003c74:	70da      	strb	r2, [r3, #3]
	UART_TxData[4] = CB & 0xFF;
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003c7e:	711a      	strb	r2, [r3, #4]

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 5);
 8003c80:	1dbc      	adds	r4, r7, #6
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003c84:	2105      	movs	r1, #5
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7ff fe68 	bl	800395c <UART_CRC>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	8023      	strh	r3, [r4, #0]
	UART_TxData[5] = crc & 0xFF;
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003c98:	715a      	strb	r2, [r3, #5]
	UART_TxData[6] = crc >> 8;
 8003c9a:	1dbb      	adds	r3, r7, #6
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003ca6:	719a      	strb	r2, [r3, #6]
	UART_TxData[7] = 0xFF; //add extra byte of zeros to match faraday protocol
 8003ca8:	4b03      	ldr	r3, [pc, #12]	@ (8003cb8 <UART_PrepCellBalancingMessage+0xe4>)
 8003caa:	22ff      	movs	r2, #255	@ 0xff
 8003cac:	71da      	strb	r2, [r3, #7]
	return 8;
 8003cae:	2308      	movs	r3, #8
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b007      	add	sp, #28
 8003cb6:	bd90      	pop	{r4, r7, pc}
 8003cb8:	20000420 	.word	0x20000420
 8003cbc:	0000aaff 	.word	0x0000aaff
 8003cc0:	20000408 	.word	0x20000408

08003cc4 <UART_PrepBatteryStatusMessage1>:
 * Hard coded for now
 * Example request 0x2 0x3 0x0 0x0 0x0 0x1 0x84 0x39
 * Example response 0x2 0x3 0x2 0x0 0x0 0xfc 0x44
 */
//
uint8_t UART_PrepBatteryStatusMessage1() {
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0

	for (int i = 0; i < 32; i++) {
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	e007      	b.n	8003ce0 <UART_PrepBatteryStatusMessage1+0x1c>
		UART_TxData[i] = 0;
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	18d3      	adds	r3, r2, r3
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b1f      	cmp	r3, #31
 8003ce4:	ddf4      	ble.n	8003cd0 <UART_PrepBatteryStatusMessage1+0xc>
	}

	UART_TxData[0] = 0x02;
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003ce8:	2202      	movs	r2, #2
 8003cea:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 8003cec:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003cee:	2203      	movs	r2, #3
 8003cf0:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x02;
 8003cf2:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	709a      	strb	r2, [r3, #2]
	UART_TxData[3] = 0x00;
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	70da      	strb	r2, [r3, #3]
	UART_TxData[4] = 0x00;
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	711a      	strb	r2, [r3, #4]

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 5);
 8003d04:	1cbc      	adds	r4, r7, #2
 8003d06:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003d08:	2105      	movs	r1, #5
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f7ff fe26 	bl	800395c <UART_CRC>
 8003d10:	0003      	movs	r3, r0
 8003d12:	8023      	strh	r3, [r4, #0]
	UART_TxData[5] = crc & 0xFF;
 8003d14:	1cbb      	adds	r3, r7, #2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003d1c:	715a      	strb	r2, [r3, #5]
	UART_TxData[6] = crc >> 8;
 8003d1e:	1cbb      	adds	r3, r7, #2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003d2a:	719a      	strb	r2, [r3, #6]
	UART_TxData[7] = 0xFF; //add extra byte of zeros to match faraday protocol
 8003d2c:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <UART_PrepBatteryStatusMessage1+0x78>)
 8003d2e:	22ff      	movs	r2, #255	@ 0xff
 8003d30:	71da      	strb	r2, [r3, #7]
	return 8;
 8003d32:	2308      	movs	r3, #8
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b003      	add	sp, #12
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	20000420 	.word	0x20000420

08003d40 <UART_PrepBatteryStatusMessage2>:
 * Fill UART_TxData to battery status message 2 - purpose unknown. Hard coded for now
 *
 * Example request 0x2 0x3 0x0 0x1 0x0 0x1 0xd5 0xf9
 * Example response 0x2 0x3 0x2 0x0 0x19 0x3d 0x8e
 */
uint8_t UART_PrepBatteryStatusMessage2() {
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0

	for (int i = 0; i < 32; i++) {
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	e007      	b.n	8003d5c <UART_PrepBatteryStatusMessage2+0x1c>
		UART_TxData[i] = 0;
 8003d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	18d3      	adds	r3, r2, r3
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b1f      	cmp	r3, #31
 8003d60:	ddf4      	ble.n	8003d4c <UART_PrepBatteryStatusMessage2+0xc>
	}

	UART_TxData[0] = 0x02;
 8003d62:	4b15      	ldr	r3, [pc, #84]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d64:	2202      	movs	r2, #2
 8003d66:	701a      	strb	r2, [r3, #0]
	UART_TxData[1] = 0x03;
 8003d68:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	705a      	strb	r2, [r3, #1]
	UART_TxData[2] = 0x02;
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d70:	2202      	movs	r2, #2
 8003d72:	709a      	strb	r2, [r3, #2]
	UART_TxData[3] = 0x00;
 8003d74:	4b10      	ldr	r3, [pc, #64]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	70da      	strb	r2, [r3, #3]
	UART_TxData[4] = 0x19;
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d7c:	2219      	movs	r2, #25
 8003d7e:	711a      	strb	r2, [r3, #4]

	//add crc in reverse byte order
	uint16_t crc = UART_CRC(UART_TxData, 5);
 8003d80:	1cbc      	adds	r4, r7, #2
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d84:	2105      	movs	r1, #5
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff fde8 	bl	800395c <UART_CRC>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	8023      	strh	r3, [r4, #0]
	UART_TxData[5] = crc & 0xFF;
 8003d90:	1cbb      	adds	r3, r7, #2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003d98:	715a      	strb	r2, [r3, #5]
	UART_TxData[6] = crc >> 8;
 8003d9a:	1cbb      	adds	r3, r7, #2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	4b04      	ldr	r3, [pc, #16]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003da6:	719a      	strb	r2, [r3, #6]

	UART_TxData[7] = 0xFF; //add extra byte of zeros to match faraday protocol
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <UART_PrepBatteryStatusMessage2+0x78>)
 8003daa:	22ff      	movs	r2, #255	@ 0xff
 8003dac:	71da      	strb	r2, [r3, #7]
	return 8;
 8003dae:	2308      	movs	r3, #8
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b003      	add	sp, #12
 8003db6:	bd90      	pop	{r4, r7, pc}
 8003db8:	20000420 	.word	0x20000420

08003dbc <UART_Respond>:

/*Takes in an 8 byte message, parses, checks CRC, and then responds with the appropriate message */
void UART_Respond(uint8_t *buf, uint16_t size) {
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	000a      	movs	r2, r1
 8003dc6:	1cbb      	adds	r3, r7, #2
 8003dc8:	801a      	strh	r2, [r3, #0]

	//Code currently only supports 8 byte read messages, which is all that's necessary to get the bike moving.
	if (size == 8) {
 8003dca:	1cbb      	adds	r3, r7, #2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d000      	beq.n	8003dd4 <UART_Respond+0x18>
 8003dd2:	e0ad      	b.n	8003f30 <UART_Respond+0x174>

		//unpack message
		uint8_t SlaveID = buf[0];
 8003dd4:	2417      	movs	r4, #23
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	7812      	ldrb	r2, [r2, #0]
 8003ddc:	701a      	strb	r2, [r3, #0]
		uint8_t FunctionCode = buf[1];
 8003dde:	2516      	movs	r5, #22
 8003de0:	197b      	adds	r3, r7, r5
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	7852      	ldrb	r2, [r2, #1]
 8003de6:	701a      	strb	r2, [r3, #0]
		uint16_t Address = buf[2] << 8 | buf[3];
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3302      	adds	r3, #2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	b21a      	sxth	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3303      	adds	r3, #3
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b21a      	sxth	r2, r3
 8003dfe:	2614      	movs	r6, #20
 8003e00:	19bb      	adds	r3, r7, r6
 8003e02:	801a      	strh	r2, [r3, #0]
		uint16_t NumRegs = buf[4] << 8 | buf[5];
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	b21a      	sxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3305      	adds	r3, #5
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b21b      	sxth	r3, r3
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	2312      	movs	r3, #18
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	801a      	strh	r2, [r3, #0]
		uint16_t CRCRecv = buf[7] << 8 | buf[6];
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3307      	adds	r3, #7
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	b21a      	sxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3306      	adds	r3, #6
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b21a      	sxth	r2, r3
 8003e36:	2310      	movs	r3, #16
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	801a      	strh	r2, [r3, #0]

		//Check CRC and that we're the target audience (BMS is 0x02)
		if (CRCRecv == UART_CRC(buf, 6) && SlaveID == 0x02) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2106      	movs	r1, #6
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff fd8b 	bl	800395c <UART_CRC>
 8003e46:	0003      	movs	r3, r0
 8003e48:	001a      	movs	r2, r3
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d000      	beq.n	8003e56 <UART_Respond+0x9a>
 8003e54:	e06c      	b.n	8003f30 <UART_Respond+0x174>
 8003e56:	193b      	adds	r3, r7, r4
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d168      	bne.n	8003f30 <UART_Respond+0x174>
			delayUS(450); //insert 1ms delay to match timing of original battery
 8003e5e:	23e1      	movs	r3, #225	@ 0xe1
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7fe fc4a 	bl	80026fc <delayUS>
			if (FunctionCode == 0x03) { //it's a read
 8003e68:	197b      	adds	r3, r7, r5
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d15f      	bne.n	8003f30 <UART_Respond+0x174>
					HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
				}

				uint8_t len;

				if (Address == 0x02) { //Battery Voltage Message
 8003e70:	19bb      	adds	r3, r7, r6
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d110      	bne.n	8003e9a <UART_Respond+0xde>
					len = UART_PrepCellVoltageMessage();
 8003e78:	250f      	movs	r5, #15
 8003e7a:	197c      	adds	r4, r7, r5
 8003e7c:	f7ff fe36 	bl	8003aec <UART_PrepCellVoltageMessage>
 8003e80:	0003      	movs	r3, r0
 8003e82:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 8003e84:	f7ff fddb 	bl	8003a3e <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 8003e88:	197b      	adds	r3, r7, r5
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	492f      	ldr	r1, [pc, #188]	@ (8003f4c <UART_Respond+0x190>)
 8003e90:	482f      	ldr	r0, [pc, #188]	@ (8003f50 <UART_Respond+0x194>)
 8003e92:	2303      	movs	r3, #3
 8003e94:	f004 fa88 	bl	80083a8 <HAL_UART_Transmit>
 8003e98:	e04a      	b.n	8003f30 <UART_Respond+0x174>
							UART_TIMEOUT_S);

				} else if (Address == 0x17) { //Battery Balancing Message
 8003e9a:	2314      	movs	r3, #20
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	2b17      	cmp	r3, #23
 8003ea2:	d110      	bne.n	8003ec6 <UART_Respond+0x10a>
					len = UART_PrepCellBalancingMessage();
 8003ea4:	250f      	movs	r5, #15
 8003ea6:	197c      	adds	r4, r7, r5
 8003ea8:	f7ff fe94 	bl	8003bd4 <UART_PrepCellBalancingMessage>
 8003eac:	0003      	movs	r3, r0
 8003eae:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 8003eb0:	f7ff fdc5 	bl	8003a3e <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 8003eb4:	197b      	adds	r3, r7, r5
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	4924      	ldr	r1, [pc, #144]	@ (8003f4c <UART_Respond+0x190>)
 8003ebc:	4824      	ldr	r0, [pc, #144]	@ (8003f50 <UART_Respond+0x194>)
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	f004 fa72 	bl	80083a8 <HAL_UART_Transmit>
 8003ec4:	e034      	b.n	8003f30 <UART_Respond+0x174>
							UART_TIMEOUT_S);

				} else if (Address == 0x00 && NumRegs == 0x01) { //Battery Status Message 1
 8003ec6:	2314      	movs	r3, #20
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d115      	bne.n	8003efc <UART_Respond+0x140>
 8003ed0:	2312      	movs	r3, #18
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d110      	bne.n	8003efc <UART_Respond+0x140>
					len = UART_PrepBatteryStatusMessage1();
 8003eda:	250f      	movs	r5, #15
 8003edc:	197c      	adds	r4, r7, r5
 8003ede:	f7ff fef1 	bl	8003cc4 <UART_PrepBatteryStatusMessage1>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 8003ee6:	f7ff fdaa 	bl	8003a3e <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 8003eea:	197b      	adds	r3, r7, r5
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	4916      	ldr	r1, [pc, #88]	@ (8003f4c <UART_Respond+0x190>)
 8003ef2:	4817      	ldr	r0, [pc, #92]	@ (8003f50 <UART_Respond+0x194>)
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	f004 fa57 	bl	80083a8 <HAL_UART_Transmit>
 8003efa:	e019      	b.n	8003f30 <UART_Respond+0x174>
							UART_TIMEOUT_S);

				} else if (Address == 0x01 && NumRegs == 0x01) { //Battery Status Message 1
 8003efc:	2314      	movs	r3, #20
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d114      	bne.n	8003f30 <UART_Respond+0x174>
 8003f06:	2312      	movs	r3, #18
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d10f      	bne.n	8003f30 <UART_Respond+0x174>
					len = UART_PrepBatteryStatusMessage2();
 8003f10:	250f      	movs	r5, #15
 8003f12:	197c      	adds	r4, r7, r5
 8003f14:	f7ff ff14 	bl	8003d40 <UART_PrepBatteryStatusMessage2>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	7023      	strb	r3, [r4, #0]
					THVD2410_Transmit();
 8003f1c:	f7ff fd8f 	bl	8003a3e <THVD2410_Transmit>
					HAL_UART_Transmit(&huart2, UART_TxData, len,
 8003f20:	197b      	adds	r3, r7, r5
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	4909      	ldr	r1, [pc, #36]	@ (8003f4c <UART_Respond+0x190>)
 8003f28:	4809      	ldr	r0, [pc, #36]	@ (8003f50 <UART_Respond+0x194>)
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	f004 fa3c 	bl	80083a8 <HAL_UART_Transmit>
				}
			}
		}

	}
	THVD2410_Receive();
 8003f30:	f7ff fd98 	bl	8003a64 <THVD2410_Receive>
	HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	0099      	lsls	r1, r3, #2
 8003f38:	23a0      	movs	r3, #160	@ 0xa0
 8003f3a:	05db      	lsls	r3, r3, #23
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f001 ff33 	bl	8005daa <HAL_GPIO_WritePin>
}
 8003f44:	46c0      	nop			@ (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b007      	add	sp, #28
 8003f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4c:	20000420 	.word	0x20000420
 8003f50:	200002e0 	.word	0x200002e0

08003f54 <STM32_PetWatchdog>:

/* State Machine Functions
 * ===================== */

/*Pet Independent Watchdog. Must be done once a second or sooner*/
void STM32_PetWatchdog() {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0

	/* Refresh IWDG: reload counter */
	if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK) {
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <STM32_PetWatchdog+0x1c>)
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f002 fe3c 	bl	8006bd8 <HAL_IWDG_Refresh>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d001      	beq.n	8003f68 <STM32_PetWatchdog+0x14>
		/* Refresh Error */
		Error_Handler();
 8003f64:	f000 fe3e 	bl	8004be4 <Error_Handler>
	}
}
 8003f68:	46c0      	nop			@ (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	20000368 	.word	0x20000368

08003f74 <STM32_HandleButton>:


/* Implement button press timing*/
void STM32_HandleButton() {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
	if (STM32_Wake_Button_Pressed()) {
 8003f78:	f000 f822 	bl	8003fc0 <STM32_Wake_Button_Pressed>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d006      	beq.n	8003f8e <STM32_HandleButton+0x1a>
		ButtonCount++;
 8003f80:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <STM32_HandleButton+0x48>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <STM32_HandleButton+0x48>)
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e009      	b.n	8003fa2 <STM32_HandleButton+0x2e>

	} else if (ButtonCount) {
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <STM32_HandleButton+0x48>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <STM32_HandleButton+0x2e>
		ButtonCount -= 1;
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <STM32_HandleButton+0x48>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <STM32_HandleButton+0x48>)
 8003fa0:	701a      	strb	r2, [r3, #0]
	};

	if (ButtonCount > BUTTON_LONG_PRESS_LOOPS) {
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <STM32_HandleButton+0x48>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d904      	bls.n	8003fb4 <STM32_HandleButton+0x40>
		if (DEBUG) {
			printf("\r\nbutton long press...time to get ready for bed\r\n");
		}
		ButtonCount = 0;
 8003faa:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <STM32_HandleButton+0x48>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
		Sleep();
 8003fb0:	f000 f92e 	bl	8004210 <Sleep>
	};
}
 8003fb4:	46c0      	nop			@ (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	2000040f 	.word	0x2000040f

08003fc0 <STM32_Wake_Button_Pressed>:

uint8_t STM32_Wake_Button_Pressed() {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	return !(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
 8003fc4:	23a0      	movs	r3, #160	@ 0xa0
 8003fc6:	05db      	lsls	r3, r3, #23
 8003fc8:	2101      	movs	r1, #1
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f001 fed0 	bl	8005d70 <HAL_GPIO_ReadPin>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	425a      	negs	r2, r3
 8003fd4:	4153      	adcs	r3, r2
 8003fd6:	b2db      	uxtb	r3, r3
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <STM32_HandleInactivity>:

/* If current below 250mA for more than XXX loops, activate sleep. Must have a fresh value in Pack_Current */
void STM32_HandleInactivity() {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0

//Increment sleep timer if current is between +20mA and -250mA
	if (Pack_Current >= PACK_CURRENT_INACTIVITY_LOWER_LIMIT_MA
 8003fe4:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <STM32_HandleInactivity+0x48>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	5e9b      	ldrsh	r3, [r3, r2]
 8003fea:	33fa      	adds	r3, #250	@ 0xfa
 8003fec:	db0b      	blt.n	8004006 <STM32_HandleInactivity+0x26>
			&& Pack_Current <= PACK_CURRENT_INACTIVITY_UPPER_LIMIT_MA) {
 8003fee:	4b0e      	ldr	r3, [pc, #56]	@ (8004028 <STM32_HandleInactivity+0x48>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8003ff4:	2b4b      	cmp	r3, #75	@ 0x4b
 8003ff6:	dc06      	bgt.n	8004006 <STM32_HandleInactivity+0x26>
		InactivityCount++;
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <STM32_HandleInactivity+0x4c>)
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <STM32_HandleInactivity+0x4c>)
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e005      	b.n	8004012 <STM32_HandleInactivity+0x32>
	} else {
		InactivityCount = InactivityCount / 2; //exponential decay if current detected
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <STM32_HandleInactivity+0x4c>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	4b07      	ldr	r3, [pc, #28]	@ (800402c <STM32_HandleInactivity+0x4c>)
 8004010:	801a      	strh	r2, [r3, #0]
	}

	if (!DEBUG) {
		if (InactivityCount > INACTIVITY_LOOPS_MAX) {
 8004012:	4b06      	ldr	r3, [pc, #24]	@ (800402c <STM32_HandleInactivity+0x4c>)
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	4a06      	ldr	r2, [pc, #24]	@ (8004030 <STM32_HandleInactivity+0x50>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <STM32_HandleInactivity+0x40>
			Sleep();
 800401c:	f000 f8f8 	bl	8004210 <Sleep>
			Sleep();
		}

	}

}
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	200003fe 	.word	0x200003fe
 800402c:	20000412 	.word	0x20000412
 8004030:	00003a98 	.word	0x00003a98

08004034 <STM32_Stop>:

/* STM32_Stop - puts the STM32 into STOP mode at minimum power consumption.
 * Leaves two ways to wake - EXTI0_1 (PA0 pulldown) and EXTI2_3 (PB5 pullup)
 *
 * Note that this function will fail if IWDG is running. This must be called before IWDG is started to be successful*/
void STM32_Stop() {
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b08b      	sub	sp, #44	@ 0x2c
 8004038:	af00      	add	r7, sp, #0
		delayMS(100);
		HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
	}

	//turn off LEDs
	HAL_GPIO_WritePin(LED_CHG_PORT, LED_CHG_PIN, GPIO_PIN_RESET);
 800403a:	4b5e      	ldr	r3, [pc, #376]	@ (80041b4 <STM32_Stop+0x180>)
 800403c:	2200      	movs	r2, #0
 800403e:	2101      	movs	r1, #1
 8004040:	0018      	movs	r0, r3
 8004042:	f001 feb2 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DSG_PORT, LED_DSG_PIN, GPIO_PIN_RESET);
 8004046:	4b5b      	ldr	r3, [pc, #364]	@ (80041b4 <STM32_Stop+0x180>)
 8004048:	2200      	movs	r2, #0
 800404a:	2102      	movs	r1, #2
 800404c:	0018      	movs	r0, r3
 800404e:	f001 feac 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BF_PORT, LED_BF_PIN, GPIO_PIN_RESET);
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	0059      	lsls	r1, r3, #1
 8004056:	23a0      	movs	r3, #160	@ 0xa0
 8004058:	05db      	lsls	r3, r3, #23
 800405a:	2200      	movs	r2, #0
 800405c:	0018      	movs	r0, r3
 800405e:	f001 fea4 	bl	8005daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	0099      	lsls	r1, r3, #2
 8004066:	23a0      	movs	r3, #160	@ 0xa0
 8004068:	05db      	lsls	r3, r3, #23
 800406a:	2200      	movs	r2, #0
 800406c:	0018      	movs	r0, r3
 800406e:	f001 fe9c 	bl	8005daa <HAL_GPIO_WritePin>

	//Turn off FETs
	BQ769x2_ForceDisableFETs();
 8004072:	f7ff f9ab 	bl	80033cc <BQ769x2_ForceDisableFETs>

	//Turn off RS485 Chip
	THVD2410_Sleep();
 8004076:	f7ff fccf 	bl	8003a18 <THVD2410_Sleep>

	//Configure wake Interrupt on ALERT pin
	EXTI2_3_IRQHandler_Config();
 800407a:	f000 fa75 	bl	8004568 <EXTI2_3_IRQHandler_Config>

	//Configure wake interrupt on BUTTON pin
	EXTI0_1_IRQHandler_Config();
 800407e:	f000 fa45 	bl	800450c <EXTI0_1_IRQHandler_Config>

	/* Enable GPIOs clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004082:	4b4d      	ldr	r3, [pc, #308]	@ (80041b8 <STM32_Stop+0x184>)
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	4b4c      	ldr	r3, [pc, #304]	@ (80041b8 <STM32_Stop+0x184>)
 8004088:	2101      	movs	r1, #1
 800408a:	430a      	orrs	r2, r1
 800408c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800408e:	4b4a      	ldr	r3, [pc, #296]	@ (80041b8 <STM32_Stop+0x184>)
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	2201      	movs	r2, #1
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800409a:	4b47      	ldr	r3, [pc, #284]	@ (80041b8 <STM32_Stop+0x184>)
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409e:	4b46      	ldr	r3, [pc, #280]	@ (80041b8 <STM32_Stop+0x184>)
 80040a0:	2102      	movs	r1, #2
 80040a2:	430a      	orrs	r2, r1
 80040a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040a6:	4b44      	ldr	r3, [pc, #272]	@ (80041b8 <STM32_Stop+0x184>)
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	2202      	movs	r2, #2
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80040b2:	4b41      	ldr	r3, [pc, #260]	@ (80041b8 <STM32_Stop+0x184>)
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	4b40      	ldr	r3, [pc, #256]	@ (80041b8 <STM32_Stop+0x184>)
 80040b8:	2104      	movs	r1, #4
 80040ba:	430a      	orrs	r2, r1
 80040bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040be:	4b3e      	ldr	r3, [pc, #248]	@ (80041b8 <STM32_Stop+0x184>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c2:	2204      	movs	r2, #4
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80040ca:	4b3b      	ldr	r3, [pc, #236]	@ (80041b8 <STM32_Stop+0x184>)
 80040cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ce:	4b3a      	ldr	r3, [pc, #232]	@ (80041b8 <STM32_Stop+0x184>)
 80040d0:	2108      	movs	r1, #8
 80040d2:	430a      	orrs	r2, r1
 80040d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040d6:	4b38      	ldr	r3, [pc, #224]	@ (80041b8 <STM32_Stop+0x184>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	2208      	movs	r2, #8
 80040dc:	4013      	ands	r3, r2
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80040e2:	4b35      	ldr	r3, [pc, #212]	@ (80041b8 <STM32_Stop+0x184>)
 80040e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e6:	4b34      	ldr	r3, [pc, #208]	@ (80041b8 <STM32_Stop+0x184>)
 80040e8:	2180      	movs	r1, #128	@ 0x80
 80040ea:	430a      	orrs	r2, r1
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040ee:	4b32      	ldr	r3, [pc, #200]	@ (80041b8 <STM32_Stop+0x184>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	2280      	movs	r2, #128	@ 0x80
 80040f4:	4013      	ands	r3, r2
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]


	//Configure all GPIO port pins in Analog Input mode (floating input trigger OFF)
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80040fa:	2414      	movs	r4, #20
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	2203      	movs	r2, #3
 8004100:	605a      	str	r2, [r3, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004102:	193b      	adds	r3, r7, r4
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]

	//special config for port A since we use it for wake
	GPIO_InitStructure.Pin = GPIO_PIN_All & ~GPIO_PIN_0;
 8004108:	193b      	adds	r3, r7, r4
 800410a:	4a2c      	ldr	r2, [pc, #176]	@ (80041bc <STM32_Stop+0x188>)
 800410c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800410e:	193a      	adds	r2, r7, r4
 8004110:	23a0      	movs	r3, #160	@ 0xa0
 8004112:	05db      	lsls	r3, r3, #23
 8004114:	0011      	movs	r1, r2
 8004116:	0018      	movs	r0, r3
 8004118:	f001 fbda 	bl	80058d0 <HAL_GPIO_Init>

	//special config for port B since we use it for wake
	GPIO_InitStructure.Pin = GPIO_PIN_All & ~GPIO_PIN_5;
 800411c:	193b      	adds	r3, r7, r4
 800411e:	4a28      	ldr	r2, [pc, #160]	@ (80041c0 <STM32_Stop+0x18c>)
 8004120:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004122:	193b      	adds	r3, r7, r4
 8004124:	4a23      	ldr	r2, [pc, #140]	@ (80041b4 <STM32_Stop+0x180>)
 8004126:	0019      	movs	r1, r3
 8004128:	0010      	movs	r0, r2
 800412a:	f001 fbd1 	bl	80058d0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_All;
 800412e:	193b      	adds	r3, r7, r4
 8004130:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <STM32_Stop+0x190>)
 8004132:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004134:	193b      	adds	r3, r7, r4
 8004136:	4a24      	ldr	r2, [pc, #144]	@ (80041c8 <STM32_Stop+0x194>)
 8004138:	0019      	movs	r1, r3
 800413a:	0010      	movs	r0, r2
 800413c:	f001 fbc8 	bl	80058d0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004140:	193b      	adds	r3, r7, r4
 8004142:	4a22      	ldr	r2, [pc, #136]	@ (80041cc <STM32_Stop+0x198>)
 8004144:	0019      	movs	r1, r3
 8004146:	0010      	movs	r0, r2
 8004148:	f001 fbc2 	bl	80058d0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 800414c:	193b      	adds	r3, r7, r4
 800414e:	4a20      	ldr	r2, [pc, #128]	@ (80041d0 <STM32_Stop+0x19c>)
 8004150:	0019      	movs	r1, r3
 8004152:	0010      	movs	r0, r2
 8004154:	f001 fbbc 	bl	80058d0 <HAL_GPIO_Init>

	//disable GPIO clocks to save power
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8004158:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <STM32_Stop+0x184>)
 800415a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415c:	4b16      	ldr	r3, [pc, #88]	@ (80041b8 <STM32_Stop+0x184>)
 800415e:	2101      	movs	r1, #1
 8004160:	438a      	bics	r2, r1
 8004162:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8004164:	4b14      	ldr	r3, [pc, #80]	@ (80041b8 <STM32_Stop+0x184>)
 8004166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004168:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <STM32_Stop+0x184>)
 800416a:	2102      	movs	r1, #2
 800416c:	438a      	bics	r2, r1
 800416e:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <STM32_Stop+0x184>)
 8004172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004174:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <STM32_Stop+0x184>)
 8004176:	2104      	movs	r1, #4
 8004178:	438a      	bics	r2, r1
 800417a:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <STM32_Stop+0x184>)
 800417e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004180:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <STM32_Stop+0x184>)
 8004182:	2108      	movs	r1, #8
 8004184:	438a      	bics	r2, r1
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8004188:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <STM32_Stop+0x184>)
 800418a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418c:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <STM32_Stop+0x184>)
 800418e:	2180      	movs	r1, #128	@ 0x80
 8004190:	438a      	bics	r2, r1
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

	//disable RTC to save power
	HAL_RTC_MspDeInit(&hrtc);
 8004194:	4b0f      	ldr	r3, [pc, #60]	@ (80041d4 <STM32_Stop+0x1a0>)
 8004196:	0018      	movs	r0, r3
 8004198:	f000 fddc 	bl	8004d54 <HAL_RTC_MspDeInit>

	//here we go!
	//HAL_SuspendTick(); TODO investigate whether this prevents wake-on-detect-load
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <STM32_Stop+0x1a4>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <STM32_Stop+0x1a4>)
 80041a2:	2104      	movs	r1, #4
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]

	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80041a8:	2101      	movs	r1, #1
 80041aa:	2001      	movs	r0, #1
 80041ac:	f002 fd42 	bl	8006c34 <HAL_PWR_EnterSTOPMode>

	//reset on wake
	NVIC_SystemReset(); //When woken up, just reset, it's simpler that way.
 80041b0:	f7fe fa92 	bl	80026d8 <__NVIC_SystemReset>
 80041b4:	50000400 	.word	0x50000400
 80041b8:	40021000 	.word	0x40021000
 80041bc:	0000fffe 	.word	0x0000fffe
 80041c0:	0000ffdf 	.word	0x0000ffdf
 80041c4:	0000ffff 	.word	0x0000ffff
 80041c8:	50000800 	.word	0x50000800
 80041cc:	50000c00 	.word	0x50000c00
 80041d0:	50001c00 	.word	0x50001c00
 80041d4:	20000378 	.word	0x20000378
 80041d8:	40007000 	.word	0x40007000

080041dc <STM32_CheckForWatchdogReset>:

}

void STM32_CheckForWatchdogReset() {
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) {
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <STM32_CheckForWatchdogReset+0x2c>)
 80041e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	059b      	lsls	r3, r3, #22
 80041e8:	4013      	ands	r3, r2
 80041ea:	d002      	beq.n	80041f2 <STM32_CheckForWatchdogReset+0x16>
		ResetByWatchdog = 1;
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <STM32_CheckForWatchdogReset+0x30>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
	}

	/* Clear reset flags in any cases */
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80041f2:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <STM32_CheckForWatchdogReset+0x2c>)
 80041f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041f6:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <STM32_CheckForWatchdogReset+0x2c>)
 80041f8:	2180      	movs	r1, #128	@ 0x80
 80041fa:	0409      	lsls	r1, r1, #16
 80041fc:	430a      	orrs	r2, r1
 80041fe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004200:	46c0      	nop			@ (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	40021000 	.word	0x40021000
 800420c:	20000416 	.word	0x20000416

08004210 <Sleep>:
/* Sleep() - start the process of putting the BMS in a low power mode
 * Puts the BQ chip to DEEPSLEEP, set a persistent flag that indicates we want to enter STOP,
 * reset the STM32. This clears the IWDG and the main loop reads the flag and puts the STM32 in STOP.
 * When the STM32 resets it will call STM32_Stop().
 * This is the only good way with an STM32L0 to disable IWDG and stay in STOP mode*/
void Sleep() {
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0

	//pet the watchdog so this delay doesn't turn it off
	STM32_PetWatchdog();
 8004214:	f7ff fe9e 	bl	8003f54 <STM32_PetWatchdog>

	//disable the only interrupt that should be running (RS485 RX interrupt)
	CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE);
 8004218:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <Sleep+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <Sleep+0x58>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2120      	movs	r1, #32
 8004224:	438a      	bics	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

	//turn off both fets
	BQ769x2_ForceDisableFETs();
 8004228:	f7ff f8d0 	bl	80033cc <BQ769x2_ForceDisableFETs>
	//BQ769x2_CommandSubcommand(ALL_FETS_OFF);

	//wait 200ms for the bus voltage to decay
	delayMS(200);
 800422c:	20c8      	movs	r0, #200	@ 0xc8
 800422e:	f7fe fa7b 	bl	8002728 <delayMS>

	//Put the BQ to sleep
	while (!BQ769x2_EnterDeepSleep()) {
 8004232:	e003      	b.n	800423c <Sleep+0x2c>
		delayUS(5000);
 8004234:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <Sleep+0x5c>)
 8004236:	0018      	movs	r0, r3
 8004238:	f7fe fa60 	bl	80026fc <delayUS>
	while (!BQ769x2_EnterDeepSleep()) {
 800423c:	f7ff f8fa 	bl	8003434 <BQ769x2_EnterDeepSleep>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d0f7      	beq.n	8004234 <Sleep+0x24>
	}

	BQ769x2_DirectCommand(AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit, otherwise STM32 will wake up immediately
 8004244:	2201      	movs	r2, #1
 8004246:	2180      	movs	r1, #128	@ 0x80
 8004248:	2062      	movs	r0, #98	@ 0x62
 800424a:	f7fe fe0b 	bl	8002e64 <BQ769x2_DirectCommand>
	if (DEBUG) {
		printf("\r\nbq put into DEEP SLEEP, STM about to reset to disable watchdog...\r\n");
	}

	//set persistent flag that we will want to STOP immediately upon reset
	HAL_PWR_EnableBkUpAccess();
 800424e:	f002 fcd3 	bl	8006bf8 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xDEAD); // Writes a data in a RTC Backup data Register 1
 8004252:	4a07      	ldr	r2, [pc, #28]	@ (8004270 <Sleep+0x60>)
 8004254:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <Sleep+0x64>)
 8004256:	2101      	movs	r1, #1
 8004258:	0018      	movs	r0, r3
 800425a:	f003 fd61 	bl	8007d20 <HAL_RTCEx_BKUPWrite>
	HAL_PWR_DisableBkUpAccess();
 800425e:	f002 fcd9 	bl	8006c14 <HAL_PWR_DisableBkUpAccess>

	//restart into STOP mode
	NVIC_SystemReset();
 8004262:	f7fe fa39 	bl	80026d8 <__NVIC_SystemReset>
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	200002e0 	.word	0x200002e0
 800426c:	00001388 	.word	0x00001388
 8004270:	0000dead 	.word	0x0000dead
 8004274:	20000378 	.word	0x20000378

08004278 <STM32_ShouldStop>:
	HAL_GPIO_WritePin(LED_SF_PORT, LED_SF_PIN, GPIO_PIN_RESET);
	delayMS(period_ms);
}

/* Check to see if the magic value was written into the persistent RTC registers on the last reboot. Return 1 if true, 0 if not. */
uint8_t STM32_ShouldStop() {
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0xDEAD) {
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <STM32_ShouldStop+0x38>)
 800427e:	2101      	movs	r1, #1
 8004280:	0018      	movs	r0, r3
 8004282:	f003 fd65 	bl	8007d50 <HAL_RTCEx_BKUPRead>
 8004286:	0003      	movs	r3, r0
 8004288:	4a0a      	ldr	r2, [pc, #40]	@ (80042b4 <STM32_ShouldStop+0x3c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10b      	bne.n	80042a6 <STM32_ShouldStop+0x2e>
		HAL_PWR_EnableBkUpAccess(); // Write Back Up Register 1 Data
 800428e:	f002 fcb3 	bl	8006bf8 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x0000); // Writes a data in a RTC Backup data Register 1
 8004292:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <STM32_ShouldStop+0x38>)
 8004294:	2200      	movs	r2, #0
 8004296:	2101      	movs	r1, #1
 8004298:	0018      	movs	r0, r3
 800429a:	f003 fd41 	bl	8007d20 <HAL_RTCEx_BKUPWrite>
		HAL_PWR_DisableBkUpAccess(); //Disable access
 800429e:	f002 fcb9 	bl	8006c14 <HAL_PWR_DisableBkUpAccess>
		return 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <STM32_ShouldStop+0x30>
	}

	return 0;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	20000378 	.word	0x20000378
 80042b4:	0000dead 	.word	0x0000dead

080042b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80042bc:	f000 ff24 	bl	8005108 <HAL_Init>

	/* USER CODE BEGIN Init */
	if (!DEBUG) {
		STM32_CheckForWatchdogReset();
 80042c0:	f7ff ff8c 	bl	80041dc <STM32_CheckForWatchdogReset>
	}
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80042c4:	f000 f980 	bl	80045c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all the things */
	MX_GPIO_Init();
 80042c8:	f000 fb78 	bl	80049bc <MX_GPIO_Init>
	MX_ADC_Init();
 80042cc:	f000 f9ee 	bl	80046ac <MX_ADC_Init>
	MX_I2C1_Init();
 80042d0:	f000 fa52 	bl	8004778 <MX_I2C1_Init>
	MX_TIM2_Init();
 80042d4:	f000 fac4 	bl	8004860 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80042d8:	f000 fb16 	bl	8004908 <MX_USART2_UART_Init>
	SystemPower_Config();
 80042dc:	f000 fa8c 	bl	80047f8 <SystemPower_Config>
	MX_RTC_Init();
 80042e0:	f000 fb42 	bl	8004968 <MX_RTC_Init>
	HAL_TIM_Base_Start(&htim2);
 80042e4:	4b65      	ldr	r3, [pc, #404]	@ (800447c <main+0x1c4>)
 80042e6:	0018      	movs	r0, r3
 80042e8:	f003 fd88 	bl	8007dfc <HAL_TIM_Base_Start>
	if (DEBUG) {
			printf("stm32 init complete\r\n");
	}

	/*Check to see if the button is currently pressed*/
	if (STM32_Wake_Button_Pressed()) {
 80042ec:	f7ff fe68 	bl	8003fc0 <STM32_Wake_Button_Pressed>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d002      	beq.n	80042fa <main+0x42>
		ButtonPressedDuringBoot= 1;
 80042f4:	4b62      	ldr	r3, [pc, #392]	@ (8004480 <main+0x1c8>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
	}

	/* Check to see if the STOP flag is set from prior reset. If so, initiate STOP*/


	if (STM32_ShouldStop()) {
 80042fa:	f7ff ffbd 	bl	8004278 <STM32_ShouldStop>
 80042fe:	1e03      	subs	r3, r0, #0
 8004300:	d001      	beq.n	8004306 <main+0x4e>
		if (DEBUG){
			printf("stm32 reset with intent to sleep, time to sleep...zzz\r\n");
		}
		STM32_Stop();
 8004302:	f7ff fe97 	bl	8004034 <STM32_Stop>
	}


	BQ769x2_ResetShutdownPin(); // RST_SHUT pin set low just in case
 8004306:	f7ff f889 	bl	800341c <BQ769x2_ResetShutdownPin>

	delayMS(50); //Wait for everything to stabilize
 800430a:	2032      	movs	r0, #50	@ 0x32
 800430c:	f7fe fa0c 	bl	8002728 <delayMS>

	if (WATCHDOG) {
		MX_IWDG_Init();
 8004310:	f000 fa84 	bl	800481c <MX_IWDG_Init>
	}

	/* Useful functions for debugging, especially if the STM32 gets into a weird state where it won't sleep */
	//BlinkForever(1); //uncomment to test IWDG
	//BQ769x2_Reset(); //Use this for several reasons - the main reason is to kill the 3.3V rail and power cycle the STM32, which may be necessary if the programmer puts it into a state where it won't sleep properly
	UART_WaitForCommand(); //Start UART Receiving
 8004314:	f7ff fbba 	bl	8003a8c <UART_WaitForCommand>

	while (1) {

		/* USER CODE BEGIN 3 */
		BQ769x2_ForceDisableFETs(); //disable FETs until we are getting communication from the BQ chip
 8004318:	f7ff f858 	bl	80033cc <BQ769x2_ForceDisableFETs>

		BQ769x2_SoftWake(); //wiggle RST_SHUT to do a partial reset of the BQ chip. Not sure if this is necessary but it doesn't seem to hurt.
 800431c:	f7ff f908 	bl	8003530 <BQ769x2_SoftWake>

		*/

		//Check for BQ state FULLACCESS, SEALED, or UNSEALED. Device must be connected and ACKing to get past this point.
		// This may take quite a few reads for the chip to wake up if it's the first time it's booting (I've seen 15 reads!)
		while (!BQ769x2_Ready()) {
 8004320:	e010      	b.n	8004344 <main+0x8c>
			if (DEBUG) {
				printf("bq not ready\r\n");
			}
			delayUS(1000);
 8004322:	23fa      	movs	r3, #250	@ 0xfa
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	0018      	movs	r0, r3
 8004328:	f7fe f9e8 	bl	80026fc <delayUS>
			if (RetryCount > RETRY_LIMIT) {
 800432c:	4b55      	ldr	r3, [pc, #340]	@ (8004484 <main+0x1cc>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	2b64      	cmp	r3, #100	@ 0x64
 8004332:	d901      	bls.n	8004338 <main+0x80>
				BQ769x2_Reset(); //gotta reset the BQ and try again. This kills the 3V3 rail
 8004334:	f7ff f8c4 	bl	80034c0 <BQ769x2_Reset>
			}
			RetryCount++;
 8004338:	4b52      	ldr	r3, [pc, #328]	@ (8004484 <main+0x1cc>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	4b50      	ldr	r3, [pc, #320]	@ (8004484 <main+0x1cc>)
 8004342:	801a      	strh	r2, [r3, #0]
		while (!BQ769x2_Ready()) {
 8004344:	f7ff f8de 	bl	8003504 <BQ769x2_Ready>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d0ea      	beq.n	8004322 <main+0x6a>
		};

		RetryCount = 0;
 800434c:	4b4d      	ldr	r3, [pc, #308]	@ (8004484 <main+0x1cc>)
 800434e:	2200      	movs	r2, #0
 8004350:	801a      	strh	r2, [r3, #0]

		//Wake up the device if it isn't already awake
		while (!BQ769x2_Wake()) {
 8004352:	e010      	b.n	8004376 <main+0xbe>
			if (DEBUG){
				printf("bq not awake\r\n");
			}
			delayUS(1000);
 8004354:	23fa      	movs	r3, #250	@ 0xfa
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	0018      	movs	r0, r3
 800435a:	f7fe f9cf 	bl	80026fc <delayUS>
			if (RetryCount > RETRY_LIMIT) {
 800435e:	4b49      	ldr	r3, [pc, #292]	@ (8004484 <main+0x1cc>)
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	2b64      	cmp	r3, #100	@ 0x64
 8004364:	d901      	bls.n	800436a <main+0xb2>
				BQ769x2_Reset(); //gotta reset the BQ and try again. This kills the 3V3 rail
 8004366:	f7ff f8ab 	bl	80034c0 <BQ769x2_Reset>
			}
			RetryCount++;
 800436a:	4b46      	ldr	r3, [pc, #280]	@ (8004484 <main+0x1cc>)
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	4b44      	ldr	r3, [pc, #272]	@ (8004484 <main+0x1cc>)
 8004374:	801a      	strh	r2, [r3, #0]
		while (!BQ769x2_Wake()) {
 8004376:	f7ff f87c 	bl	8003472 <BQ769x2_Wake>
 800437a:	1e03      	subs	r3, r0, #0
 800437c:	d0ea      	beq.n	8004354 <main+0x9c>
		}

		RetryCount = 0;
 800437e:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <main+0x1cc>)
 8004380:	2200      	movs	r2, #0
 8004382:	801a      	strh	r2, [r3, #0]

		//Initialize registers by calling BQ769x2_Init and then checking that the configuration was successful
		// BQ769x2 does a spot check of a register that should have been configured if BQ769x2_Init() was successful.
		while (!BQ769x2_Initialize()) {
 8004384:	e00b      	b.n	800439e <main+0xe6>
			if (DEBUG) {
				printf("bq not configured\r\n");
			}
			if (RetryCount > RETRY_LIMIT) {
 8004386:	4b3f      	ldr	r3, [pc, #252]	@ (8004484 <main+0x1cc>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	2b64      	cmp	r3, #100	@ 0x64
 800438c:	d901      	bls.n	8004392 <main+0xda>
				BQ769x2_Reset(); //gotta reset the BQ and try again. This kills the 3V3 rail
 800438e:	f7ff f897 	bl	80034c0 <BQ769x2_Reset>
			}
			RetryCount++;
 8004392:	4b3c      	ldr	r3, [pc, #240]	@ (8004484 <main+0x1cc>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	4b3a      	ldr	r3, [pc, #232]	@ (8004484 <main+0x1cc>)
 800439c:	801a      	strh	r2, [r3, #0]
		while (!BQ769x2_Initialize()) {
 800439e:	f7fe fff1 	bl	8003384 <BQ769x2_Initialize>
 80043a2:	1e03      	subs	r3, r0, #0
 80043a4:	d0ef      	beq.n	8004386 <main+0xce>
		}

		RetryCount = 0;
 80043a6:	4b37      	ldr	r3, [pc, #220]	@ (8004484 <main+0x1cc>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	801a      	strh	r2, [r3, #0]

		// get first ADC reading. Normal for this to take a few retries
		while (!BQ769x2_ReadBatteryData()) {
 80043ac:	e00f      	b.n	80043ce <main+0x116>
			if (RetryCount > RETRY_LIMIT) {
 80043ae:	4b35      	ldr	r3, [pc, #212]	@ (8004484 <main+0x1cc>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <main+0x102>
				BQ769x2_Reset(); //gotta reset the BQ and try again. This kills the 3V3 rail
 80043b6:	f7ff f883 	bl	80034c0 <BQ769x2_Reset>
			}
			RetryCount++;
 80043ba:	4b32      	ldr	r3, [pc, #200]	@ (8004484 <main+0x1cc>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	4b30      	ldr	r3, [pc, #192]	@ (8004484 <main+0x1cc>)
 80043c4:	801a      	strh	r2, [r3, #0]
			delayUS(5000); //wait a bit for the ADC to finish measuring
 80043c6:	4b30      	ldr	r3, [pc, #192]	@ (8004488 <main+0x1d0>)
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7fe f997 	bl	80026fc <delayUS>
		while (!BQ769x2_ReadBatteryData()) {
 80043ce:	f7ff fa3b 	bl	8003848 <BQ769x2_ReadBatteryData>
 80043d2:	1e03      	subs	r3, r0, #0
 80043d4:	d0eb      	beq.n	80043ae <main+0xf6>
		}

		RetryCount = 0;
 80043d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <main+0x1cc>)
 80043d8:	2200      	movs	r2, #0
 80043da:	801a      	strh	r2, [r3, #0]

		// check whether a charger >15V is connected and the button wasn't pressed during boot. If not, go back to sleep.
		if (!ButtonPressedDuringBoot && Pack_Voltage < 15000) {
 80043dc:	4b28      	ldr	r3, [pc, #160]	@ (8004480 <main+0x1c8>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <main+0x13a>
 80043e4:	4b29      	ldr	r3, [pc, #164]	@ (800448c <main+0x1d4>)
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	4a29      	ldr	r2, [pc, #164]	@ (8004490 <main+0x1d8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d801      	bhi.n	80043f2 <main+0x13a>
			if (DEBUG){
				printf("stm32 going back to sleep because user didn't press button and charger isn't connected...zzz\r\n");
			}
			Sleep();
 80043ee:	f7ff ff0f 	bl	8004210 <Sleep>
				printf("\r\ncharger connected, time to allow FETs\r\n");
			}
		}

		//enable FETs. It appears to be important to call FET_ENABLE twice
		BQ769x2_CommandSubcommand(FET_ENABLE); // Enable the CHG and DSG FETs
 80043f2:	2022      	movs	r0, #34	@ 0x22
 80043f4:	f7fe fc76 	bl	8002ce4 <BQ769x2_CommandSubcommand>
		BQ769x2_AllowFETs();
 80043f8:	f7fe fffc 	bl	80033f4 <BQ769x2_AllowFETs>
		BQ769x2_CommandSubcommand(FET_ENABLE); //for some reason need to do this twice...TODO investigate
 80043fc:	2022      	movs	r0, #34	@ 0x22
 80043fe:	f7fe fc71 	bl	8002ce4 <BQ769x2_CommandSubcommand>

		//Call outside loop
		UART_WaitForCommand();
 8004402:	f7ff fb43 	bl	8003a8c <UART_WaitForCommand>

		while (1) {

			//detect button press and take action if needed
			STM32_HandleButton();
 8004406:	f7ff fdb5 	bl	8003f74 <STM32_HandleButton>
			if (LEDS) {
				STM32_UpdateFETLEDs();
			}

			//Handle sleep current and put battery to sleep if not much is going on
			STM32_HandleInactivity();
 800440a:	f7ff fde9 	bl	8003fe0 <STM32_HandleInactivity>

			//Useful for logging
			BQ769x2_CalcMinMaxCellV();
 800440e:	f7ff fa5d 	bl	80038cc <BQ769x2_CalcMinMaxCellV>

			//Print battery status over RS485 for debug
			BQ769x2_ReadBatteryStatus();
 8004412:	f7fe fd97 	bl	8002f44 <BQ769x2_ReadBatteryStatus>
			if (DEBUG) {
				BQ769x2_PrintStatus();
			}

			//Get the latest data from the BQ chip
			if (BQ769x2_ReadBatteryData()) {
 8004416:	f7ff fa17 	bl	8003848 <BQ769x2_ReadBatteryData>
 800441a:	1e03      	subs	r3, r0, #0
 800441c:	d003      	beq.n	8004426 <main+0x16e>
				RetryCount = 0;
 800441e:	4b19      	ldr	r3, [pc, #100]	@ (8004484 <main+0x1cc>)
 8004420:	2200      	movs	r2, #0
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e005      	b.n	8004432 <main+0x17a>
			} else {
				RetryCount++;
 8004426:	4b17      	ldr	r3, [pc, #92]	@ (8004484 <main+0x1cc>)
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <main+0x1cc>)
 8004430:	801a      	strh	r2, [r3, #0]
			}

			//Check for faults and trigger the LED if so
			if (BQ769x2_ReadSafetyStatus()) {
 8004432:	f7ff f8c3 	bl	80035bc <BQ769x2_ReadSafetyStatus>
 8004436:	1e03      	subs	r3, r0, #0
 8004438:	d003      	beq.n	8004442 <main+0x18a>
				RetryCount = 0;
 800443a:	4b12      	ldr	r3, [pc, #72]	@ (8004484 <main+0x1cc>)
 800443c:	2200      	movs	r2, #0
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e005      	b.n	800444e <main+0x196>
			} else {
				RetryCount++;
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <main+0x1cc>)
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	4b0e      	ldr	r3, [pc, #56]	@ (8004484 <main+0x1cc>)
 800444c:	801a      	strh	r2, [r3, #0]

			//Set Fault LED
			if (LEDS && (ProtectionsTriggered & 1)) {
				HAL_GPIO_WritePin(LED_BF_PORT, LED_BF_PIN, GPIO_PIN_SET);
			} else {
				HAL_GPIO_WritePin(LED_BF_PORT, LED_BF_PIN, GPIO_PIN_RESET);
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	0059      	lsls	r1, r3, #1
 8004452:	23a0      	movs	r3, #160	@ 0xa0
 8004454:	05db      	lsls	r3, r3, #23
 8004456:	2200      	movs	r2, #0
 8004458:	0018      	movs	r0, r3
 800445a:	f001 fca6 	bl	8005daa <HAL_GPIO_WritePin>
			}

			//If there are too many failures, reset the BQ chip
			if (RetryCount > RETRY_LIMIT) {
 800445e:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <main+0x1cc>)
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	2b64      	cmp	r3, #100	@ 0x64
 8004464:	d902      	bls.n	800446c <main+0x1b4>
				BQ769x2_Reset(); //gotta reset the BQ and try again. This kills the 3V3 rail
 8004466:	f7ff f82b 	bl	80034c0 <BQ769x2_Reset>
				break;
 800446a:	e005      	b.n	8004478 <main+0x1c0>
			}

			STM32_PetWatchdog();
 800446c:	f7ff fd72 	bl	8003f54 <STM32_PetWatchdog>
			delayMS(10);  // repeat loop every 20 ms
 8004470:	200a      	movs	r0, #10
 8004472:	f7fe f959 	bl	8002728 <delayMS>
			STM32_HandleButton();
 8004476:	e7c6      	b.n	8004406 <main+0x14e>
		BQ769x2_ForceDisableFETs(); //disable FETs until we are getting communication from the BQ chip
 8004478:	e74e      	b.n	8004318 <main+0x60>
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	200002a0 	.word	0x200002a0
 8004480:	20000417 	.word	0x20000417
 8004484:	20000414 	.word	0x20000414
 8004488:	00001388 	.word	0x00001388
 800448c:	200003fa 	.word	0x200003fa
 8004490:	00003a97 	.word	0x00003a97

08004494 <__io_putchar>:
		}
	}
	/* USER CODE END 3 */
}

PUTCHAR_PROTOTYPE {
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET); // Receive Off
 800449c:	23a0      	movs	r3, #160	@ 0xa0
 800449e:	05db      	lsls	r3, r3, #23
 80044a0:	2201      	movs	r2, #1
 80044a2:	2180      	movs	r1, #128	@ 0x80
 80044a4:	0018      	movs	r0, r3
 80044a6:	f001 fc80 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(20);
 80044aa:	2014      	movs	r0, #20
 80044ac:	f7fe f926 	bl	80026fc <delayUS>
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_SET); // Transmit On
 80044b0:	23a0      	movs	r3, #160	@ 0xa0
 80044b2:	05db      	lsls	r3, r3, #23
 80044b4:	2201      	movs	r2, #1
 80044b6:	2140      	movs	r1, #64	@ 0x40
 80044b8:	0018      	movs	r0, r3
 80044ba:	f001 fc76 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(20);
 80044be:	2014      	movs	r0, #20
 80044c0:	f7fe f91c 	bl	80026fc <delayUS>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80044c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004504 <__io_putchar+0x70>)
 80044c6:	1d39      	adds	r1, r7, #4
 80044c8:	480f      	ldr	r0, [pc, #60]	@ (8004508 <__io_putchar+0x74>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	f003 ff6c 	bl	80083a8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(UART_TX_EN_PORT, UART_TX_EN_PIN, GPIO_PIN_RESET); //Transmit off
 80044d0:	23a0      	movs	r3, #160	@ 0xa0
 80044d2:	05db      	lsls	r3, r3, #23
 80044d4:	2200      	movs	r2, #0
 80044d6:	2140      	movs	r1, #64	@ 0x40
 80044d8:	0018      	movs	r0, r3
 80044da:	f001 fc66 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(20);
 80044de:	2014      	movs	r0, #20
 80044e0:	f7fe f90c 	bl	80026fc <delayUS>
	HAL_GPIO_WritePin(UART_RX_EN_PORT, UART_RX_EN_PIN, GPIO_PIN_SET); // Receive still off
 80044e4:	23a0      	movs	r3, #160	@ 0xa0
 80044e6:	05db      	lsls	r3, r3, #23
 80044e8:	2201      	movs	r2, #1
 80044ea:	2180      	movs	r1, #128	@ 0x80
 80044ec:	0018      	movs	r0, r3
 80044ee:	f001 fc5c 	bl	8005daa <HAL_GPIO_WritePin>
	delayUS(20);
 80044f2:	2014      	movs	r0, #20
 80044f4:	f7fe f902 	bl	80026fc <delayUS>

	return ch;
 80044f8:	687b      	ldr	r3, [r7, #4]
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b002      	add	sp, #8
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	0000ffff 	.word	0x0000ffff
 8004508:	200002e0 	.word	0x200002e0

0800450c <EXTI0_1_IRQHandler_Config>:
/**
 * @brief  Configures EXTI Port A PIN 0 as an interrupt
 * @param  None
 * @retval None
 */
static void EXTI0_1_IRQHandler_Config(void) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOC clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004512:	4b14      	ldr	r3, [pc, #80]	@ (8004564 <EXTI0_1_IRQHandler_Config+0x58>)
 8004514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004516:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <EXTI0_1_IRQHandler_Config+0x58>)
 8004518:	2101      	movs	r1, #1
 800451a:	430a      	orrs	r2, r1
 800451c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800451e:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <EXTI0_1_IRQHandler_Config+0x58>)
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	2201      	movs	r2, #1
 8004524:	4013      	ands	r3, r2
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	683b      	ldr	r3, [r7, #0]

	/* Configure PC.13 pin as input floating */
	GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800452a:	1d3b      	adds	r3, r7, #4
 800452c:	2284      	movs	r2, #132	@ 0x84
 800452e:	0392      	lsls	r2, r2, #14
 8004530:	605a      	str	r2, [r3, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	2201      	movs	r2, #1
 8004536:	609a      	str	r2, [r3, #8]
	GPIO_InitStructure.Pin = GPIO_PIN_0;
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800453e:	1d3a      	adds	r2, r7, #4
 8004540:	23a0      	movs	r3, #160	@ 0xa0
 8004542:	05db      	lsls	r3, r3, #23
 8004544:	0011      	movs	r1, r2
 8004546:	0018      	movs	r0, r3
 8004548:	f001 f9c2 	bl	80058d0 <HAL_GPIO_Init>

	/* Enable and set EXTI lines 4 to 15 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	2102      	movs	r1, #2
 8004550:	2005      	movs	r0, #5
 8004552:	f001 f8f3 	bl	800573c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004556:	2005      	movs	r0, #5
 8004558:	f001 f905 	bl	8005766 <HAL_NVIC_EnableIRQ>
}
 800455c:	46c0      	nop			@ (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b006      	add	sp, #24
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000

08004568 <EXTI2_3_IRQHandler_Config>:
/**
 * @brief  Configures EXTI Port B Pin 5 as an interrupt
 * @param  None
 * @retval None
 */
static void EXTI2_3_IRQHandler_Config(void) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOC clock */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800456e:	4b14      	ldr	r3, [pc, #80]	@ (80045c0 <EXTI2_3_IRQHandler_Config+0x58>)
 8004570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004572:	4b13      	ldr	r3, [pc, #76]	@ (80045c0 <EXTI2_3_IRQHandler_Config+0x58>)
 8004574:	2102      	movs	r1, #2
 8004576:	430a      	orrs	r2, r1
 8004578:	62da      	str	r2, [r3, #44]	@ 0x2c
 800457a:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <EXTI2_3_IRQHandler_Config+0x58>)
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	2202      	movs	r2, #2
 8004580:	4013      	ands	r3, r2
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	683b      	ldr	r3, [r7, #0]

	/* Configure PC.13 pin as input floating */
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	2288      	movs	r2, #136	@ 0x88
 800458a:	0352      	lsls	r2, r2, #13
 800458c:	605a      	str	r2, [r3, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	2202      	movs	r2, #2
 8004592:	609a      	str	r2, [r3, #8]
	GPIO_InitStructure.Pin = GPIO_PIN_5;
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	2220      	movs	r2, #32
 8004598:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <EXTI2_3_IRQHandler_Config+0x5c>)
 800459e:	0019      	movs	r1, r3
 80045a0:	0010      	movs	r0, r2
 80045a2:	f001 f995 	bl	80058d0 <HAL_GPIO_Init>

	/* Enable and set EXTI lines 4 to 15 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 80045a6:	2200      	movs	r2, #0
 80045a8:	2102      	movs	r1, #2
 80045aa:	2006      	movs	r0, #6
 80045ac:	f001 f8c6 	bl	800573c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80045b0:	2006      	movs	r0, #6
 80045b2:	f001 f8d8 	bl	8005766 <HAL_NVIC_EnableIRQ>
}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b006      	add	sp, #24
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	40021000 	.word	0x40021000
 80045c4:	50000400 	.word	0x50000400

080045c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b099      	sub	sp, #100	@ 0x64
 80045cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80045ce:	242c      	movs	r4, #44	@ 0x2c
 80045d0:	193b      	adds	r3, r7, r4
 80045d2:	0018      	movs	r0, r3
 80045d4:	2334      	movs	r3, #52	@ 0x34
 80045d6:	001a      	movs	r2, r3
 80045d8:	2100      	movs	r1, #0
 80045da:	f005 ff9d 	bl	800a518 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80045de:	2318      	movs	r3, #24
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	0018      	movs	r0, r3
 80045e4:	2314      	movs	r3, #20
 80045e6:	001a      	movs	r2, r3
 80045e8:	2100      	movs	r1, #0
 80045ea:	f005 ff95 	bl	800a518 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80045ee:	003b      	movs	r3, r7
 80045f0:	0018      	movs	r0, r3
 80045f2:	2318      	movs	r3, #24
 80045f4:	001a      	movs	r2, r3
 80045f6:	2100      	movs	r1, #0
 80045f8:	f005 ff8e 	bl	800a518 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045fc:	4b29      	ldr	r3, [pc, #164]	@ (80046a4 <SystemClock_Config+0xdc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <SystemClock_Config+0xe0>)
 8004602:	401a      	ands	r2, r3
 8004604:	4b27      	ldr	r3, [pc, #156]	@ (80046a4 <SystemClock_Config+0xdc>)
 8004606:	2180      	movs	r1, #128	@ 0x80
 8004608:	0109      	lsls	r1, r1, #4
 800460a:	430a      	orrs	r2, r1
 800460c:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800460e:	0021      	movs	r1, r4
 8004610:	187b      	adds	r3, r7, r1
 8004612:	220a      	movs	r2, #10
 8004614:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004616:	187b      	adds	r3, r7, r1
 8004618:	2201      	movs	r2, #1
 800461a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800461c:	187b      	adds	r3, r7, r1
 800461e:	2210      	movs	r2, #16
 8004620:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004622:	187b      	adds	r3, r7, r1
 8004624:	2201      	movs	r2, #1
 8004626:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004628:	187b      	adds	r3, r7, r1
 800462a:	2200      	movs	r2, #0
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800462e:	187b      	adds	r3, r7, r1
 8004630:	0018      	movs	r0, r3
 8004632:	f002 fb77 	bl	8006d24 <HAL_RCC_OscConfig>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d001      	beq.n	800463e <SystemClock_Config+0x76>
		Error_Handler();
 800463a:	f000 fad3 	bl	8004be4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800463e:	2118      	movs	r1, #24
 8004640:	187b      	adds	r3, r7, r1
 8004642:	220f      	movs	r2, #15
 8004644:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004646:	187b      	adds	r3, r7, r1
 8004648:	2201      	movs	r2, #1
 800464a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800464c:	187b      	adds	r3, r7, r1
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2200      	movs	r2, #0
 8004656:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004658:	187b      	adds	r3, r7, r1
 800465a:	2200      	movs	r2, #0
 800465c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800465e:	187b      	adds	r3, r7, r1
 8004660:	2100      	movs	r1, #0
 8004662:	0018      	movs	r0, r3
 8004664:	f002 feda 	bl	800741c <HAL_RCC_ClockConfig>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d001      	beq.n	8004670 <SystemClock_Config+0xa8>
		Error_Handler();
 800466c:	f000 faba 	bl	8004be4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8004670:	003b      	movs	r3, r7
 8004672:	222a      	movs	r2, #42	@ 0x2a
 8004674:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8004676:	003b      	movs	r3, r7
 8004678:	2208      	movs	r2, #8
 800467a:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800467c:	003b      	movs	r3, r7
 800467e:	2280      	movs	r2, #128	@ 0x80
 8004680:	0192      	lsls	r2, r2, #6
 8004682:	611a      	str	r2, [r3, #16]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004684:	003b      	movs	r3, r7
 8004686:	2280      	movs	r2, #128	@ 0x80
 8004688:	0292      	lsls	r2, r2, #10
 800468a:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800468c:	003b      	movs	r3, r7
 800468e:	0018      	movs	r0, r3
 8004690:	f003 f8e8 	bl	8007864 <HAL_RCCEx_PeriphCLKConfig>
 8004694:	1e03      	subs	r3, r0, #0
 8004696:	d001      	beq.n	800469c <SystemClock_Config+0xd4>
		Error_Handler();
 8004698:	f000 faa4 	bl	8004be4 <Error_Handler>
	}
}
 800469c:	46c0      	nop			@ (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b019      	add	sp, #100	@ 0x64
 80046a2:	bd90      	pop	{r4, r7, pc}
 80046a4:	40007000 	.word	0x40007000
 80046a8:	ffffe7ff 	.word	0xffffe7ff

080046ac <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80046b2:	003b      	movs	r3, r7
 80046b4:	0018      	movs	r0, r3
 80046b6:	2308      	movs	r3, #8
 80046b8:	001a      	movs	r2, r3
 80046ba:	2100      	movs	r1, #0
 80046bc:	f005 ff2c 	bl	800a518 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80046c0:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <MX_ADC_Init+0xc0>)
 80046c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004770 <MX_ADC_Init+0xc4>)
 80046c4:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <MX_ADC_Init+0xc0>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80046cc:	4b27      	ldr	r3, [pc, #156]	@ (800476c <MX_ADC_Init+0xc0>)
 80046ce:	22c0      	movs	r2, #192	@ 0xc0
 80046d0:	0612      	lsls	r2, r2, #24
 80046d2:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <MX_ADC_Init+0xc0>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80046da:	4b24      	ldr	r3, [pc, #144]	@ (800476c <MX_ADC_Init+0xc0>)
 80046dc:	2200      	movs	r2, #0
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80046e0:	4b22      	ldr	r3, [pc, #136]	@ (800476c <MX_ADC_Init+0xc0>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046e6:	4b21      	ldr	r3, [pc, #132]	@ (800476c <MX_ADC_Init+0xc0>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 80046ec:	4b1f      	ldr	r3, [pc, #124]	@ (800476c <MX_ADC_Init+0xc0>)
 80046ee:	2220      	movs	r2, #32
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80046f4:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <MX_ADC_Init+0xc0>)
 80046f6:	2221      	movs	r2, #33	@ 0x21
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046fc:	4b1b      	ldr	r3, [pc, #108]	@ (800476c <MX_ADC_Init+0xc0>)
 80046fe:	2200      	movs	r2, #0
 8004700:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004702:	4b1a      	ldr	r3, [pc, #104]	@ (800476c <MX_ADC_Init+0xc0>)
 8004704:	22c2      	movs	r2, #194	@ 0xc2
 8004706:	32ff      	adds	r2, #255	@ 0xff
 8004708:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 800470a:	4b18      	ldr	r3, [pc, #96]	@ (800476c <MX_ADC_Init+0xc0>)
 800470c:	222c      	movs	r2, #44	@ 0x2c
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004712:	4b16      	ldr	r3, [pc, #88]	@ (800476c <MX_ADC_Init+0xc0>)
 8004714:	2204      	movs	r2, #4
 8004716:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004718:	4b14      	ldr	r3, [pc, #80]	@ (800476c <MX_ADC_Init+0xc0>)
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 800471e:	4b13      	ldr	r3, [pc, #76]	@ (800476c <MX_ADC_Init+0xc0>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <MX_ADC_Init+0xc0>)
 8004726:	2200      	movs	r2, #0
 8004728:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <MX_ADC_Init+0xc0>)
 800472c:	2200      	movs	r2, #0
 800472e:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004730:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <MX_ADC_Init+0xc0>)
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fd58 	bl	80051e8 <HAL_ADC_Init>
 8004738:	1e03      	subs	r3, r0, #0
 800473a:	d001      	beq.n	8004740 <MX_ADC_Init+0x94>
		Error_Handler();
 800473c:	f000 fa52 	bl	8004be4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8004740:	003b      	movs	r3, r7
 8004742:	4a0c      	ldr	r2, [pc, #48]	@ (8004774 <MX_ADC_Init+0xc8>)
 8004744:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004746:	003b      	movs	r3, r7
 8004748:	2280      	movs	r2, #128	@ 0x80
 800474a:	0152      	lsls	r2, r2, #5
 800474c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800474e:	003a      	movs	r2, r7
 8004750:	4b06      	ldr	r3, [pc, #24]	@ (800476c <MX_ADC_Init+0xc0>)
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f000 febb 	bl	80054d0 <HAL_ADC_ConfigChannel>
 800475a:	1e03      	subs	r3, r0, #0
 800475c:	d001      	beq.n	8004762 <MX_ADC_Init+0xb6>
		Error_Handler();
 800475e:	f000 fa41 	bl	8004be4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b002      	add	sp, #8
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	200001f0 	.word	0x200001f0
 8004770:	40012400 	.word	0x40012400
 8004774:	14000020 	.word	0x14000020

08004778 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800477c:	4b1b      	ldr	r3, [pc, #108]	@ (80047ec <MX_I2C1_Init+0x74>)
 800477e:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <MX_I2C1_Init+0x78>)
 8004780:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300617;
 8004782:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <MX_I2C1_Init+0x74>)
 8004784:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <MX_I2C1_Init+0x7c>)
 8004786:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004788:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <MX_I2C1_Init+0x74>)
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800478e:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <MX_I2C1_Init+0x74>)
 8004790:	2201      	movs	r2, #1
 8004792:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004794:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <MX_I2C1_Init+0x74>)
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800479a:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <MX_I2C1_Init+0x74>)
 800479c:	2200      	movs	r2, #0
 800479e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80047a0:	4b12      	ldr	r3, [pc, #72]	@ (80047ec <MX_I2C1_Init+0x74>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047a6:	4b11      	ldr	r3, [pc, #68]	@ (80047ec <MX_I2C1_Init+0x74>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <MX_I2C1_Init+0x74>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80047b2:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <MX_I2C1_Init+0x74>)
 80047b4:	0018      	movs	r0, r3
 80047b6:	f001 fb3b 	bl	8005e30 <HAL_I2C_Init>
 80047ba:	1e03      	subs	r3, r0, #0
 80047bc:	d001      	beq.n	80047c2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80047be:	f000 fa11 	bl	8004be4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80047c2:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <MX_I2C1_Init+0x74>)
 80047c4:	2100      	movs	r1, #0
 80047c6:	0018      	movs	r0, r3
 80047c8:	f002 f91c 	bl	8006a04 <HAL_I2CEx_ConfigAnalogFilter>
 80047cc:	1e03      	subs	r3, r0, #0
 80047ce:	d001      	beq.n	80047d4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80047d0:	f000 fa08 	bl	8004be4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80047d4:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <MX_I2C1_Init+0x74>)
 80047d6:	2100      	movs	r1, #0
 80047d8:	0018      	movs	r0, r3
 80047da:	f002 f95f 	bl	8006a9c <HAL_I2CEx_ConfigDigitalFilter>
 80047de:	1e03      	subs	r3, r0, #0
 80047e0:	d001      	beq.n	80047e6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80047e2:	f000 f9ff 	bl	8004be4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	2000024c 	.word	0x2000024c
 80047f0:	40005400 	.word	0x40005400
 80047f4:	00300617 	.word	0x00300617

080047f8 <SystemPower_Config>:
 *            + No IWDG
 *            + Wakeup using EXTI Line (Key Button PC.13)
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
//GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable Ultra low power mode */
	HAL_PWREx_EnableUltraLowPower();
 80047fc:	f002 fa84 	bl	8006d08 <HAL_PWREx_EnableUltraLowPower>

	/* Enable the fast wake up from Ultra low power mode */
	HAL_PWREx_EnableFastWakeUp();
 8004800:	f002 fa74 	bl	8006cec <HAL_PWREx_EnableFastWakeUp>

	/* Select HSI as system clock source after Wake Up from Stop mode */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI); //probably not necessary given reset upon resume from STOP
 8004804:	4b04      	ldr	r3, [pc, #16]	@ (8004818 <SystemPower_Config+0x20>)
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	4b03      	ldr	r3, [pc, #12]	@ (8004818 <SystemPower_Config+0x20>)
 800480a:	2180      	movs	r1, #128	@ 0x80
 800480c:	0209      	lsls	r1, r1, #8
 800480e:	430a      	orrs	r2, r1
 8004810:	60da      	str	r2, [r3, #12]
}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000

0800481c <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <MX_IWDG_Init+0x34>)
 8004822:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <MX_IWDG_Init+0x38>)
 8004824:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <MX_IWDG_Init+0x34>)
 8004828:	2202      	movs	r2, #2
 800482a:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = 0xFFF;
 800482c:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <MX_IWDG_Init+0x34>)
 800482e:	4a0a      	ldr	r2, [pc, #40]	@ (8004858 <MX_IWDG_Init+0x3c>)
 8004830:	60da      	str	r2, [r3, #12]
	hiwdg.Init.Reload = 2300; //around 1 second with prescaler 16
 8004832:	4b07      	ldr	r3, [pc, #28]	@ (8004850 <MX_IWDG_Init+0x34>)
 8004834:	4a09      	ldr	r2, [pc, #36]	@ (800485c <MX_IWDG_Init+0x40>)
 8004836:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8004838:	4b05      	ldr	r3, [pc, #20]	@ (8004850 <MX_IWDG_Init+0x34>)
 800483a:	0018      	movs	r0, r3
 800483c:	f002 f97a 	bl	8006b34 <HAL_IWDG_Init>
 8004840:	1e03      	subs	r3, r0, #0
 8004842:	d001      	beq.n	8004848 <MX_IWDG_Init+0x2c>
		Error_Handler();
 8004844:	f000 f9ce 	bl	8004be4 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 8004848:	46c0      	nop			@ (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	20000368 	.word	0x20000368
 8004854:	40003000 	.word	0x40003000
 8004858:	00000fff 	.word	0x00000fff
 800485c:	000008fc 	.word	0x000008fc

08004860 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004866:	2308      	movs	r3, #8
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	0018      	movs	r0, r3
 800486c:	2310      	movs	r3, #16
 800486e:	001a      	movs	r2, r3
 8004870:	2100      	movs	r1, #0
 8004872:	f005 fe51 	bl	800a518 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004876:	003b      	movs	r3, r7
 8004878:	0018      	movs	r0, r3
 800487a:	2308      	movs	r3, #8
 800487c:	001a      	movs	r2, r3
 800487e:	2100      	movs	r1, #0
 8004880:	f005 fe4a 	bl	800a518 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004884:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <MX_TIM2_Init+0xa0>)
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	05d2      	lsls	r2, r2, #23
 800488a:	601a      	str	r2, [r3, #0]
	//htim2.Init.Prescaler = 31; for 32Mhz
	htim2.Init.Prescaler = 14; //for 16MHz
 800488c:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <MX_TIM2_Init+0xa0>)
 800488e:	220e      	movs	r2, #14
 8004890:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004892:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <MX_TIM2_Init+0xa0>)
 8004894:	2200      	movs	r2, #0
 8004896:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8004898:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <MX_TIM2_Init+0xa0>)
 800489a:	4a1a      	ldr	r2, [pc, #104]	@ (8004904 <MX_TIM2_Init+0xa4>)
 800489c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800489e:	4b18      	ldr	r3, [pc, #96]	@ (8004900 <MX_TIM2_Init+0xa0>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048a4:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <MX_TIM2_Init+0xa0>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80048aa:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <MX_TIM2_Init+0xa0>)
 80048ac:	0018      	movs	r0, r3
 80048ae:	f003 fa65 	bl	8007d7c <HAL_TIM_Base_Init>
 80048b2:	1e03      	subs	r3, r0, #0
 80048b4:	d001      	beq.n	80048ba <MX_TIM2_Init+0x5a>
		Error_Handler();
 80048b6:	f000 f995 	bl	8004be4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048ba:	2108      	movs	r1, #8
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	2280      	movs	r2, #128	@ 0x80
 80048c0:	0152      	lsls	r2, r2, #5
 80048c2:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80048c4:	187a      	adds	r2, r7, r1
 80048c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004900 <MX_TIM2_Init+0xa0>)
 80048c8:	0011      	movs	r1, r2
 80048ca:	0018      	movs	r0, r3
 80048cc:	f003 fad2 	bl	8007e74 <HAL_TIM_ConfigClockSource>
 80048d0:	1e03      	subs	r3, r0, #0
 80048d2:	d001      	beq.n	80048d8 <MX_TIM2_Init+0x78>
		Error_Handler();
 80048d4:	f000 f986 	bl	8004be4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048d8:	003b      	movs	r3, r7
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048de:	003b      	movs	r3, r7
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80048e4:	003a      	movs	r2, r7
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <MX_TIM2_Init+0xa0>)
 80048e8:	0011      	movs	r1, r2
 80048ea:	0018      	movs	r0, r3
 80048ec:	f003 fc7a 	bl	80081e4 <HAL_TIMEx_MasterConfigSynchronization>
 80048f0:	1e03      	subs	r3, r0, #0
 80048f2:	d001      	beq.n	80048f8 <MX_TIM2_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80048f4:	f000 f976 	bl	8004be4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	200002a0 	.word	0x200002a0
 8004904:	0000ffff 	.word	0x0000ffff

08004908 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800490c:	4b14      	ldr	r3, [pc, #80]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 800490e:	4a15      	ldr	r2, [pc, #84]	@ (8004964 <MX_USART2_UART_Init+0x5c>)
 8004910:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004912:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 8004914:	22e1      	movs	r2, #225	@ 0xe1
 8004916:	0252      	lsls	r2, r2, #9
 8004918:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800491a:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 800491c:	2200      	movs	r2, #0
 800491e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 8004922:	2200      	movs	r2, #0
 8004924:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004926:	4b0e      	ldr	r3, [pc, #56]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800492c:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 800492e:	220c      	movs	r2, #12
 8004930:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 8004934:	2200      	movs	r2, #0
 8004936:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004938:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 800493a:	2200      	movs	r2, #0
 800493c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800493e:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 8004940:	2200      	movs	r2, #0
 8004942:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004944:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 8004946:	2200      	movs	r2, #0
 8004948:	625a      	str	r2, [r3, #36]	@ 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800494a:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <MX_USART2_UART_Init+0x58>)
 800494c:	0018      	movs	r0, r3
 800494e:	f003 fc99 	bl	8008284 <HAL_UART_Init>
 8004952:	1e03      	subs	r3, r0, #0
 8004954:	d001      	beq.n	800495a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8004956:	f000 f945 	bl	8004be4 <Error_Handler>
	}

}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200002e0 	.word	0x200002e0
 8004964:	40004400 	.word	0x40004400

08004968 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <MX_RTC_Init+0x4c>)
 800496e:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <MX_RTC_Init+0x50>)
 8004970:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004972:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <MX_RTC_Init+0x4c>)
 8004974:	2200      	movs	r2, #0
 8004976:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8004978:	4b0e      	ldr	r3, [pc, #56]	@ (80049b4 <MX_RTC_Init+0x4c>)
 800497a:	227f      	movs	r2, #127	@ 0x7f
 800497c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <MX_RTC_Init+0x4c>)
 8004980:	22ff      	movs	r2, #255	@ 0xff
 8004982:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <MX_RTC_Init+0x4c>)
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800498a:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <MX_RTC_Init+0x4c>)
 800498c:	2200      	movs	r2, #0
 800498e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004990:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <MX_RTC_Init+0x4c>)
 8004992:	2200      	movs	r2, #0
 8004994:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004996:	4b07      	ldr	r3, [pc, #28]	@ (80049b4 <MX_RTC_Init+0x4c>)
 8004998:	2200      	movs	r2, #0
 800499a:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800499c:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <MX_RTC_Init+0x4c>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f003 f88c 	bl	8007abc <HAL_RTC_Init>
 80049a4:	1e03      	subs	r3, r0, #0
 80049a6:	d001      	beq.n	80049ac <MX_RTC_Init+0x44>
		Error_Handler();
 80049a8:	f000 f91c 	bl	8004be4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80049ac:	46c0      	nop			@ (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	20000378 	.word	0x20000378
 80049b8:	40002800 	.word	0x40002800

080049bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b089      	sub	sp, #36	@ 0x24
 80049c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80049c2:	240c      	movs	r4, #12
 80049c4:	193b      	adds	r3, r7, r4
 80049c6:	0018      	movs	r0, r3
 80049c8:	2314      	movs	r3, #20
 80049ca:	001a      	movs	r2, r3
 80049cc:	2100      	movs	r1, #0
 80049ce:	f005 fda3 	bl	800a518 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80049d2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 80049d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 80049d8:	2104      	movs	r1, #4
 80049da:	430a      	orrs	r2, r1
 80049dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049de:	4b3a      	ldr	r3, [pc, #232]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	2204      	movs	r2, #4
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80049ea:	4b37      	ldr	r3, [pc, #220]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 80049ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ee:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 80049f0:	2101      	movs	r1, #1
 80049f2:	430a      	orrs	r2, r1
 80049f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049f6:	4b34      	ldr	r3, [pc, #208]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004a02:	4b31      	ldr	r3, [pc, #196]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 8004a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a06:	4b30      	ldr	r3, [pc, #192]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 8004a08:	2102      	movs	r1, #2
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac8 <MX_GPIO_Init+0x10c>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	2202      	movs	r2, #2
 8004a14:	4013      	ands	r3, r2
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8004a1a:	492c      	ldr	r1, [pc, #176]	@ (8004acc <MX_GPIO_Init+0x110>)
 8004a1c:	23a0      	movs	r3, #160	@ 0xa0
 8004a1e:	05db      	lsls	r3, r3, #23
 8004a20:	2200      	movs	r2, #0
 8004a22:	0018      	movs	r0, r3
 8004a24:	f001 f9c1 	bl	8005daa <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8004a28:	4b29      	ldr	r3, [pc, #164]	@ (8004ad0 <MX_GPIO_Init+0x114>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	211b      	movs	r1, #27
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f001 f9bb 	bl	8005daa <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8004a34:	193b      	adds	r3, r7, r4
 8004a36:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <MX_GPIO_Init+0x110>)
 8004a38:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a3a:	193b      	adds	r3, r7, r4
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	193b      	adds	r3, r7, r4
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a46:	193b      	adds	r3, r7, r4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4c:	193a      	adds	r2, r7, r4
 8004a4e:	23a0      	movs	r3, #160	@ 0xa0
 8004a50:	05db      	lsls	r3, r3, #23
 8004a52:	0011      	movs	r1, r2
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 ff3b 	bl	80058d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4;
 8004a5a:	193b      	adds	r3, r7, r4
 8004a5c:	221b      	movs	r2, #27
 8004a5e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	2201      	movs	r2, #1
 8004a64:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a66:	193b      	adds	r3, r7, r4
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a6c:	193b      	adds	r3, r7, r4
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a72:	193b      	adds	r3, r7, r4
 8004a74:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <MX_GPIO_Init+0x114>)
 8004a76:	0019      	movs	r1, r3
 8004a78:	0010      	movs	r0, r2
 8004a7a:	f000 ff29 	bl	80058d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a7e:	193b      	adds	r3, r7, r4
 8004a80:	2220      	movs	r2, #32
 8004a82:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a84:	193b      	adds	r3, r7, r4
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a90:	193b      	adds	r3, r7, r4
 8004a92:	4a0f      	ldr	r2, [pc, #60]	@ (8004ad0 <MX_GPIO_Init+0x114>)
 8004a94:	0019      	movs	r1, r3
 8004a96:	0010      	movs	r0, r2
 8004a98:	f000 ff1a 	bl	80058d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a9c:	0021      	movs	r1, r4
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	2201      	movs	r2, #1
 8004aae:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab0:	187a      	adds	r2, r7, r1
 8004ab2:	23a0      	movs	r3, #160	@ 0xa0
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	0011      	movs	r1, r2
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 ff09 	bl	80058d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b009      	add	sp, #36	@ 0x24
 8004ac4:	bd90      	pop	{r4, r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	000003c2 	.word	0x000003c2
 8004ad0:	50000400 	.word	0x50000400

08004ad4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

//receive commands, all of which should be 8 bytes long
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	000a      	movs	r2, r1
 8004ade:	1cbb      	adds	r3, r7, #2
 8004ae0:	801a      	strh	r2, [r3, #0]
	if (!UartBusy) {
 8004ae2:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_UARTEx_RxEventCallback+0x58>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11a      	bne.n	8004b22 <HAL_UARTEx_RxEventCallback+0x4e>
		UartBusy = SET;
 8004aec:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <HAL_UARTEx_RxEventCallback+0x58>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE); //prevent interrupt from pre-empting responding and re-initialization
 8004af2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b30 <HAL_UARTEx_RxEventCallback+0x5c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <HAL_UARTEx_RxEventCallback+0x5c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2120      	movs	r1, #32
 8004afe:	438a      	bics	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
		if (Size == 8) {
 8004b02:	1cbb      	adds	r3, r7, #2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d104      	bne.n	8004b14 <HAL_UARTEx_RxEventCallback+0x40>
			UART_Respond(UART_RxData, 8);
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <HAL_UARTEx_RxEventCallback+0x60>)
 8004b0c:	2108      	movs	r1, #8
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7ff f954 	bl	8003dbc <UART_Respond>
		}

		UartBusy = RESET;
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_UARTEx_RxEventCallback+0x58>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
		THVD2410_Receive();
 8004b1a:	f7fe ffa3 	bl	8003a64 <THVD2410_Receive>
		UART_WaitForCommand();
 8004b1e:	f7fe ffb5 	bl	8003a8c <UART_WaitForCommand>
	}
}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b002      	add	sp, #8
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	2000039c 	.word	0x2000039c
 8004b30:	200002e0 	.word	0x200002e0
 8004b34:	20000418 	.word	0x20000418

08004b38 <HAL_UART_ErrorCallback>:

/* Function handle UART errors. Tries to clear the error bit. If the error isn't one of these, then we reset the UART */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE); //disable interrupt
 8004b40:	4b26      	ldr	r3, [pc, #152]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]

	if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2284      	movs	r2, #132	@ 0x84
 8004b54:	589b      	ldr	r3, [r3, r2]
 8004b56:	2204      	movs	r2, #4
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <HAL_UART_ErrorCallback+0x2c>
		// frame error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_FEF);
 8004b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2202      	movs	r2, #2
 8004b62:	621a      	str	r2, [r3, #32]
	}
	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2284      	movs	r2, #132	@ 0x84
 8004b68:	589b      	ldr	r3, [r3, r2]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <HAL_UART_ErrorCallback+0x40>
		// overrun error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_OREF);
 8004b70:	4b1a      	ldr	r3, [pc, #104]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2208      	movs	r2, #8
 8004b76:	621a      	str	r2, [r3, #32]
	}
	if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2284      	movs	r2, #132	@ 0x84
 8004b7c:	589b      	ldr	r3, [r3, r2]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4013      	ands	r3, r2
 8004b82:	d003      	beq.n	8004b8c <HAL_UART_ErrorCallback+0x54>
		// overrun error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_NEF);
 8004b84:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	621a      	str	r2, [r3, #32]
	}
	if (huart->ErrorCode & HAL_UART_ERROR_PE) {
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2284      	movs	r2, #132	@ 0x84
 8004b90:	589b      	ldr	r3, [r3, r2]
 8004b92:	2201      	movs	r2, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <HAL_UART_ErrorCallback+0x68>
		// overrun error
		__HAL_UART_CLEAR_FLAG(&huart2, UART_CLEAR_PEF);
 8004b98:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	621a      	str	r2, [r3, #32]
	}

	// if there are any remaining error codes, reset the UART peripheral
	if (!huart->ErrorCode) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2284      	movs	r2, #132	@ 0x84
 8004ba4:	589b      	ldr	r3, [r3, r2]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_UART_ErrorCallback+0x92>
		//fully re-initialize uart. Slower, but we might need to recover from a new error
		if (HAL_UART_DeInit(&huart2) != HAL_OK) {
 8004baa:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004bac:	0018      	movs	r0, r3
 8004bae:	f003 fbbd 	bl	800832c <HAL_UART_DeInit>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_UART_ErrorCallback+0x82>
			Error_Handler();
 8004bb6:	f000 f815 	bl	8004be4 <Error_Handler>
		}
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004bba:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <HAL_UART_ErrorCallback+0xa4>)
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f003 fb61 	bl	8008284 <HAL_UART_Init>
 8004bc2:	1e03      	subs	r3, r0, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_UART_ErrorCallback+0x92>
			Error_Handler();
 8004bc6:	f000 f80d 	bl	8004be4 <Error_Handler>

		}
	}

	UartBusy = RESET;
 8004bca:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_UART_ErrorCallback+0xa8>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
	UART_WaitForCommand();
 8004bd0:	f7fe ff5c 	bl	8003a8c <UART_WaitForCommand>
}
 8004bd4:	46c0      	nop			@ (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	200002e0 	.word	0x200002e0
 8004be0:	2000039c 	.word	0x2000039c

08004be4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004be8:	b672      	cpsid	i
}
 8004bea:	46c0      	nop			@ (mov r8, r8)
	if (DEBUG) {
		STM32_BlinkForever(2000); //watchdog should be disabled in DEBUG mode, so this is OK.
	}

	//reset and hope things go better the next time around
	delayMS(1000); //wait a second
 8004bec:	23fa      	movs	r3, #250	@ 0xfa
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7fd fd99 	bl	8002728 <delayMS>
	while (1)
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	e7fd      	b.n	8004bf6 <Error_Handler+0x12>
	...

08004bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c00:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <HAL_MspInit+0x24>)
 8004c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <HAL_MspInit+0x24>)
 8004c06:	2101      	movs	r1, #1
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <HAL_MspInit+0x24>)
 8004c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c10:	4b03      	ldr	r3, [pc, #12]	@ (8004c20 <HAL_MspInit+0x24>)
 8004c12:	2180      	movs	r1, #128	@ 0x80
 8004c14:	0549      	lsls	r1, r1, #21
 8004c16:	430a      	orrs	r2, r1
 8004c18:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000

08004c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2c:	240c      	movs	r4, #12
 8004c2e:	193b      	adds	r3, r7, r4
 8004c30:	0018      	movs	r0, r3
 8004c32:	2314      	movs	r3, #20
 8004c34:	001a      	movs	r2, r3
 8004c36:	2100      	movs	r1, #0
 8004c38:	f005 fc6e 	bl	800a518 <memset>
  if(hadc->Instance==ADC1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a14      	ldr	r2, [pc, #80]	@ (8004c94 <HAL_ADC_MspInit+0x70>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d122      	bne.n	8004c8c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c46:	4b14      	ldr	r3, [pc, #80]	@ (8004c98 <HAL_ADC_MspInit+0x74>)
 8004c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4a:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <HAL_ADC_MspInit+0x74>)
 8004c4c:	2180      	movs	r1, #128	@ 0x80
 8004c4e:	0089      	lsls	r1, r1, #2
 8004c50:	430a      	orrs	r2, r1
 8004c52:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c54:	4b10      	ldr	r3, [pc, #64]	@ (8004c98 <HAL_ADC_MspInit+0x74>)
 8004c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c58:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <HAL_ADC_MspInit+0x74>)
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c60:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <HAL_ADC_MspInit+0x74>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004c6c:	193b      	adds	r3, r7, r4
 8004c6e:	2220      	movs	r2, #32
 8004c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c72:	193b      	adds	r3, r7, r4
 8004c74:	2203      	movs	r2, #3
 8004c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	193b      	adds	r3, r7, r4
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7e:	193a      	adds	r2, r7, r4
 8004c80:	23a0      	movs	r3, #160	@ 0xa0
 8004c82:	05db      	lsls	r3, r3, #23
 8004c84:	0011      	movs	r1, r2
 8004c86:	0018      	movs	r0, r3
 8004c88:	f000 fe22 	bl	80058d0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004c8c:	46c0      	nop			@ (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b009      	add	sp, #36	@ 0x24
 8004c92:	bd90      	pop	{r4, r7, pc}
 8004c94:	40012400 	.word	0x40012400
 8004c98:	40021000 	.word	0x40021000

08004c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b089      	sub	sp, #36	@ 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	240c      	movs	r4, #12
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	0018      	movs	r0, r3
 8004caa:	2314      	movs	r3, #20
 8004cac:	001a      	movs	r2, r3
 8004cae:	2100      	movs	r1, #0
 8004cb0:	f005 fc32 	bl	800a518 <memset>
  if(hi2c->Instance==I2C1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a17      	ldr	r2, [pc, #92]	@ (8004d18 <HAL_I2C_MspInit+0x7c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d128      	bne.n	8004d10 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cbe:	4b17      	ldr	r3, [pc, #92]	@ (8004d1c <HAL_I2C_MspInit+0x80>)
 8004cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc2:	4b16      	ldr	r3, [pc, #88]	@ (8004d1c <HAL_I2C_MspInit+0x80>)
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004cca:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <HAL_I2C_MspInit+0x80>)
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cce:	2202      	movs	r2, #2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	187b      	adds	r3, r7, r1
 8004cda:	22c0      	movs	r2, #192	@ 0xc0
 8004cdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	2212      	movs	r2, #18
 8004ce2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	187b      	adds	r3, r7, r1
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cea:	187b      	adds	r3, r7, r1
 8004cec:	2203      	movs	r2, #3
 8004cee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004cf0:	187b      	adds	r3, r7, r1
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf6:	187b      	adds	r3, r7, r1
 8004cf8:	4a09      	ldr	r2, [pc, #36]	@ (8004d20 <HAL_I2C_MspInit+0x84>)
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	0010      	movs	r0, r2
 8004cfe:	f000 fde7 	bl	80058d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d02:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <HAL_I2C_MspInit+0x80>)
 8004d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d06:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_I2C_MspInit+0x80>)
 8004d08:	2180      	movs	r1, #128	@ 0x80
 8004d0a:	0389      	lsls	r1, r1, #14
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004d10:	46c0      	nop			@ (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b009      	add	sp, #36	@ 0x24
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	40005400 	.word	0x40005400
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	50000400 	.word	0x50000400

08004d24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a06      	ldr	r2, [pc, #24]	@ (8004d4c <HAL_RTC_MspInit+0x28>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d106      	bne.n	8004d44 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_RTC_MspInit+0x2c>)
 8004d38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d3a:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <HAL_RTC_MspInit+0x2c>)
 8004d3c:	2180      	movs	r1, #128	@ 0x80
 8004d3e:	02c9      	lsls	r1, r1, #11
 8004d40:	430a      	orrs	r2, r1
 8004d42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40002800 	.word	0x40002800
 8004d50:	40021000 	.word	0x40021000

08004d54 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <HAL_RTC_MspDeInit+0x28>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d105      	bne.n	8004d72 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8004d66:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <HAL_RTC_MspDeInit+0x2c>)
 8004d68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RTC_MspDeInit+0x2c>)
 8004d6c:	4905      	ldr	r1, [pc, #20]	@ (8004d84 <HAL_RTC_MspDeInit+0x30>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b002      	add	sp, #8
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	40002800 	.word	0x40002800
 8004d80:	40021000 	.word	0x40021000
 8004d84:	fffbffff 	.word	0xfffbffff

08004d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	05db      	lsls	r3, r3, #23
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d105      	bne.n	8004da8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d9c:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <HAL_TIM_Base_MspInit+0x28>)
 8004d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004da0:	4b03      	ldr	r3, [pc, #12]	@ (8004db0 <HAL_TIM_Base_MspInit+0x28>)
 8004da2:	2101      	movs	r1, #1
 8004da4:	430a      	orrs	r2, r1
 8004da6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40021000 	.word	0x40021000

08004db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b089      	sub	sp, #36	@ 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	240c      	movs	r4, #12
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	2314      	movs	r3, #20
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f005 fba6 	bl	800a518 <memset>
  if(huart->Instance==USART2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <HAL_UART_MspInit+0x90>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d131      	bne.n	8004e3a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e48 <HAL_UART_MspInit+0x94>)
 8004dd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dda:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <HAL_UART_MspInit+0x94>)
 8004ddc:	2180      	movs	r1, #128	@ 0x80
 8004dde:	0289      	lsls	r1, r1, #10
 8004de0:	430a      	orrs	r2, r1
 8004de2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de4:	4b18      	ldr	r3, [pc, #96]	@ (8004e48 <HAL_UART_MspInit+0x94>)
 8004de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de8:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <HAL_UART_MspInit+0x94>)
 8004dea:	2101      	movs	r1, #1
 8004dec:	430a      	orrs	r2, r1
 8004dee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004df0:	4b15      	ldr	r3, [pc, #84]	@ (8004e48 <HAL_UART_MspInit+0x94>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	2201      	movs	r2, #1
 8004df6:	4013      	ands	r3, r2
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004dfc:	0021      	movs	r1, r4
 8004dfe:	187b      	adds	r3, r7, r1
 8004e00:	220c      	movs	r2, #12
 8004e02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	2202      	movs	r2, #2
 8004e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0a:	187b      	adds	r3, r7, r1
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	2203      	movs	r2, #3
 8004e14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	2204      	movs	r2, #4
 8004e1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1c:	187a      	adds	r2, r7, r1
 8004e1e:	23a0      	movs	r3, #160	@ 0xa0
 8004e20:	05db      	lsls	r3, r3, #23
 8004e22:	0011      	movs	r1, r2
 8004e24:	0018      	movs	r0, r3
 8004e26:	f000 fd53 	bl	80058d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0); //changed to 2 to match other function
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	201c      	movs	r0, #28
 8004e30:	f000 fc84 	bl	800573c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e34:	201c      	movs	r0, #28
 8004e36:	f000 fc96 	bl	8005766 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b009      	add	sp, #36	@ 0x24
 8004e40:	bd90      	pop	{r4, r7, pc}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	40004400 	.word	0x40004400
 8004e48:	40021000 	.word	0x40021000

08004e4c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a0a      	ldr	r2, [pc, #40]	@ (8004e84 <HAL_UART_MspDeInit+0x38>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10e      	bne.n	8004e7c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <HAL_UART_MspDeInit+0x3c>)
 8004e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e62:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <HAL_UART_MspDeInit+0x3c>)
 8004e64:	4909      	ldr	r1, [pc, #36]	@ (8004e8c <HAL_UART_MspDeInit+0x40>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	639a      	str	r2, [r3, #56]	@ 0x38

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004e6a:	23a0      	movs	r3, #160	@ 0xa0
 8004e6c:	05db      	lsls	r3, r3, #23
 8004e6e:	210c      	movs	r1, #12
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 fea3 	bl	8005bbc <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004e76:	201c      	movs	r0, #28
 8004e78:	f000 fc85 	bl	8005786 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40004400 	.word	0x40004400
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	fffdffff 	.word	0xfffdffff

08004e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	e7fd      	b.n	8004e94 <NMI_Handler+0x4>

08004e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//NVIC_SystemReset(); //reset on hard fault
  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 8004e9c:	46c0      	nop			@ (mov r8, r8)
 8004e9e:	e7fd      	b.n	8004e9c <HardFault_Handler+0x4>

08004ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ea4:	46c0      	nop			@ (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004eb8:	f000 f97a 	bl	80051b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <USART2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <USART2_IRQHandler+0x14>)
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f003 fb0c 	bl	80084e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ed0:	46c0      	nop			@ (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	200002e0 	.word	0x200002e0

08004edc <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	f000 ff7f 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
	//EXTI->PR = EXTI_PR_PIF0;
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <EXTI2_3_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_3_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004ef0:	2020      	movs	r0, #32
 8004ef2:	f000 ff77 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
	//EXTI->PR = EXTI_PR_PIF0;
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  return 1;
 8004f00:	2301      	movs	r3, #1
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_kill>:

int _kill(int pid, int sig)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f12:	f005 fb5b 	bl	800a5cc <__errno>
 8004f16:	0003      	movs	r3, r0
 8004f18:	2216      	movs	r2, #22
 8004f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	425b      	negs	r3, r3
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_exit>:

void _exit (int status)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f30:	2301      	movs	r3, #1
 8004f32:	425a      	negs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff ffe5 	bl	8004f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	e7fd      	b.n	8004f3e <_exit+0x16>

08004f42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e00a      	b.n	8004f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f54:	e000      	b.n	8004f58 <_read+0x16>
 8004f56:	bf00      	nop
 8004f58:	0001      	movs	r1, r0
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	60ba      	str	r2, [r7, #8]
 8004f60:	b2ca      	uxtb	r2, r1
 8004f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3301      	adds	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	dbf0      	blt.n	8004f54 <_read+0x12>
  }

  return len;
 8004f72:	687b      	ldr	r3, [r7, #4]
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b006      	add	sp, #24
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e009      	b.n	8004fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	60ba      	str	r2, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff fa7c 	bl	8004494 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	dbf1      	blt.n	8004f8e <_write+0x12>
  }
  return len;
 8004faa:	687b      	ldr	r3, [r7, #4]
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b006      	add	sp, #24
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_close>:

int _close(int file)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	425b      	negs	r3, r3
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2280      	movs	r2, #128	@ 0x80
 8004fd6:	0192      	lsls	r2, r2, #6
 8004fd8:	605a      	str	r2, [r3, #4]
  return 0;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_isatty>:

int _isatty(int file)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fec:	2301      	movs	r3, #1
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b002      	add	sp, #8
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005002:	2300      	movs	r3, #0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b004      	add	sp, #16
 800500a:	bd80      	pop	{r7, pc}

0800500c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005014:	4a14      	ldr	r2, [pc, #80]	@ (8005068 <_sbrk+0x5c>)
 8005016:	4b15      	ldr	r3, [pc, #84]	@ (800506c <_sbrk+0x60>)
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005020:	4b13      	ldr	r3, [pc, #76]	@ (8005070 <_sbrk+0x64>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005028:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <_sbrk+0x64>)
 800502a:	4a12      	ldr	r2, [pc, #72]	@ (8005074 <_sbrk+0x68>)
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800502e:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <_sbrk+0x64>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	18d3      	adds	r3, r2, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d207      	bcs.n	800504c <_sbrk+0x40>
  {
      errno = ENOMEM;
 800503c:	f005 fac6 	bl	800a5cc <__errno>
 8005040:	0003      	movs	r3, r0
 8005042:	220c      	movs	r2, #12
 8005044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005046:	2301      	movs	r3, #1
 8005048:	425b      	negs	r3, r3
 800504a:	e009      	b.n	8005060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800504c:	4b08      	ldr	r3, [pc, #32]	@ (8005070 <_sbrk+0x64>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <_sbrk+0x64>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	18d2      	adds	r2, r2, r3
 800505a:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <_sbrk+0x64>)
 800505c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	0018      	movs	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	b006      	add	sp, #24
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20002000 	.word	0x20002000
 800506c:	00000400 	.word	0x00000400
 8005070:	20000440 	.word	0x20000440
 8005074:	20000598 	.word	0x20000598

08005078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005084:	4813      	ldr	r0, [pc, #76]	@ (80050d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005086:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005088:	f7ff fff6 	bl	8005078 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800508c:	4812      	ldr	r0, [pc, #72]	@ (80050d8 <LoopForever+0x6>)
    LDR R1, [R0]
 800508e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8005090:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8005092:	4a12      	ldr	r2, [pc, #72]	@ (80050dc <LoopForever+0xa>)
    CMP R1, R2
 8005094:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8005096:	d105      	bne.n	80050a4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8005098:	4811      	ldr	r0, [pc, #68]	@ (80050e0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800509a:	4912      	ldr	r1, [pc, #72]	@ (80050e4 <LoopForever+0x12>)
    STR R1, [R0]
 800509c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800509e:	4812      	ldr	r0, [pc, #72]	@ (80050e8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80050a0:	4912      	ldr	r1, [pc, #72]	@ (80050ec <LoopForever+0x1a>)
    STR R1, [R0]
 80050a2:	6001      	str	r1, [r0, #0]

080050a4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050a4:	4812      	ldr	r0, [pc, #72]	@ (80050f0 <LoopForever+0x1e>)
  ldr r1, =_edata
 80050a6:	4913      	ldr	r1, [pc, #76]	@ (80050f4 <LoopForever+0x22>)
  ldr r2, =_sidata
 80050a8:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <LoopForever+0x26>)
  movs r3, #0
 80050aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050ac:	e002      	b.n	80050b4 <LoopCopyDataInit>

080050ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050b2:	3304      	adds	r3, #4

080050b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050b8:	d3f9      	bcc.n	80050ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ba:	4a10      	ldr	r2, [pc, #64]	@ (80050fc <LoopForever+0x2a>)
  ldr r4, =_ebss
 80050bc:	4c10      	ldr	r4, [pc, #64]	@ (8005100 <LoopForever+0x2e>)
  movs r3, #0
 80050be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050c0:	e001      	b.n	80050c6 <LoopFillZerobss>

080050c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c4:	3204      	adds	r2, #4

080050c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050c8:	d3fb      	bcc.n	80050c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050ca:	f005 fa85 	bl	800a5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ce:	f7ff f8f3 	bl	80042b8 <main>

080050d2 <LoopForever>:

LoopForever:
    b LoopForever
 80050d2:	e7fe      	b.n	80050d2 <LoopForever>
   ldr   r0, =_estack
 80050d4:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80050d8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80050dc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80050e0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80050e4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80050e8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80050ec:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80050f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80050f8:	0800ca40 	.word	0x0800ca40
  ldr r2, =_sbss
 80050fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8005100:	20000594 	.word	0x20000594

08005104 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005104:	e7fe      	b.n	8005104 <ADC1_IRQHandler>
	...

08005108 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800510e:	1dfb      	adds	r3, r7, #7
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005114:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <HAL_Init+0x3c>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b0a      	ldr	r3, [pc, #40]	@ (8005144 <HAL_Init+0x3c>)
 800511a:	2140      	movs	r1, #64	@ 0x40
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005120:	2003      	movs	r0, #3
 8005122:	f000 f811 	bl	8005148 <HAL_InitTick>
 8005126:	1e03      	subs	r3, r0, #0
 8005128:	d003      	beq.n	8005132 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e001      	b.n	8005136 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005132:	f7ff fd63 	bl	8004bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005136:	1dfb      	adds	r3, r7, #7
 8005138:	781b      	ldrb	r3, [r3, #0]
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b002      	add	sp, #8
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	40022000 	.word	0x40022000

08005148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005150:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <HAL_InitTick+0x5c>)
 8005152:	681c      	ldr	r4, [r3, #0]
 8005154:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <HAL_InitTick+0x60>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	0019      	movs	r1, r3
 800515a:	23fa      	movs	r3, #250	@ 0xfa
 800515c:	0098      	lsls	r0, r3, #2
 800515e:	f7fa ffef 	bl	8000140 <__udivsi3>
 8005162:	0003      	movs	r3, r0
 8005164:	0019      	movs	r1, r3
 8005166:	0020      	movs	r0, r4
 8005168:	f7fa ffea 	bl	8000140 <__udivsi3>
 800516c:	0003      	movs	r3, r0
 800516e:	0018      	movs	r0, r3
 8005170:	f000 fb19 	bl	80057a6 <HAL_SYSTICK_Config>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	d001      	beq.n	800517c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e00f      	b.n	800519c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d80b      	bhi.n	800519a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	2301      	movs	r3, #1
 8005186:	425b      	negs	r3, r3
 8005188:	2200      	movs	r2, #0
 800518a:	0018      	movs	r0, r3
 800518c:	f000 fad6 	bl	800573c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005190:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <HAL_InitTick+0x64>)
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b003      	add	sp, #12
 80051a2:	bd90      	pop	{r4, r7, pc}
 80051a4:	20000000 	.word	0x20000000
 80051a8:	20000008 	.word	0x20000008
 80051ac:	20000004 	.word	0x20000004

080051b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <HAL_IncTick+0x1c>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	001a      	movs	r2, r3
 80051ba:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_IncTick+0x20>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	18d2      	adds	r2, r2, r3
 80051c0:	4b03      	ldr	r3, [pc, #12]	@ (80051d0 <HAL_IncTick+0x20>)
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	20000008 	.word	0x20000008
 80051d0:	20000444 	.word	0x20000444

080051d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
	return uwTick;
 80051d8:	4b02      	ldr	r3, [pc, #8]	@ (80051e4 <HAL_GetTick+0x10>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	20000444 	.word	0x20000444

080051e8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e159      	b.n	80054ae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2250      	movs	r2, #80	@ 0x50
 800520c:	2100      	movs	r1, #0
 800520e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	0018      	movs	r0, r3
 8005214:	f7ff fd06 	bl	8004c24 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	2210      	movs	r2, #16
 800521e:	4013      	ands	r3, r2
 8005220:	2b10      	cmp	r3, #16
 8005222:	d005      	beq.n	8005230 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2204      	movs	r2, #4
 800522c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800522e:	d00b      	beq.n	8005248 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005234:	2210      	movs	r2, #16
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2250      	movs	r2, #80	@ 0x50
 8005240:	2100      	movs	r1, #0
 8005242:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e132      	b.n	80054ae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524c:	4a9a      	ldr	r2, [pc, #616]	@ (80054b8 <HAL_ADC_Init+0x2d0>)
 800524e:	4013      	ands	r3, r2
 8005250:	2202      	movs	r2, #2
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2203      	movs	r2, #3
 8005260:	4013      	ands	r3, r2
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_ADC_Init+0x90>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	4013      	ands	r3, r2
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_ADC_Init+0x90>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_ADC_Init+0x92>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d149      	bne.n	8005312 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	23c0      	movs	r3, #192	@ 0xc0
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	429a      	cmp	r2, r3
 8005288:	d00b      	beq.n	80052a2 <HAL_ADC_Init+0xba>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	2380      	movs	r3, #128	@ 0x80
 8005290:	05db      	lsls	r3, r3, #23
 8005292:	429a      	cmp	r2, r3
 8005294:	d005      	beq.n	80052a2 <HAL_ADC_Init+0xba>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	2380      	movs	r3, #128	@ 0x80
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	429a      	cmp	r2, r3
 80052a0:	d111      	bne.n	80052c6 <HAL_ADC_Init+0xde>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	0092      	lsls	r2, r2, #2
 80052ae:	0892      	lsrs	r2, r2, #2
 80052b0:	611a      	str	r2, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6919      	ldr	r1, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	611a      	str	r2, [r3, #16]
 80052c4:	e014      	b.n	80052f0 <HAL_ADC_Init+0x108>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	0092      	lsls	r2, r2, #2
 80052d2:	0892      	lsrs	r2, r2, #2
 80052d4:	611a      	str	r2, [r3, #16]
 80052d6:	4b79      	ldr	r3, [pc, #484]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b78      	ldr	r3, [pc, #480]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 80052dc:	4978      	ldr	r1, [pc, #480]	@ (80054c0 <HAL_ADC_Init+0x2d8>)
 80052de:	400a      	ands	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	4b76      	ldr	r3, [pc, #472]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4b74      	ldr	r3, [pc, #464]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 80052ec:	430a      	orrs	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2118      	movs	r1, #24
 80052fc:	438a      	bics	r2, r1
 80052fe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68d9      	ldr	r1, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005312:	4b6a      	ldr	r3, [pc, #424]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b69      	ldr	r3, [pc, #420]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 8005318:	496a      	ldr	r1, [pc, #424]	@ (80054c4 <HAL_ADC_Init+0x2dc>)
 800531a:	400a      	ands	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800531e:	4b67      	ldr	r3, [pc, #412]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005326:	065a      	lsls	r2, r3, #25
 8005328:	4b64      	ldr	r3, [pc, #400]	@ (80054bc <HAL_ADC_Init+0x2d4>)
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	2380      	movs	r3, #128	@ 0x80
 8005336:	055b      	lsls	r3, r3, #21
 8005338:	4013      	ands	r3, r2
 800533a:	d108      	bne.n	800534e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2180      	movs	r1, #128	@ 0x80
 8005348:	0549      	lsls	r1, r1, #21
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	495b      	ldr	r1, [pc, #364]	@ (80054c8 <HAL_ADC_Init+0x2e0>)
 800535a:	400a      	ands	r2, r1
 800535c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68d9      	ldr	r1, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d101      	bne.n	8005374 <HAL_ADC_Init+0x18c>
 8005370:	2304      	movs	r3, #4
 8005372:	e000      	b.n	8005376 <HAL_ADC_Init+0x18e>
 8005374:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005376:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2020      	movs	r0, #32
 800537c:	5c1b      	ldrb	r3, [r3, r0]
 800537e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005380:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	202c      	movs	r0, #44	@ 0x2c
 8005386:	5c1b      	ldrb	r3, [r3, r0]
 8005388:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800538a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005390:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005398:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80053a0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053ae:	23c2      	movs	r3, #194	@ 0xc2
 80053b0:	33ff      	adds	r3, #255	@ 0xff
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d00b      	beq.n	80053ce <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68d9      	ldr	r1, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2221      	movs	r2, #33	@ 0x21
 80053d2:	5c9b      	ldrb	r3, [r3, r2]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d11a      	bne.n	800540e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	5c9b      	ldrb	r3, [r3, r2]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2180      	movs	r1, #128	@ 0x80
 80053ee:	0249      	lsls	r1, r1, #9
 80053f0:	430a      	orrs	r2, r1
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	e00b      	b.n	800540e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fa:	2220      	movs	r2, #32
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005406:	2201      	movs	r2, #1
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d11f      	bne.n	8005456 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	492a      	ldr	r1, [pc, #168]	@ (80054cc <HAL_ADC_Init+0x2e4>)
 8005422:	400a      	ands	r2, r1
 8005424:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6919      	ldr	r1, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8005434:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800543a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2101      	movs	r1, #1
 8005450:	430a      	orrs	r2, r1
 8005452:	611a      	str	r2, [r3, #16]
 8005454:	e00e      	b.n	8005474 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2201      	movs	r2, #1
 800545e:	4013      	ands	r3, r2
 8005460:	2b01      	cmp	r3, #1
 8005462:	d107      	bne.n	8005474 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2101      	movs	r1, #1
 8005470:	438a      	bics	r2, r1
 8005472:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2107      	movs	r1, #7
 8005480:	438a      	bics	r2, r1
 8005482:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6959      	ldr	r1, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a0:	2203      	movs	r2, #3
 80054a2:	4393      	bics	r3, r2
 80054a4:	2201      	movs	r2, #1
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	0018      	movs	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b002      	add	sp, #8
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	fffffefd 	.word	0xfffffefd
 80054bc:	40012708 	.word	0x40012708
 80054c0:	ffc3ffff 	.word	0xffc3ffff
 80054c4:	fdffffff 	.word	0xfdffffff
 80054c8:	fffe0219 	.word	0xfffe0219
 80054cc:	fffffc03 	.word	0xfffffc03

080054d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2250      	movs	r2, #80	@ 0x50
 80054de:	5c9b      	ldrb	r3, [r3, r2]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_ADC_ConfigChannel+0x18>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e050      	b.n	800558a <HAL_ADC_ConfigChannel+0xba>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2250      	movs	r2, #80	@ 0x50
 80054ec:	2101      	movs	r1, #1
 80054ee:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2204      	movs	r2, #4
 80054f8:	4013      	ands	r3, r2
 80054fa:	d00b      	beq.n	8005514 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005500:	2220      	movs	r2, #32
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2250      	movs	r2, #80	@ 0x50
 800550c:	2100      	movs	r1, #0
 800550e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e03a      	b.n	800558a <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <HAL_ADC_ConfigChannel+0xc4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	035b      	lsls	r3, r3, #13
 800552a:	0b5a      	lsrs	r2, r3, #13
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	029b      	lsls	r3, r3, #10
 800553c:	4013      	ands	r3, r2
 800553e:	d01f      	beq.n	8005580 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8005540:	4b15      	ldr	r3, [pc, #84]	@ (8005598 <HAL_ADC_ConfigChannel+0xc8>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b14      	ldr	r3, [pc, #80]	@ (8005598 <HAL_ADC_ConfigChannel+0xc8>)
 8005546:	2180      	movs	r1, #128	@ 0x80
 8005548:	03c9      	lsls	r1, r1, #15
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e017      	b.n	8005580 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	035b      	lsls	r3, r3, #13
 800555c:	0b5b      	lsrs	r3, r3, #13
 800555e:	43d9      	mvns	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	400a      	ands	r2, r1
 8005566:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	2380      	movs	r3, #128	@ 0x80
 800556e:	029b      	lsls	r3, r3, #10
 8005570:	4013      	ands	r3, r2
 8005572:	d005      	beq.n	8005580 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8005574:	4b08      	ldr	r3, [pc, #32]	@ (8005598 <HAL_ADC_ConfigChannel+0xc8>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <HAL_ADC_ConfigChannel+0xc8>)
 800557a:	4908      	ldr	r1, [pc, #32]	@ (800559c <HAL_ADC_ConfigChannel+0xcc>)
 800557c:	400a      	ands	r2, r1
 800557e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2250      	movs	r2, #80	@ 0x50
 8005584:	2100      	movs	r1, #0
 8005586:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	0018      	movs	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	b002      	add	sp, #8
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	00001001 	.word	0x00001001
 8005598:	40012708 	.word	0x40012708
 800559c:	ffbfffff 	.word	0xffbfffff

080055a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	0002      	movs	r2, r0
 80055a8:	1dfb      	adds	r3, r7, #7
 80055aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055ac:	1dfb      	adds	r3, r7, #7
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055b2:	d809      	bhi.n	80055c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055b4:	1dfb      	adds	r3, r7, #7
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	001a      	movs	r2, r3
 80055ba:	231f      	movs	r3, #31
 80055bc:	401a      	ands	r2, r3
 80055be:	4b04      	ldr	r3, [pc, #16]	@ (80055d0 <__NVIC_EnableIRQ+0x30>)
 80055c0:	2101      	movs	r1, #1
 80055c2:	4091      	lsls	r1, r2
 80055c4:	000a      	movs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
  }
}
 80055c8:	46c0      	nop			@ (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b002      	add	sp, #8
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	e000e100 	.word	0xe000e100

080055d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	0002      	movs	r2, r0
 80055dc:	1dfb      	adds	r3, r7, #7
 80055de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e6:	d810      	bhi.n	800560a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055e8:	1dfb      	adds	r3, r7, #7
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	001a      	movs	r2, r3
 80055ee:	231f      	movs	r3, #31
 80055f0:	4013      	ands	r3, r2
 80055f2:	4908      	ldr	r1, [pc, #32]	@ (8005614 <__NVIC_DisableIRQ+0x40>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	409a      	lsls	r2, r3
 80055f8:	0013      	movs	r3, r2
 80055fa:	2280      	movs	r2, #128	@ 0x80
 80055fc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80055fe:	f3bf 8f4f 	dsb	sy
}
 8005602:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005604:	f3bf 8f6f 	isb	sy
}
 8005608:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	46bd      	mov	sp, r7
 800560e:	b002      	add	sp, #8
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	e000e100 	.word	0xe000e100

08005618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	0002      	movs	r2, r0
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	1dfb      	adds	r3, r7, #7
 8005624:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b7f      	cmp	r3, #127	@ 0x7f
 800562c:	d828      	bhi.n	8005680 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800562e:	4a2f      	ldr	r2, [pc, #188]	@ (80056ec <__NVIC_SetPriority+0xd4>)
 8005630:	1dfb      	adds	r3, r7, #7
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	b25b      	sxtb	r3, r3
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	33c0      	adds	r3, #192	@ 0xc0
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	589b      	ldr	r3, [r3, r2]
 800563e:	1dfa      	adds	r2, r7, #7
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	0011      	movs	r1, r2
 8005644:	2203      	movs	r2, #3
 8005646:	400a      	ands	r2, r1
 8005648:	00d2      	lsls	r2, r2, #3
 800564a:	21ff      	movs	r1, #255	@ 0xff
 800564c:	4091      	lsls	r1, r2
 800564e:	000a      	movs	r2, r1
 8005650:	43d2      	mvns	r2, r2
 8005652:	401a      	ands	r2, r3
 8005654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	22ff      	movs	r2, #255	@ 0xff
 800565c:	401a      	ands	r2, r3
 800565e:	1dfb      	adds	r3, r7, #7
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	0018      	movs	r0, r3
 8005664:	2303      	movs	r3, #3
 8005666:	4003      	ands	r3, r0
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800566c:	481f      	ldr	r0, [pc, #124]	@ (80056ec <__NVIC_SetPriority+0xd4>)
 800566e:	1dfb      	adds	r3, r7, #7
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b25b      	sxtb	r3, r3
 8005674:	089b      	lsrs	r3, r3, #2
 8005676:	430a      	orrs	r2, r1
 8005678:	33c0      	adds	r3, #192	@ 0xc0
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800567e:	e031      	b.n	80056e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005680:	4a1b      	ldr	r2, [pc, #108]	@ (80056f0 <__NVIC_SetPriority+0xd8>)
 8005682:	1dfb      	adds	r3, r7, #7
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	0019      	movs	r1, r3
 8005688:	230f      	movs	r3, #15
 800568a:	400b      	ands	r3, r1
 800568c:	3b08      	subs	r3, #8
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	3306      	adds	r3, #6
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	18d3      	adds	r3, r2, r3
 8005696:	3304      	adds	r3, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	1dfa      	adds	r2, r7, #7
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	0011      	movs	r1, r2
 80056a0:	2203      	movs	r2, #3
 80056a2:	400a      	ands	r2, r1
 80056a4:	00d2      	lsls	r2, r2, #3
 80056a6:	21ff      	movs	r1, #255	@ 0xff
 80056a8:	4091      	lsls	r1, r2
 80056aa:	000a      	movs	r2, r1
 80056ac:	43d2      	mvns	r2, r2
 80056ae:	401a      	ands	r2, r3
 80056b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	22ff      	movs	r2, #255	@ 0xff
 80056b8:	401a      	ands	r2, r3
 80056ba:	1dfb      	adds	r3, r7, #7
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	0018      	movs	r0, r3
 80056c0:	2303      	movs	r3, #3
 80056c2:	4003      	ands	r3, r0
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056c8:	4809      	ldr	r0, [pc, #36]	@ (80056f0 <__NVIC_SetPriority+0xd8>)
 80056ca:	1dfb      	adds	r3, r7, #7
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	001c      	movs	r4, r3
 80056d0:	230f      	movs	r3, #15
 80056d2:	4023      	ands	r3, r4
 80056d4:	3b08      	subs	r3, #8
 80056d6:	089b      	lsrs	r3, r3, #2
 80056d8:	430a      	orrs	r2, r1
 80056da:	3306      	adds	r3, #6
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	18c3      	adds	r3, r0, r3
 80056e0:	3304      	adds	r3, #4
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	46c0      	nop			@ (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b003      	add	sp, #12
 80056ea:	bd90      	pop	{r4, r7, pc}
 80056ec:	e000e100 	.word	0xe000e100
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1e5a      	subs	r2, r3, #1
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	045b      	lsls	r3, r3, #17
 8005704:	429a      	cmp	r2, r3
 8005706:	d301      	bcc.n	800570c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005708:	2301      	movs	r3, #1
 800570a:	e010      	b.n	800572e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800570c:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <SysTick_Config+0x44>)
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	3a01      	subs	r2, #1
 8005712:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005714:	2301      	movs	r3, #1
 8005716:	425b      	negs	r3, r3
 8005718:	2103      	movs	r1, #3
 800571a:	0018      	movs	r0, r3
 800571c:	f7ff ff7c 	bl	8005618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <SysTick_Config+0x44>)
 8005722:	2200      	movs	r2, #0
 8005724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005726:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <SysTick_Config+0x44>)
 8005728:	2207      	movs	r2, #7
 800572a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800572c:	2300      	movs	r3, #0
}
 800572e:	0018      	movs	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	b002      	add	sp, #8
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	e000e010 	.word	0xe000e010

0800573c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
 8005746:	210f      	movs	r1, #15
 8005748:	187b      	adds	r3, r7, r1
 800574a:	1c02      	adds	r2, r0, #0
 800574c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	187b      	adds	r3, r7, r1
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	b25b      	sxtb	r3, r3
 8005756:	0011      	movs	r1, r2
 8005758:	0018      	movs	r0, r3
 800575a:	f7ff ff5d 	bl	8005618 <__NVIC_SetPriority>
}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	46bd      	mov	sp, r7
 8005762:	b004      	add	sp, #16
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	0002      	movs	r2, r0
 800576e:	1dfb      	adds	r3, r7, #7
 8005770:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005772:	1dfb      	adds	r3, r7, #7
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b25b      	sxtb	r3, r3
 8005778:	0018      	movs	r0, r3
 800577a:	f7ff ff11 	bl	80055a0 <__NVIC_EnableIRQ>
}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b002      	add	sp, #8
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	0002      	movs	r2, r0
 800578e:	1dfb      	adds	r3, r7, #7
 8005790:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b25b      	sxtb	r3, r3
 8005798:	0018      	movs	r0, r3
 800579a:	f7ff ff1b 	bl	80055d4 <__NVIC_DisableIRQ>
}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff ff9f 	bl	80056f4 <SysTick_Config>
 80057b6:	0003      	movs	r3, r0
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b002      	add	sp, #8
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	230f      	movs	r3, #15
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2225      	movs	r2, #37	@ 0x25
 80057d4:	5c9b      	ldrb	r3, [r3, r2]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d008      	beq.n	80057ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2204      	movs	r2, #4
 80057e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2224      	movs	r2, #36	@ 0x24
 80057e6:	2100      	movs	r1, #0
 80057e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e024      	b.n	8005838 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	210e      	movs	r1, #14
 80057fa:	438a      	bics	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2101      	movs	r1, #1
 800580a:	438a      	bics	r2, r1
 800580c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	221c      	movs	r2, #28
 8005814:	401a      	ands	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	2101      	movs	r1, #1
 800581c:	4091      	lsls	r1, r2
 800581e:	000a      	movs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2225      	movs	r2, #37	@ 0x25
 8005826:	2101      	movs	r1, #1
 8005828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2224      	movs	r2, #36	@ 0x24
 800582e:	2100      	movs	r1, #0
 8005830:	5499      	strb	r1, [r3, r2]

    return status;
 8005832:	230f      	movs	r3, #15
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005838:	0018      	movs	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	b004      	add	sp, #16
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005848:	210f      	movs	r1, #15
 800584a:	187b      	adds	r3, r7, r1
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2225      	movs	r2, #37	@ 0x25
 8005854:	5c9b      	ldrb	r3, [r3, r2]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d006      	beq.n	800586a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2204      	movs	r2, #4
 8005860:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005862:	187b      	adds	r3, r7, r1
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e02a      	b.n	80058c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	210e      	movs	r1, #14
 8005876:	438a      	bics	r2, r1
 8005878:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2101      	movs	r1, #1
 8005886:	438a      	bics	r2, r1
 8005888:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	221c      	movs	r2, #28
 8005890:	401a      	ands	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	2101      	movs	r1, #1
 8005898:	4091      	lsls	r1, r2
 800589a:	000a      	movs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2225      	movs	r2, #37	@ 0x25
 80058a2:	2101      	movs	r1, #1
 80058a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2224      	movs	r2, #36	@ 0x24
 80058aa:	2100      	movs	r1, #0
 80058ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	0010      	movs	r0, r2
 80058be:	4798      	blx	r3
    }
  }
  return status;
 80058c0:	230f      	movs	r3, #15
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	781b      	ldrb	r3, [r3, #0]
}
 80058c6:	0018      	movs	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b004      	add	sp, #16
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80058e6:	e14f      	b.n	8005b88 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2101      	movs	r1, #1
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4091      	lsls	r1, r2
 80058f2:	000a      	movs	r2, r1
 80058f4:	4013      	ands	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d100      	bne.n	8005900 <HAL_GPIO_Init+0x30>
 80058fe:	e140      	b.n	8005b82 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2203      	movs	r2, #3
 8005906:	4013      	ands	r3, r2
 8005908:	2b01      	cmp	r3, #1
 800590a:	d005      	beq.n	8005918 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2203      	movs	r2, #3
 8005912:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005914:	2b02      	cmp	r3, #2
 8005916:	d130      	bne.n	800597a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	2203      	movs	r2, #3
 8005924:	409a      	lsls	r2, r3
 8005926:	0013      	movs	r3, r2
 8005928:	43da      	mvns	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	0013      	movs	r3, r2
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800594e:	2201      	movs	r2, #1
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	409a      	lsls	r2, r3
 8005954:	0013      	movs	r3, r2
 8005956:	43da      	mvns	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4013      	ands	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	2201      	movs	r2, #1
 8005966:	401a      	ands	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	409a      	lsls	r2, r3
 800596c:	0013      	movs	r3, r2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2203      	movs	r2, #3
 8005980:	4013      	ands	r3, r2
 8005982:	2b03      	cmp	r3, #3
 8005984:	d017      	beq.n	80059b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	2203      	movs	r2, #3
 8005992:	409a      	lsls	r2, r3
 8005994:	0013      	movs	r3, r2
 8005996:	43da      	mvns	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4013      	ands	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	409a      	lsls	r2, r3
 80059a8:	0013      	movs	r3, r2
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2203      	movs	r2, #3
 80059bc:	4013      	ands	r3, r2
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d123      	bne.n	8005a0a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	08da      	lsrs	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3208      	adds	r2, #8
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	58d3      	ldr	r3, [r2, r3]
 80059ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2207      	movs	r2, #7
 80059d4:	4013      	ands	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	220f      	movs	r2, #15
 80059da:	409a      	lsls	r2, r3
 80059dc:	0013      	movs	r3, r2
 80059de:	43da      	mvns	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4013      	ands	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2107      	movs	r1, #7
 80059ee:	400b      	ands	r3, r1
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	409a      	lsls	r2, r3
 80059f4:	0013      	movs	r3, r2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	08da      	lsrs	r2, r3, #3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3208      	adds	r2, #8
 8005a04:	0092      	lsls	r2, r2, #2
 8005a06:	6939      	ldr	r1, [r7, #16]
 8005a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	2203      	movs	r2, #3
 8005a16:	409a      	lsls	r2, r3
 8005a18:	0013      	movs	r3, r2
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2203      	movs	r2, #3
 8005a28:	401a      	ands	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	0013      	movs	r3, r2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	23c0      	movs	r3, #192	@ 0xc0
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	4013      	ands	r3, r2
 8005a48:	d100      	bne.n	8005a4c <HAL_GPIO_Init+0x17c>
 8005a4a:	e09a      	b.n	8005b82 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a4c:	4b54      	ldr	r3, [pc, #336]	@ (8005ba0 <HAL_GPIO_Init+0x2d0>)
 8005a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a50:	4b53      	ldr	r3, [pc, #332]	@ (8005ba0 <HAL_GPIO_Init+0x2d0>)
 8005a52:	2101      	movs	r1, #1
 8005a54:	430a      	orrs	r2, r1
 8005a56:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a58:	4a52      	ldr	r2, [pc, #328]	@ (8005ba4 <HAL_GPIO_Init+0x2d4>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	3302      	adds	r3, #2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	589b      	ldr	r3, [r3, r2]
 8005a64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2203      	movs	r2, #3
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	220f      	movs	r2, #15
 8005a70:	409a      	lsls	r2, r3
 8005a72:	0013      	movs	r3, r2
 8005a74:	43da      	mvns	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	23a0      	movs	r3, #160	@ 0xa0
 8005a80:	05db      	lsls	r3, r3, #23
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d019      	beq.n	8005aba <HAL_GPIO_Init+0x1ea>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a47      	ldr	r2, [pc, #284]	@ (8005ba8 <HAL_GPIO_Init+0x2d8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_GPIO_Init+0x1e6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a46      	ldr	r2, [pc, #280]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00d      	beq.n	8005ab2 <HAL_GPIO_Init+0x1e2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a45      	ldr	r2, [pc, #276]	@ (8005bb0 <HAL_GPIO_Init+0x2e0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <HAL_GPIO_Init+0x1de>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a44      	ldr	r2, [pc, #272]	@ (8005bb4 <HAL_GPIO_Init+0x2e4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_GPIO_Init+0x1da>
 8005aa6:	2305      	movs	r3, #5
 8005aa8:	e008      	b.n	8005abc <HAL_GPIO_Init+0x1ec>
 8005aaa:	2306      	movs	r3, #6
 8005aac:	e006      	b.n	8005abc <HAL_GPIO_Init+0x1ec>
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e004      	b.n	8005abc <HAL_GPIO_Init+0x1ec>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e002      	b.n	8005abc <HAL_GPIO_Init+0x1ec>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_GPIO_Init+0x1ec>
 8005aba:	2300      	movs	r3, #0
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	2103      	movs	r1, #3
 8005ac0:	400a      	ands	r2, r1
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	4093      	lsls	r3, r2
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005acc:	4935      	ldr	r1, [pc, #212]	@ (8005ba4 <HAL_GPIO_Init+0x2d4>)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	089b      	lsrs	r3, r3, #2
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ada:	4b37      	ldr	r3, [pc, #220]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	43da      	mvns	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	2380      	movs	r3, #128	@ 0x80
 8005af0:	035b      	lsls	r3, r3, #13
 8005af2:	4013      	ands	r3, r2
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005afe:	4b2e      	ldr	r3, [pc, #184]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005b04:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	43da      	mvns	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4013      	ands	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	2380      	movs	r3, #128	@ 0x80
 8005b1a:	039b      	lsls	r3, r3, #14
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b28:	4b23      	ldr	r3, [pc, #140]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005b2e:	4b22      	ldr	r3, [pc, #136]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	43da      	mvns	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	2380      	movs	r3, #128	@ 0x80
 8005b44:	029b      	lsls	r3, r3, #10
 8005b46:	4013      	ands	r3, r2
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005b52:	4b19      	ldr	r3, [pc, #100]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b58:	4b17      	ldr	r3, [pc, #92]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	43da      	mvns	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4013      	ands	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	2380      	movs	r3, #128	@ 0x80
 8005b6e:	025b      	lsls	r3, r3, #9
 8005b70:	4013      	ands	r3, r2
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	3301      	adds	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	40da      	lsrs	r2, r3
 8005b90:	1e13      	subs	r3, r2, #0
 8005b92:	d000      	beq.n	8005b96 <HAL_GPIO_Init+0x2c6>
 8005b94:	e6a8      	b.n	80058e8 <HAL_GPIO_Init+0x18>
  }
}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	46c0      	nop			@ (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b006      	add	sp, #24
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	50000400 	.word	0x50000400
 8005bac:	50000800 	.word	0x50000800
 8005bb0:	50000c00 	.word	0x50000c00
 8005bb4:	50001c00 	.word	0x50001c00
 8005bb8:	40010400 	.word	0x40010400

08005bbc <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8005bd2:	e0b6      	b.n	8005d42 <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d100      	bne.n	8005be8 <HAL_GPIO_DeInit+0x2c>
 8005be6:	e0a9      	b.n	8005d3c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8005be8:	4a5b      	ldr	r2, [pc, #364]	@ (8005d58 <HAL_GPIO_DeInit+0x19c>)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	089b      	lsrs	r3, r3, #2
 8005bee:	3302      	adds	r3, #2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	589b      	ldr	r3, [r3, r2]
 8005bf4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	220f      	movs	r2, #15
 8005c00:	409a      	lsls	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	23a0      	movs	r3, #160	@ 0xa0
 8005c0c:	05db      	lsls	r3, r3, #23
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d019      	beq.n	8005c46 <HAL_GPIO_DeInit+0x8a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a51      	ldr	r2, [pc, #324]	@ (8005d5c <HAL_GPIO_DeInit+0x1a0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_GPIO_DeInit+0x86>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a50      	ldr	r2, [pc, #320]	@ (8005d60 <HAL_GPIO_DeInit+0x1a4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00d      	beq.n	8005c3e <HAL_GPIO_DeInit+0x82>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a4f      	ldr	r2, [pc, #316]	@ (8005d64 <HAL_GPIO_DeInit+0x1a8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <HAL_GPIO_DeInit+0x7e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a4e      	ldr	r2, [pc, #312]	@ (8005d68 <HAL_GPIO_DeInit+0x1ac>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <HAL_GPIO_DeInit+0x7a>
 8005c32:	2305      	movs	r3, #5
 8005c34:	e008      	b.n	8005c48 <HAL_GPIO_DeInit+0x8c>
 8005c36:	2306      	movs	r3, #6
 8005c38:	e006      	b.n	8005c48 <HAL_GPIO_DeInit+0x8c>
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e004      	b.n	8005c48 <HAL_GPIO_DeInit+0x8c>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e002      	b.n	8005c48 <HAL_GPIO_DeInit+0x8c>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_GPIO_DeInit+0x8c>
 8005c46:	2300      	movs	r3, #0
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	2103      	movs	r1, #3
 8005c4c:	400a      	ands	r2, r1
 8005c4e:	0092      	lsls	r2, r2, #2
 8005c50:	4093      	lsls	r3, r2
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d132      	bne.n	8005cbe <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c58:	4b44      	ldr	r3, [pc, #272]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	43d9      	mvns	r1, r3
 8005c60:	4b42      	ldr	r3, [pc, #264]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c62:	400a      	ands	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005c66:	4b41      	ldr	r3, [pc, #260]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	43d9      	mvns	r1, r3
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c74:	4b3d      	ldr	r3, [pc, #244]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	43d9      	mvns	r1, r3
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c7e:	400a      	ands	r2, r1
 8005c80:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c82:	4b3a      	ldr	r3, [pc, #232]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	43d9      	mvns	r1, r3
 8005c8a:	4b38      	ldr	r3, [pc, #224]	@ (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2203      	movs	r2, #3
 8005c94:	4013      	ands	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	0013      	movs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d58 <HAL_GPIO_DeInit+0x19c>)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	589a      	ldr	r2, [r3, r2]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	43d9      	mvns	r1, r3
 8005cb0:	4829      	ldr	r0, [pc, #164]	@ (8005d58 <HAL_GPIO_DeInit+0x19c>)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	089b      	lsrs	r3, r3, #2
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	3302      	adds	r3, #2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	4099      	lsls	r1, r3
 8005cca:	000b      	movs	r3, r1
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	08da      	lsrs	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3208      	adds	r2, #8
 8005cda:	0092      	lsls	r2, r2, #2
 8005cdc:	58d3      	ldr	r3, [r2, r3]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	2107      	movs	r1, #7
 8005ce2:	400a      	ands	r2, r1
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	210f      	movs	r1, #15
 8005ce8:	4091      	lsls	r1, r2
 8005cea:	000a      	movs	r2, r1
 8005cec:	43d1      	mvns	r1, r2
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	08d2      	lsrs	r2, r2, #3
 8005cf2:	4019      	ands	r1, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3208      	adds	r2, #8
 8005cf8:	0092      	lsls	r2, r2, #2
 8005cfa:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	0052      	lsls	r2, r2, #1
 8005d04:	2103      	movs	r1, #3
 8005d06:	4091      	lsls	r1, r2
 8005d08:	000a      	movs	r2, r1
 8005d0a:	43d2      	mvns	r2, r2
 8005d0c:	401a      	ands	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2101      	movs	r1, #1
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4091      	lsls	r1, r2
 8005d1c:	000a      	movs	r2, r1
 8005d1e:	43d2      	mvns	r2, r2
 8005d20:	401a      	ands	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	0052      	lsls	r2, r2, #1
 8005d2e:	2103      	movs	r1, #3
 8005d30:	4091      	lsls	r1, r2
 8005d32:	000a      	movs	r2, r1
 8005d34:	43d2      	mvns	r2, r2
 8005d36:	401a      	ands	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	609a      	str	r2, [r3, #8]
    }
    position++;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	40da      	lsrs	r2, r3
 8005d48:	1e13      	subs	r3, r2, #0
 8005d4a:	d000      	beq.n	8005d4e <HAL_GPIO_DeInit+0x192>
 8005d4c:	e742      	b.n	8005bd4 <HAL_GPIO_DeInit+0x18>
  }
}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	46c0      	nop			@ (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b006      	add	sp, #24
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	50000400 	.word	0x50000400
 8005d60:	50000800 	.word	0x50000800
 8005d64:	50000c00 	.word	0x50000c00
 8005d68:	50001c00 	.word	0x50001c00
 8005d6c:	40010400 	.word	0x40010400

08005d70 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	000a      	movs	r2, r1
 8005d7a:	1cbb      	adds	r3, r7, #2
 8005d7c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	1cba      	adds	r2, r7, #2
 8005d84:	8812      	ldrh	r2, [r2, #0]
 8005d86:	4013      	ands	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005d8a:	230f      	movs	r3, #15
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2201      	movs	r2, #1
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e003      	b.n	8005d9c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d94:	230f      	movs	r3, #15
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005d9c:	230f      	movs	r3, #15
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	781b      	ldrb	r3, [r3, #0]
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	0008      	movs	r0, r1
 8005db4:	0011      	movs	r1, r2
 8005db6:	1cbb      	adds	r3, r7, #2
 8005db8:	1c02      	adds	r2, r0, #0
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	1c7b      	adds	r3, r7, #1
 8005dbe:	1c0a      	adds	r2, r1, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dc2:	1c7b      	adds	r3, r7, #1
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dca:	1cbb      	adds	r3, r7, #2
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005dd2:	e003      	b.n	8005ddc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005dd4:	1cbb      	adds	r3, r7, #2
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ddc:	46c0      	nop			@ (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b002      	add	sp, #8
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	0002      	movs	r2, r0
 8005dec:	1dbb      	adds	r3, r7, #6
 8005dee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005df0:	4b09      	ldr	r3, [pc, #36]	@ (8005e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	1dba      	adds	r2, r7, #6
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d008      	beq.n	8005e0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005dfe:	1dba      	adds	r2, r7, #6
 8005e00:	8812      	ldrh	r2, [r2, #0]
 8005e02:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e04:	1dbb      	adds	r3, r7, #6
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 f807 	bl	8005e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b002      	add	sp, #8
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	40010400 	.word	0x40010400

08005e1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	0002      	movs	r2, r0
 8005e24:	1dbb      	adds	r3, r7, #6
 8005e26:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e28:	46c0      	nop			@ (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e082      	b.n	8005f48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2241      	movs	r2, #65	@ 0x41
 8005e46:	5c9b      	ldrb	r3, [r3, r2]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d107      	bne.n	8005e5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2240      	movs	r2, #64	@ 0x40
 8005e52:	2100      	movs	r1, #0
 8005e54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7fe ff1f 	bl	8004c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2241      	movs	r2, #65	@ 0x41
 8005e62:	2124      	movs	r1, #36	@ 0x24
 8005e64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2101      	movs	r1, #1
 8005e72:	438a      	bics	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4934      	ldr	r1, [pc, #208]	@ (8005f50 <HAL_I2C_Init+0x120>)
 8005e80:	400a      	ands	r2, r1
 8005e82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4931      	ldr	r1, [pc, #196]	@ (8005f54 <HAL_I2C_Init+0x124>)
 8005e90:	400a      	ands	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d108      	bne.n	8005eae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2180      	movs	r1, #128	@ 0x80
 8005ea6:	0209      	lsls	r1, r1, #8
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]
 8005eac:	e007      	b.n	8005ebe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2184      	movs	r1, #132	@ 0x84
 8005eb8:	0209      	lsls	r1, r1, #8
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d104      	bne.n	8005ed0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2280      	movs	r2, #128	@ 0x80
 8005ecc:	0112      	lsls	r2, r2, #4
 8005ece:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	491f      	ldr	r1, [pc, #124]	@ (8005f58 <HAL_I2C_Init+0x128>)
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	491a      	ldr	r1, [pc, #104]	@ (8005f54 <HAL_I2C_Init+0x124>)
 8005eec:	400a      	ands	r2, r1
 8005eee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69d9      	ldr	r1, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2101      	movs	r1, #1
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2241      	movs	r2, #65	@ 0x41
 8005f34:	2120      	movs	r1, #32
 8005f36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2242      	movs	r2, #66	@ 0x42
 8005f42:	2100      	movs	r1, #0
 8005f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	0018      	movs	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b002      	add	sp, #8
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	f0ffffff 	.word	0xf0ffffff
 8005f54:	ffff7fff 	.word	0xffff7fff
 8005f58:	02008000 	.word	0x02008000

08005f5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b089      	sub	sp, #36	@ 0x24
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	000c      	movs	r4, r1
 8005f66:	0010      	movs	r0, r2
 8005f68:	0019      	movs	r1, r3
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	1c22      	adds	r2, r4, #0
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	2308      	movs	r3, #8
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	1c02      	adds	r2, r0, #0
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	1dbb      	adds	r3, r7, #6
 8005f7c:	1c0a      	adds	r2, r1, #0
 8005f7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2241      	movs	r2, #65	@ 0x41
 8005f84:	5c9b      	ldrb	r3, [r3, r2]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d000      	beq.n	8005f8e <HAL_I2C_Mem_Write+0x32>
 8005f8c:	e10c      	b.n	80061a8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <HAL_I2C_Mem_Write+0x42>
 8005f94:	232c      	movs	r3, #44	@ 0x2c
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d105      	bne.n	8005faa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2280      	movs	r2, #128	@ 0x80
 8005fa2:	0092      	lsls	r2, r2, #2
 8005fa4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e0ff      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2240      	movs	r2, #64	@ 0x40
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_I2C_Mem_Write+0x5c>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0f8      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2240      	movs	r2, #64	@ 0x40
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fc0:	f7ff f908 	bl	80051d4 <HAL_GetTick>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	0219      	lsls	r1, r3, #8
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2319      	movs	r3, #25
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f000 fb0b 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 8005fda:	1e03      	subs	r3, r0, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0e3      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2241      	movs	r2, #65	@ 0x41
 8005fe6:	2121      	movs	r1, #33	@ 0x21
 8005fe8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2242      	movs	r2, #66	@ 0x42
 8005fee:	2140      	movs	r1, #64	@ 0x40
 8005ff0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	222c      	movs	r2, #44	@ 0x2c
 8006002:	18ba      	adds	r2, r7, r2
 8006004:	8812      	ldrh	r2, [r2, #0]
 8006006:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800600e:	1dbb      	adds	r3, r7, #6
 8006010:	881c      	ldrh	r4, [r3, #0]
 8006012:	2308      	movs	r3, #8
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	230a      	movs	r3, #10
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	8819      	ldrh	r1, [r3, #0]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	0023      	movs	r3, r4
 800602a:	f000 f9f9 	bl	8006420 <I2C_RequestMemoryWrite>
 800602e:	1e03      	subs	r3, r0, #0
 8006030:	d005      	beq.n	800603e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2240      	movs	r2, #64	@ 0x40
 8006036:	2100      	movs	r1, #0
 8006038:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0b5      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006042:	b29b      	uxth	r3, r3
 8006044:	2bff      	cmp	r3, #255	@ 0xff
 8006046:	d911      	bls.n	800606c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	22ff      	movs	r2, #255	@ 0xff
 800604c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006052:	b2da      	uxtb	r2, r3
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	045c      	lsls	r4, r3, #17
 8006058:	230a      	movs	r3, #10
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	8819      	ldrh	r1, [r3, #0]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	2300      	movs	r3, #0
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	0023      	movs	r3, r4
 8006066:	f000 fc93 	bl	8006990 <I2C_TransferConfig>
 800606a:	e012      	b.n	8006092 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607a:	b2da      	uxtb	r2, r3
 800607c:	2380      	movs	r3, #128	@ 0x80
 800607e:	049c      	lsls	r4, r3, #18
 8006080:	230a      	movs	r3, #10
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	8819      	ldrh	r1, [r3, #0]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	2300      	movs	r3, #0
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	0023      	movs	r3, r4
 800608e:	f000 fc7f 	bl	8006990 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 faf7 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 800609e:	1e03      	subs	r3, r0, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e081      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d03a      	beq.n	8006156 <HAL_I2C_Mem_Write+0x1fa>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d136      	bne.n	8006156 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	0013      	movs	r3, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	2180      	movs	r1, #128	@ 0x80
 80060f6:	f000 fa7b 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	1e03      	subs	r3, r0, #0
 80060fc:	d001      	beq.n	8006102 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e053      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	2bff      	cmp	r3, #255	@ 0xff
 800610a:	d911      	bls.n	8006130 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	22ff      	movs	r2, #255	@ 0xff
 8006110:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006116:	b2da      	uxtb	r2, r3
 8006118:	2380      	movs	r3, #128	@ 0x80
 800611a:	045c      	lsls	r4, r3, #17
 800611c:	230a      	movs	r3, #10
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	8819      	ldrh	r1, [r3, #0]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	2300      	movs	r3, #0
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	0023      	movs	r3, r4
 800612a:	f000 fc31 	bl	8006990 <I2C_TransferConfig>
 800612e:	e012      	b.n	8006156 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613e:	b2da      	uxtb	r2, r3
 8006140:	2380      	movs	r3, #128	@ 0x80
 8006142:	049c      	lsls	r4, r3, #18
 8006144:	230a      	movs	r3, #10
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	8819      	ldrh	r1, [r3, #0]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	2300      	movs	r3, #0
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	0023      	movs	r3, r4
 8006152:	f000 fc1d 	bl	8006990 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d198      	bne.n	8006092 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	0018      	movs	r0, r3
 8006168:	f000 fad6 	bl	8006718 <I2C_WaitOnSTOPFlagUntilTimeout>
 800616c:	1e03      	subs	r3, r0, #0
 800616e:	d001      	beq.n	8006174 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e01a      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2220      	movs	r2, #32
 800617a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	490b      	ldr	r1, [pc, #44]	@ (80061b4 <HAL_I2C_Mem_Write+0x258>)
 8006188:	400a      	ands	r2, r1
 800618a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2241      	movs	r2, #65	@ 0x41
 8006190:	2120      	movs	r1, #32
 8006192:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2242      	movs	r2, #66	@ 0x42
 8006198:	2100      	movs	r1, #0
 800619a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2240      	movs	r2, #64	@ 0x40
 80061a0:	2100      	movs	r1, #0
 80061a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	e000      	b.n	80061aa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80061a8:	2302      	movs	r3, #2
  }
}
 80061aa:	0018      	movs	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b007      	add	sp, #28
 80061b0:	bd90      	pop	{r4, r7, pc}
 80061b2:	46c0      	nop			@ (mov r8, r8)
 80061b4:	fe00e800 	.word	0xfe00e800

080061b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b089      	sub	sp, #36	@ 0x24
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	000c      	movs	r4, r1
 80061c2:	0010      	movs	r0, r2
 80061c4:	0019      	movs	r1, r3
 80061c6:	230a      	movs	r3, #10
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	1c22      	adds	r2, r4, #0
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	2308      	movs	r3, #8
 80061d0:	18fb      	adds	r3, r7, r3
 80061d2:	1c02      	adds	r2, r0, #0
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	1dbb      	adds	r3, r7, #6
 80061d8:	1c0a      	adds	r2, r1, #0
 80061da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2241      	movs	r2, #65	@ 0x41
 80061e0:	5c9b      	ldrb	r3, [r3, r2]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d000      	beq.n	80061ea <HAL_I2C_Mem_Read+0x32>
 80061e8:	e110      	b.n	800640c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <HAL_I2C_Mem_Read+0x42>
 80061f0:	232c      	movs	r3, #44	@ 0x2c
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2280      	movs	r2, #128	@ 0x80
 80061fe:	0092      	lsls	r2, r2, #2
 8006200:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e103      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2240      	movs	r2, #64	@ 0x40
 800620a:	5c9b      	ldrb	r3, [r3, r2]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_I2C_Mem_Read+0x5c>
 8006210:	2302      	movs	r3, #2
 8006212:	e0fc      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2240      	movs	r2, #64	@ 0x40
 8006218:	2101      	movs	r1, #1
 800621a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800621c:	f7fe ffda 	bl	80051d4 <HAL_GetTick>
 8006220:	0003      	movs	r3, r0
 8006222:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006224:	2380      	movs	r3, #128	@ 0x80
 8006226:	0219      	lsls	r1, r3, #8
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	2319      	movs	r3, #25
 8006230:	2201      	movs	r2, #1
 8006232:	f000 f9dd 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 8006236:	1e03      	subs	r3, r0, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0e7      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2241      	movs	r2, #65	@ 0x41
 8006242:	2122      	movs	r1, #34	@ 0x22
 8006244:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2242      	movs	r2, #66	@ 0x42
 800624a:	2140      	movs	r1, #64	@ 0x40
 800624c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006258:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	222c      	movs	r2, #44	@ 0x2c
 800625e:	18ba      	adds	r2, r7, r2
 8006260:	8812      	ldrh	r2, [r2, #0]
 8006262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800626a:	1dbb      	adds	r3, r7, #6
 800626c:	881c      	ldrh	r4, [r3, #0]
 800626e:	2308      	movs	r3, #8
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	230a      	movs	r3, #10
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	8819      	ldrh	r1, [r3, #0]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	0023      	movs	r3, r4
 8006286:	f000 f92f 	bl	80064e8 <I2C_RequestMemoryRead>
 800628a:	1e03      	subs	r3, r0, #0
 800628c:	d005      	beq.n	800629a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2240      	movs	r2, #64	@ 0x40
 8006292:	2100      	movs	r1, #0
 8006294:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0b9      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2bff      	cmp	r3, #255	@ 0xff
 80062a2:	d911      	bls.n	80062c8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	22ff      	movs	r2, #255	@ 0xff
 80062a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	2380      	movs	r3, #128	@ 0x80
 80062b2:	045c      	lsls	r4, r3, #17
 80062b4:	230a      	movs	r3, #10
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	8819      	ldrh	r1, [r3, #0]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	4b56      	ldr	r3, [pc, #344]	@ (8006418 <HAL_I2C_Mem_Read+0x260>)
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	0023      	movs	r3, r4
 80062c2:	f000 fb65 	bl	8006990 <I2C_TransferConfig>
 80062c6:	e012      	b.n	80062ee <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	2380      	movs	r3, #128	@ 0x80
 80062da:	049c      	lsls	r4, r3, #18
 80062dc:	230a      	movs	r3, #10
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	8819      	ldrh	r1, [r3, #0]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	4b4c      	ldr	r3, [pc, #304]	@ (8006418 <HAL_I2C_Mem_Read+0x260>)
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	0023      	movs	r3, r4
 80062ea:	f000 fb51 	bl	8006990 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	0013      	movs	r3, r2
 80062f8:	2200      	movs	r2, #0
 80062fa:	2104      	movs	r1, #4
 80062fc:	f000 f978 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 8006300:	1e03      	subs	r3, r0, #0
 8006302:	d001      	beq.n	8006308 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e082      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d03a      	beq.n	80063ba <HAL_I2C_Mem_Read+0x202>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006348:	2b00      	cmp	r3, #0
 800634a:	d136      	bne.n	80063ba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800634c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	0013      	movs	r3, r2
 8006356:	2200      	movs	r2, #0
 8006358:	2180      	movs	r1, #128	@ 0x80
 800635a:	f000 f949 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 800635e:	1e03      	subs	r3, r0, #0
 8006360:	d001      	beq.n	8006366 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e053      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	2bff      	cmp	r3, #255	@ 0xff
 800636e:	d911      	bls.n	8006394 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	22ff      	movs	r2, #255	@ 0xff
 8006374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637a:	b2da      	uxtb	r2, r3
 800637c:	2380      	movs	r3, #128	@ 0x80
 800637e:	045c      	lsls	r4, r3, #17
 8006380:	230a      	movs	r3, #10
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	8819      	ldrh	r1, [r3, #0]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	0023      	movs	r3, r4
 800638e:	f000 faff 	bl	8006990 <I2C_TransferConfig>
 8006392:	e012      	b.n	80063ba <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	2380      	movs	r3, #128	@ 0x80
 80063a6:	049c      	lsls	r4, r3, #18
 80063a8:	230a      	movs	r3, #10
 80063aa:	18fb      	adds	r3, r7, r3
 80063ac:	8819      	ldrh	r1, [r3, #0]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	2300      	movs	r3, #0
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	0023      	movs	r3, r4
 80063b6:	f000 faeb 	bl	8006990 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d194      	bne.n	80062ee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	0018      	movs	r0, r3
 80063cc:	f000 f9a4 	bl	8006718 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063d0:	1e03      	subs	r3, r0, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e01a      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2220      	movs	r2, #32
 80063de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	490c      	ldr	r1, [pc, #48]	@ (800641c <HAL_I2C_Mem_Read+0x264>)
 80063ec:	400a      	ands	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2241      	movs	r2, #65	@ 0x41
 80063f4:	2120      	movs	r1, #32
 80063f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2242      	movs	r2, #66	@ 0x42
 80063fc:	2100      	movs	r1, #0
 80063fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2240      	movs	r2, #64	@ 0x40
 8006404:	2100      	movs	r1, #0
 8006406:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e000      	b.n	800640e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	0018      	movs	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	b007      	add	sp, #28
 8006414:	bd90      	pop	{r4, r7, pc}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	80002400 	.word	0x80002400
 800641c:	fe00e800 	.word	0xfe00e800

08006420 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006420:	b5b0      	push	{r4, r5, r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	000c      	movs	r4, r1
 800642a:	0010      	movs	r0, r2
 800642c:	0019      	movs	r1, r3
 800642e:	250a      	movs	r5, #10
 8006430:	197b      	adds	r3, r7, r5
 8006432:	1c22      	adds	r2, r4, #0
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	2308      	movs	r3, #8
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	1c02      	adds	r2, r0, #0
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	1dbb      	adds	r3, r7, #6
 8006440:	1c0a      	adds	r2, r1, #0
 8006442:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006444:	1dbb      	adds	r3, r7, #6
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	2380      	movs	r3, #128	@ 0x80
 800644c:	045c      	lsls	r4, r3, #17
 800644e:	197b      	adds	r3, r7, r5
 8006450:	8819      	ldrh	r1, [r3, #0]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	4b23      	ldr	r3, [pc, #140]	@ (80064e4 <I2C_RequestMemoryWrite+0xc4>)
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	0023      	movs	r3, r4
 800645a:	f000 fa99 	bl	8006990 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006460:	6a39      	ldr	r1, [r7, #32]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	0018      	movs	r0, r3
 8006466:	f000 f911 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 800646a:	1e03      	subs	r3, r0, #0
 800646c:	d001      	beq.n	8006472 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e033      	b.n	80064da <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006472:	1dbb      	adds	r3, r7, #6
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d107      	bne.n	800648a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800647a:	2308      	movs	r3, #8
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	629a      	str	r2, [r3, #40]	@ 0x28
 8006488:	e019      	b.n	80064be <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800648a:	2308      	movs	r3, #8
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	0a1b      	lsrs	r3, r3, #8
 8006492:	b29b      	uxth	r3, r3
 8006494:	b2da      	uxtb	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800649e:	6a39      	ldr	r1, [r7, #32]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	0018      	movs	r0, r3
 80064a4:	f000 f8f2 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 80064a8:	1e03      	subs	r3, r0, #0
 80064aa:	d001      	beq.n	80064b0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e014      	b.n	80064da <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064b0:	2308      	movs	r3, #8
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	0013      	movs	r3, r2
 80064c8:	2200      	movs	r2, #0
 80064ca:	2180      	movs	r1, #128	@ 0x80
 80064cc:	f000 f890 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 80064d0:	1e03      	subs	r3, r0, #0
 80064d2:	d001      	beq.n	80064d8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	0018      	movs	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	b004      	add	sp, #16
 80064e0:	bdb0      	pop	{r4, r5, r7, pc}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	80002000 	.word	0x80002000

080064e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80064e8:	b5b0      	push	{r4, r5, r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	000c      	movs	r4, r1
 80064f2:	0010      	movs	r0, r2
 80064f4:	0019      	movs	r1, r3
 80064f6:	250a      	movs	r5, #10
 80064f8:	197b      	adds	r3, r7, r5
 80064fa:	1c22      	adds	r2, r4, #0
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	2308      	movs	r3, #8
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	1c02      	adds	r2, r0, #0
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	1dbb      	adds	r3, r7, #6
 8006508:	1c0a      	adds	r2, r1, #0
 800650a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800650c:	1dbb      	adds	r3, r7, #6
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	197b      	adds	r3, r7, r5
 8006514:	8819      	ldrh	r1, [r3, #0]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	4b23      	ldr	r3, [pc, #140]	@ (80065a8 <I2C_RequestMemoryRead+0xc0>)
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	f000 fa37 	bl	8006990 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006524:	6a39      	ldr	r1, [r7, #32]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	0018      	movs	r0, r3
 800652a:	f000 f8af 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 800652e:	1e03      	subs	r3, r0, #0
 8006530:	d001      	beq.n	8006536 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e033      	b.n	800659e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006536:	1dbb      	adds	r3, r7, #6
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d107      	bne.n	800654e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800653e:	2308      	movs	r3, #8
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	629a      	str	r2, [r3, #40]	@ 0x28
 800654c:	e019      	b.n	8006582 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800654e:	2308      	movs	r3, #8
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	b29b      	uxth	r3, r3
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006562:	6a39      	ldr	r1, [r7, #32]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	0018      	movs	r0, r3
 8006568:	f000 f890 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 800656c:	1e03      	subs	r3, r0, #0
 800656e:	d001      	beq.n	8006574 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e014      	b.n	800659e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006574:	2308      	movs	r3, #8
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006582:	6a3a      	ldr	r2, [r7, #32]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	0013      	movs	r3, r2
 800658c:	2200      	movs	r2, #0
 800658e:	2140      	movs	r1, #64	@ 0x40
 8006590:	f000 f82e 	bl	80065f0 <I2C_WaitOnFlagUntilTimeout>
 8006594:	1e03      	subs	r3, r0, #0
 8006596:	d001      	beq.n	800659c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	0018      	movs	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b004      	add	sp, #16
 80065a4:	bdb0      	pop	{r4, r5, r7, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	80002000 	.word	0x80002000

080065ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2202      	movs	r2, #2
 80065bc:	4013      	ands	r3, r2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d103      	bne.n	80065ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2200      	movs	r2, #0
 80065c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	2201      	movs	r2, #1
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d007      	beq.n	80065e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2101      	movs	r1, #1
 80065e4:	430a      	orrs	r2, r1
 80065e6:	619a      	str	r2, [r3, #24]
  }
}
 80065e8:	46c0      	nop			@ (mov r8, r8)
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b002      	add	sp, #8
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	1dfb      	adds	r3, r7, #7
 80065fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006600:	e030      	b.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	d02d      	beq.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006608:	f7fe fde4 	bl	80051d4 <HAL_GetTick>
 800660c:	0002      	movs	r2, r0
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d122      	bne.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	4013      	ands	r3, r2
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	425a      	negs	r2, r3
 800662e:	4153      	adcs	r3, r2
 8006630:	b2db      	uxtb	r3, r3
 8006632:	001a      	movs	r2, r3
 8006634:	1dfb      	adds	r3, r7, #7
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d113      	bne.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006640:	2220      	movs	r2, #32
 8006642:	431a      	orrs	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2241      	movs	r2, #65	@ 0x41
 800664c:	2120      	movs	r1, #32
 800664e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2242      	movs	r2, #66	@ 0x42
 8006654:	2100      	movs	r1, #0
 8006656:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2240      	movs	r2, #64	@ 0x40
 800665c:	2100      	movs	r1, #0
 800665e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e00f      	b.n	8006684 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4013      	ands	r3, r2
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	425a      	negs	r2, r3
 8006674:	4153      	adcs	r3, r2
 8006676:	b2db      	uxtb	r3, r3
 8006678:	001a      	movs	r2, r3
 800667a:	1dfb      	adds	r3, r7, #7
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d0bf      	beq.n	8006602 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	0018      	movs	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	b004      	add	sp, #16
 800668a:	bd80      	pop	{r7, pc}

0800668c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006698:	e032      	b.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 f87d 	bl	80067a0 <I2C_IsErrorOccurred>
 80066a6:	1e03      	subs	r3, r0, #0
 80066a8:	d001      	beq.n	80066ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e030      	b.n	8006710 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3301      	adds	r3, #1
 80066b2:	d025      	beq.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b4:	f7fe fd8e 	bl	80051d4 <HAL_GetTick>
 80066b8:	0002      	movs	r2, r0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d302      	bcc.n	80066ca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d11a      	bne.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2202      	movs	r2, #2
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d013      	beq.n	8006700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066dc:	2220      	movs	r2, #32
 80066de:	431a      	orrs	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2241      	movs	r2, #65	@ 0x41
 80066e8:	2120      	movs	r1, #32
 80066ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2242      	movs	r2, #66	@ 0x42
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2240      	movs	r2, #64	@ 0x40
 80066f8:	2100      	movs	r1, #0
 80066fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e007      	b.n	8006710 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2202      	movs	r2, #2
 8006708:	4013      	ands	r3, r2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d1c5      	bne.n	800669a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b004      	add	sp, #16
 8006716:	bd80      	pop	{r7, pc}

08006718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006724:	e02f      	b.n	8006786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	0018      	movs	r0, r3
 800672e:	f000 f837 	bl	80067a0 <I2C_IsErrorOccurred>
 8006732:	1e03      	subs	r3, r0, #0
 8006734:	d001      	beq.n	800673a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e02d      	b.n	8006796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673a:	f7fe fd4b 	bl	80051d4 <HAL_GetTick>
 800673e:	0002      	movs	r2, r0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	d302      	bcc.n	8006750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11a      	bne.n	8006786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2220      	movs	r2, #32
 8006758:	4013      	ands	r3, r2
 800675a:	2b20      	cmp	r3, #32
 800675c:	d013      	beq.n	8006786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006762:	2220      	movs	r2, #32
 8006764:	431a      	orrs	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2241      	movs	r2, #65	@ 0x41
 800676e:	2120      	movs	r1, #32
 8006770:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2242      	movs	r2, #66	@ 0x42
 8006776:	2100      	movs	r1, #0
 8006778:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2240      	movs	r2, #64	@ 0x40
 800677e:	2100      	movs	r1, #0
 8006780:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e007      	b.n	8006796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2220      	movs	r2, #32
 800678e:	4013      	ands	r3, r2
 8006790:	2b20      	cmp	r3, #32
 8006792:	d1c8      	bne.n	8006726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	0018      	movs	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	b004      	add	sp, #16
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	@ 0x28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ac:	2327      	movs	r3, #39	@ 0x27
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2210      	movs	r2, #16
 80067c8:	4013      	ands	r3, r2
 80067ca:	d100      	bne.n	80067ce <I2C_IsErrorOccurred+0x2e>
 80067cc:	e079      	b.n	80068c2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2210      	movs	r2, #16
 80067d4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067d6:	e057      	b.n	8006888 <I2C_IsErrorOccurred+0xe8>
 80067d8:	2227      	movs	r2, #39	@ 0x27
 80067da:	18bb      	adds	r3, r7, r2
 80067dc:	18ba      	adds	r2, r7, r2
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	3301      	adds	r3, #1
 80067e6:	d04f      	beq.n	8006888 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067e8:	f7fe fcf4 	bl	80051d4 <HAL_GetTick>
 80067ec:	0002      	movs	r2, r0
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d302      	bcc.n	80067fe <I2C_IsErrorOccurred+0x5e>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d144      	bne.n	8006888 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	2380      	movs	r3, #128	@ 0x80
 8006806:	01db      	lsls	r3, r3, #7
 8006808:	4013      	ands	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800680c:	2013      	movs	r0, #19
 800680e:	183b      	adds	r3, r7, r0
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	2142      	movs	r1, #66	@ 0x42
 8006814:	5c52      	ldrb	r2, [r2, r1]
 8006816:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	2380      	movs	r3, #128	@ 0x80
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	401a      	ands	r2, r3
 8006824:	2380      	movs	r3, #128	@ 0x80
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	429a      	cmp	r2, r3
 800682a:	d126      	bne.n	800687a <I2C_IsErrorOccurred+0xda>
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	2380      	movs	r3, #128	@ 0x80
 8006830:	01db      	lsls	r3, r3, #7
 8006832:	429a      	cmp	r2, r3
 8006834:	d021      	beq.n	800687a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006836:	183b      	adds	r3, r7, r0
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b20      	cmp	r3, #32
 800683c:	d01d      	beq.n	800687a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2180      	movs	r1, #128	@ 0x80
 800684a:	01c9      	lsls	r1, r1, #7
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006850:	f7fe fcc0 	bl	80051d4 <HAL_GetTick>
 8006854:	0003      	movs	r3, r0
 8006856:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006858:	e00f      	b.n	800687a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800685a:	f7fe fcbb 	bl	80051d4 <HAL_GetTick>
 800685e:	0002      	movs	r2, r0
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b19      	cmp	r3, #25
 8006866:	d908      	bls.n	800687a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2220      	movs	r2, #32
 800686c:	4313      	orrs	r3, r2
 800686e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006870:	2327      	movs	r3, #39	@ 0x27
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]

              break;
 8006878:	e006      	b.n	8006888 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2220      	movs	r2, #32
 8006882:	4013      	ands	r3, r2
 8006884:	2b20      	cmp	r3, #32
 8006886:	d1e8      	bne.n	800685a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2220      	movs	r2, #32
 8006890:	4013      	ands	r3, r2
 8006892:	2b20      	cmp	r3, #32
 8006894:	d004      	beq.n	80068a0 <I2C_IsErrorOccurred+0x100>
 8006896:	2327      	movs	r3, #39	@ 0x27
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d09b      	beq.n	80067d8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80068a0:	2327      	movs	r3, #39	@ 0x27
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2220      	movs	r2, #32
 80068b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	2204      	movs	r2, #4
 80068b6:	4313      	orrs	r3, r2
 80068b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80068ba:	2327      	movs	r3, #39	@ 0x27
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2201      	movs	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	2380      	movs	r3, #128	@ 0x80
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	4013      	ands	r3, r2
 80068d2:	d00c      	beq.n	80068ee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	2201      	movs	r2, #1
 80068d8:	4313      	orrs	r3, r2
 80068da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2280      	movs	r2, #128	@ 0x80
 80068e2:	0052      	lsls	r2, r2, #1
 80068e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068e6:	2327      	movs	r3, #39	@ 0x27
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	2380      	movs	r3, #128	@ 0x80
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	4013      	ands	r3, r2
 80068f6:	d00c      	beq.n	8006912 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2208      	movs	r2, #8
 80068fc:	4313      	orrs	r3, r2
 80068fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2280      	movs	r2, #128	@ 0x80
 8006906:	00d2      	lsls	r2, r2, #3
 8006908:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800690a:	2327      	movs	r3, #39	@ 0x27
 800690c:	18fb      	adds	r3, r7, r3
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	2380      	movs	r3, #128	@ 0x80
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4013      	ands	r3, r2
 800691a:	d00c      	beq.n	8006936 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	2202      	movs	r2, #2
 8006920:	4313      	orrs	r3, r2
 8006922:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2280      	movs	r2, #128	@ 0x80
 800692a:	0092      	lsls	r2, r2, #2
 800692c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800692e:	2327      	movs	r3, #39	@ 0x27
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006936:	2327      	movs	r3, #39	@ 0x27
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01d      	beq.n	800697c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	0018      	movs	r0, r3
 8006944:	f7ff fe32 	bl	80065ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	490e      	ldr	r1, [pc, #56]	@ (800698c <I2C_IsErrorOccurred+0x1ec>)
 8006954:	400a      	ands	r2, r1
 8006956:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	431a      	orrs	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2241      	movs	r2, #65	@ 0x41
 8006968:	2120      	movs	r1, #32
 800696a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2242      	movs	r2, #66	@ 0x42
 8006970:	2100      	movs	r1, #0
 8006972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2240      	movs	r2, #64	@ 0x40
 8006978:	2100      	movs	r1, #0
 800697a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800697c:	2327      	movs	r3, #39	@ 0x27
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	781b      	ldrb	r3, [r3, #0]
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b00a      	add	sp, #40	@ 0x28
 8006988:	bd80      	pop	{r7, pc}
 800698a:	46c0      	nop			@ (mov r8, r8)
 800698c:	fe00e800 	.word	0xfe00e800

08006990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	0008      	movs	r0, r1
 800699a:	0011      	movs	r1, r2
 800699c:	607b      	str	r3, [r7, #4]
 800699e:	240a      	movs	r4, #10
 80069a0:	193b      	adds	r3, r7, r4
 80069a2:	1c02      	adds	r2, r0, #0
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	2009      	movs	r0, #9
 80069a8:	183b      	adds	r3, r7, r0
 80069aa:	1c0a      	adds	r2, r1, #0
 80069ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069ae:	193b      	adds	r3, r7, r4
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	059b      	lsls	r3, r3, #22
 80069b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069b6:	183b      	adds	r3, r7, r0
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	0419      	lsls	r1, r3, #16
 80069bc:	23ff      	movs	r3, #255	@ 0xff
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	4313      	orrs	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069da:	0d51      	lsrs	r1, r2, #21
 80069dc:	2280      	movs	r2, #128	@ 0x80
 80069de:	00d2      	lsls	r2, r2, #3
 80069e0:	400a      	ands	r2, r1
 80069e2:	4907      	ldr	r1, [pc, #28]	@ (8006a00 <I2C_TransferConfig+0x70>)
 80069e4:	430a      	orrs	r2, r1
 80069e6:	43d2      	mvns	r2, r2
 80069e8:	401a      	ands	r2, r3
 80069ea:	0011      	movs	r1, r2
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b007      	add	sp, #28
 80069fc:	bd90      	pop	{r4, r7, pc}
 80069fe:	46c0      	nop			@ (mov r8, r8)
 8006a00:	03ff63ff 	.word	0x03ff63ff

08006a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2241      	movs	r2, #65	@ 0x41
 8006a12:	5c9b      	ldrb	r3, [r3, r2]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d138      	bne.n	8006a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2240      	movs	r2, #64	@ 0x40
 8006a1e:	5c9b      	ldrb	r3, [r3, r2]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e032      	b.n	8006a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2240      	movs	r2, #64	@ 0x40
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2241      	movs	r2, #65	@ 0x41
 8006a34:	2124      	movs	r1, #36	@ 0x24
 8006a36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2101      	movs	r1, #1
 8006a44:	438a      	bics	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4911      	ldr	r1, [pc, #68]	@ (8006a98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006a54:	400a      	ands	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6819      	ldr	r1, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2101      	movs	r1, #1
 8006a74:	430a      	orrs	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2241      	movs	r2, #65	@ 0x41
 8006a7c:	2120      	movs	r1, #32
 8006a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2240      	movs	r2, #64	@ 0x40
 8006a84:	2100      	movs	r1, #0
 8006a86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	0018      	movs	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b002      	add	sp, #8
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	ffffefff 	.word	0xffffefff

08006a9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2241      	movs	r2, #65	@ 0x41
 8006aaa:	5c9b      	ldrb	r3, [r3, r2]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d139      	bne.n	8006b26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2240      	movs	r2, #64	@ 0x40
 8006ab6:	5c9b      	ldrb	r3, [r3, r2]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e033      	b.n	8006b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2240      	movs	r2, #64	@ 0x40
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2241      	movs	r2, #65	@ 0x41
 8006acc:	2124      	movs	r1, #36	@ 0x24
 8006ace:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2101      	movs	r1, #1
 8006adc:	438a      	bics	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a11      	ldr	r2, [pc, #68]	@ (8006b30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2241      	movs	r2, #65	@ 0x41
 8006b16:	2120      	movs	r1, #32
 8006b18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2240      	movs	r2, #64	@ 0x40
 8006b1e:	2100      	movs	r1, #0
 8006b20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
  }
}
 8006b28:	0018      	movs	r0, r3
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b004      	add	sp, #16
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	fffff0ff 	.word	0xfffff0ff

08006b34 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e03d      	b.n	8006bc2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a20      	ldr	r2, [pc, #128]	@ (8006bcc <HAL_IWDG_Init+0x98>)
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd0 <HAL_IWDG_Init+0x9c>)
 8006b54:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6852      	ldr	r2, [r2, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6892      	ldr	r2, [r2, #8]
 8006b68:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006b6a:	f7fe fb33 	bl	80051d4 <HAL_GetTick>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b72:	e00e      	b.n	8006b92 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006b74:	f7fe fb2e 	bl	80051d4 <HAL_GetTick>
 8006b78:	0002      	movs	r2, r0
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b80:	d907      	bls.n	8006b92 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2207      	movs	r2, #7
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d001      	beq.n	8006b92 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e017      	b.n	8006bc2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2207      	movs	r2, #7
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d1ea      	bne.n	8006b74 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d005      	beq.n	8006bb8 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	68d2      	ldr	r2, [r2, #12]
 8006bb4:	611a      	str	r2, [r3, #16]
 8006bb6:	e003      	b.n	8006bc0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a05      	ldr	r2, [pc, #20]	@ (8006bd4 <HAL_IWDG_Init+0xa0>)
 8006bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b004      	add	sp, #16
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	46c0      	nop			@ (mov r8, r8)
 8006bcc:	0000cccc 	.word	0x0000cccc
 8006bd0:	00005555 	.word	0x00005555
 8006bd4:	0000aaaa 	.word	0x0000aaaa

08006bd8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a03      	ldr	r2, [pc, #12]	@ (8006bf4 <HAL_IWDG_Refresh+0x1c>)
 8006be6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	46c0      	nop			@ (mov r8, r8)
 8006bf4:	0000aaaa 	.word	0x0000aaaa

08006bf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bfc:	4b04      	ldr	r3, [pc, #16]	@ (8006c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4b03      	ldr	r3, [pc, #12]	@ (8006c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006c02:	2180      	movs	r1, #128	@ 0x80
 8006c04:	0049      	lsls	r1, r1, #1
 8006c06:	430a      	orrs	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
}
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40007000 	.word	0x40007000

08006c14 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8006c18:	4b04      	ldr	r3, [pc, #16]	@ (8006c2c <HAL_PWR_DisableBkUpAccess+0x18>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4b03      	ldr	r3, [pc, #12]	@ (8006c2c <HAL_PWR_DisableBkUpAccess+0x18>)
 8006c1e:	4904      	ldr	r1, [pc, #16]	@ (8006c30 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8006c20:	400a      	ands	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]
}
 8006c24:	46c0      	nop			@ (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	40007000 	.word	0x40007000
 8006c30:	fffffeff 	.word	0xfffffeff

08006c34 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	000a      	movs	r2, r1
 8006c3e:	1cfb      	adds	r3, r7, #3
 8006c40:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8006c46:	4b25      	ldr	r3, [pc, #148]	@ (8006cdc <HAL_PWR_EnterSTOPMode+0xa8>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	2380      	movs	r3, #128	@ 0x80
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4013      	ands	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8006c52:	4b23      	ldr	r3, [pc, #140]	@ (8006ce0 <HAL_PWR_EnterSTOPMode+0xac>)
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	2201      	movs	r2, #1
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_PWR_EnterSTOPMode+0x40>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8006c68:	4b1c      	ldr	r3, [pc, #112]	@ (8006cdc <HAL_PWR_EnterSTOPMode+0xa8>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cdc <HAL_PWR_EnterSTOPMode+0xa8>)
 8006c6e:	491d      	ldr	r1, [pc, #116]	@ (8006ce4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8006c70:	400a      	ands	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8006c74:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <HAL_PWR_EnterSTOPMode+0xa8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2203      	movs	r2, #3
 8006c7e:	4393      	bics	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8006c8a:	4b14      	ldr	r3, [pc, #80]	@ (8006cdc <HAL_PWR_EnterSTOPMode+0xa8>)
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8006c90:	4b15      	ldr	r3, [pc, #84]	@ (8006ce8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	4b14      	ldr	r3, [pc, #80]	@ (8006ce8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8006c96:	2104      	movs	r1, #4
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006c9c:	1cfb      	adds	r3, r7, #3
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006ca4:	bf30      	wfi
 8006ca6:	e002      	b.n	8006cae <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006ca8:	bf40      	sev
    __WFE();
 8006caa:	bf20      	wfe
    __WFE();
 8006cac:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8006cae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8006cb0:	691a      	ldr	r2, [r3, #16]
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	438a      	bics	r2, r1
 8006cb8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_PWR_EnterSTOPMode+0xa0>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d006      	beq.n	8006cd4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8006cc6:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <HAL_PWR_EnterSTOPMode+0xa8>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <HAL_PWR_EnterSTOPMode+0xa8>)
 8006ccc:	2180      	movs	r1, #128	@ 0x80
 8006cce:	0089      	lsls	r1, r1, #2
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]
  }
}
 8006cd4:	46c0      	nop			@ (mov r8, r8)
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b006      	add	sp, #24
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40007000 	.word	0x40007000
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	fffffdff 	.word	0xfffffdff
 8006ce8:	e000ed00 	.word	0xe000ed00

08006cec <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8006cf0:	4b04      	ldr	r3, [pc, #16]	@ (8006d04 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b03      	ldr	r3, [pc, #12]	@ (8006d04 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8006cf6:	2180      	movs	r1, #128	@ 0x80
 8006cf8:	00c9      	lsls	r1, r1, #3
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]
}
 8006cfe:	46c0      	nop			@ (mov r8, r8)
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40007000 	.word	0x40007000

08006d08 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8006d0c:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4b03      	ldr	r3, [pc, #12]	@ (8006d20 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8006d12:	2180      	movs	r1, #128	@ 0x80
 8006d14:	0089      	lsls	r1, r1, #2
 8006d16:	430a      	orrs	r2, r1
 8006d18:	601a      	str	r2, [r3, #0]
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40007000 	.word	0x40007000

08006d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d24:	b5b0      	push	{r4, r5, r7, lr}
 8006d26:	b08a      	sub	sp, #40	@ 0x28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f000 fb6c 	bl	8007410 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d38:	4bc8      	ldr	r3, [pc, #800]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	220c      	movs	r2, #12
 8006d3e:	4013      	ands	r3, r2
 8006d40:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d42:	4bc6      	ldr	r3, [pc, #792]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	2380      	movs	r3, #128	@ 0x80
 8006d48:	025b      	lsls	r3, r3, #9
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	4013      	ands	r3, r2
 8006d56:	d100      	bne.n	8006d5a <HAL_RCC_OscConfig+0x36>
 8006d58:	e07d      	b.n	8006e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d007      	beq.n	8006d70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b0c      	cmp	r3, #12
 8006d64:	d112      	bne.n	8006d8c <HAL_RCC_OscConfig+0x68>
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	2380      	movs	r3, #128	@ 0x80
 8006d6a:	025b      	lsls	r3, r3, #9
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10d      	bne.n	8006d8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d70:	4bba      	ldr	r3, [pc, #744]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	2380      	movs	r3, #128	@ 0x80
 8006d76:	029b      	lsls	r3, r3, #10
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <HAL_RCC_OscConfig+0x5a>
 8006d7c:	e06a      	b.n	8006e54 <HAL_RCC_OscConfig+0x130>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d166      	bne.n	8006e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f000 fb42 	bl	8007410 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	2380      	movs	r3, #128	@ 0x80
 8006d92:	025b      	lsls	r3, r3, #9
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d107      	bne.n	8006da8 <HAL_RCC_OscConfig+0x84>
 8006d98:	4bb0      	ldr	r3, [pc, #704]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4baf      	ldr	r3, [pc, #700]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	0249      	lsls	r1, r1, #9
 8006da2:	430a      	orrs	r2, r1
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	e027      	b.n	8006df8 <HAL_RCC_OscConfig+0xd4>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	23a0      	movs	r3, #160	@ 0xa0
 8006dae:	02db      	lsls	r3, r3, #11
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d10e      	bne.n	8006dd2 <HAL_RCC_OscConfig+0xae>
 8006db4:	4ba9      	ldr	r3, [pc, #676]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4ba8      	ldr	r3, [pc, #672]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006dba:	2180      	movs	r1, #128	@ 0x80
 8006dbc:	02c9      	lsls	r1, r1, #11
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	4ba6      	ldr	r3, [pc, #664]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4ba5      	ldr	r3, [pc, #660]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006dc8:	2180      	movs	r1, #128	@ 0x80
 8006dca:	0249      	lsls	r1, r1, #9
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e012      	b.n	8006df8 <HAL_RCC_OscConfig+0xd4>
 8006dd2:	4ba2      	ldr	r3, [pc, #648]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4ba1      	ldr	r3, [pc, #644]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006dd8:	49a1      	ldr	r1, [pc, #644]	@ (8007060 <HAL_RCC_OscConfig+0x33c>)
 8006dda:	400a      	ands	r2, r1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	4b9f      	ldr	r3, [pc, #636]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	2380      	movs	r3, #128	@ 0x80
 8006de4:	025b      	lsls	r3, r3, #9
 8006de6:	4013      	ands	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4b9b      	ldr	r3, [pc, #620]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4b9a      	ldr	r3, [pc, #616]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006df2:	499c      	ldr	r1, [pc, #624]	@ (8007064 <HAL_RCC_OscConfig+0x340>)
 8006df4:	400a      	ands	r2, r1
 8006df6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d014      	beq.n	8006e2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e00:	f7fe f9e8 	bl	80051d4 <HAL_GetTick>
 8006e04:	0003      	movs	r3, r0
 8006e06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e0a:	f7fe f9e3 	bl	80051d4 <HAL_GetTick>
 8006e0e:	0002      	movs	r2, r0
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b64      	cmp	r3, #100	@ 0x64
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e2f9      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e1c:	4b8f      	ldr	r3, [pc, #572]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	2380      	movs	r3, #128	@ 0x80
 8006e22:	029b      	lsls	r3, r3, #10
 8006e24:	4013      	ands	r3, r2
 8006e26:	d0f0      	beq.n	8006e0a <HAL_RCC_OscConfig+0xe6>
 8006e28:	e015      	b.n	8006e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2a:	f7fe f9d3 	bl	80051d4 <HAL_GetTick>
 8006e2e:	0003      	movs	r3, r0
 8006e30:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e34:	f7fe f9ce 	bl	80051d4 <HAL_GetTick>
 8006e38:	0002      	movs	r2, r0
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b64      	cmp	r3, #100	@ 0x64
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e2e4      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e46:	4b85      	ldr	r3, [pc, #532]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	2380      	movs	r3, #128	@ 0x80
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0x110>
 8006e52:	e000      	b.n	8006e56 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e54:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d100      	bne.n	8006e62 <HAL_RCC_OscConfig+0x13e>
 8006e60:	e099      	b.n	8006f96 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d009      	beq.n	8006e84 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006e70:	4b7a      	ldr	r3, [pc, #488]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	4b79      	ldr	r3, [pc, #484]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006e76:	2120      	movs	r1, #32
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	2220      	movs	r2, #32
 8006e80:	4393      	bics	r3, r2
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d005      	beq.n	8006e96 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	2b0c      	cmp	r3, #12
 8006e8e:	d13e      	bne.n	8006f0e <HAL_RCC_OscConfig+0x1ea>
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d13b      	bne.n	8006f0e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006e96:	4b71      	ldr	r3, [pc, #452]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_RCC_OscConfig+0x186>
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e2b2      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	4a6e      	ldr	r2, [pc, #440]	@ (8007068 <HAL_RCC_OscConfig+0x344>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	021a      	lsls	r2, r3, #8
 8006eba:	4b68      	ldr	r3, [pc, #416]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006ec0:	4b66      	ldr	r3, [pc, #408]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2209      	movs	r2, #9
 8006ec6:	4393      	bics	r3, r2
 8006ec8:	0019      	movs	r1, r3
 8006eca:	4b64      	ldr	r3, [pc, #400]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ed2:	f000 fbeb 	bl	80076ac <HAL_RCC_GetSysClockFreq>
 8006ed6:	0001      	movs	r1, r0
 8006ed8:	4b60      	ldr	r3, [pc, #384]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	220f      	movs	r2, #15
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	4a62      	ldr	r2, [pc, #392]	@ (800706c <HAL_RCC_OscConfig+0x348>)
 8006ee4:	5cd3      	ldrb	r3, [r2, r3]
 8006ee6:	000a      	movs	r2, r1
 8006ee8:	40da      	lsrs	r2, r3
 8006eea:	4b61      	ldr	r3, [pc, #388]	@ (8007070 <HAL_RCC_OscConfig+0x34c>)
 8006eec:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006eee:	4b61      	ldr	r3, [pc, #388]	@ (8007074 <HAL_RCC_OscConfig+0x350>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2513      	movs	r5, #19
 8006ef4:	197c      	adds	r4, r7, r5
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f7fe f926 	bl	8005148 <HAL_InitTick>
 8006efc:	0003      	movs	r3, r0
 8006efe:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006f00:	197b      	adds	r3, r7, r5
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d046      	beq.n	8006f96 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006f08:	197b      	adds	r3, r7, r5
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	e280      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d027      	beq.n	8006f64 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006f14:	4b51      	ldr	r3, [pc, #324]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2209      	movs	r2, #9
 8006f1a:	4393      	bics	r3, r2
 8006f1c:	0019      	movs	r1, r3
 8006f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f22:	430a      	orrs	r2, r1
 8006f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f26:	f7fe f955 	bl	80051d4 <HAL_GetTick>
 8006f2a:	0003      	movs	r3, r0
 8006f2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f30:	f7fe f950 	bl	80051d4 <HAL_GetTick>
 8006f34:	0002      	movs	r2, r0
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e266      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f42:	4b46      	ldr	r3, [pc, #280]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2204      	movs	r2, #4
 8006f48:	4013      	ands	r3, r2
 8006f4a:	d0f1      	beq.n	8006f30 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4c:	4b43      	ldr	r3, [pc, #268]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4a45      	ldr	r2, [pc, #276]	@ (8007068 <HAL_RCC_OscConfig+0x344>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	0019      	movs	r1, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	021a      	lsls	r2, r3, #8
 8006f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
 8006f62:	e018      	b.n	8006f96 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f64:	4b3d      	ldr	r3, [pc, #244]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	4b3c      	ldr	r3, [pc, #240]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	438a      	bics	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f70:	f7fe f930 	bl	80051d4 <HAL_GetTick>
 8006f74:	0003      	movs	r3, r0
 8006f76:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f7a:	f7fe f92b 	bl	80051d4 <HAL_GetTick>
 8006f7e:	0002      	movs	r2, r0
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e241      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f8c:	4b33      	ldr	r3, [pc, #204]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2204      	movs	r2, #4
 8006f92:	4013      	ands	r3, r2
 8006f94:	d1f1      	bne.n	8006f7a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d100      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x27e>
 8006fa0:	e0a1      	b.n	80070e6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d140      	bne.n	800702a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x29c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e227      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fc0:	4b26      	ldr	r3, [pc, #152]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8007078 <HAL_RCC_OscConfig+0x354>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	0019      	movs	r1, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1a      	ldr	r2, [r3, #32]
 8006fce:	4b23      	ldr	r3, [pc, #140]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fd4:	4b21      	ldr	r3, [pc, #132]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	0a19      	lsrs	r1, r3, #8
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	061a      	lsls	r2, r3, #24
 8006fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	0b5b      	lsrs	r3, r3, #13
 8006fee:	3301      	adds	r3, #1
 8006ff0:	2280      	movs	r2, #128	@ 0x80
 8006ff2:	0212      	lsls	r2, r2, #8
 8006ff4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006ff6:	4b19      	ldr	r3, [pc, #100]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	091b      	lsrs	r3, r3, #4
 8006ffc:	210f      	movs	r1, #15
 8006ffe:	400b      	ands	r3, r1
 8007000:	491a      	ldr	r1, [pc, #104]	@ (800706c <HAL_RCC_OscConfig+0x348>)
 8007002:	5ccb      	ldrb	r3, [r1, r3]
 8007004:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007006:	4b1a      	ldr	r3, [pc, #104]	@ (8007070 <HAL_RCC_OscConfig+0x34c>)
 8007008:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800700a:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <HAL_RCC_OscConfig+0x350>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2513      	movs	r5, #19
 8007010:	197c      	adds	r4, r7, r5
 8007012:	0018      	movs	r0, r3
 8007014:	f7fe f898 	bl	8005148 <HAL_InitTick>
 8007018:	0003      	movs	r3, r0
 800701a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800701c:	197b      	adds	r3, r7, r5
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d060      	beq.n	80070e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8007024:	197b      	adds	r3, r7, r5
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	e1f2      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d03f      	beq.n	80070b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007032:	4b0a      	ldr	r3, [pc, #40]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b09      	ldr	r3, [pc, #36]	@ (800705c <HAL_RCC_OscConfig+0x338>)
 8007038:	2180      	movs	r1, #128	@ 0x80
 800703a:	0049      	lsls	r1, r1, #1
 800703c:	430a      	orrs	r2, r1
 800703e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007040:	f7fe f8c8 	bl	80051d4 <HAL_GetTick>
 8007044:	0003      	movs	r3, r0
 8007046:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007048:	e018      	b.n	800707c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800704a:	f7fe f8c3 	bl	80051d4 <HAL_GetTick>
 800704e:	0002      	movs	r2, r0
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d911      	bls.n	800707c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e1d9      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
 800705c:	40021000 	.word	0x40021000
 8007060:	fffeffff 	.word	0xfffeffff
 8007064:	fffbffff 	.word	0xfffbffff
 8007068:	ffffe0ff 	.word	0xffffe0ff
 800706c:	0800c650 	.word	0x0800c650
 8007070:	20000000 	.word	0x20000000
 8007074:	20000004 	.word	0x20000004
 8007078:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800707c:	4bc9      	ldr	r3, [pc, #804]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	2380      	movs	r3, #128	@ 0x80
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4013      	ands	r3, r2
 8007086:	d0e0      	beq.n	800704a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007088:	4bc6      	ldr	r3, [pc, #792]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	4ac6      	ldr	r2, [pc, #792]	@ (80073a8 <HAL_RCC_OscConfig+0x684>)
 800708e:	4013      	ands	r3, r2
 8007090:	0019      	movs	r1, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1a      	ldr	r2, [r3, #32]
 8007096:	4bc3      	ldr	r3, [pc, #780]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800709c:	4bc1      	ldr	r3, [pc, #772]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	0a19      	lsrs	r1, r3, #8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	061a      	lsls	r2, r3, #24
 80070aa:	4bbe      	ldr	r3, [pc, #760]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80070ac:	430a      	orrs	r2, r1
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	e019      	b.n	80070e6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070b2:	4bbc      	ldr	r3, [pc, #752]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4bbb      	ldr	r3, [pc, #748]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80070b8:	49bc      	ldr	r1, [pc, #752]	@ (80073ac <HAL_RCC_OscConfig+0x688>)
 80070ba:	400a      	ands	r2, r1
 80070bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070be:	f7fe f889 	bl	80051d4 <HAL_GetTick>
 80070c2:	0003      	movs	r3, r0
 80070c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070c8:	f7fe f884 	bl	80051d4 <HAL_GetTick>
 80070cc:	0002      	movs	r2, r0
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e19a      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80070da:	4bb2      	ldr	r3, [pc, #712]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	2380      	movs	r3, #128	@ 0x80
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4013      	ands	r3, r2
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2208      	movs	r2, #8
 80070ec:	4013      	ands	r3, r2
 80070ee:	d036      	beq.n	800715e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d019      	beq.n	800712c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070f8:	4baa      	ldr	r3, [pc, #680]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80070fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070fc:	4ba9      	ldr	r3, [pc, #676]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80070fe:	2101      	movs	r1, #1
 8007100:	430a      	orrs	r2, r1
 8007102:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007104:	f7fe f866 	bl	80051d4 <HAL_GetTick>
 8007108:	0003      	movs	r3, r0
 800710a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800710e:	f7fe f861 	bl	80051d4 <HAL_GetTick>
 8007112:	0002      	movs	r2, r0
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e177      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007120:	4ba0      	ldr	r3, [pc, #640]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007124:	2202      	movs	r2, #2
 8007126:	4013      	ands	r3, r2
 8007128:	d0f1      	beq.n	800710e <HAL_RCC_OscConfig+0x3ea>
 800712a:	e018      	b.n	800715e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800712c:	4b9d      	ldr	r3, [pc, #628]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800712e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007130:	4b9c      	ldr	r3, [pc, #624]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007132:	2101      	movs	r1, #1
 8007134:	438a      	bics	r2, r1
 8007136:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007138:	f7fe f84c 	bl	80051d4 <HAL_GetTick>
 800713c:	0003      	movs	r3, r0
 800713e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007142:	f7fe f847 	bl	80051d4 <HAL_GetTick>
 8007146:	0002      	movs	r2, r0
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e15d      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007154:	4b93      	ldr	r3, [pc, #588]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007158:	2202      	movs	r2, #2
 800715a:	4013      	ands	r3, r2
 800715c:	d1f1      	bne.n	8007142 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2204      	movs	r2, #4
 8007164:	4013      	ands	r3, r2
 8007166:	d100      	bne.n	800716a <HAL_RCC_OscConfig+0x446>
 8007168:	e0ae      	b.n	80072c8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800716a:	2023      	movs	r0, #35	@ 0x23
 800716c:	183b      	adds	r3, r7, r0
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007172:	4b8c      	ldr	r3, [pc, #560]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007176:	2380      	movs	r3, #128	@ 0x80
 8007178:	055b      	lsls	r3, r3, #21
 800717a:	4013      	ands	r3, r2
 800717c:	d109      	bne.n	8007192 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800717e:	4b89      	ldr	r3, [pc, #548]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007182:	4b88      	ldr	r3, [pc, #544]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007184:	2180      	movs	r1, #128	@ 0x80
 8007186:	0549      	lsls	r1, r1, #21
 8007188:	430a      	orrs	r2, r1
 800718a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800718c:	183b      	adds	r3, r7, r0
 800718e:	2201      	movs	r2, #1
 8007190:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007192:	4b87      	ldr	r3, [pc, #540]	@ (80073b0 <HAL_RCC_OscConfig+0x68c>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	2380      	movs	r3, #128	@ 0x80
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	4013      	ands	r3, r2
 800719c:	d11a      	bne.n	80071d4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800719e:	4b84      	ldr	r3, [pc, #528]	@ (80073b0 <HAL_RCC_OscConfig+0x68c>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4b83      	ldr	r3, [pc, #524]	@ (80073b0 <HAL_RCC_OscConfig+0x68c>)
 80071a4:	2180      	movs	r1, #128	@ 0x80
 80071a6:	0049      	lsls	r1, r1, #1
 80071a8:	430a      	orrs	r2, r1
 80071aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ac:	f7fe f812 	bl	80051d4 <HAL_GetTick>
 80071b0:	0003      	movs	r3, r0
 80071b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b6:	f7fe f80d 	bl	80051d4 <HAL_GetTick>
 80071ba:	0002      	movs	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b64      	cmp	r3, #100	@ 0x64
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e123      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c8:	4b79      	ldr	r3, [pc, #484]	@ (80073b0 <HAL_RCC_OscConfig+0x68c>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	2380      	movs	r3, #128	@ 0x80
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	4013      	ands	r3, r2
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	2380      	movs	r3, #128	@ 0x80
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	429a      	cmp	r2, r3
 80071de:	d107      	bne.n	80071f0 <HAL_RCC_OscConfig+0x4cc>
 80071e0:	4b70      	ldr	r3, [pc, #448]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80071e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071e4:	4b6f      	ldr	r3, [pc, #444]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80071e6:	2180      	movs	r1, #128	@ 0x80
 80071e8:	0049      	lsls	r1, r1, #1
 80071ea:	430a      	orrs	r2, r1
 80071ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80071ee:	e031      	b.n	8007254 <HAL_RCC_OscConfig+0x530>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10c      	bne.n	8007212 <HAL_RCC_OscConfig+0x4ee>
 80071f8:	4b6a      	ldr	r3, [pc, #424]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80071fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071fc:	4b69      	ldr	r3, [pc, #420]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80071fe:	496b      	ldr	r1, [pc, #428]	@ (80073ac <HAL_RCC_OscConfig+0x688>)
 8007200:	400a      	ands	r2, r1
 8007202:	651a      	str	r2, [r3, #80]	@ 0x50
 8007204:	4b67      	ldr	r3, [pc, #412]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007206:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007208:	4b66      	ldr	r3, [pc, #408]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800720a:	496a      	ldr	r1, [pc, #424]	@ (80073b4 <HAL_RCC_OscConfig+0x690>)
 800720c:	400a      	ands	r2, r1
 800720e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007210:	e020      	b.n	8007254 <HAL_RCC_OscConfig+0x530>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	23a0      	movs	r3, #160	@ 0xa0
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	429a      	cmp	r2, r3
 800721c:	d10e      	bne.n	800723c <HAL_RCC_OscConfig+0x518>
 800721e:	4b61      	ldr	r3, [pc, #388]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007222:	4b60      	ldr	r3, [pc, #384]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007224:	2180      	movs	r1, #128	@ 0x80
 8007226:	00c9      	lsls	r1, r1, #3
 8007228:	430a      	orrs	r2, r1
 800722a:	651a      	str	r2, [r3, #80]	@ 0x50
 800722c:	4b5d      	ldr	r3, [pc, #372]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800722e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007230:	4b5c      	ldr	r3, [pc, #368]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007232:	2180      	movs	r1, #128	@ 0x80
 8007234:	0049      	lsls	r1, r1, #1
 8007236:	430a      	orrs	r2, r1
 8007238:	651a      	str	r2, [r3, #80]	@ 0x50
 800723a:	e00b      	b.n	8007254 <HAL_RCC_OscConfig+0x530>
 800723c:	4b59      	ldr	r3, [pc, #356]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800723e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007240:	4b58      	ldr	r3, [pc, #352]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007242:	495a      	ldr	r1, [pc, #360]	@ (80073ac <HAL_RCC_OscConfig+0x688>)
 8007244:	400a      	ands	r2, r1
 8007246:	651a      	str	r2, [r3, #80]	@ 0x50
 8007248:	4b56      	ldr	r3, [pc, #344]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800724a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800724c:	4b55      	ldr	r3, [pc, #340]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800724e:	4959      	ldr	r1, [pc, #356]	@ (80073b4 <HAL_RCC_OscConfig+0x690>)
 8007250:	400a      	ands	r2, r1
 8007252:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d015      	beq.n	8007288 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800725c:	f7fd ffba 	bl	80051d4 <HAL_GetTick>
 8007260:	0003      	movs	r3, r0
 8007262:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007264:	e009      	b.n	800727a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007266:	f7fd ffb5 	bl	80051d4 <HAL_GetTick>
 800726a:	0002      	movs	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	4a51      	ldr	r2, [pc, #324]	@ (80073b8 <HAL_RCC_OscConfig+0x694>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e0ca      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800727a:	4b4a      	ldr	r3, [pc, #296]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800727c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800727e:	2380      	movs	r3, #128	@ 0x80
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4013      	ands	r3, r2
 8007284:	d0ef      	beq.n	8007266 <HAL_RCC_OscConfig+0x542>
 8007286:	e014      	b.n	80072b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007288:	f7fd ffa4 	bl	80051d4 <HAL_GetTick>
 800728c:	0003      	movs	r3, r0
 800728e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007290:	e009      	b.n	80072a6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007292:	f7fd ff9f 	bl	80051d4 <HAL_GetTick>
 8007296:	0002      	movs	r2, r0
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	4a46      	ldr	r2, [pc, #280]	@ (80073b8 <HAL_RCC_OscConfig+0x694>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e0b4      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072a6:	4b3f      	ldr	r3, [pc, #252]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80072a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072aa:	2380      	movs	r3, #128	@ 0x80
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4013      	ands	r3, r2
 80072b0:	d1ef      	bne.n	8007292 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072b2:	2323      	movs	r3, #35	@ 0x23
 80072b4:	18fb      	adds	r3, r7, r3
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d105      	bne.n	80072c8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072bc:	4b39      	ldr	r3, [pc, #228]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80072be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072c0:	4b38      	ldr	r3, [pc, #224]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80072c2:	493e      	ldr	r1, [pc, #248]	@ (80073bc <HAL_RCC_OscConfig+0x698>)
 80072c4:	400a      	ands	r2, r1
 80072c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d100      	bne.n	80072d2 <HAL_RCC_OscConfig+0x5ae>
 80072d0:	e09d      	b.n	800740e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b0c      	cmp	r3, #12
 80072d6:	d100      	bne.n	80072da <HAL_RCC_OscConfig+0x5b6>
 80072d8:	e076      	b.n	80073c8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d145      	bne.n	800736e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e2:	4b30      	ldr	r3, [pc, #192]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4b2f      	ldr	r3, [pc, #188]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 80072e8:	4935      	ldr	r1, [pc, #212]	@ (80073c0 <HAL_RCC_OscConfig+0x69c>)
 80072ea:	400a      	ands	r2, r1
 80072ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ee:	f7fd ff71 	bl	80051d4 <HAL_GetTick>
 80072f2:	0003      	movs	r3, r0
 80072f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072f8:	f7fd ff6c 	bl	80051d4 <HAL_GetTick>
 80072fc:	0002      	movs	r2, r0
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e082      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800730a:	4b26      	ldr	r3, [pc, #152]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	2380      	movs	r3, #128	@ 0x80
 8007310:	049b      	lsls	r3, r3, #18
 8007312:	4013      	ands	r3, r2
 8007314:	d1f0      	bne.n	80072f8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007316:	4b23      	ldr	r3, [pc, #140]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	4a2a      	ldr	r2, [pc, #168]	@ (80073c4 <HAL_RCC_OscConfig+0x6a0>)
 800731c:	4013      	ands	r3, r2
 800731e:	0019      	movs	r1, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	431a      	orrs	r2, r3
 8007330:	4b1c      	ldr	r3, [pc, #112]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007332:	430a      	orrs	r2, r1
 8007334:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007336:	4b1b      	ldr	r3, [pc, #108]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b1a      	ldr	r3, [pc, #104]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 800733c:	2180      	movs	r1, #128	@ 0x80
 800733e:	0449      	lsls	r1, r1, #17
 8007340:	430a      	orrs	r2, r1
 8007342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7fd ff46 	bl	80051d4 <HAL_GetTick>
 8007348:	0003      	movs	r3, r0
 800734a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800734c:	e008      	b.n	8007360 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800734e:	f7fd ff41 	bl	80051d4 <HAL_GetTick>
 8007352:	0002      	movs	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e057      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007360:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	2380      	movs	r3, #128	@ 0x80
 8007366:	049b      	lsls	r3, r3, #18
 8007368:	4013      	ands	r3, r2
 800736a:	d0f0      	beq.n	800734e <HAL_RCC_OscConfig+0x62a>
 800736c:	e04f      	b.n	800740e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800736e:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b0c      	ldr	r3, [pc, #48]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007374:	4912      	ldr	r1, [pc, #72]	@ (80073c0 <HAL_RCC_OscConfig+0x69c>)
 8007376:	400a      	ands	r2, r1
 8007378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737a:	f7fd ff2b 	bl	80051d4 <HAL_GetTick>
 800737e:	0003      	movs	r3, r0
 8007380:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007384:	f7fd ff26 	bl	80051d4 <HAL_GetTick>
 8007388:	0002      	movs	r2, r0
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e03c      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007396:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <HAL_RCC_OscConfig+0x680>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	2380      	movs	r3, #128	@ 0x80
 800739c:	049b      	lsls	r3, r3, #18
 800739e:	4013      	ands	r3, r2
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x660>
 80073a2:	e034      	b.n	800740e <HAL_RCC_OscConfig+0x6ea>
 80073a4:	40021000 	.word	0x40021000
 80073a8:	ffff1fff 	.word	0xffff1fff
 80073ac:	fffffeff 	.word	0xfffffeff
 80073b0:	40007000 	.word	0x40007000
 80073b4:	fffffbff 	.word	0xfffffbff
 80073b8:	00001388 	.word	0x00001388
 80073bc:	efffffff 	.word	0xefffffff
 80073c0:	feffffff 	.word	0xfeffffff
 80073c4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e01d      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80073d4:	4b10      	ldr	r3, [pc, #64]	@ (8007418 <HAL_RCC_OscConfig+0x6f4>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	2380      	movs	r3, #128	@ 0x80
 80073de:	025b      	lsls	r3, r3, #9
 80073e0:	401a      	ands	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d10f      	bne.n	800740a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	23f0      	movs	r3, #240	@ 0xf0
 80073ee:	039b      	lsls	r3, r3, #14
 80073f0:	401a      	ands	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d107      	bne.n	800740a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	23c0      	movs	r3, #192	@ 0xc0
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	401a      	ands	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007406:	429a      	cmp	r2, r3
 8007408:	d001      	beq.n	800740e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	0018      	movs	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	b00a      	add	sp, #40	@ 0x28
 8007416:	bdb0      	pop	{r4, r5, r7, pc}
 8007418:	40021000 	.word	0x40021000

0800741c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800741c:	b5b0      	push	{r4, r5, r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e128      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007430:	4b96      	ldr	r3, [pc, #600]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2201      	movs	r2, #1
 8007436:	4013      	ands	r3, r2
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d91e      	bls.n	800747c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b93      	ldr	r3, [pc, #588]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2201      	movs	r2, #1
 8007444:	4393      	bics	r3, r2
 8007446:	0019      	movs	r1, r3
 8007448:	4b90      	ldr	r3, [pc, #576]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007450:	f7fd fec0 	bl	80051d4 <HAL_GetTick>
 8007454:	0003      	movs	r3, r0
 8007456:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007458:	e009      	b.n	800746e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800745a:	f7fd febb 	bl	80051d4 <HAL_GetTick>
 800745e:	0002      	movs	r2, r0
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	4a8a      	ldr	r2, [pc, #552]	@ (8007690 <HAL_RCC_ClockConfig+0x274>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d901      	bls.n	800746e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e109      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800746e:	4b87      	ldr	r3, [pc, #540]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2201      	movs	r2, #1
 8007474:	4013      	ands	r3, r2
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	429a      	cmp	r2, r3
 800747a:	d1ee      	bne.n	800745a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2202      	movs	r2, #2
 8007482:	4013      	ands	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007486:	4b83      	ldr	r3, [pc, #524]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	22f0      	movs	r2, #240	@ 0xf0
 800748c:	4393      	bics	r3, r2
 800748e:	0019      	movs	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	4b7f      	ldr	r3, [pc, #508]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007496:	430a      	orrs	r2, r1
 8007498:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2201      	movs	r2, #1
 80074a0:	4013      	ands	r3, r2
 80074a2:	d100      	bne.n	80074a6 <HAL_RCC_ClockConfig+0x8a>
 80074a4:	e089      	b.n	80075ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d107      	bne.n	80074be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ae:	4b79      	ldr	r3, [pc, #484]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	2380      	movs	r3, #128	@ 0x80
 80074b4:	029b      	lsls	r3, r3, #10
 80074b6:	4013      	ands	r3, r2
 80074b8:	d120      	bne.n	80074fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e0e1      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074c6:	4b73      	ldr	r3, [pc, #460]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	2380      	movs	r3, #128	@ 0x80
 80074cc:	049b      	lsls	r3, r3, #18
 80074ce:	4013      	ands	r3, r2
 80074d0:	d114      	bne.n	80074fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e0d5      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d106      	bne.n	80074ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074de:	4b6d      	ldr	r3, [pc, #436]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2204      	movs	r2, #4
 80074e4:	4013      	ands	r3, r2
 80074e6:	d109      	bne.n	80074fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0ca      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80074ec:	4b69      	ldr	r3, [pc, #420]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	2380      	movs	r3, #128	@ 0x80
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4013      	ands	r3, r2
 80074f6:	d101      	bne.n	80074fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0c2      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074fc:	4b65      	ldr	r3, [pc, #404]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	2203      	movs	r2, #3
 8007502:	4393      	bics	r3, r2
 8007504:	0019      	movs	r1, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	4b62      	ldr	r3, [pc, #392]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 800750c:	430a      	orrs	r2, r1
 800750e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007510:	f7fd fe60 	bl	80051d4 <HAL_GetTick>
 8007514:	0003      	movs	r3, r0
 8007516:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d111      	bne.n	8007544 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007520:	e009      	b.n	8007536 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007522:	f7fd fe57 	bl	80051d4 <HAL_GetTick>
 8007526:	0002      	movs	r2, r0
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	4a58      	ldr	r2, [pc, #352]	@ (8007690 <HAL_RCC_ClockConfig+0x274>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e0a5      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007536:	4b57      	ldr	r3, [pc, #348]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	220c      	movs	r2, #12
 800753c:	4013      	ands	r3, r2
 800753e:	2b08      	cmp	r3, #8
 8007540:	d1ef      	bne.n	8007522 <HAL_RCC_ClockConfig+0x106>
 8007542:	e03a      	b.n	80075ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2b03      	cmp	r3, #3
 800754a:	d111      	bne.n	8007570 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800754c:	e009      	b.n	8007562 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800754e:	f7fd fe41 	bl	80051d4 <HAL_GetTick>
 8007552:	0002      	movs	r2, r0
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	4a4d      	ldr	r2, [pc, #308]	@ (8007690 <HAL_RCC_ClockConfig+0x274>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e08f      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007562:	4b4c      	ldr	r3, [pc, #304]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	220c      	movs	r2, #12
 8007568:	4013      	ands	r3, r2
 800756a:	2b0c      	cmp	r3, #12
 800756c:	d1ef      	bne.n	800754e <HAL_RCC_ClockConfig+0x132>
 800756e:	e024      	b.n	80075ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d11b      	bne.n	80075b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007578:	e009      	b.n	800758e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800757a:	f7fd fe2b 	bl	80051d4 <HAL_GetTick>
 800757e:	0002      	movs	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	4a42      	ldr	r2, [pc, #264]	@ (8007690 <HAL_RCC_ClockConfig+0x274>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d901      	bls.n	800758e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e079      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800758e:	4b41      	ldr	r3, [pc, #260]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	220c      	movs	r2, #12
 8007594:	4013      	ands	r3, r2
 8007596:	2b04      	cmp	r3, #4
 8007598:	d1ef      	bne.n	800757a <HAL_RCC_ClockConfig+0x15e>
 800759a:	e00e      	b.n	80075ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800759c:	f7fd fe1a 	bl	80051d4 <HAL_GetTick>
 80075a0:	0002      	movs	r2, r0
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	4a3a      	ldr	r2, [pc, #232]	@ (8007690 <HAL_RCC_ClockConfig+0x274>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e068      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80075b0:	4b38      	ldr	r3, [pc, #224]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	220c      	movs	r2, #12
 80075b6:	4013      	ands	r3, r2
 80075b8:	d1f0      	bne.n	800759c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075ba:	4b34      	ldr	r3, [pc, #208]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2201      	movs	r2, #1
 80075c0:	4013      	ands	r3, r2
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d21e      	bcs.n	8007606 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c8:	4b30      	ldr	r3, [pc, #192]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	4393      	bics	r3, r2
 80075d0:	0019      	movs	r1, r3
 80075d2:	4b2e      	ldr	r3, [pc, #184]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075da:	f7fd fdfb 	bl	80051d4 <HAL_GetTick>
 80075de:	0003      	movs	r3, r0
 80075e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e2:	e009      	b.n	80075f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e4:	f7fd fdf6 	bl	80051d4 <HAL_GetTick>
 80075e8:	0002      	movs	r2, r0
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a28      	ldr	r2, [pc, #160]	@ (8007690 <HAL_RCC_ClockConfig+0x274>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e044      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f8:	4b24      	ldr	r3, [pc, #144]	@ (800768c <HAL_RCC_ClockConfig+0x270>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2201      	movs	r2, #1
 80075fe:	4013      	ands	r3, r2
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d1ee      	bne.n	80075e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2204      	movs	r2, #4
 800760c:	4013      	ands	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007610:	4b20      	ldr	r3, [pc, #128]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4a20      	ldr	r2, [pc, #128]	@ (8007698 <HAL_RCC_ClockConfig+0x27c>)
 8007616:	4013      	ands	r3, r2
 8007618:	0019      	movs	r1, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	4b1d      	ldr	r3, [pc, #116]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007620:	430a      	orrs	r2, r1
 8007622:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2208      	movs	r2, #8
 800762a:	4013      	ands	r3, r2
 800762c:	d00a      	beq.n	8007644 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800762e:	4b19      	ldr	r3, [pc, #100]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	4a1a      	ldr	r2, [pc, #104]	@ (800769c <HAL_RCC_ClockConfig+0x280>)
 8007634:	4013      	ands	r3, r2
 8007636:	0019      	movs	r1, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	00da      	lsls	r2, r3, #3
 800763e:	4b15      	ldr	r3, [pc, #84]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 8007640:	430a      	orrs	r2, r1
 8007642:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007644:	f000 f832 	bl	80076ac <HAL_RCC_GetSysClockFreq>
 8007648:	0001      	movs	r1, r0
 800764a:	4b12      	ldr	r3, [pc, #72]	@ (8007694 <HAL_RCC_ClockConfig+0x278>)
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	091b      	lsrs	r3, r3, #4
 8007650:	220f      	movs	r2, #15
 8007652:	4013      	ands	r3, r2
 8007654:	4a12      	ldr	r2, [pc, #72]	@ (80076a0 <HAL_RCC_ClockConfig+0x284>)
 8007656:	5cd3      	ldrb	r3, [r2, r3]
 8007658:	000a      	movs	r2, r1
 800765a:	40da      	lsrs	r2, r3
 800765c:	4b11      	ldr	r3, [pc, #68]	@ (80076a4 <HAL_RCC_ClockConfig+0x288>)
 800765e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007660:	4b11      	ldr	r3, [pc, #68]	@ (80076a8 <HAL_RCC_ClockConfig+0x28c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	250b      	movs	r5, #11
 8007666:	197c      	adds	r4, r7, r5
 8007668:	0018      	movs	r0, r3
 800766a:	f7fd fd6d 	bl	8005148 <HAL_InitTick>
 800766e:	0003      	movs	r3, r0
 8007670:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007672:	197b      	adds	r3, r7, r5
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800767a:	197b      	adds	r3, r7, r5
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	e000      	b.n	8007682 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	0018      	movs	r0, r3
 8007684:	46bd      	mov	sp, r7
 8007686:	b004      	add	sp, #16
 8007688:	bdb0      	pop	{r4, r5, r7, pc}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	40022000 	.word	0x40022000
 8007690:	00001388 	.word	0x00001388
 8007694:	40021000 	.word	0x40021000
 8007698:	fffff8ff 	.word	0xfffff8ff
 800769c:	ffffc7ff 	.word	0xffffc7ff
 80076a0:	0800c650 	.word	0x0800c650
 80076a4:	20000000 	.word	0x20000000
 80076a8:	20000004 	.word	0x20000004

080076ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076ac:	b5b0      	push	{r4, r5, r7, lr}
 80076ae:	b08e      	sub	sp, #56	@ 0x38
 80076b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80076b2:	4b4c      	ldr	r3, [pc, #304]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076ba:	230c      	movs	r3, #12
 80076bc:	4013      	ands	r3, r2
 80076be:	2b0c      	cmp	r3, #12
 80076c0:	d014      	beq.n	80076ec <HAL_RCC_GetSysClockFreq+0x40>
 80076c2:	d900      	bls.n	80076c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80076c4:	e07b      	b.n	80077be <HAL_RCC_GetSysClockFreq+0x112>
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d002      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0x24>
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d00b      	beq.n	80076e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ce:	e076      	b.n	80077be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80076d0:	4b44      	ldr	r3, [pc, #272]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2210      	movs	r2, #16
 80076d6:	4013      	ands	r3, r2
 80076d8:	d002      	beq.n	80076e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80076da:	4b43      	ldr	r3, [pc, #268]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80076dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80076de:	e07c      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80076e0:	4b42      	ldr	r3, [pc, #264]	@ (80077ec <HAL_RCC_GetSysClockFreq+0x140>)
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80076e4:	e079      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076e6:	4b42      	ldr	r3, [pc, #264]	@ (80077f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80076e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80076ea:	e076      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80076ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ee:	0c9a      	lsrs	r2, r3, #18
 80076f0:	230f      	movs	r3, #15
 80076f2:	401a      	ands	r2, r3
 80076f4:	4b3f      	ldr	r3, [pc, #252]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80076f6:	5c9b      	ldrb	r3, [r3, r2]
 80076f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	0d9a      	lsrs	r2, r3, #22
 80076fe:	2303      	movs	r3, #3
 8007700:	4013      	ands	r3, r2
 8007702:	3301      	adds	r3, #1
 8007704:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007706:	4b37      	ldr	r3, [pc, #220]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	2380      	movs	r3, #128	@ 0x80
 800770c:	025b      	lsls	r3, r3, #9
 800770e:	4013      	ands	r3, r2
 8007710:	d01a      	beq.n	8007748 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	4a35      	ldr	r2, [pc, #212]	@ (80077f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800771c:	2300      	movs	r3, #0
 800771e:	69b8      	ldr	r0, [r7, #24]
 8007720:	69f9      	ldr	r1, [r7, #28]
 8007722:	f7f8 fee1 	bl	80004e8 <__aeabi_lmul>
 8007726:	0002      	movs	r2, r0
 8007728:	000b      	movs	r3, r1
 800772a:	0010      	movs	r0, r2
 800772c:	0019      	movs	r1, r3
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f7f8 feb5 	bl	80004a8 <__aeabi_uldivmod>
 800773e:	0002      	movs	r2, r0
 8007740:	000b      	movs	r3, r1
 8007742:	0013      	movs	r3, r2
 8007744:	637b      	str	r3, [r7, #52]	@ 0x34
 8007746:	e037      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007748:	4b26      	ldr	r3, [pc, #152]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2210      	movs	r2, #16
 800774e:	4013      	ands	r3, r2
 8007750:	d01a      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	4a23      	ldr	r2, [pc, #140]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800775c:	2300      	movs	r3, #0
 800775e:	68b8      	ldr	r0, [r7, #8]
 8007760:	68f9      	ldr	r1, [r7, #12]
 8007762:	f7f8 fec1 	bl	80004e8 <__aeabi_lmul>
 8007766:	0002      	movs	r2, r0
 8007768:	000b      	movs	r3, r1
 800776a:	0010      	movs	r0, r2
 800776c:	0019      	movs	r1, r3
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f7f8 fe95 	bl	80004a8 <__aeabi_uldivmod>
 800777e:	0002      	movs	r2, r0
 8007780:	000b      	movs	r3, r1
 8007782:	0013      	movs	r3, r2
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
 8007786:	e017      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	0018      	movs	r0, r3
 800778c:	2300      	movs	r3, #0
 800778e:	0019      	movs	r1, r3
 8007790:	4a16      	ldr	r2, [pc, #88]	@ (80077ec <HAL_RCC_GetSysClockFreq+0x140>)
 8007792:	2300      	movs	r3, #0
 8007794:	f7f8 fea8 	bl	80004e8 <__aeabi_lmul>
 8007798:	0002      	movs	r2, r0
 800779a:	000b      	movs	r3, r1
 800779c:	0010      	movs	r0, r2
 800779e:	0019      	movs	r1, r3
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	001c      	movs	r4, r3
 80077a4:	2300      	movs	r3, #0
 80077a6:	001d      	movs	r5, r3
 80077a8:	0022      	movs	r2, r4
 80077aa:	002b      	movs	r3, r5
 80077ac:	f7f8 fe7c 	bl	80004a8 <__aeabi_uldivmod>
 80077b0:	0002      	movs	r2, r0
 80077b2:	000b      	movs	r3, r1
 80077b4:	0013      	movs	r3, r2
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80077b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80077bc:	e00d      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80077be:	4b09      	ldr	r3, [pc, #36]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	0b5b      	lsrs	r3, r3, #13
 80077c4:	2207      	movs	r2, #7
 80077c6:	4013      	ands	r3, r2
 80077c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	3301      	adds	r3, #1
 80077ce:	2280      	movs	r2, #128	@ 0x80
 80077d0:	0212      	lsls	r2, r2, #8
 80077d2:	409a      	lsls	r2, r3
 80077d4:	0013      	movs	r3, r2
 80077d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80077d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80077dc:	0018      	movs	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	b00e      	add	sp, #56	@ 0x38
 80077e2:	bdb0      	pop	{r4, r5, r7, pc}
 80077e4:	40021000 	.word	0x40021000
 80077e8:	003d0900 	.word	0x003d0900
 80077ec:	00f42400 	.word	0x00f42400
 80077f0:	007a1200 	.word	0x007a1200
 80077f4:	0800c668 	.word	0x0800c668

080077f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077fc:	4b02      	ldr	r3, [pc, #8]	@ (8007808 <HAL_RCC_GetHCLKFreq+0x10>)
 80077fe:	681b      	ldr	r3, [r3, #0]
}
 8007800:	0018      	movs	r0, r3
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	46c0      	nop			@ (mov r8, r8)
 8007808:	20000000 	.word	0x20000000

0800780c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007810:	f7ff fff2 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 8007814:	0001      	movs	r1, r0
 8007816:	4b06      	ldr	r3, [pc, #24]	@ (8007830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	0a1b      	lsrs	r3, r3, #8
 800781c:	2207      	movs	r2, #7
 800781e:	4013      	ands	r3, r2
 8007820:	4a04      	ldr	r2, [pc, #16]	@ (8007834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007822:	5cd3      	ldrb	r3, [r2, r3]
 8007824:	40d9      	lsrs	r1, r3
 8007826:	000b      	movs	r3, r1
}
 8007828:	0018      	movs	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			@ (mov r8, r8)
 8007830:	40021000 	.word	0x40021000
 8007834:	0800c660 	.word	0x0800c660

08007838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800783c:	f7ff ffdc 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 8007840:	0001      	movs	r1, r0
 8007842:	4b06      	ldr	r3, [pc, #24]	@ (800785c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	0adb      	lsrs	r3, r3, #11
 8007848:	2207      	movs	r2, #7
 800784a:	4013      	ands	r3, r2
 800784c:	4a04      	ldr	r2, [pc, #16]	@ (8007860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800784e:	5cd3      	ldrb	r3, [r2, r3]
 8007850:	40d9      	lsrs	r1, r3
 8007852:	000b      	movs	r3, r1
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	46c0      	nop			@ (mov r8, r8)
 800785c:	40021000 	.word	0x40021000
 8007860:	0800c660 	.word	0x0800c660

08007864 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800786c:	2017      	movs	r0, #23
 800786e:	183b      	adds	r3, r7, r0
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2220      	movs	r2, #32
 800787a:	4013      	ands	r3, r2
 800787c:	d100      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800787e:	e0c7      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007880:	4b84      	ldr	r3, [pc, #528]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007884:	2380      	movs	r3, #128	@ 0x80
 8007886:	055b      	lsls	r3, r3, #21
 8007888:	4013      	ands	r3, r2
 800788a:	d109      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800788c:	4b81      	ldr	r3, [pc, #516]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800788e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007890:	4b80      	ldr	r3, [pc, #512]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007892:	2180      	movs	r1, #128	@ 0x80
 8007894:	0549      	lsls	r1, r1, #21
 8007896:	430a      	orrs	r2, r1
 8007898:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800789a:	183b      	adds	r3, r7, r0
 800789c:	2201      	movs	r2, #1
 800789e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078a0:	4b7d      	ldr	r3, [pc, #500]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	2380      	movs	r3, #128	@ 0x80
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	4013      	ands	r3, r2
 80078aa:	d11a      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078ac:	4b7a      	ldr	r3, [pc, #488]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b79      	ldr	r3, [pc, #484]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80078b2:	2180      	movs	r1, #128	@ 0x80
 80078b4:	0049      	lsls	r1, r1, #1
 80078b6:	430a      	orrs	r2, r1
 80078b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ba:	f7fd fc8b 	bl	80051d4 <HAL_GetTick>
 80078be:	0003      	movs	r3, r0
 80078c0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078c2:	e008      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c4:	f7fd fc86 	bl	80051d4 <HAL_GetTick>
 80078c8:	0002      	movs	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b64      	cmp	r3, #100	@ 0x64
 80078d0:	d901      	bls.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e0d9      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d6:	4b70      	ldr	r3, [pc, #448]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	2380      	movs	r3, #128	@ 0x80
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	4013      	ands	r3, r2
 80078e0:	d0f0      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80078e2:	4b6c      	ldr	r3, [pc, #432]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	23c0      	movs	r3, #192	@ 0xc0
 80078e8:	039b      	lsls	r3, r3, #14
 80078ea:	4013      	ands	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	23c0      	movs	r3, #192	@ 0xc0
 80078f4:	039b      	lsls	r3, r3, #14
 80078f6:	4013      	ands	r3, r2
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d013      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	23c0      	movs	r3, #192	@ 0xc0
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	401a      	ands	r2, r3
 8007908:	23c0      	movs	r3, #192	@ 0xc0
 800790a:	029b      	lsls	r3, r3, #10
 800790c:	429a      	cmp	r2, r3
 800790e:	d10a      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007910:	4b60      	ldr	r3, [pc, #384]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	2380      	movs	r3, #128	@ 0x80
 8007916:	029b      	lsls	r3, r3, #10
 8007918:	401a      	ands	r2, r3
 800791a:	2380      	movs	r3, #128	@ 0x80
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	429a      	cmp	r2, r3
 8007920:	d101      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0b1      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007926:	4b5b      	ldr	r3, [pc, #364]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800792a:	23c0      	movs	r3, #192	@ 0xc0
 800792c:	029b      	lsls	r3, r3, #10
 800792e:	4013      	ands	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d03b      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	23c0      	movs	r3, #192	@ 0xc0
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	4013      	ands	r3, r2
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	429a      	cmp	r2, r3
 8007946:	d033      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2220      	movs	r2, #32
 800794e:	4013      	ands	r3, r2
 8007950:	d02e      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007952:	4b50      	ldr	r3, [pc, #320]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007956:	4a51      	ldr	r2, [pc, #324]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800795c:	4b4d      	ldr	r3, [pc, #308]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800795e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007960:	4b4c      	ldr	r3, [pc, #304]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007962:	2180      	movs	r1, #128	@ 0x80
 8007964:	0309      	lsls	r1, r1, #12
 8007966:	430a      	orrs	r2, r1
 8007968:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800796a:	4b4a      	ldr	r3, [pc, #296]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800796c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800796e:	4b49      	ldr	r3, [pc, #292]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007970:	494b      	ldr	r1, [pc, #300]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007972:	400a      	ands	r2, r1
 8007974:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007976:	4b47      	ldr	r3, [pc, #284]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	2380      	movs	r3, #128	@ 0x80
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4013      	ands	r3, r2
 8007984:	d014      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007986:	f7fd fc25 	bl	80051d4 <HAL_GetTick>
 800798a:	0003      	movs	r3, r0
 800798c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800798e:	e009      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007990:	f7fd fc20 	bl	80051d4 <HAL_GetTick>
 8007994:	0002      	movs	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	4a42      	ldr	r2, [pc, #264]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d901      	bls.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e072      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079a8:	2380      	movs	r3, #128	@ 0x80
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4013      	ands	r3, r2
 80079ae:	d0ef      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2220      	movs	r2, #32
 80079b6:	4013      	ands	r3, r2
 80079b8:	d01f      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	23c0      	movs	r3, #192	@ 0xc0
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	401a      	ands	r2, r3
 80079c4:	23c0      	movs	r3, #192	@ 0xc0
 80079c6:	029b      	lsls	r3, r3, #10
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d10c      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80079cc:	4b31      	ldr	r3, [pc, #196]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a35      	ldr	r2, [pc, #212]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	0019      	movs	r1, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	23c0      	movs	r3, #192	@ 0xc0
 80079dc:	039b      	lsls	r3, r3, #14
 80079de:	401a      	ands	r2, r3
 80079e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079e2:	430a      	orrs	r2, r1
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	23c0      	movs	r3, #192	@ 0xc0
 80079f0:	029b      	lsls	r3, r3, #10
 80079f2:	401a      	ands	r2, r3
 80079f4:	4b27      	ldr	r3, [pc, #156]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80079f6:	430a      	orrs	r2, r1
 80079f8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80079fa:	2317      	movs	r3, #23
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d105      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a04:	4b23      	ldr	r3, [pc, #140]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a08:	4b22      	ldr	r3, [pc, #136]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a0a:	4928      	ldr	r1, [pc, #160]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a0c:	400a      	ands	r2, r1
 8007a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2202      	movs	r2, #2
 8007a16:	4013      	ands	r3, r2
 8007a18:	d009      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a1e:	220c      	movs	r2, #12
 8007a20:	4393      	bics	r3, r2
 8007a22:	0019      	movs	r1, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2204      	movs	r2, #4
 8007a34:	4013      	ands	r3, r2
 8007a36:	d009      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a38:	4b16      	ldr	r3, [pc, #88]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	0019      	movs	r1, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2208      	movs	r2, #8
 8007a52:	4013      	ands	r3, r2
 8007a54:	d009      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a56:	4b0f      	ldr	r3, [pc, #60]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a5a:	4a16      	ldr	r2, [pc, #88]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	0019      	movs	r1, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	4b0b      	ldr	r3, [pc, #44]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a66:	430a      	orrs	r2, r1
 8007a68:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2280      	movs	r2, #128	@ 0x80
 8007a70:	4013      	ands	r3, r2
 8007a72:	d009      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007a74:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a78:	4a0f      	ldr	r2, [pc, #60]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	0019      	movs	r1, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a84:	430a      	orrs	r2, r1
 8007a86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b006      	add	sp, #24
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40007000 	.word	0x40007000
 8007a9c:	fffcffff 	.word	0xfffcffff
 8007aa0:	fff7ffff 	.word	0xfff7ffff
 8007aa4:	00001388 	.word	0x00001388
 8007aa8:	ffcfffff 	.word	0xffcfffff
 8007aac:	efffffff 	.word	0xefffffff
 8007ab0:	fffff3ff 	.word	0xfffff3ff
 8007ab4:	ffffcfff 	.word	0xffffcfff
 8007ab8:	fff3ffff 	.word	0xfff3ffff

08007abc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007abc:	b5b0      	push	{r4, r5, r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ac4:	230f      	movs	r3, #15
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e088      	b.n	8007be8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2221      	movs	r2, #33	@ 0x21
 8007ada:	5c9b      	ldrb	r3, [r3, r2]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d107      	bne.n	8007af2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	0018      	movs	r0, r3
 8007aee:	f7fd f919 	bl	8004d24 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2221      	movs	r2, #33	@ 0x21
 8007af6:	2102      	movs	r1, #2
 8007af8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2210      	movs	r2, #16
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d05f      	beq.n	8007bc8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	22ca      	movs	r2, #202	@ 0xca
 8007b0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2253      	movs	r2, #83	@ 0x53
 8007b16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007b18:	250f      	movs	r5, #15
 8007b1a:	197c      	adds	r4, r7, r5
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f000 f890 	bl	8007c44 <RTC_EnterInitMode>
 8007b24:	0003      	movs	r3, r0
 8007b26:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8007b28:	0028      	movs	r0, r5
 8007b2a:	183b      	adds	r3, r7, r0
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d12c      	bne.n	8007b8c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	492c      	ldr	r1, [pc, #176]	@ (8007bf0 <HAL_RTC_Init+0x134>)
 8007b3e:	400a      	ands	r2, r1
 8007b40:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6899      	ldr	r1, [r3, #8]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68d2      	ldr	r2, [r2, #12]
 8007b68:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6919      	ldr	r1, [r3, #16]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	041a      	lsls	r2, r3, #16
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007b7e:	183c      	adds	r4, r7, r0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	0018      	movs	r0, r3
 8007b84:	f000 f8a2 	bl	8007ccc <RTC_ExitInitMode>
 8007b88:	0003      	movs	r3, r0
 8007b8a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8007b8c:	230f      	movs	r3, #15
 8007b8e:	18fb      	adds	r3, r7, r3
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d113      	bne.n	8007bbe <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2103      	movs	r1, #3
 8007ba2:	438a      	bics	r2, r1
 8007ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	22ff      	movs	r2, #255	@ 0xff
 8007bc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bc6:	e003      	b.n	8007bd0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007bc8:	230f      	movs	r3, #15
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8007bd0:	230f      	movs	r3, #15
 8007bd2:	18fb      	adds	r3, r7, r3
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2221      	movs	r2, #33	@ 0x21
 8007bde:	2101      	movs	r1, #1
 8007be0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007be2:	230f      	movs	r3, #15
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	781b      	ldrb	r3, [r3, #0]
}
 8007be8:	0018      	movs	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	b004      	add	sp, #16
 8007bee:	bdb0      	pop	{r4, r5, r7, pc}
 8007bf0:	ff8fffbf 	.word	0xff8fffbf

08007bf4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a0e      	ldr	r2, [pc, #56]	@ (8007c40 <HAL_RTC_WaitForSynchro+0x4c>)
 8007c06:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c08:	f7fd fae4 	bl	80051d4 <HAL_GetTick>
 8007c0c:	0003      	movs	r3, r0
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c10:	e00a      	b.n	8007c28 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c12:	f7fd fadf 	bl	80051d4 <HAL_GetTick>
 8007c16:	0002      	movs	r2, r0
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	1ad2      	subs	r2, r2, r3
 8007c1c:	23fa      	movs	r3, #250	@ 0xfa
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d901      	bls.n	8007c28 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e006      	b.n	8007c36 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	4013      	ands	r3, r2
 8007c32:	d0ee      	beq.n	8007c12 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	0018      	movs	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b004      	add	sp, #16
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	00017f5f 	.word	0x00017f5f

08007c44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007c50:	230f      	movs	r3, #15
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	2200      	movs	r2, #0
 8007c56:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	2240      	movs	r2, #64	@ 0x40
 8007c60:	4013      	ands	r3, r2
 8007c62:	d12c      	bne.n	8007cbe <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2180      	movs	r1, #128	@ 0x80
 8007c70:	430a      	orrs	r2, r1
 8007c72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c74:	f7fd faae 	bl	80051d4 <HAL_GetTick>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007c7c:	e014      	b.n	8007ca8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c7e:	f7fd faa9 	bl	80051d4 <HAL_GetTick>
 8007c82:	0002      	movs	r2, r0
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	200f      	movs	r0, #15
 8007c8a:	183b      	adds	r3, r7, r0
 8007c8c:	1839      	adds	r1, r7, r0
 8007c8e:	7809      	ldrb	r1, [r1, #0]
 8007c90:	7019      	strb	r1, [r3, #0]
 8007c92:	23fa      	movs	r3, #250	@ 0xfa
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d906      	bls.n	8007ca8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2221      	movs	r2, #33	@ 0x21
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8007ca2:	183b      	adds	r3, r7, r0
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	2240      	movs	r2, #64	@ 0x40
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d104      	bne.n	8007cbe <RTC_EnterInitMode+0x7a>
 8007cb4:	230f      	movs	r3, #15
 8007cb6:	18fb      	adds	r3, r7, r3
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d1df      	bne.n	8007c7e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8007cbe:	230f      	movs	r3, #15
 8007cc0:	18fb      	adds	r3, r7, r3
 8007cc2:	781b      	ldrb	r3, [r3, #0]
}
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b004      	add	sp, #16
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd4:	240f      	movs	r4, #15
 8007cd6:	193b      	adds	r3, r7, r4
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2180      	movs	r1, #128	@ 0x80
 8007ce8:	438a      	bics	r2, r1
 8007cea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d10c      	bne.n	8007d12 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f7ff ff7a 	bl	8007bf4 <HAL_RTC_WaitForSynchro>
 8007d00:	1e03      	subs	r3, r0, #0
 8007d02:	d006      	beq.n	8007d12 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2221      	movs	r2, #33	@ 0x21
 8007d08:	2104      	movs	r1, #4
 8007d0a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8007d0c:	193b      	adds	r3, r7, r4
 8007d0e:	2201      	movs	r2, #1
 8007d10:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8007d12:	230f      	movs	r3, #15
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	781b      	ldrb	r3, [r3, #0]
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b005      	add	sp, #20
 8007d1e:	bd90      	pop	{r4, r7, pc}

08007d20 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3350      	adds	r3, #80	@ 0x50
 8007d36:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	18d3      	adds	r3, r2, r3
 8007d40:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	601a      	str	r2, [r3, #0]
}
 8007d48:	46c0      	nop			@ (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b006      	add	sp, #24
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3350      	adds	r3, #80	@ 0x50
 8007d64:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	18d3      	adds	r3, r2, r3
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
}
 8007d74:	0018      	movs	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b004      	add	sp, #16
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e032      	b.n	8007df4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2239      	movs	r2, #57	@ 0x39
 8007d92:	5c9b      	ldrb	r3, [r3, r2]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d107      	bne.n	8007daa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2238      	movs	r2, #56	@ 0x38
 8007d9e:	2100      	movs	r1, #0
 8007da0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	0018      	movs	r0, r3
 8007da6:	f7fc ffef 	bl	8004d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2239      	movs	r2, #57	@ 0x39
 8007dae:	2102      	movs	r1, #2
 8007db0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3304      	adds	r3, #4
 8007dba:	0019      	movs	r1, r3
 8007dbc:	0010      	movs	r0, r2
 8007dbe:	f000 f92d 	bl	800801c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	223e      	movs	r2, #62	@ 0x3e
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	223a      	movs	r2, #58	@ 0x3a
 8007dce:	2101      	movs	r1, #1
 8007dd0:	5499      	strb	r1, [r3, r2]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	223b      	movs	r2, #59	@ 0x3b
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	5499      	strb	r1, [r3, r2]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	223c      	movs	r2, #60	@ 0x3c
 8007dde:	2101      	movs	r1, #1
 8007de0:	5499      	strb	r1, [r3, r2]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	223d      	movs	r2, #61	@ 0x3d
 8007de6:	2101      	movs	r1, #1
 8007de8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2239      	movs	r2, #57	@ 0x39
 8007dee:	2101      	movs	r1, #1
 8007df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	0018      	movs	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b002      	add	sp, #8
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2239      	movs	r2, #57	@ 0x39
 8007e08:	5c9b      	ldrb	r3, [r3, r2]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d001      	beq.n	8007e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e029      	b.n	8007e68 <HAL_TIM_Base_Start+0x6c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2239      	movs	r2, #57	@ 0x39
 8007e18:	2102      	movs	r1, #2
 8007e1a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	2380      	movs	r3, #128	@ 0x80
 8007e22:	05db      	lsls	r3, r3, #23
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d004      	beq.n	8007e32 <HAL_TIM_Base_Start+0x36>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a10      	ldr	r2, [pc, #64]	@ (8007e70 <HAL_TIM_Base_Start+0x74>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d111      	bne.n	8007e56 <HAL_TIM_Base_Start+0x5a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2207      	movs	r2, #7
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b06      	cmp	r3, #6
 8007e42:	d010      	beq.n	8007e66 <HAL_TIM_Base_Start+0x6a>
    {
      __HAL_TIM_ENABLE(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2101      	movs	r1, #1
 8007e50:	430a      	orrs	r2, r1
 8007e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e54:	e007      	b.n	8007e66 <HAL_TIM_Base_Start+0x6a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2101      	movs	r1, #1
 8007e62:	430a      	orrs	r2, r1
 8007e64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	0018      	movs	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b004      	add	sp, #16
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	40010800 	.word	0x40010800

08007e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	230f      	movs	r3, #15
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2238      	movs	r2, #56	@ 0x38
 8007e8a:	5c9b      	ldrb	r3, [r3, r2]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_TIM_ConfigClockSource+0x20>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e0bc      	b.n	800800e <HAL_TIM_ConfigClockSource+0x19a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2238      	movs	r2, #56	@ 0x38
 8007e98:	2101      	movs	r1, #1
 8007e9a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2239      	movs	r2, #57	@ 0x39
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2277      	movs	r2, #119	@ 0x77
 8007eb0:	4393      	bics	r3, r2
 8007eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4a58      	ldr	r2, [pc, #352]	@ (8008018 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2280      	movs	r2, #128	@ 0x80
 8007eca:	0192      	lsls	r2, r2, #6
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d040      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0xde>
 8007ed0:	2280      	movs	r2, #128	@ 0x80
 8007ed2:	0192      	lsls	r2, r2, #6
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d900      	bls.n	8007eda <HAL_TIM_ConfigClockSource+0x66>
 8007ed8:	e088      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007eda:	2280      	movs	r2, #128	@ 0x80
 8007edc:	0152      	lsls	r2, r2, #5
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d100      	bne.n	8007ee4 <HAL_TIM_ConfigClockSource+0x70>
 8007ee2:	e088      	b.n	8007ff6 <HAL_TIM_ConfigClockSource+0x182>
 8007ee4:	2280      	movs	r2, #128	@ 0x80
 8007ee6:	0152      	lsls	r2, r2, #5
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d900      	bls.n	8007eee <HAL_TIM_ConfigClockSource+0x7a>
 8007eec:	e07e      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007eee:	2b70      	cmp	r3, #112	@ 0x70
 8007ef0:	d018      	beq.n	8007f24 <HAL_TIM_ConfigClockSource+0xb0>
 8007ef2:	d900      	bls.n	8007ef6 <HAL_TIM_ConfigClockSource+0x82>
 8007ef4:	e07a      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007ef6:	2b60      	cmp	r3, #96	@ 0x60
 8007ef8:	d04f      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x126>
 8007efa:	d900      	bls.n	8007efe <HAL_TIM_ConfigClockSource+0x8a>
 8007efc:	e076      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007efe:	2b50      	cmp	r3, #80	@ 0x50
 8007f00:	d03b      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0x106>
 8007f02:	d900      	bls.n	8007f06 <HAL_TIM_ConfigClockSource+0x92>
 8007f04:	e072      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007f06:	2b40      	cmp	r3, #64	@ 0x40
 8007f08:	d057      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x146>
 8007f0a:	d900      	bls.n	8007f0e <HAL_TIM_ConfigClockSource+0x9a>
 8007f0c:	e06e      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007f0e:	2b30      	cmp	r3, #48	@ 0x30
 8007f10:	d063      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x166>
 8007f12:	d86b      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d060      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x166>
 8007f18:	d868      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d05d      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x166>
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	d05b      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x166>
 8007f22:	e063      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f34:	f000 f936 	bl	80081a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2277      	movs	r2, #119	@ 0x77
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	609a      	str	r2, [r3, #8]
      break;
 8007f50:	e052      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f62:	f000 f91f 	bl	80081a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2180      	movs	r1, #128	@ 0x80
 8007f72:	01c9      	lsls	r1, r1, #7
 8007f74:	430a      	orrs	r2, r1
 8007f76:	609a      	str	r2, [r3, #8]
      break;
 8007f78:	e03e      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f86:	001a      	movs	r2, r3
 8007f88:	f000 f892 	bl	80080b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2150      	movs	r1, #80	@ 0x50
 8007f92:	0018      	movs	r0, r3
 8007f94:	f000 f8ec 	bl	8008170 <TIM_ITRx_SetConfig>
      break;
 8007f98:	e02e      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fa6:	001a      	movs	r2, r3
 8007fa8:	f000 f8b0 	bl	800810c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2160      	movs	r1, #96	@ 0x60
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f000 f8dc 	bl	8008170 <TIM_ITRx_SetConfig>
      break;
 8007fb8:	e01e      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	f000 f872 	bl	80080b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2140      	movs	r1, #64	@ 0x40
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	f000 f8cc 	bl	8008170 <TIM_ITRx_SetConfig>
      break;
 8007fd8:	e00e      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	0019      	movs	r1, r3
 8007fe4:	0010      	movs	r0, r2
 8007fe6:	f000 f8c3 	bl	8008170 <TIM_ITRx_SetConfig>
      break;
 8007fea:	e005      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007fec:	230f      	movs	r3, #15
 8007fee:	18fb      	adds	r3, r7, r3
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	701a      	strb	r2, [r3, #0]
      break;
 8007ff4:	e000      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007ff6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2239      	movs	r2, #57	@ 0x39
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2238      	movs	r2, #56	@ 0x38
 8008004:	2100      	movs	r1, #0
 8008006:	5499      	strb	r1, [r3, r2]

  return status;
 8008008:	230f      	movs	r3, #15
 800800a:	18fb      	adds	r3, r7, r3
 800800c:	781b      	ldrb	r3, [r3, #0]
}
 800800e:	0018      	movs	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	b004      	add	sp, #16
 8008014:	bd80      	pop	{r7, pc}
 8008016:	46c0      	nop			@ (mov r8, r8)
 8008018:	ffff00ff 	.word	0xffff00ff

0800801c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	2380      	movs	r3, #128	@ 0x80
 8008030:	05db      	lsls	r3, r3, #23
 8008032:	429a      	cmp	r2, r3
 8008034:	d003      	beq.n	800803e <TIM_Base_SetConfig+0x22>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a1b      	ldr	r2, [pc, #108]	@ (80080a8 <TIM_Base_SetConfig+0x8c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d108      	bne.n	8008050 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2270      	movs	r2, #112	@ 0x70
 8008042:	4393      	bics	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	2380      	movs	r3, #128	@ 0x80
 8008054:	05db      	lsls	r3, r3, #23
 8008056:	429a      	cmp	r2, r3
 8008058:	d003      	beq.n	8008062 <TIM_Base_SetConfig+0x46>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a12      	ldr	r2, [pc, #72]	@ (80080a8 <TIM_Base_SetConfig+0x8c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d108      	bne.n	8008074 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4a11      	ldr	r2, [pc, #68]	@ (80080ac <TIM_Base_SetConfig+0x90>)
 8008066:	4013      	ands	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2280      	movs	r2, #128	@ 0x80
 8008078:	4393      	bics	r3, r2
 800807a:	001a      	movs	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	615a      	str	r2, [r3, #20]
}
 80080a0:	46c0      	nop			@ (mov r8, r8)
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b004      	add	sp, #16
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	40010800 	.word	0x40010800
 80080ac:	fffffcff 	.word	0xfffffcff

080080b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	2201      	movs	r2, #1
 80080c8:	4393      	bics	r3, r2
 80080ca:	001a      	movs	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	22f0      	movs	r2, #240	@ 0xf0
 80080da:	4393      	bics	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	220a      	movs	r2, #10
 80080ec:	4393      	bics	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	621a      	str	r2, [r3, #32]
}
 8008104:	46c0      	nop			@ (mov r8, r8)
 8008106:	46bd      	mov	sp, r7
 8008108:	b006      	add	sp, #24
 800810a:	bd80      	pop	{r7, pc}

0800810c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	2210      	movs	r2, #16
 800811e:	4393      	bics	r3, r2
 8008120:	001a      	movs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4a0d      	ldr	r2, [pc, #52]	@ (800816c <TIM_TI2_ConfigInputStage+0x60>)
 8008136:	4013      	ands	r3, r2
 8008138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	031b      	lsls	r3, r3, #12
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	22a0      	movs	r2, #160	@ 0xa0
 8008148:	4393      	bics	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	621a      	str	r2, [r3, #32]
}
 8008162:	46c0      	nop			@ (mov r8, r8)
 8008164:	46bd      	mov	sp, r7
 8008166:	b006      	add	sp, #24
 8008168:	bd80      	pop	{r7, pc}
 800816a:	46c0      	nop			@ (mov r8, r8)
 800816c:	ffff0fff 	.word	0xffff0fff

08008170 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2270      	movs	r2, #112	@ 0x70
 8008184:	4393      	bics	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4313      	orrs	r3, r2
 800818e:	2207      	movs	r2, #7
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	609a      	str	r2, [r3, #8]
}
 800819a:	46c0      	nop			@ (mov r8, r8)
 800819c:	46bd      	mov	sp, r7
 800819e:	b004      	add	sp, #16
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	4a09      	ldr	r2, [pc, #36]	@ (80081e0 <TIM_ETR_SetConfig+0x3c>)
 80081bc:	4013      	ands	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	021a      	lsls	r2, r3, #8
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	609a      	str	r2, [r3, #8]
}
 80081d8:	46c0      	nop			@ (mov r8, r8)
 80081da:	46bd      	mov	sp, r7
 80081dc:	b006      	add	sp, #24
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	ffff00ff 	.word	0xffff00ff

080081e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2238      	movs	r2, #56	@ 0x38
 80081f2:	5c9b      	ldrb	r3, [r3, r2]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e03d      	b.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2238      	movs	r2, #56	@ 0x38
 8008200:	2101      	movs	r1, #1
 8008202:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2239      	movs	r2, #57	@ 0x39
 8008208:	2102      	movs	r1, #2
 800820a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2270      	movs	r2, #112	@ 0x70
 8008220:	4393      	bics	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	2380      	movs	r3, #128	@ 0x80
 800823c:	05db      	lsls	r3, r3, #23
 800823e:	429a      	cmp	r2, r3
 8008240:	d004      	beq.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a0e      	ldr	r2, [pc, #56]	@ (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d10c      	bne.n	8008266 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2280      	movs	r2, #128	@ 0x80
 8008250:	4393      	bics	r3, r2
 8008252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	4313      	orrs	r3, r2
 800825c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2239      	movs	r2, #57	@ 0x39
 800826a:	2101      	movs	r1, #1
 800826c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2238      	movs	r2, #56	@ 0x38
 8008272:	2100      	movs	r1, #0
 8008274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	0018      	movs	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	b004      	add	sp, #16
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40010800 	.word	0x40010800

08008284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e044      	b.n	8008320 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d107      	bne.n	80082ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2278      	movs	r2, #120	@ 0x78
 80082a2:	2100      	movs	r1, #0
 80082a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f7fc fd83 	bl	8004db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2224      	movs	r2, #36	@ 0x24
 80082b2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2101      	movs	r1, #1
 80082c0:	438a      	bics	r2, r1
 80082c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	0018      	movs	r0, r3
 80082c8:	f000 fc00 	bl	8008acc <UART_SetConfig>
 80082cc:	0003      	movs	r3, r0
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e024      	b.n	8008320 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	0018      	movs	r0, r3
 80082e2:	f000 fe3d 	bl	8008f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	490d      	ldr	r1, [pc, #52]	@ (8008328 <HAL_UART_Init+0xa4>)
 80082f2:	400a      	ands	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	212a      	movs	r1, #42	@ 0x2a
 8008302:	438a      	bics	r2, r1
 8008304:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2101      	movs	r1, #1
 8008312:	430a      	orrs	r2, r1
 8008314:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	0018      	movs	r0, r3
 800831a:	f000 fed5 	bl	80090c8 <UART_CheckIdleState>
 800831e:	0003      	movs	r3, r0
}
 8008320:	0018      	movs	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}
 8008328:	ffffb7ff 	.word	0xffffb7ff

0800832c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e030      	b.n	80083a0 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2224      	movs	r2, #36	@ 0x24
 8008342:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2101      	movs	r1, #1
 8008350:	438a      	bics	r2, r1
 8008352:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2200      	movs	r2, #0
 800836a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	0018      	movs	r0, r3
 8008370:	f7fc fd6c 	bl	8004e4c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2284      	movs	r2, #132	@ 0x84
 8008378:	2100      	movs	r1, #0
 800837a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2280      	movs	r2, #128	@ 0x80
 8008386:	2100      	movs	r1, #0
 8008388:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2278      	movs	r2, #120	@ 0x78
 800839a:	2100      	movs	r1, #0
 800839c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	0018      	movs	r0, r3
 80083a2:	46bd      	mov	sp, r7
 80083a4:	b002      	add	sp, #8
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	@ 0x28
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	1dbb      	adds	r3, r7, #6
 80083b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d000      	beq.n	80083c2 <HAL_UART_Transmit+0x1a>
 80083c0:	e08c      	b.n	80084dc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_UART_Transmit+0x28>
 80083c8:	1dbb      	adds	r3, r7, #6
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e084      	b.n	80084de <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	2380      	movs	r3, #128	@ 0x80
 80083da:	015b      	lsls	r3, r3, #5
 80083dc:	429a      	cmp	r2, r3
 80083de:	d109      	bne.n	80083f4 <HAL_UART_Transmit+0x4c>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d105      	bne.n	80083f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2201      	movs	r2, #1
 80083ec:	4013      	ands	r3, r2
 80083ee:	d001      	beq.n	80083f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e074      	b.n	80084de <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2284      	movs	r2, #132	@ 0x84
 80083f8:	2100      	movs	r1, #0
 80083fa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2221      	movs	r2, #33	@ 0x21
 8008400:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008402:	f7fc fee7 	bl	80051d4 <HAL_GetTick>
 8008406:	0003      	movs	r3, r0
 8008408:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	1dba      	adds	r2, r7, #6
 800840e:	2150      	movs	r1, #80	@ 0x50
 8008410:	8812      	ldrh	r2, [r2, #0]
 8008412:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	1dba      	adds	r2, r7, #6
 8008418:	2152      	movs	r1, #82	@ 0x52
 800841a:	8812      	ldrh	r2, [r2, #0]
 800841c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	2380      	movs	r3, #128	@ 0x80
 8008424:	015b      	lsls	r3, r3, #5
 8008426:	429a      	cmp	r2, r3
 8008428:	d108      	bne.n	800843c <HAL_UART_Transmit+0x94>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008432:	2300      	movs	r3, #0
 8008434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	e003      	b.n	8008444 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008444:	e02f      	b.n	80084a6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	0013      	movs	r3, r2
 8008450:	2200      	movs	r2, #0
 8008452:	2180      	movs	r1, #128	@ 0x80
 8008454:	f000 fee0 	bl	8009218 <UART_WaitOnFlagUntilTimeout>
 8008458:	1e03      	subs	r3, r0, #0
 800845a:	d004      	beq.n	8008466 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e03b      	b.n	80084de <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10b      	bne.n	8008484 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	001a      	movs	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	05d2      	lsls	r2, r2, #23
 8008478:	0dd2      	lsrs	r2, r2, #23
 800847a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	3302      	adds	r3, #2
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	e007      	b.n	8008494 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	3301      	adds	r3, #1
 8008492:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2252      	movs	r2, #82	@ 0x52
 8008498:	5a9b      	ldrh	r3, [r3, r2]
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b299      	uxth	r1, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2252      	movs	r2, #82	@ 0x52
 80084a4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2252      	movs	r2, #82	@ 0x52
 80084aa:	5a9b      	ldrh	r3, [r3, r2]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1c9      	bne.n	8008446 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	0013      	movs	r3, r2
 80084bc:	2200      	movs	r2, #0
 80084be:	2140      	movs	r1, #64	@ 0x40
 80084c0:	f000 feaa 	bl	8009218 <UART_WaitOnFlagUntilTimeout>
 80084c4:	1e03      	subs	r3, r0, #0
 80084c6:	d004      	beq.n	80084d2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e005      	b.n	80084de <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	e000      	b.n	80084de <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	0018      	movs	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	b008      	add	sp, #32
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e8:	b590      	push	{r4, r7, lr}
 80084ea:	b0ab      	sub	sp, #172	@ 0xac
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	22a4      	movs	r2, #164	@ 0xa4
 80084f8:	18b9      	adds	r1, r7, r2
 80084fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	20a0      	movs	r0, #160	@ 0xa0
 8008504:	1839      	adds	r1, r7, r0
 8008506:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	219c      	movs	r1, #156	@ 0x9c
 8008510:	1879      	adds	r1, r7, r1
 8008512:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008514:	0011      	movs	r1, r2
 8008516:	18bb      	adds	r3, r7, r2
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a99      	ldr	r2, [pc, #612]	@ (8008780 <HAL_UART_IRQHandler+0x298>)
 800851c:	4013      	ands	r3, r2
 800851e:	2298      	movs	r2, #152	@ 0x98
 8008520:	18bc      	adds	r4, r7, r2
 8008522:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008524:	18bb      	adds	r3, r7, r2
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d114      	bne.n	8008556 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800852c:	187b      	adds	r3, r7, r1
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2220      	movs	r2, #32
 8008532:	4013      	ands	r3, r2
 8008534:	d00f      	beq.n	8008556 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008536:	183b      	adds	r3, r7, r0
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2220      	movs	r2, #32
 800853c:	4013      	ands	r3, r2
 800853e:	d00a      	beq.n	8008556 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008544:	2b00      	cmp	r3, #0
 8008546:	d100      	bne.n	800854a <HAL_UART_IRQHandler+0x62>
 8008548:	e2a0      	b.n	8008a8c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	0010      	movs	r0, r2
 8008552:	4798      	blx	r3
      }
      return;
 8008554:	e29a      	b.n	8008a8c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008556:	2398      	movs	r3, #152	@ 0x98
 8008558:	18fb      	adds	r3, r7, r3
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d100      	bne.n	8008562 <HAL_UART_IRQHandler+0x7a>
 8008560:	e114      	b.n	800878c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008562:	239c      	movs	r3, #156	@ 0x9c
 8008564:	18fb      	adds	r3, r7, r3
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2201      	movs	r2, #1
 800856a:	4013      	ands	r3, r2
 800856c:	d106      	bne.n	800857c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800856e:	23a0      	movs	r3, #160	@ 0xa0
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a83      	ldr	r2, [pc, #524]	@ (8008784 <HAL_UART_IRQHandler+0x29c>)
 8008576:	4013      	ands	r3, r2
 8008578:	d100      	bne.n	800857c <HAL_UART_IRQHandler+0x94>
 800857a:	e107      	b.n	800878c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800857c:	23a4      	movs	r3, #164	@ 0xa4
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2201      	movs	r2, #1
 8008584:	4013      	ands	r3, r2
 8008586:	d012      	beq.n	80085ae <HAL_UART_IRQHandler+0xc6>
 8008588:	23a0      	movs	r3, #160	@ 0xa0
 800858a:	18fb      	adds	r3, r7, r3
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	2380      	movs	r3, #128	@ 0x80
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	4013      	ands	r3, r2
 8008594:	d00b      	beq.n	80085ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2201      	movs	r2, #1
 800859c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2284      	movs	r2, #132	@ 0x84
 80085a2:	589b      	ldr	r3, [r3, r2]
 80085a4:	2201      	movs	r2, #1
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2184      	movs	r1, #132	@ 0x84
 80085ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ae:	23a4      	movs	r3, #164	@ 0xa4
 80085b0:	18fb      	adds	r3, r7, r3
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2202      	movs	r2, #2
 80085b6:	4013      	ands	r3, r2
 80085b8:	d011      	beq.n	80085de <HAL_UART_IRQHandler+0xf6>
 80085ba:	239c      	movs	r3, #156	@ 0x9c
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	4013      	ands	r3, r2
 80085c4:	d00b      	beq.n	80085de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2202      	movs	r2, #2
 80085cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2284      	movs	r2, #132	@ 0x84
 80085d2:	589b      	ldr	r3, [r3, r2]
 80085d4:	2204      	movs	r2, #4
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2184      	movs	r1, #132	@ 0x84
 80085dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085de:	23a4      	movs	r3, #164	@ 0xa4
 80085e0:	18fb      	adds	r3, r7, r3
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2204      	movs	r2, #4
 80085e6:	4013      	ands	r3, r2
 80085e8:	d011      	beq.n	800860e <HAL_UART_IRQHandler+0x126>
 80085ea:	239c      	movs	r3, #156	@ 0x9c
 80085ec:	18fb      	adds	r3, r7, r3
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2201      	movs	r2, #1
 80085f2:	4013      	ands	r3, r2
 80085f4:	d00b      	beq.n	800860e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2204      	movs	r2, #4
 80085fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2284      	movs	r2, #132	@ 0x84
 8008602:	589b      	ldr	r3, [r3, r2]
 8008604:	2202      	movs	r2, #2
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2184      	movs	r1, #132	@ 0x84
 800860c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800860e:	23a4      	movs	r3, #164	@ 0xa4
 8008610:	18fb      	adds	r3, r7, r3
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2208      	movs	r2, #8
 8008616:	4013      	ands	r3, r2
 8008618:	d017      	beq.n	800864a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800861a:	23a0      	movs	r3, #160	@ 0xa0
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2220      	movs	r2, #32
 8008622:	4013      	ands	r3, r2
 8008624:	d105      	bne.n	8008632 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008626:	239c      	movs	r3, #156	@ 0x9c
 8008628:	18fb      	adds	r3, r7, r3
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2201      	movs	r2, #1
 800862e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008630:	d00b      	beq.n	800864a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2208      	movs	r2, #8
 8008638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2284      	movs	r2, #132	@ 0x84
 800863e:	589b      	ldr	r3, [r3, r2]
 8008640:	2208      	movs	r2, #8
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2184      	movs	r1, #132	@ 0x84
 8008648:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800864a:	23a4      	movs	r3, #164	@ 0xa4
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	2380      	movs	r3, #128	@ 0x80
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	4013      	ands	r3, r2
 8008656:	d013      	beq.n	8008680 <HAL_UART_IRQHandler+0x198>
 8008658:	23a0      	movs	r3, #160	@ 0xa0
 800865a:	18fb      	adds	r3, r7, r3
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	2380      	movs	r3, #128	@ 0x80
 8008660:	04db      	lsls	r3, r3, #19
 8008662:	4013      	ands	r3, r2
 8008664:	d00c      	beq.n	8008680 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2280      	movs	r2, #128	@ 0x80
 800866c:	0112      	lsls	r2, r2, #4
 800866e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2284      	movs	r2, #132	@ 0x84
 8008674:	589b      	ldr	r3, [r3, r2]
 8008676:	2220      	movs	r2, #32
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2184      	movs	r1, #132	@ 0x84
 800867e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2284      	movs	r2, #132	@ 0x84
 8008684:	589b      	ldr	r3, [r3, r2]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d100      	bne.n	800868c <HAL_UART_IRQHandler+0x1a4>
 800868a:	e201      	b.n	8008a90 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800868c:	23a4      	movs	r3, #164	@ 0xa4
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2220      	movs	r2, #32
 8008694:	4013      	ands	r3, r2
 8008696:	d00e      	beq.n	80086b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008698:	23a0      	movs	r3, #160	@ 0xa0
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2220      	movs	r2, #32
 80086a0:	4013      	ands	r3, r2
 80086a2:	d008      	beq.n	80086b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	0010      	movs	r0, r2
 80086b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2284      	movs	r2, #132	@ 0x84
 80086ba:	589b      	ldr	r3, [r3, r2]
 80086bc:	2194      	movs	r1, #148	@ 0x94
 80086be:	187a      	adds	r2, r7, r1
 80086c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2240      	movs	r2, #64	@ 0x40
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b40      	cmp	r3, #64	@ 0x40
 80086ce:	d004      	beq.n	80086da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086d0:	187b      	adds	r3, r7, r1
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2228      	movs	r2, #40	@ 0x28
 80086d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086d8:	d047      	beq.n	800876a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	0018      	movs	r0, r3
 80086de:	f000 fecf 	bl	8009480 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2240      	movs	r2, #64	@ 0x40
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b40      	cmp	r3, #64	@ 0x40
 80086ee:	d137      	bne.n	8008760 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f0:	f3ef 8310 	mrs	r3, PRIMASK
 80086f4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80086f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f8:	2090      	movs	r0, #144	@ 0x90
 80086fa:	183a      	adds	r2, r7, r0
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	2301      	movs	r3, #1
 8008700:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008702:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008704:	f383 8810 	msr	PRIMASK, r3
}
 8008708:	46c0      	nop			@ (mov r8, r8)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2140      	movs	r1, #64	@ 0x40
 8008716:	438a      	bics	r2, r1
 8008718:	609a      	str	r2, [r3, #8]
 800871a:	183b      	adds	r3, r7, r0
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008722:	f383 8810 	msr	PRIMASK, r3
}
 8008726:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872c:	2b00      	cmp	r3, #0
 800872e:	d012      	beq.n	8008756 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008734:	4a14      	ldr	r2, [pc, #80]	@ (8008788 <HAL_UART_IRQHandler+0x2a0>)
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873c:	0018      	movs	r0, r3
 800873e:	f7fd f87f 	bl	8005840 <HAL_DMA_Abort_IT>
 8008742:	1e03      	subs	r3, r0, #0
 8008744:	d01a      	beq.n	800877c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008750:	0018      	movs	r0, r3
 8008752:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	e012      	b.n	800877c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	0018      	movs	r0, r3
 800875a:	f7fc f9ed 	bl	8004b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875e:	e00d      	b.n	800877c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	0018      	movs	r0, r3
 8008764:	f7fc f9e8 	bl	8004b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008768:	e008      	b.n	800877c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	0018      	movs	r0, r3
 800876e:	f7fc f9e3 	bl	8004b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2284      	movs	r2, #132	@ 0x84
 8008776:	2100      	movs	r1, #0
 8008778:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800877a:	e189      	b.n	8008a90 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877c:	46c0      	nop			@ (mov r8, r8)
    return;
 800877e:	e187      	b.n	8008a90 <HAL_UART_IRQHandler+0x5a8>
 8008780:	0000080f 	.word	0x0000080f
 8008784:	04000120 	.word	0x04000120
 8008788:	08009549 	.word	0x08009549

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008790:	2b01      	cmp	r3, #1
 8008792:	d000      	beq.n	8008796 <HAL_UART_IRQHandler+0x2ae>
 8008794:	e13b      	b.n	8008a0e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008796:	23a4      	movs	r3, #164	@ 0xa4
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2210      	movs	r2, #16
 800879e:	4013      	ands	r3, r2
 80087a0:	d100      	bne.n	80087a4 <HAL_UART_IRQHandler+0x2bc>
 80087a2:	e134      	b.n	8008a0e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087a4:	23a0      	movs	r3, #160	@ 0xa0
 80087a6:	18fb      	adds	r3, r7, r3
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2210      	movs	r2, #16
 80087ac:	4013      	ands	r3, r2
 80087ae:	d100      	bne.n	80087b2 <HAL_UART_IRQHandler+0x2ca>
 80087b0:	e12d      	b.n	8008a0e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2210      	movs	r2, #16
 80087b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2240      	movs	r2, #64	@ 0x40
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b40      	cmp	r3, #64	@ 0x40
 80087c6:	d000      	beq.n	80087ca <HAL_UART_IRQHandler+0x2e2>
 80087c8:	e0a1      	b.n	800890e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	217e      	movs	r1, #126	@ 0x7e
 80087d4:	187b      	adds	r3, r7, r1
 80087d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80087d8:	187b      	adds	r3, r7, r1
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d100      	bne.n	80087e2 <HAL_UART_IRQHandler+0x2fa>
 80087e0:	e158      	b.n	8008a94 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2258      	movs	r2, #88	@ 0x58
 80087e6:	5a9b      	ldrh	r3, [r3, r2]
 80087e8:	187a      	adds	r2, r7, r1
 80087ea:	8812      	ldrh	r2, [r2, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d300      	bcc.n	80087f2 <HAL_UART_IRQHandler+0x30a>
 80087f0:	e150      	b.n	8008a94 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	187a      	adds	r2, r7, r1
 80087f6:	215a      	movs	r1, #90	@ 0x5a
 80087f8:	8812      	ldrh	r2, [r2, #0]
 80087fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2220      	movs	r2, #32
 8008806:	4013      	ands	r3, r2
 8008808:	d16f      	bne.n	80088ea <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800880a:	f3ef 8310 	mrs	r3, PRIMASK
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008812:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008814:	2301      	movs	r3, #1
 8008816:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881a:	f383 8810 	msr	PRIMASK, r3
}
 800881e:	46c0      	nop			@ (mov r8, r8)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	499e      	ldr	r1, [pc, #632]	@ (8008aa4 <HAL_UART_IRQHandler+0x5bc>)
 800882c:	400a      	ands	r2, r1
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008832:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800883c:	f3ef 8310 	mrs	r3, PRIMASK
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008844:	677b      	str	r3, [r7, #116]	@ 0x74
 8008846:	2301      	movs	r3, #1
 8008848:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800884c:	f383 8810 	msr	PRIMASK, r3
}
 8008850:	46c0      	nop			@ (mov r8, r8)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2101      	movs	r1, #1
 800885e:	438a      	bics	r2, r1
 8008860:	609a      	str	r2, [r3, #8]
 8008862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008864:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008868:	f383 8810 	msr	PRIMASK, r3
}
 800886c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886e:	f3ef 8310 	mrs	r3, PRIMASK
 8008872:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008876:	673b      	str	r3, [r7, #112]	@ 0x70
 8008878:	2301      	movs	r3, #1
 800887a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800887e:	f383 8810 	msr	PRIMASK, r3
}
 8008882:	46c0      	nop			@ (mov r8, r8)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2140      	movs	r1, #64	@ 0x40
 8008890:	438a      	bics	r2, r1
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008896:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800889a:	f383 8810 	msr	PRIMASK, r3
}
 800889e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2280      	movs	r2, #128	@ 0x80
 80088a4:	2120      	movs	r1, #32
 80088a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ae:	f3ef 8310 	mrs	r3, PRIMASK
 80088b2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80088b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088b8:	2301      	movs	r3, #1
 80088ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088be:	f383 8810 	msr	PRIMASK, r3
}
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2110      	movs	r1, #16
 80088d0:	438a      	bics	r2, r1
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088da:	f383 8810 	msr	PRIMASK, r3
}
 80088de:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7fc ff6b 	bl	80057c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2258      	movs	r2, #88	@ 0x58
 80088f4:	5a9a      	ldrh	r2, [r3, r2]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	215a      	movs	r1, #90	@ 0x5a
 80088fa:	5a5b      	ldrh	r3, [r3, r1]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	0011      	movs	r1, r2
 8008906:	0018      	movs	r0, r3
 8008908:	f7fc f8e4 	bl	8004ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800890c:	e0c2      	b.n	8008a94 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2258      	movs	r2, #88	@ 0x58
 8008912:	5a99      	ldrh	r1, [r3, r2]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	225a      	movs	r2, #90	@ 0x5a
 8008918:	5a9b      	ldrh	r3, [r3, r2]
 800891a:	b29a      	uxth	r2, r3
 800891c:	208e      	movs	r0, #142	@ 0x8e
 800891e:	183b      	adds	r3, r7, r0
 8008920:	1a8a      	subs	r2, r1, r2
 8008922:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	225a      	movs	r2, #90	@ 0x5a
 8008928:	5a9b      	ldrh	r3, [r3, r2]
 800892a:	b29b      	uxth	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d100      	bne.n	8008932 <HAL_UART_IRQHandler+0x44a>
 8008930:	e0b2      	b.n	8008a98 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008932:	183b      	adds	r3, r7, r0
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d100      	bne.n	800893c <HAL_UART_IRQHandler+0x454>
 800893a:	e0ad      	b.n	8008a98 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800893c:	f3ef 8310 	mrs	r3, PRIMASK
 8008940:	60fb      	str	r3, [r7, #12]
  return(result);
 8008942:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008944:	2488      	movs	r4, #136	@ 0x88
 8008946:	193a      	adds	r2, r7, r4
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	2301      	movs	r3, #1
 800894c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f383 8810 	msr	PRIMASK, r3
}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4951      	ldr	r1, [pc, #324]	@ (8008aa8 <HAL_UART_IRQHandler+0x5c0>)
 8008962:	400a      	ands	r2, r1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	193b      	adds	r3, r7, r4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f383 8810 	msr	PRIMASK, r3
}
 8008972:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008974:	f3ef 8310 	mrs	r3, PRIMASK
 8008978:	61bb      	str	r3, [r7, #24]
  return(result);
 800897a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897c:	2484      	movs	r4, #132	@ 0x84
 800897e:	193a      	adds	r2, r7, r4
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	2301      	movs	r3, #1
 8008984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f383 8810 	msr	PRIMASK, r3
}
 800898c:	46c0      	nop			@ (mov r8, r8)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2101      	movs	r1, #1
 800899a:	438a      	bics	r2, r1
 800899c:	609a      	str	r2, [r3, #8]
 800899e:	193b      	adds	r3, r7, r4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	f383 8810 	msr	PRIMASK, r3
}
 80089aa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2280      	movs	r2, #128	@ 0x80
 80089b0:	2120      	movs	r1, #32
 80089b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c0:	f3ef 8310 	mrs	r3, PRIMASK
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80089c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c8:	2480      	movs	r4, #128	@ 0x80
 80089ca:	193a      	adds	r2, r7, r4
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	2301      	movs	r3, #1
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	f383 8810 	msr	PRIMASK, r3
}
 80089d8:	46c0      	nop			@ (mov r8, r8)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2110      	movs	r1, #16
 80089e6:	438a      	bics	r2, r1
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	193b      	adds	r3, r7, r4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089fe:	183b      	adds	r3, r7, r0
 8008a00:	881a      	ldrh	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	0011      	movs	r1, r2
 8008a06:	0018      	movs	r0, r3
 8008a08:	f7fc f864 	bl	8004ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a0c:	e044      	b.n	8008a98 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a0e:	23a4      	movs	r3, #164	@ 0xa4
 8008a10:	18fb      	adds	r3, r7, r3
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	2380      	movs	r3, #128	@ 0x80
 8008a16:	035b      	lsls	r3, r3, #13
 8008a18:	4013      	ands	r3, r2
 8008a1a:	d010      	beq.n	8008a3e <HAL_UART_IRQHandler+0x556>
 8008a1c:	239c      	movs	r3, #156	@ 0x9c
 8008a1e:	18fb      	adds	r3, r7, r3
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	2380      	movs	r3, #128	@ 0x80
 8008a24:	03db      	lsls	r3, r3, #15
 8008a26:	4013      	ands	r3, r2
 8008a28:	d009      	beq.n	8008a3e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2280      	movs	r2, #128	@ 0x80
 8008a30:	0352      	lsls	r2, r2, #13
 8008a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	0018      	movs	r0, r3
 8008a38:	f000 ff8c 	bl	8009954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a3c:	e02f      	b.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a3e:	23a4      	movs	r3, #164	@ 0xa4
 8008a40:	18fb      	adds	r3, r7, r3
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2280      	movs	r2, #128	@ 0x80
 8008a46:	4013      	ands	r3, r2
 8008a48:	d00f      	beq.n	8008a6a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a4a:	23a0      	movs	r3, #160	@ 0xa0
 8008a4c:	18fb      	adds	r3, r7, r3
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2280      	movs	r2, #128	@ 0x80
 8008a52:	4013      	ands	r3, r2
 8008a54:	d009      	beq.n	8008a6a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01e      	beq.n	8008a9c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	0010      	movs	r0, r2
 8008a66:	4798      	blx	r3
    }
    return;
 8008a68:	e018      	b.n	8008a9c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a6a:	23a4      	movs	r3, #164	@ 0xa4
 8008a6c:	18fb      	adds	r3, r7, r3
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2240      	movs	r2, #64	@ 0x40
 8008a72:	4013      	ands	r3, r2
 8008a74:	d013      	beq.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
 8008a76:	23a0      	movs	r3, #160	@ 0xa0
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2240      	movs	r2, #64	@ 0x40
 8008a7e:	4013      	ands	r3, r2
 8008a80:	d00d      	beq.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	0018      	movs	r0, r3
 8008a86:	f000 fd76 	bl	8009576 <UART_EndTransmit_IT>
    return;
 8008a8a:	e008      	b.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8008a8c:	46c0      	nop			@ (mov r8, r8)
 8008a8e:	e006      	b.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
    return;
 8008a90:	46c0      	nop			@ (mov r8, r8)
 8008a92:	e004      	b.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8008a94:	46c0      	nop			@ (mov r8, r8)
 8008a96:	e002      	b.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8008a98:	46c0      	nop			@ (mov r8, r8)
 8008a9a:	e000      	b.n	8008a9e <HAL_UART_IRQHandler+0x5b6>
    return;
 8008a9c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b02b      	add	sp, #172	@ 0xac
 8008aa2:	bd90      	pop	{r4, r7, pc}
 8008aa4:	fffffeff 	.word	0xfffffeff
 8008aa8:	fffffedf 	.word	0xfffffedf

08008aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ab4:	46c0      	nop			@ (mov r8, r8)
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	b002      	add	sp, #8
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008ac4:	46c0      	nop			@ (mov r8, r8)
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b002      	add	sp, #8
 8008aca:	bd80      	pop	{r7, pc}

08008acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008acc:	b5b0      	push	{r4, r5, r7, lr}
 8008ace:	b08e      	sub	sp, #56	@ 0x38
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ad4:	231a      	movs	r3, #26
 8008ad6:	2218      	movs	r2, #24
 8008ad8:	189b      	adds	r3, r3, r2
 8008ada:	19db      	adds	r3, r3, r7
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4ab4      	ldr	r2, [pc, #720]	@ (8008dd0 <UART_SetConfig+0x304>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	0019      	movs	r1, r3
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	4aaf      	ldr	r2, [pc, #700]	@ (8008dd4 <UART_SetConfig+0x308>)
 8008b16:	4013      	ands	r3, r2
 8008b18:	0019      	movs	r1, r3
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4aa9      	ldr	r2, [pc, #676]	@ (8008dd8 <UART_SetConfig+0x30c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	4aa5      	ldr	r2, [pc, #660]	@ (8008ddc <UART_SetConfig+0x310>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b52:	430a      	orrs	r2, r1
 8008b54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4aa1      	ldr	r2, [pc, #644]	@ (8008de0 <UART_SetConfig+0x314>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d131      	bne.n	8008bc4 <UART_SetConfig+0xf8>
 8008b60:	4ba0      	ldr	r3, [pc, #640]	@ (8008de4 <UART_SetConfig+0x318>)
 8008b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b64:	220c      	movs	r2, #12
 8008b66:	4013      	ands	r3, r2
 8008b68:	2b0c      	cmp	r3, #12
 8008b6a:	d01d      	beq.n	8008ba8 <UART_SetConfig+0xdc>
 8008b6c:	d823      	bhi.n	8008bb6 <UART_SetConfig+0xea>
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d00c      	beq.n	8008b8c <UART_SetConfig+0xc0>
 8008b72:	d820      	bhi.n	8008bb6 <UART_SetConfig+0xea>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <UART_SetConfig+0xb2>
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d00e      	beq.n	8008b9a <UART_SetConfig+0xce>
 8008b7c:	e01b      	b.n	8008bb6 <UART_SetConfig+0xea>
 8008b7e:	231b      	movs	r3, #27
 8008b80:	2218      	movs	r2, #24
 8008b82:	189b      	adds	r3, r3, r2
 8008b84:	19db      	adds	r3, r3, r7
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	e065      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008b8c:	231b      	movs	r3, #27
 8008b8e:	2218      	movs	r2, #24
 8008b90:	189b      	adds	r3, r3, r2
 8008b92:	19db      	adds	r3, r3, r7
 8008b94:	2202      	movs	r2, #2
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	e05e      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008b9a:	231b      	movs	r3, #27
 8008b9c:	2218      	movs	r2, #24
 8008b9e:	189b      	adds	r3, r3, r2
 8008ba0:	19db      	adds	r3, r3, r7
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	e057      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008ba8:	231b      	movs	r3, #27
 8008baa:	2218      	movs	r2, #24
 8008bac:	189b      	adds	r3, r3, r2
 8008bae:	19db      	adds	r3, r3, r7
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e050      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008bb6:	231b      	movs	r3, #27
 8008bb8:	2218      	movs	r2, #24
 8008bba:	189b      	adds	r3, r3, r2
 8008bbc:	19db      	adds	r3, r3, r7
 8008bbe:	2210      	movs	r2, #16
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e049      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a83      	ldr	r2, [pc, #524]	@ (8008dd8 <UART_SetConfig+0x30c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d13e      	bne.n	8008c4c <UART_SetConfig+0x180>
 8008bce:	4b85      	ldr	r3, [pc, #532]	@ (8008de4 <UART_SetConfig+0x318>)
 8008bd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bd2:	23c0      	movs	r3, #192	@ 0xc0
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	22c0      	movs	r2, #192	@ 0xc0
 8008bda:	0112      	lsls	r2, r2, #4
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d027      	beq.n	8008c30 <UART_SetConfig+0x164>
 8008be0:	22c0      	movs	r2, #192	@ 0xc0
 8008be2:	0112      	lsls	r2, r2, #4
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d82a      	bhi.n	8008c3e <UART_SetConfig+0x172>
 8008be8:	2280      	movs	r2, #128	@ 0x80
 8008bea:	0112      	lsls	r2, r2, #4
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d011      	beq.n	8008c14 <UART_SetConfig+0x148>
 8008bf0:	2280      	movs	r2, #128	@ 0x80
 8008bf2:	0112      	lsls	r2, r2, #4
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d822      	bhi.n	8008c3e <UART_SetConfig+0x172>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <UART_SetConfig+0x13a>
 8008bfc:	2280      	movs	r2, #128	@ 0x80
 8008bfe:	00d2      	lsls	r2, r2, #3
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00e      	beq.n	8008c22 <UART_SetConfig+0x156>
 8008c04:	e01b      	b.n	8008c3e <UART_SetConfig+0x172>
 8008c06:	231b      	movs	r3, #27
 8008c08:	2218      	movs	r2, #24
 8008c0a:	189b      	adds	r3, r3, r2
 8008c0c:	19db      	adds	r3, r3, r7
 8008c0e:	2200      	movs	r2, #0
 8008c10:	701a      	strb	r2, [r3, #0]
 8008c12:	e021      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008c14:	231b      	movs	r3, #27
 8008c16:	2218      	movs	r2, #24
 8008c18:	189b      	adds	r3, r3, r2
 8008c1a:	19db      	adds	r3, r3, r7
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	e01a      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008c22:	231b      	movs	r3, #27
 8008c24:	2218      	movs	r2, #24
 8008c26:	189b      	adds	r3, r3, r2
 8008c28:	19db      	adds	r3, r3, r7
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	e013      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008c30:	231b      	movs	r3, #27
 8008c32:	2218      	movs	r2, #24
 8008c34:	189b      	adds	r3, r3, r2
 8008c36:	19db      	adds	r3, r3, r7
 8008c38:	2208      	movs	r2, #8
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e00c      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008c3e:	231b      	movs	r3, #27
 8008c40:	2218      	movs	r2, #24
 8008c42:	189b      	adds	r3, r3, r2
 8008c44:	19db      	adds	r3, r3, r7
 8008c46:	2210      	movs	r2, #16
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e005      	b.n	8008c58 <UART_SetConfig+0x18c>
 8008c4c:	231b      	movs	r3, #27
 8008c4e:	2218      	movs	r2, #24
 8008c50:	189b      	adds	r3, r3, r2
 8008c52:	19db      	adds	r3, r3, r7
 8008c54:	2210      	movs	r2, #16
 8008c56:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8008dd8 <UART_SetConfig+0x30c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d000      	beq.n	8008c64 <UART_SetConfig+0x198>
 8008c62:	e084      	b.n	8008d6e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c64:	231b      	movs	r3, #27
 8008c66:	2218      	movs	r2, #24
 8008c68:	189b      	adds	r3, r3, r2
 8008c6a:	19db      	adds	r3, r3, r7
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	d01d      	beq.n	8008cae <UART_SetConfig+0x1e2>
 8008c72:	dc20      	bgt.n	8008cb6 <UART_SetConfig+0x1ea>
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d015      	beq.n	8008ca4 <UART_SetConfig+0x1d8>
 8008c78:	dc1d      	bgt.n	8008cb6 <UART_SetConfig+0x1ea>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <UART_SetConfig+0x1b8>
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d005      	beq.n	8008c8e <UART_SetConfig+0x1c2>
 8008c82:	e018      	b.n	8008cb6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c84:	f7fe fdc2 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 8008c88:	0003      	movs	r3, r0
 8008c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008c8c:	e01c      	b.n	8008cc8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c8e:	4b55      	ldr	r3, [pc, #340]	@ (8008de4 <UART_SetConfig+0x318>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2210      	movs	r2, #16
 8008c94:	4013      	ands	r3, r2
 8008c96:	d002      	beq.n	8008c9e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008c98:	4b53      	ldr	r3, [pc, #332]	@ (8008de8 <UART_SetConfig+0x31c>)
 8008c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c9c:	e014      	b.n	8008cc8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8008c9e:	4b53      	ldr	r3, [pc, #332]	@ (8008dec <UART_SetConfig+0x320>)
 8008ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ca2:	e011      	b.n	8008cc8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ca4:	f7fe fd02 	bl	80076ac <HAL_RCC_GetSysClockFreq>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008cac:	e00c      	b.n	8008cc8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cae:	2380      	movs	r3, #128	@ 0x80
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008cb4:	e008      	b.n	8008cc8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008cba:	231a      	movs	r3, #26
 8008cbc:	2218      	movs	r2, #24
 8008cbe:	189b      	adds	r3, r3, r2
 8008cc0:	19db      	adds	r3, r3, r7
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	701a      	strb	r2, [r3, #0]
        break;
 8008cc6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d100      	bne.n	8008cd0 <UART_SetConfig+0x204>
 8008cce:	e12f      	b.n	8008f30 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	0013      	movs	r3, r2
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	189b      	adds	r3, r3, r2
 8008cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d305      	bcc.n	8008cec <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d906      	bls.n	8008cfa <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8008cec:	231a      	movs	r3, #26
 8008cee:	2218      	movs	r2, #24
 8008cf0:	189b      	adds	r3, r3, r2
 8008cf2:	19db      	adds	r3, r3, r7
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	e11a      	b.n	8008f30 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	6939      	ldr	r1, [r7, #16]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	000b      	movs	r3, r1
 8008d08:	0e1b      	lsrs	r3, r3, #24
 8008d0a:	0010      	movs	r0, r2
 8008d0c:	0205      	lsls	r5, r0, #8
 8008d0e:	431d      	orrs	r5, r3
 8008d10:	000b      	movs	r3, r1
 8008d12:	021c      	lsls	r4, r3, #8
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	60bb      	str	r3, [r7, #8]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68b8      	ldr	r0, [r7, #8]
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	1900      	adds	r0, r0, r4
 8008d26:	4169      	adcs	r1, r5
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	607b      	str	r3, [r7, #4]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f7f7 fbb7 	bl	80004a8 <__aeabi_uldivmod>
 8008d3a:	0002      	movs	r2, r0
 8008d3c:	000b      	movs	r3, r1
 8008d3e:	0013      	movs	r3, r2
 8008d40:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d44:	23c0      	movs	r3, #192	@ 0xc0
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d309      	bcc.n	8008d60 <UART_SetConfig+0x294>
 8008d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d4e:	2380      	movs	r3, #128	@ 0x80
 8008d50:	035b      	lsls	r3, r3, #13
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d204      	bcs.n	8008d60 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	e0e7      	b.n	8008f30 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8008d60:	231a      	movs	r3, #26
 8008d62:	2218      	movs	r2, #24
 8008d64:	189b      	adds	r3, r3, r2
 8008d66:	19db      	adds	r3, r3, r7
 8008d68:	2201      	movs	r2, #1
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	e0e0      	b.n	8008f30 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	69da      	ldr	r2, [r3, #28]
 8008d72:	2380      	movs	r3, #128	@ 0x80
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d000      	beq.n	8008d7c <UART_SetConfig+0x2b0>
 8008d7a:	e082      	b.n	8008e82 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8008d7c:	231b      	movs	r3, #27
 8008d7e:	2218      	movs	r2, #24
 8008d80:	189b      	adds	r3, r3, r2
 8008d82:	19db      	adds	r3, r3, r7
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d834      	bhi.n	8008df4 <UART_SetConfig+0x328>
 8008d8a:	009a      	lsls	r2, r3, #2
 8008d8c:	4b18      	ldr	r3, [pc, #96]	@ (8008df0 <UART_SetConfig+0x324>)
 8008d8e:	18d3      	adds	r3, r2, r3
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d94:	f7fe fd3a 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 8008d98:	0003      	movs	r3, r0
 8008d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008d9c:	e033      	b.n	8008e06 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d9e:	f7fe fd4b 	bl	8007838 <HAL_RCC_GetPCLK2Freq>
 8008da2:	0003      	movs	r3, r0
 8008da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008da6:	e02e      	b.n	8008e06 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008da8:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <UART_SetConfig+0x318>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2210      	movs	r2, #16
 8008dae:	4013      	ands	r3, r2
 8008db0:	d002      	beq.n	8008db8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008db2:	4b0d      	ldr	r3, [pc, #52]	@ (8008de8 <UART_SetConfig+0x31c>)
 8008db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008db6:	e026      	b.n	8008e06 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8008db8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dec <UART_SetConfig+0x320>)
 8008dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008dbc:	e023      	b.n	8008e06 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dbe:	f7fe fc75 	bl	80076ac <HAL_RCC_GetSysClockFreq>
 8008dc2:	0003      	movs	r3, r0
 8008dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008dc6:	e01e      	b.n	8008e06 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	021b      	lsls	r3, r3, #8
 8008dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008dce:	e01a      	b.n	8008e06 <UART_SetConfig+0x33a>
 8008dd0:	efff69f3 	.word	0xefff69f3
 8008dd4:	ffffcfff 	.word	0xffffcfff
 8008dd8:	40004800 	.word	0x40004800
 8008ddc:	fffff4ff 	.word	0xfffff4ff
 8008de0:	40004400 	.word	0x40004400
 8008de4:	40021000 	.word	0x40021000
 8008de8:	003d0900 	.word	0x003d0900
 8008dec:	00f42400 	.word	0x00f42400
 8008df0:	0800c674 	.word	0x0800c674
      default:
        pclk = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008df8:	231a      	movs	r3, #26
 8008dfa:	2218      	movs	r2, #24
 8008dfc:	189b      	adds	r3, r3, r2
 8008dfe:	19db      	adds	r3, r3, r7
 8008e00:	2201      	movs	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
        break;
 8008e04:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d100      	bne.n	8008e0e <UART_SetConfig+0x342>
 8008e0c:	e090      	b.n	8008f30 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e10:	005a      	lsls	r2, r3, #1
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	18d2      	adds	r2, r2, r3
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	0019      	movs	r1, r3
 8008e20:	0010      	movs	r0, r2
 8008e22:	f7f7 f98d 	bl	8000140 <__udivsi3>
 8008e26:	0003      	movs	r3, r0
 8008e28:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	2b0f      	cmp	r3, #15
 8008e2e:	d921      	bls.n	8008e74 <UART_SetConfig+0x3a8>
 8008e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e32:	2380      	movs	r3, #128	@ 0x80
 8008e34:	025b      	lsls	r3, r3, #9
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d21c      	bcs.n	8008e74 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	200e      	movs	r0, #14
 8008e40:	2418      	movs	r4, #24
 8008e42:	1903      	adds	r3, r0, r4
 8008e44:	19db      	adds	r3, r3, r7
 8008e46:	210f      	movs	r1, #15
 8008e48:	438a      	bics	r2, r1
 8008e4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4e:	085b      	lsrs	r3, r3, #1
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2207      	movs	r2, #7
 8008e54:	4013      	ands	r3, r2
 8008e56:	b299      	uxth	r1, r3
 8008e58:	1903      	adds	r3, r0, r4
 8008e5a:	19db      	adds	r3, r3, r7
 8008e5c:	1902      	adds	r2, r0, r4
 8008e5e:	19d2      	adds	r2, r2, r7
 8008e60:	8812      	ldrh	r2, [r2, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	1902      	adds	r2, r0, r4
 8008e6c:	19d2      	adds	r2, r2, r7
 8008e6e:	8812      	ldrh	r2, [r2, #0]
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e05d      	b.n	8008f30 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8008e74:	231a      	movs	r3, #26
 8008e76:	2218      	movs	r2, #24
 8008e78:	189b      	adds	r3, r3, r2
 8008e7a:	19db      	adds	r3, r3, r7
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e056      	b.n	8008f30 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e82:	231b      	movs	r3, #27
 8008e84:	2218      	movs	r2, #24
 8008e86:	189b      	adds	r3, r3, r2
 8008e88:	19db      	adds	r3, r3, r7
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d822      	bhi.n	8008ed6 <UART_SetConfig+0x40a>
 8008e90:	009a      	lsls	r2, r3, #2
 8008e92:	4b2f      	ldr	r3, [pc, #188]	@ (8008f50 <UART_SetConfig+0x484>)
 8008e94:	18d3      	adds	r3, r2, r3
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e9a:	f7fe fcb7 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ea2:	e021      	b.n	8008ee8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ea4:	f7fe fcc8 	bl	8007838 <HAL_RCC_GetPCLK2Freq>
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008eac:	e01c      	b.n	8008ee8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eae:	4b29      	ldr	r3, [pc, #164]	@ (8008f54 <UART_SetConfig+0x488>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d002      	beq.n	8008ebe <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008eb8:	4b27      	ldr	r3, [pc, #156]	@ (8008f58 <UART_SetConfig+0x48c>)
 8008eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ebc:	e014      	b.n	8008ee8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8008ebe:	4b27      	ldr	r3, [pc, #156]	@ (8008f5c <UART_SetConfig+0x490>)
 8008ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ec2:	e011      	b.n	8008ee8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ec4:	f7fe fbf2 	bl	80076ac <HAL_RCC_GetSysClockFreq>
 8008ec8:	0003      	movs	r3, r0
 8008eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ecc:	e00c      	b.n	8008ee8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ece:	2380      	movs	r3, #128	@ 0x80
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ed4:	e008      	b.n	8008ee8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008eda:	231a      	movs	r3, #26
 8008edc:	2218      	movs	r2, #24
 8008ede:	189b      	adds	r3, r3, r2
 8008ee0:	19db      	adds	r3, r3, r7
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	701a      	strb	r2, [r3, #0]
        break;
 8008ee6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d020      	beq.n	8008f30 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	085a      	lsrs	r2, r3, #1
 8008ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef6:	18d2      	adds	r2, r2, r3
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	0019      	movs	r1, r3
 8008efe:	0010      	movs	r0, r2
 8008f00:	f7f7 f91e 	bl	8000140 <__udivsi3>
 8008f04:	0003      	movs	r3, r0
 8008f06:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	2b0f      	cmp	r3, #15
 8008f0c:	d90a      	bls.n	8008f24 <UART_SetConfig+0x458>
 8008f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	025b      	lsls	r3, r3, #9
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d205      	bcs.n	8008f24 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	e005      	b.n	8008f30 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8008f24:	231a      	movs	r3, #26
 8008f26:	2218      	movs	r2, #24
 8008f28:	189b      	adds	r3, r3, r2
 8008f2a:	19db      	adds	r3, r3, r7
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	2200      	movs	r2, #0
 8008f34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f3c:	231a      	movs	r3, #26
 8008f3e:	2218      	movs	r2, #24
 8008f40:	189b      	adds	r3, r3, r2
 8008f42:	19db      	adds	r3, r3, r7
 8008f44:	781b      	ldrb	r3, [r3, #0]
}
 8008f46:	0018      	movs	r0, r3
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	b00e      	add	sp, #56	@ 0x38
 8008f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f4e:	46c0      	nop			@ (mov r8, r8)
 8008f50:	0800c698 	.word	0x0800c698
 8008f54:	40021000 	.word	0x40021000
 8008f58:	003d0900 	.word	0x003d0900
 8008f5c:	00f42400 	.word	0x00f42400

08008f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	4013      	ands	r3, r2
 8008f70:	d00b      	beq.n	8008f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4a4a      	ldr	r2, [pc, #296]	@ (80090a4 <UART_AdvFeatureConfig+0x144>)
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	0019      	movs	r1, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8e:	2202      	movs	r2, #2
 8008f90:	4013      	ands	r3, r2
 8008f92:	d00b      	beq.n	8008fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	4a43      	ldr	r2, [pc, #268]	@ (80090a8 <UART_AdvFeatureConfig+0x148>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	0019      	movs	r1, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d00b      	beq.n	8008fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80090ac <UART_AdvFeatureConfig+0x14c>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	0019      	movs	r1, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	d00b      	beq.n	8008ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	4a34      	ldr	r2, [pc, #208]	@ (80090b0 <UART_AdvFeatureConfig+0x150>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	2210      	movs	r2, #16
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	d00b      	beq.n	8009012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	4a2c      	ldr	r2, [pc, #176]	@ (80090b4 <UART_AdvFeatureConfig+0x154>)
 8009002:	4013      	ands	r3, r2
 8009004:	0019      	movs	r1, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	2220      	movs	r2, #32
 8009018:	4013      	ands	r3, r2
 800901a:	d00b      	beq.n	8009034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	4a25      	ldr	r2, [pc, #148]	@ (80090b8 <UART_AdvFeatureConfig+0x158>)
 8009024:	4013      	ands	r3, r2
 8009026:	0019      	movs	r1, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009038:	2240      	movs	r2, #64	@ 0x40
 800903a:	4013      	ands	r3, r2
 800903c:	d01d      	beq.n	800907a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4a1d      	ldr	r2, [pc, #116]	@ (80090bc <UART_AdvFeatureConfig+0x15c>)
 8009046:	4013      	ands	r3, r2
 8009048:	0019      	movs	r1, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800905a:	2380      	movs	r3, #128	@ 0x80
 800905c:	035b      	lsls	r3, r3, #13
 800905e:	429a      	cmp	r2, r3
 8009060:	d10b      	bne.n	800907a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	4a15      	ldr	r2, [pc, #84]	@ (80090c0 <UART_AdvFeatureConfig+0x160>)
 800906a:	4013      	ands	r3, r2
 800906c:	0019      	movs	r1, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907e:	2280      	movs	r2, #128	@ 0x80
 8009080:	4013      	ands	r3, r2
 8009082:	d00b      	beq.n	800909c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	4a0e      	ldr	r2, [pc, #56]	@ (80090c4 <UART_AdvFeatureConfig+0x164>)
 800908c:	4013      	ands	r3, r2
 800908e:	0019      	movs	r1, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  }
}
 800909c:	46c0      	nop			@ (mov r8, r8)
 800909e:	46bd      	mov	sp, r7
 80090a0:	b002      	add	sp, #8
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	fffdffff 	.word	0xfffdffff
 80090a8:	fffeffff 	.word	0xfffeffff
 80090ac:	fffbffff 	.word	0xfffbffff
 80090b0:	ffff7fff 	.word	0xffff7fff
 80090b4:	ffffefff 	.word	0xffffefff
 80090b8:	ffffdfff 	.word	0xffffdfff
 80090bc:	ffefffff 	.word	0xffefffff
 80090c0:	ff9fffff 	.word	0xff9fffff
 80090c4:	fff7ffff 	.word	0xfff7ffff

080090c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b092      	sub	sp, #72	@ 0x48
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2284      	movs	r2, #132	@ 0x84
 80090d4:	2100      	movs	r1, #0
 80090d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090d8:	f7fc f87c 	bl	80051d4 <HAL_GetTick>
 80090dc:	0003      	movs	r3, r0
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2208      	movs	r2, #8
 80090e8:	4013      	ands	r3, r2
 80090ea:	2b08      	cmp	r3, #8
 80090ec:	d12c      	bne.n	8009148 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f0:	2280      	movs	r2, #128	@ 0x80
 80090f2:	0391      	lsls	r1, r2, #14
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	4a46      	ldr	r2, [pc, #280]	@ (8009210 <UART_CheckIdleState+0x148>)
 80090f8:	9200      	str	r2, [sp, #0]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f000 f88c 	bl	8009218 <UART_WaitOnFlagUntilTimeout>
 8009100:	1e03      	subs	r3, r0, #0
 8009102:	d021      	beq.n	8009148 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009104:	f3ef 8310 	mrs	r3, PRIMASK
 8009108:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800910c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800910e:	2301      	movs	r3, #1
 8009110:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	f383 8810 	msr	PRIMASK, r3
}
 8009118:	46c0      	nop			@ (mov r8, r8)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2180      	movs	r1, #128	@ 0x80
 8009126:	438a      	bics	r2, r1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009130:	f383 8810 	msr	PRIMASK, r3
}
 8009134:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2278      	movs	r2, #120	@ 0x78
 8009140:	2100      	movs	r1, #0
 8009142:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e05f      	b.n	8009208 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2204      	movs	r2, #4
 8009150:	4013      	ands	r3, r2
 8009152:	2b04      	cmp	r3, #4
 8009154:	d146      	bne.n	80091e4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009158:	2280      	movs	r2, #128	@ 0x80
 800915a:	03d1      	lsls	r1, r2, #15
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4a2c      	ldr	r2, [pc, #176]	@ (8009210 <UART_CheckIdleState+0x148>)
 8009160:	9200      	str	r2, [sp, #0]
 8009162:	2200      	movs	r2, #0
 8009164:	f000 f858 	bl	8009218 <UART_WaitOnFlagUntilTimeout>
 8009168:	1e03      	subs	r3, r0, #0
 800916a:	d03b      	beq.n	80091e4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800916c:	f3ef 8310 	mrs	r3, PRIMASK
 8009170:	60fb      	str	r3, [r7, #12]
  return(result);
 8009172:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009174:	637b      	str	r3, [r7, #52]	@ 0x34
 8009176:	2301      	movs	r3, #1
 8009178:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f383 8810 	msr	PRIMASK, r3
}
 8009180:	46c0      	nop			@ (mov r8, r8)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4921      	ldr	r1, [pc, #132]	@ (8009214 <UART_CheckIdleState+0x14c>)
 800918e:	400a      	ands	r2, r1
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f383 8810 	msr	PRIMASK, r3
}
 800919c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800919e:	f3ef 8310 	mrs	r3, PRIMASK
 80091a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80091a4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80091a8:	2301      	movs	r3, #1
 80091aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f383 8810 	msr	PRIMASK, r3
}
 80091b2:	46c0      	nop			@ (mov r8, r8)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2101      	movs	r1, #1
 80091c0:	438a      	bics	r2, r1
 80091c2:	609a      	str	r2, [r3, #8]
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	f383 8810 	msr	PRIMASK, r3
}
 80091ce:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2280      	movs	r2, #128	@ 0x80
 80091d4:	2120      	movs	r1, #32
 80091d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2278      	movs	r2, #120	@ 0x78
 80091dc:	2100      	movs	r1, #0
 80091de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e011      	b.n	8009208 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2220      	movs	r2, #32
 80091e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2280      	movs	r2, #128	@ 0x80
 80091ee:	2120      	movs	r1, #32
 80091f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2278      	movs	r2, #120	@ 0x78
 8009202:	2100      	movs	r1, #0
 8009204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	0018      	movs	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	b010      	add	sp, #64	@ 0x40
 800920e:	bd80      	pop	{r7, pc}
 8009210:	01ffffff 	.word	0x01ffffff
 8009214:	fffffedf 	.word	0xfffffedf

08009218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	1dfb      	adds	r3, r7, #7
 8009226:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009228:	e04b      	b.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	3301      	adds	r3, #1
 800922e:	d048      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009230:	f7fb ffd0 	bl	80051d4 <HAL_GetTick>
 8009234:	0002      	movs	r2, r0
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	429a      	cmp	r2, r3
 800923e:	d302      	bcc.n	8009246 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e04b      	b.n	80092e2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2204      	movs	r2, #4
 8009252:	4013      	ands	r3, r2
 8009254:	d035      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	2208      	movs	r2, #8
 800925e:	4013      	ands	r3, r2
 8009260:	2b08      	cmp	r3, #8
 8009262:	d111      	bne.n	8009288 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2208      	movs	r2, #8
 800926a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	0018      	movs	r0, r3
 8009270:	f000 f906 	bl	8009480 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2284      	movs	r2, #132	@ 0x84
 8009278:	2108      	movs	r1, #8
 800927a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2278      	movs	r2, #120	@ 0x78
 8009280:	2100      	movs	r1, #0
 8009282:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e02c      	b.n	80092e2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	69da      	ldr	r2, [r3, #28]
 800928e:	2380      	movs	r3, #128	@ 0x80
 8009290:	011b      	lsls	r3, r3, #4
 8009292:	401a      	ands	r2, r3
 8009294:	2380      	movs	r3, #128	@ 0x80
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	429a      	cmp	r2, r3
 800929a:	d112      	bne.n	80092c2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2280      	movs	r2, #128	@ 0x80
 80092a2:	0112      	lsls	r2, r2, #4
 80092a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	0018      	movs	r0, r3
 80092aa:	f000 f8e9 	bl	8009480 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2284      	movs	r2, #132	@ 0x84
 80092b2:	2120      	movs	r1, #32
 80092b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2278      	movs	r2, #120	@ 0x78
 80092ba:	2100      	movs	r1, #0
 80092bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e00f      	b.n	80092e2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	4013      	ands	r3, r2
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	425a      	negs	r2, r3
 80092d2:	4153      	adcs	r3, r2
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	001a      	movs	r2, r3
 80092d8:	1dfb      	adds	r3, r7, #7
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d0a4      	beq.n	800922a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	0018      	movs	r0, r3
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b004      	add	sp, #16
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b090      	sub	sp, #64	@ 0x40
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	1dbb      	adds	r3, r7, #6
 80092f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	1dba      	adds	r2, r7, #6
 8009304:	2158      	movs	r1, #88	@ 0x58
 8009306:	8812      	ldrh	r2, [r2, #0]
 8009308:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	1dba      	adds	r2, r7, #6
 800930e:	215a      	movs	r1, #90	@ 0x5a
 8009310:	8812      	ldrh	r2, [r2, #0]
 8009312:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	2380      	movs	r3, #128	@ 0x80
 8009320:	015b      	lsls	r3, r3, #5
 8009322:	429a      	cmp	r2, r3
 8009324:	d10d      	bne.n	8009342 <UART_Start_Receive_IT+0x56>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d104      	bne.n	8009338 <UART_Start_Receive_IT+0x4c>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	225c      	movs	r2, #92	@ 0x5c
 8009332:	4950      	ldr	r1, [pc, #320]	@ (8009474 <UART_Start_Receive_IT+0x188>)
 8009334:	5299      	strh	r1, [r3, r2]
 8009336:	e02e      	b.n	8009396 <UART_Start_Receive_IT+0xaa>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	225c      	movs	r2, #92	@ 0x5c
 800933c:	21ff      	movs	r1, #255	@ 0xff
 800933e:	5299      	strh	r1, [r3, r2]
 8009340:	e029      	b.n	8009396 <UART_Start_Receive_IT+0xaa>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10d      	bne.n	8009366 <UART_Start_Receive_IT+0x7a>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d104      	bne.n	800935c <UART_Start_Receive_IT+0x70>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	225c      	movs	r2, #92	@ 0x5c
 8009356:	21ff      	movs	r1, #255	@ 0xff
 8009358:	5299      	strh	r1, [r3, r2]
 800935a:	e01c      	b.n	8009396 <UART_Start_Receive_IT+0xaa>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	225c      	movs	r2, #92	@ 0x5c
 8009360:	217f      	movs	r1, #127	@ 0x7f
 8009362:	5299      	strh	r1, [r3, r2]
 8009364:	e017      	b.n	8009396 <UART_Start_Receive_IT+0xaa>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	2380      	movs	r3, #128	@ 0x80
 800936c:	055b      	lsls	r3, r3, #21
 800936e:	429a      	cmp	r2, r3
 8009370:	d10d      	bne.n	800938e <UART_Start_Receive_IT+0xa2>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d104      	bne.n	8009384 <UART_Start_Receive_IT+0x98>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	225c      	movs	r2, #92	@ 0x5c
 800937e:	217f      	movs	r1, #127	@ 0x7f
 8009380:	5299      	strh	r1, [r3, r2]
 8009382:	e008      	b.n	8009396 <UART_Start_Receive_IT+0xaa>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	225c      	movs	r2, #92	@ 0x5c
 8009388:	213f      	movs	r1, #63	@ 0x3f
 800938a:	5299      	strh	r1, [r3, r2]
 800938c:	e003      	b.n	8009396 <UART_Start_Receive_IT+0xaa>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	225c      	movs	r2, #92	@ 0x5c
 8009392:	2100      	movs	r1, #0
 8009394:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2284      	movs	r2, #132	@ 0x84
 800939a:	2100      	movs	r1, #0
 800939c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2280      	movs	r2, #128	@ 0x80
 80093a2:	2122      	movs	r1, #34	@ 0x22
 80093a4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093a6:	f3ef 8310 	mrs	r3, PRIMASK
 80093aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093b0:	2301      	movs	r3, #1
 80093b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b6:	f383 8810 	msr	PRIMASK, r3
}
 80093ba:	46c0      	nop			@ (mov r8, r8)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2101      	movs	r1, #1
 80093c8:	430a      	orrs	r2, r1
 80093ca:	609a      	str	r2, [r3, #8]
 80093cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	f383 8810 	msr	PRIMASK, r3
}
 80093d6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	2380      	movs	r3, #128	@ 0x80
 80093de:	015b      	lsls	r3, r3, #5
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d107      	bne.n	80093f4 <UART_Start_Receive_IT+0x108>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d103      	bne.n	80093f4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4a22      	ldr	r2, [pc, #136]	@ (8009478 <UART_Start_Receive_IT+0x18c>)
 80093f0:	669a      	str	r2, [r3, #104]	@ 0x68
 80093f2:	e002      	b.n	80093fa <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4a21      	ldr	r2, [pc, #132]	@ (800947c <UART_Start_Receive_IT+0x190>)
 80093f8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d019      	beq.n	8009436 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009402:	f3ef 8310 	mrs	r3, PRIMASK
 8009406:	61fb      	str	r3, [r7, #28]
  return(result);
 8009408:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800940a:	637b      	str	r3, [r7, #52]	@ 0x34
 800940c:	2301      	movs	r3, #1
 800940e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	f383 8810 	msr	PRIMASK, r3
}
 8009416:	46c0      	nop			@ (mov r8, r8)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2190      	movs	r1, #144	@ 0x90
 8009424:	0049      	lsls	r1, r1, #1
 8009426:	430a      	orrs	r2, r1
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800942c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	f383 8810 	msr	PRIMASK, r3
}
 8009434:	e018      	b.n	8009468 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009436:	f3ef 8310 	mrs	r3, PRIMASK
 800943a:	613b      	str	r3, [r7, #16]
  return(result);
 800943c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800943e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009440:	2301      	movs	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f383 8810 	msr	PRIMASK, r3
}
 800944a:	46c0      	nop			@ (mov r8, r8)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2120      	movs	r1, #32
 8009458:	430a      	orrs	r2, r1
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f383 8810 	msr	PRIMASK, r3
}
 8009466:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	0018      	movs	r0, r3
 800946c:	46bd      	mov	sp, r7
 800946e:	b010      	add	sp, #64	@ 0x40
 8009470:	bd80      	pop	{r7, pc}
 8009472:	46c0      	nop			@ (mov r8, r8)
 8009474:	000001ff 	.word	0x000001ff
 8009478:	08009791 	.word	0x08009791
 800947c:	080095cd 	.word	0x080095cd

08009480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08e      	sub	sp, #56	@ 0x38
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009488:	f3ef 8310 	mrs	r3, PRIMASK
 800948c:	617b      	str	r3, [r7, #20]
  return(result);
 800948e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009490:	637b      	str	r3, [r7, #52]	@ 0x34
 8009492:	2301      	movs	r3, #1
 8009494:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	f383 8810 	msr	PRIMASK, r3
}
 800949c:	46c0      	nop			@ (mov r8, r8)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4926      	ldr	r1, [pc, #152]	@ (8009544 <UART_EndRxTransfer+0xc4>)
 80094aa:	400a      	ands	r2, r1
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	f383 8810 	msr	PRIMASK, r3
}
 80094b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ba:	f3ef 8310 	mrs	r3, PRIMASK
 80094be:	623b      	str	r3, [r7, #32]
  return(result);
 80094c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c4:	2301      	movs	r3, #1
 80094c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	f383 8810 	msr	PRIMASK, r3
}
 80094ce:	46c0      	nop			@ (mov r8, r8)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2101      	movs	r1, #1
 80094dc:	438a      	bics	r2, r1
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	f383 8810 	msr	PRIMASK, r3
}
 80094ea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d118      	bne.n	8009526 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094f4:	f3ef 8310 	mrs	r3, PRIMASK
 80094f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80094fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094fe:	2301      	movs	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f383 8810 	msr	PRIMASK, r3
}
 8009508:	46c0      	nop			@ (mov r8, r8)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2110      	movs	r1, #16
 8009516:	438a      	bics	r2, r1
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f383 8810 	msr	PRIMASK, r3
}
 8009524:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2280      	movs	r2, #128	@ 0x80
 800952a:	2120      	movs	r1, #32
 800952c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800953a:	46c0      	nop			@ (mov r8, r8)
 800953c:	46bd      	mov	sp, r7
 800953e:	b00e      	add	sp, #56	@ 0x38
 8009540:	bd80      	pop	{r7, pc}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	fffffedf 	.word	0xfffffedf

08009548 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	225a      	movs	r2, #90	@ 0x5a
 800955a:	2100      	movs	r1, #0
 800955c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2252      	movs	r2, #82	@ 0x52
 8009562:	2100      	movs	r1, #0
 8009564:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	0018      	movs	r0, r3
 800956a:	f7fb fae5 	bl	8004b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800956e:	46c0      	nop			@ (mov r8, r8)
 8009570:	46bd      	mov	sp, r7
 8009572:	b004      	add	sp, #16
 8009574:	bd80      	pop	{r7, pc}

08009576 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b086      	sub	sp, #24
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800957e:	f3ef 8310 	mrs	r3, PRIMASK
 8009582:	60bb      	str	r3, [r7, #8]
  return(result);
 8009584:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	2301      	movs	r3, #1
 800958a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f383 8810 	msr	PRIMASK, r3
}
 8009592:	46c0      	nop			@ (mov r8, r8)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2140      	movs	r1, #64	@ 0x40
 80095a0:	438a      	bics	r2, r1
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f383 8810 	msr	PRIMASK, r3
}
 80095ae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	0018      	movs	r0, r3
 80095c0:	f7ff fa74 	bl	8008aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c4:	46c0      	nop			@ (mov r8, r8)
 80095c6:	46bd      	mov	sp, r7
 80095c8:	b006      	add	sp, #24
 80095ca:	bd80      	pop	{r7, pc}

080095cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b094      	sub	sp, #80	@ 0x50
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095d4:	204e      	movs	r0, #78	@ 0x4e
 80095d6:	183b      	adds	r3, r7, r0
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	215c      	movs	r1, #92	@ 0x5c
 80095dc:	5a52      	ldrh	r2, [r2, r1]
 80095de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2280      	movs	r2, #128	@ 0x80
 80095e4:	589b      	ldr	r3, [r3, r2]
 80095e6:	2b22      	cmp	r3, #34	@ 0x22
 80095e8:	d000      	beq.n	80095ec <UART_RxISR_8BIT+0x20>
 80095ea:	e0bf      	b.n	800976c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095f2:	214c      	movs	r1, #76	@ 0x4c
 80095f4:	187b      	adds	r3, r7, r1
 80095f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095f8:	187b      	adds	r3, r7, r1
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	183b      	adds	r3, r7, r0
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	b2d9      	uxtb	r1, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009608:	400a      	ands	r2, r1
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	225a      	movs	r2, #90	@ 0x5a
 800961c:	5a9b      	ldrh	r3, [r3, r2]
 800961e:	b29b      	uxth	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	b299      	uxth	r1, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	225a      	movs	r2, #90	@ 0x5a
 8009628:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	225a      	movs	r2, #90	@ 0x5a
 800962e:	5a9b      	ldrh	r3, [r3, r2]
 8009630:	b29b      	uxth	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d000      	beq.n	8009638 <UART_RxISR_8BIT+0x6c>
 8009636:	e0a1      	b.n	800977c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009638:	f3ef 8310 	mrs	r3, PRIMASK
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009642:	2301      	movs	r3, #1
 8009644:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	f383 8810 	msr	PRIMASK, r3
}
 800964c:	46c0      	nop			@ (mov r8, r8)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	494a      	ldr	r1, [pc, #296]	@ (8009784 <UART_RxISR_8BIT+0x1b8>)
 800965a:	400a      	ands	r2, r1
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009664:	f383 8810 	msr	PRIMASK, r3
}
 8009668:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800966a:	f3ef 8310 	mrs	r3, PRIMASK
 800966e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009672:	647b      	str	r3, [r7, #68]	@ 0x44
 8009674:	2301      	movs	r3, #1
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967a:	f383 8810 	msr	PRIMASK, r3
}
 800967e:	46c0      	nop			@ (mov r8, r8)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689a      	ldr	r2, [r3, #8]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2101      	movs	r1, #1
 800968c:	438a      	bics	r2, r1
 800968e:	609a      	str	r2, [r3, #8]
 8009690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009692:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009696:	f383 8810 	msr	PRIMASK, r3
}
 800969a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2280      	movs	r2, #128	@ 0x80
 80096a0:	2120      	movs	r1, #32
 80096a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a34      	ldr	r2, [pc, #208]	@ (8009788 <UART_RxISR_8BIT+0x1bc>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d01f      	beq.n	80096fa <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	2380      	movs	r3, #128	@ 0x80
 80096c2:	041b      	lsls	r3, r3, #16
 80096c4:	4013      	ands	r3, r2
 80096c6:	d018      	beq.n	80096fa <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096c8:	f3ef 8310 	mrs	r3, PRIMASK
 80096cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80096ce:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80096d2:	2301      	movs	r3, #1
 80096d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f383 8810 	msr	PRIMASK, r3
}
 80096dc:	46c0      	nop			@ (mov r8, r8)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4928      	ldr	r1, [pc, #160]	@ (800978c <UART_RxISR_8BIT+0x1c0>)
 80096ea:	400a      	ands	r2, r1
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	f383 8810 	msr	PRIMASK, r3
}
 80096f8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d12f      	bne.n	8009762 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009708:	f3ef 8310 	mrs	r3, PRIMASK
 800970c:	60fb      	str	r3, [r7, #12]
  return(result);
 800970e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009712:	2301      	movs	r3, #1
 8009714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f383 8810 	msr	PRIMASK, r3
}
 800971c:	46c0      	nop			@ (mov r8, r8)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2110      	movs	r1, #16
 800972a:	438a      	bics	r2, r1
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f383 8810 	msr	PRIMASK, r3
}
 8009738:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	2210      	movs	r2, #16
 8009742:	4013      	ands	r3, r2
 8009744:	2b10      	cmp	r3, #16
 8009746:	d103      	bne.n	8009750 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2210      	movs	r2, #16
 800974e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2258      	movs	r2, #88	@ 0x58
 8009754:	5a9a      	ldrh	r2, [r3, r2]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	0011      	movs	r1, r2
 800975a:	0018      	movs	r0, r3
 800975c:	f7fb f9ba 	bl	8004ad4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009760:	e00c      	b.n	800977c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	0018      	movs	r0, r3
 8009766:	f7ff f9a9 	bl	8008abc <HAL_UART_RxCpltCallback>
}
 800976a:	e007      	b.n	800977c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2108      	movs	r1, #8
 8009778:	430a      	orrs	r2, r1
 800977a:	619a      	str	r2, [r3, #24]
}
 800977c:	46c0      	nop			@ (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	b014      	add	sp, #80	@ 0x50
 8009782:	bd80      	pop	{r7, pc}
 8009784:	fffffedf 	.word	0xfffffedf
 8009788:	40004800 	.word	0x40004800
 800978c:	fbffffff 	.word	0xfbffffff

08009790 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b094      	sub	sp, #80	@ 0x50
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009798:	204e      	movs	r0, #78	@ 0x4e
 800979a:	183b      	adds	r3, r7, r0
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	215c      	movs	r1, #92	@ 0x5c
 80097a0:	5a52      	ldrh	r2, [r2, r1]
 80097a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2280      	movs	r2, #128	@ 0x80
 80097a8:	589b      	ldr	r3, [r3, r2]
 80097aa:	2b22      	cmp	r3, #34	@ 0x22
 80097ac:	d000      	beq.n	80097b0 <UART_RxISR_16BIT+0x20>
 80097ae:	e0bf      	b.n	8009930 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097b6:	214c      	movs	r1, #76	@ 0x4c
 80097b8:	187b      	adds	r3, r7, r1
 80097ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80097c2:	187b      	adds	r3, r7, r1
 80097c4:	183a      	adds	r2, r7, r0
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	8812      	ldrh	r2, [r2, #0]
 80097ca:	4013      	ands	r3, r2
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d6:	1c9a      	adds	r2, r3, #2
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	225a      	movs	r2, #90	@ 0x5a
 80097e0:	5a9b      	ldrh	r3, [r3, r2]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	3b01      	subs	r3, #1
 80097e6:	b299      	uxth	r1, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	225a      	movs	r2, #90	@ 0x5a
 80097ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	225a      	movs	r2, #90	@ 0x5a
 80097f2:	5a9b      	ldrh	r3, [r3, r2]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d000      	beq.n	80097fc <UART_RxISR_16BIT+0x6c>
 80097fa:	e0a1      	b.n	8009940 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009800:	623b      	str	r3, [r7, #32]
  return(result);
 8009802:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009804:	647b      	str	r3, [r7, #68]	@ 0x44
 8009806:	2301      	movs	r3, #1
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	f383 8810 	msr	PRIMASK, r3
}
 8009810:	46c0      	nop			@ (mov r8, r8)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	494a      	ldr	r1, [pc, #296]	@ (8009948 <UART_RxISR_16BIT+0x1b8>)
 800981e:	400a      	ands	r2, r1
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009824:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009828:	f383 8810 	msr	PRIMASK, r3
}
 800982c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800982e:	f3ef 8310 	mrs	r3, PRIMASK
 8009832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009836:	643b      	str	r3, [r7, #64]	@ 0x40
 8009838:	2301      	movs	r3, #1
 800983a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	f383 8810 	msr	PRIMASK, r3
}
 8009842:	46c0      	nop			@ (mov r8, r8)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689a      	ldr	r2, [r3, #8]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2101      	movs	r1, #1
 8009850:	438a      	bics	r2, r1
 8009852:	609a      	str	r2, [r3, #8]
 8009854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009856:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985a:	f383 8810 	msr	PRIMASK, r3
}
 800985e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2280      	movs	r2, #128	@ 0x80
 8009864:	2120      	movs	r1, #32
 8009866:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a34      	ldr	r2, [pc, #208]	@ (800994c <UART_RxISR_16BIT+0x1bc>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01f      	beq.n	80098be <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	2380      	movs	r3, #128	@ 0x80
 8009886:	041b      	lsls	r3, r3, #16
 8009888:	4013      	ands	r3, r2
 800988a:	d018      	beq.n	80098be <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800988c:	f3ef 8310 	mrs	r3, PRIMASK
 8009890:	617b      	str	r3, [r7, #20]
  return(result);
 8009892:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009896:	2301      	movs	r3, #1
 8009898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	f383 8810 	msr	PRIMASK, r3
}
 80098a0:	46c0      	nop			@ (mov r8, r8)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4928      	ldr	r1, [pc, #160]	@ (8009950 <UART_RxISR_16BIT+0x1c0>)
 80098ae:	400a      	ands	r2, r1
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	f383 8810 	msr	PRIMASK, r3
}
 80098bc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d12f      	bne.n	8009926 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098cc:	f3ef 8310 	mrs	r3, PRIMASK
 80098d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80098d2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098d6:	2301      	movs	r3, #1
 80098d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f383 8810 	msr	PRIMASK, r3
}
 80098e0:	46c0      	nop			@ (mov r8, r8)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2110      	movs	r1, #16
 80098ee:	438a      	bics	r2, r1
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f383 8810 	msr	PRIMASK, r3
}
 80098fc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	2210      	movs	r2, #16
 8009906:	4013      	ands	r3, r2
 8009908:	2b10      	cmp	r3, #16
 800990a:	d103      	bne.n	8009914 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2210      	movs	r2, #16
 8009912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2258      	movs	r2, #88	@ 0x58
 8009918:	5a9a      	ldrh	r2, [r3, r2]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	0011      	movs	r1, r2
 800991e:	0018      	movs	r0, r3
 8009920:	f7fb f8d8 	bl	8004ad4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009924:	e00c      	b.n	8009940 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	0018      	movs	r0, r3
 800992a:	f7ff f8c7 	bl	8008abc <HAL_UART_RxCpltCallback>
}
 800992e:	e007      	b.n	8009940 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699a      	ldr	r2, [r3, #24]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2108      	movs	r1, #8
 800993c:	430a      	orrs	r2, r1
 800993e:	619a      	str	r2, [r3, #24]
}
 8009940:	46c0      	nop			@ (mov r8, r8)
 8009942:	46bd      	mov	sp, r7
 8009944:	b014      	add	sp, #80	@ 0x50
 8009946:	bd80      	pop	{r7, pc}
 8009948:	fffffedf 	.word	0xfffffedf
 800994c:	40004800 	.word	0x40004800
 8009950:	fbffffff 	.word	0xfbffffff

08009954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800995c:	46c0      	nop			@ (mov r8, r8)
 800995e:	46bd      	mov	sp, r7
 8009960:	b002      	add	sp, #8
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009964:	b5b0      	push	{r4, r5, r7, lr}
 8009966:	b08a      	sub	sp, #40	@ 0x28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	1dbb      	adds	r3, r7, #6
 8009970:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2280      	movs	r2, #128	@ 0x80
 8009976:	589b      	ldr	r3, [r3, r2]
 8009978:	2b20      	cmp	r3, #32
 800997a:	d156      	bne.n	8009a2a <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009982:	1dbb      	adds	r3, r7, #6
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e04e      	b.n	8009a2c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	2380      	movs	r3, #128	@ 0x80
 8009994:	015b      	lsls	r3, r3, #5
 8009996:	429a      	cmp	r2, r3
 8009998:	d109      	bne.n	80099ae <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2201      	movs	r2, #1
 80099a6:	4013      	ands	r3, r2
 80099a8:	d001      	beq.n	80099ae <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e03e      	b.n	8009a2c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80099ba:	2527      	movs	r5, #39	@ 0x27
 80099bc:	197c      	adds	r4, r7, r5
 80099be:	1dbb      	adds	r3, r7, #6
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	0018      	movs	r0, r3
 80099c8:	f7ff fc90 	bl	80092ec <UART_Start_Receive_IT>
 80099cc:	0003      	movs	r3, r0
 80099ce:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80099d0:	197b      	adds	r3, r7, r5
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d124      	bne.n	8009a22 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d11c      	bne.n	8009a1a <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2210      	movs	r2, #16
 80099e6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099e8:	f3ef 8310 	mrs	r3, PRIMASK
 80099ec:	617b      	str	r3, [r7, #20]
  return(result);
 80099ee:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f0:	623b      	str	r3, [r7, #32]
 80099f2:	2301      	movs	r3, #1
 80099f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	f383 8810 	msr	PRIMASK, r3
}
 80099fc:	46c0      	nop			@ (mov r8, r8)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2110      	movs	r1, #16
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	f383 8810 	msr	PRIMASK, r3
}
 8009a18:	e003      	b.n	8009a22 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009a1a:	2327      	movs	r3, #39	@ 0x27
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	2201      	movs	r2, #1
 8009a20:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8009a22:	2327      	movs	r3, #39	@ 0x27
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	e000      	b.n	8009a2c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8009a2a:	2302      	movs	r3, #2
  }
}
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	b00a      	add	sp, #40	@ 0x28
 8009a32:	bdb0      	pop	{r4, r5, r7, pc}

08009a34 <__cvt>:
 8009a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a36:	001f      	movs	r7, r3
 8009a38:	2300      	movs	r3, #0
 8009a3a:	0016      	movs	r6, r2
 8009a3c:	b08b      	sub	sp, #44	@ 0x2c
 8009a3e:	429f      	cmp	r7, r3
 8009a40:	da04      	bge.n	8009a4c <__cvt+0x18>
 8009a42:	2180      	movs	r1, #128	@ 0x80
 8009a44:	0609      	lsls	r1, r1, #24
 8009a46:	187b      	adds	r3, r7, r1
 8009a48:	001f      	movs	r7, r3
 8009a4a:	232d      	movs	r3, #45	@ 0x2d
 8009a4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a4e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009a50:	7013      	strb	r3, [r2, #0]
 8009a52:	2320      	movs	r3, #32
 8009a54:	2203      	movs	r2, #3
 8009a56:	439d      	bics	r5, r3
 8009a58:	2d46      	cmp	r5, #70	@ 0x46
 8009a5a:	d007      	beq.n	8009a6c <__cvt+0x38>
 8009a5c:	002b      	movs	r3, r5
 8009a5e:	3b45      	subs	r3, #69	@ 0x45
 8009a60:	4259      	negs	r1, r3
 8009a62:	414b      	adcs	r3, r1
 8009a64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009a66:	3a01      	subs	r2, #1
 8009a68:	18cb      	adds	r3, r1, r3
 8009a6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a6c:	ab09      	add	r3, sp, #36	@ 0x24
 8009a6e:	9304      	str	r3, [sp, #16]
 8009a70:	ab08      	add	r3, sp, #32
 8009a72:	9303      	str	r3, [sp, #12]
 8009a74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a76:	9200      	str	r2, [sp, #0]
 8009a78:	9302      	str	r3, [sp, #8]
 8009a7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a7c:	0032      	movs	r2, r6
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	003b      	movs	r3, r7
 8009a82:	f000 fe69 	bl	800a758 <_dtoa_r>
 8009a86:	0004      	movs	r4, r0
 8009a88:	2d47      	cmp	r5, #71	@ 0x47
 8009a8a:	d11b      	bne.n	8009ac4 <__cvt+0x90>
 8009a8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a8e:	07db      	lsls	r3, r3, #31
 8009a90:	d511      	bpl.n	8009ab6 <__cvt+0x82>
 8009a92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a94:	18c3      	adds	r3, r0, r3
 8009a96:	9307      	str	r3, [sp, #28]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	0030      	movs	r0, r6
 8009a9e:	0039      	movs	r1, r7
 8009aa0:	f7f6 fcd4 	bl	800044c <__aeabi_dcmpeq>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d001      	beq.n	8009aac <__cvt+0x78>
 8009aa8:	9b07      	ldr	r3, [sp, #28]
 8009aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aac:	2230      	movs	r2, #48	@ 0x30
 8009aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab0:	9907      	ldr	r1, [sp, #28]
 8009ab2:	428b      	cmp	r3, r1
 8009ab4:	d320      	bcc.n	8009af8 <__cvt+0xc4>
 8009ab6:	0020      	movs	r0, r4
 8009ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009abc:	1b1b      	subs	r3, r3, r4
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	b00b      	add	sp, #44	@ 0x2c
 8009ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ac6:	18c3      	adds	r3, r0, r3
 8009ac8:	9307      	str	r3, [sp, #28]
 8009aca:	2d46      	cmp	r5, #70	@ 0x46
 8009acc:	d1e4      	bne.n	8009a98 <__cvt+0x64>
 8009ace:	7803      	ldrb	r3, [r0, #0]
 8009ad0:	2b30      	cmp	r3, #48	@ 0x30
 8009ad2:	d10c      	bne.n	8009aee <__cvt+0xba>
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	0030      	movs	r0, r6
 8009ada:	0039      	movs	r1, r7
 8009adc:	f7f6 fcb6 	bl	800044c <__aeabi_dcmpeq>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d104      	bne.n	8009aee <__cvt+0xba>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009ae8:	1a9b      	subs	r3, r3, r2
 8009aea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009af0:	9a07      	ldr	r2, [sp, #28]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	18d3      	adds	r3, r2, r3
 8009af6:	e7ce      	b.n	8009a96 <__cvt+0x62>
 8009af8:	1c59      	adds	r1, r3, #1
 8009afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e7d6      	b.n	8009aae <__cvt+0x7a>

08009b00 <__exponent>:
 8009b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b02:	232b      	movs	r3, #43	@ 0x2b
 8009b04:	0005      	movs	r5, r0
 8009b06:	000c      	movs	r4, r1
 8009b08:	b085      	sub	sp, #20
 8009b0a:	7002      	strb	r2, [r0, #0]
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	da01      	bge.n	8009b14 <__exponent+0x14>
 8009b10:	424c      	negs	r4, r1
 8009b12:	3302      	adds	r3, #2
 8009b14:	706b      	strb	r3, [r5, #1]
 8009b16:	2c09      	cmp	r4, #9
 8009b18:	dd2c      	ble.n	8009b74 <__exponent+0x74>
 8009b1a:	ab02      	add	r3, sp, #8
 8009b1c:	1dde      	adds	r6, r3, #7
 8009b1e:	0020      	movs	r0, r4
 8009b20:	210a      	movs	r1, #10
 8009b22:	f7f6 fc7d 	bl	8000420 <__aeabi_idivmod>
 8009b26:	0037      	movs	r7, r6
 8009b28:	3130      	adds	r1, #48	@ 0x30
 8009b2a:	3e01      	subs	r6, #1
 8009b2c:	0020      	movs	r0, r4
 8009b2e:	7031      	strb	r1, [r6, #0]
 8009b30:	210a      	movs	r1, #10
 8009b32:	9401      	str	r4, [sp, #4]
 8009b34:	f7f6 fb8e 	bl	8000254 <__divsi3>
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	0004      	movs	r4, r0
 8009b3c:	2b63      	cmp	r3, #99	@ 0x63
 8009b3e:	dcee      	bgt.n	8009b1e <__exponent+0x1e>
 8009b40:	1eba      	subs	r2, r7, #2
 8009b42:	1ca8      	adds	r0, r5, #2
 8009b44:	0001      	movs	r1, r0
 8009b46:	0013      	movs	r3, r2
 8009b48:	3430      	adds	r4, #48	@ 0x30
 8009b4a:	7014      	strb	r4, [r2, #0]
 8009b4c:	ac02      	add	r4, sp, #8
 8009b4e:	3407      	adds	r4, #7
 8009b50:	429c      	cmp	r4, r3
 8009b52:	d80a      	bhi.n	8009b6a <__exponent+0x6a>
 8009b54:	2300      	movs	r3, #0
 8009b56:	42a2      	cmp	r2, r4
 8009b58:	d803      	bhi.n	8009b62 <__exponent+0x62>
 8009b5a:	3309      	adds	r3, #9
 8009b5c:	aa02      	add	r2, sp, #8
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	1bdb      	subs	r3, r3, r7
 8009b62:	18c0      	adds	r0, r0, r3
 8009b64:	1b40      	subs	r0, r0, r5
 8009b66:	b005      	add	sp, #20
 8009b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b6a:	781c      	ldrb	r4, [r3, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	700c      	strb	r4, [r1, #0]
 8009b70:	3101      	adds	r1, #1
 8009b72:	e7eb      	b.n	8009b4c <__exponent+0x4c>
 8009b74:	2330      	movs	r3, #48	@ 0x30
 8009b76:	18e4      	adds	r4, r4, r3
 8009b78:	70ab      	strb	r3, [r5, #2]
 8009b7a:	1d28      	adds	r0, r5, #4
 8009b7c:	70ec      	strb	r4, [r5, #3]
 8009b7e:	e7f1      	b.n	8009b64 <__exponent+0x64>

08009b80 <_printf_float>:
 8009b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b82:	b097      	sub	sp, #92	@ 0x5c
 8009b84:	000d      	movs	r5, r1
 8009b86:	920a      	str	r2, [sp, #40]	@ 0x28
 8009b88:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b8e:	f000 fccb 	bl	800a528 <_localeconv_r>
 8009b92:	6803      	ldr	r3, [r0, #0]
 8009b94:	0018      	movs	r0, r3
 8009b96:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b98:	f7f6 fab6 	bl	8000108 <strlen>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009ba0:	9314      	str	r3, [sp, #80]	@ 0x50
 8009ba2:	7e2b      	ldrb	r3, [r5, #24]
 8009ba4:	2207      	movs	r2, #7
 8009ba6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	05c9      	lsls	r1, r1, #23
 8009bb2:	d545      	bpl.n	8009c40 <_printf_float+0xc0>
 8009bb4:	189b      	adds	r3, r3, r2
 8009bb6:	4393      	bics	r3, r2
 8009bb8:	001a      	movs	r2, r3
 8009bba:	3208      	adds	r2, #8
 8009bbc:	6022      	str	r2, [r4, #0]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	681e      	ldr	r6, [r3, #0]
 8009bc2:	685f      	ldr	r7, [r3, #4]
 8009bc4:	007b      	lsls	r3, r7, #1
 8009bc6:	085b      	lsrs	r3, r3, #1
 8009bc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009bca:	9610      	str	r6, [sp, #64]	@ 0x40
 8009bcc:	64ae      	str	r6, [r5, #72]	@ 0x48
 8009bce:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8009bd0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009bd2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009bd4:	4ba7      	ldr	r3, [pc, #668]	@ (8009e74 <_printf_float+0x2f4>)
 8009bd6:	4252      	negs	r2, r2
 8009bd8:	f7f8 fbd8 	bl	800238c <__aeabi_dcmpun>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d131      	bne.n	8009c44 <_printf_float+0xc4>
 8009be0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009be2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009be4:	2201      	movs	r2, #1
 8009be6:	4ba3      	ldr	r3, [pc, #652]	@ (8009e74 <_printf_float+0x2f4>)
 8009be8:	4252      	negs	r2, r2
 8009bea:	f7f6 fc3f 	bl	800046c <__aeabi_dcmple>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d128      	bne.n	8009c44 <_printf_float+0xc4>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	0030      	movs	r0, r6
 8009bf8:	0039      	movs	r1, r7
 8009bfa:	f7f6 fc2d 	bl	8000458 <__aeabi_dcmplt>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d003      	beq.n	8009c0a <_printf_float+0x8a>
 8009c02:	002b      	movs	r3, r5
 8009c04:	222d      	movs	r2, #45	@ 0x2d
 8009c06:	3343      	adds	r3, #67	@ 0x43
 8009c08:	701a      	strb	r2, [r3, #0]
 8009c0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c0c:	4f9a      	ldr	r7, [pc, #616]	@ (8009e78 <_printf_float+0x2f8>)
 8009c0e:	2b47      	cmp	r3, #71	@ 0x47
 8009c10:	d900      	bls.n	8009c14 <_printf_float+0x94>
 8009c12:	4f9a      	ldr	r7, [pc, #616]	@ (8009e7c <_printf_float+0x2fc>)
 8009c14:	2303      	movs	r3, #3
 8009c16:	2400      	movs	r4, #0
 8009c18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c1a:	612b      	str	r3, [r5, #16]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	439a      	bics	r2, r3
 8009c20:	602a      	str	r2, [r5, #0]
 8009c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c24:	0029      	movs	r1, r5
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2c:	aa15      	add	r2, sp, #84	@ 0x54
 8009c2e:	f000 f9e5 	bl	8009ffc <_printf_common>
 8009c32:	3001      	adds	r0, #1
 8009c34:	d000      	beq.n	8009c38 <_printf_float+0xb8>
 8009c36:	e09f      	b.n	8009d78 <_printf_float+0x1f8>
 8009c38:	2001      	movs	r0, #1
 8009c3a:	4240      	negs	r0, r0
 8009c3c:	b017      	add	sp, #92	@ 0x5c
 8009c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c40:	3307      	adds	r3, #7
 8009c42:	e7b8      	b.n	8009bb6 <_printf_float+0x36>
 8009c44:	0032      	movs	r2, r6
 8009c46:	003b      	movs	r3, r7
 8009c48:	0030      	movs	r0, r6
 8009c4a:	0039      	movs	r1, r7
 8009c4c:	f7f8 fb9e 	bl	800238c <__aeabi_dcmpun>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d00b      	beq.n	8009c6c <_printf_float+0xec>
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	da03      	bge.n	8009c60 <_printf_float+0xe0>
 8009c58:	002b      	movs	r3, r5
 8009c5a:	222d      	movs	r2, #45	@ 0x2d
 8009c5c:	3343      	adds	r3, #67	@ 0x43
 8009c5e:	701a      	strb	r2, [r3, #0]
 8009c60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c62:	4f87      	ldr	r7, [pc, #540]	@ (8009e80 <_printf_float+0x300>)
 8009c64:	2b47      	cmp	r3, #71	@ 0x47
 8009c66:	d9d5      	bls.n	8009c14 <_printf_float+0x94>
 8009c68:	4f86      	ldr	r7, [pc, #536]	@ (8009e84 <_printf_float+0x304>)
 8009c6a:	e7d3      	b.n	8009c14 <_printf_float+0x94>
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009c70:	686b      	ldr	r3, [r5, #4]
 8009c72:	4394      	bics	r4, r2
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	d146      	bne.n	8009d06 <_printf_float+0x186>
 8009c78:	3307      	adds	r3, #7
 8009c7a:	606b      	str	r3, [r5, #4]
 8009c7c:	2380      	movs	r3, #128	@ 0x80
 8009c7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	2200      	movs	r2, #0
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	9206      	str	r2, [sp, #24]
 8009c8a:	aa14      	add	r2, sp, #80	@ 0x50
 8009c8c:	9205      	str	r2, [sp, #20]
 8009c8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c90:	a90a      	add	r1, sp, #40	@ 0x28
 8009c92:	9204      	str	r2, [sp, #16]
 8009c94:	aa13      	add	r2, sp, #76	@ 0x4c
 8009c96:	9203      	str	r2, [sp, #12]
 8009c98:	2223      	movs	r2, #35	@ 0x23
 8009c9a:	1852      	adds	r2, r2, r1
 8009c9c:	9202      	str	r2, [sp, #8]
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	686b      	ldr	r3, [r5, #4]
 8009ca2:	0032      	movs	r2, r6
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ca8:	003b      	movs	r3, r7
 8009caa:	f7ff fec3 	bl	8009a34 <__cvt>
 8009cae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009cb0:	0007      	movs	r7, r0
 8009cb2:	2c47      	cmp	r4, #71	@ 0x47
 8009cb4:	d12d      	bne.n	8009d12 <_printf_float+0x192>
 8009cb6:	1cd3      	adds	r3, r2, #3
 8009cb8:	db02      	blt.n	8009cc0 <_printf_float+0x140>
 8009cba:	686b      	ldr	r3, [r5, #4]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	dd48      	ble.n	8009d52 <_printf_float+0x1d2>
 8009cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cc2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009cc4:	3b02      	subs	r3, #2
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cca:	0028      	movs	r0, r5
 8009ccc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009cce:	3901      	subs	r1, #1
 8009cd0:	3050      	adds	r0, #80	@ 0x50
 8009cd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009cd4:	f7ff ff14 	bl	8009b00 <__exponent>
 8009cd8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009cda:	0004      	movs	r4, r0
 8009cdc:	1813      	adds	r3, r2, r0
 8009cde:	612b      	str	r3, [r5, #16]
 8009ce0:	2a01      	cmp	r2, #1
 8009ce2:	dc02      	bgt.n	8009cea <_printf_float+0x16a>
 8009ce4:	682a      	ldr	r2, [r5, #0]
 8009ce6:	07d2      	lsls	r2, r2, #31
 8009ce8:	d501      	bpl.n	8009cee <_printf_float+0x16e>
 8009cea:	3301      	adds	r3, #1
 8009cec:	612b      	str	r3, [r5, #16]
 8009cee:	2323      	movs	r3, #35	@ 0x23
 8009cf0:	aa0a      	add	r2, sp, #40	@ 0x28
 8009cf2:	189b      	adds	r3, r3, r2
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d100      	bne.n	8009cfc <_printf_float+0x17c>
 8009cfa:	e792      	b.n	8009c22 <_printf_float+0xa2>
 8009cfc:	002b      	movs	r3, r5
 8009cfe:	222d      	movs	r2, #45	@ 0x2d
 8009d00:	3343      	adds	r3, #67	@ 0x43
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	e78d      	b.n	8009c22 <_printf_float+0xa2>
 8009d06:	2c47      	cmp	r4, #71	@ 0x47
 8009d08:	d1b8      	bne.n	8009c7c <_printf_float+0xfc>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1b6      	bne.n	8009c7c <_printf_float+0xfc>
 8009d0e:	3301      	adds	r3, #1
 8009d10:	e7b3      	b.n	8009c7a <_printf_float+0xfa>
 8009d12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d14:	0011      	movs	r1, r2
 8009d16:	2b65      	cmp	r3, #101	@ 0x65
 8009d18:	d9d7      	bls.n	8009cca <_printf_float+0x14a>
 8009d1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d1c:	2b66      	cmp	r3, #102	@ 0x66
 8009d1e:	d11a      	bne.n	8009d56 <_printf_float+0x1d6>
 8009d20:	686b      	ldr	r3, [r5, #4]
 8009d22:	2a00      	cmp	r2, #0
 8009d24:	dd09      	ble.n	8009d3a <_printf_float+0x1ba>
 8009d26:	612a      	str	r2, [r5, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <_printf_float+0x1b2>
 8009d2c:	6829      	ldr	r1, [r5, #0]
 8009d2e:	07c9      	lsls	r1, r1, #31
 8009d30:	d50b      	bpl.n	8009d4a <_printf_float+0x1ca>
 8009d32:	3301      	adds	r3, #1
 8009d34:	189b      	adds	r3, r3, r2
 8009d36:	612b      	str	r3, [r5, #16]
 8009d38:	e007      	b.n	8009d4a <_printf_float+0x1ca>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <_printf_float+0x1c6>
 8009d3e:	2201      	movs	r2, #1
 8009d40:	6829      	ldr	r1, [r5, #0]
 8009d42:	4211      	tst	r1, r2
 8009d44:	d000      	beq.n	8009d48 <_printf_float+0x1c8>
 8009d46:	1c9a      	adds	r2, r3, #2
 8009d48:	612a      	str	r2, [r5, #16]
 8009d4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d4c:	2400      	movs	r4, #0
 8009d4e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009d50:	e7cd      	b.n	8009cee <_printf_float+0x16e>
 8009d52:	2367      	movs	r3, #103	@ 0x67
 8009d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009d58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	db06      	blt.n	8009d6c <_printf_float+0x1ec>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	6129      	str	r1, [r5, #16]
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d5f1      	bpl.n	8009d4a <_printf_float+0x1ca>
 8009d66:	3101      	adds	r1, #1
 8009d68:	6129      	str	r1, [r5, #16]
 8009d6a:	e7ee      	b.n	8009d4a <_printf_float+0x1ca>
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	2900      	cmp	r1, #0
 8009d70:	dce0      	bgt.n	8009d34 <_printf_float+0x1b4>
 8009d72:	1892      	adds	r2, r2, r2
 8009d74:	1a52      	subs	r2, r2, r1
 8009d76:	e7dd      	b.n	8009d34 <_printf_float+0x1b4>
 8009d78:	682a      	ldr	r2, [r5, #0]
 8009d7a:	0553      	lsls	r3, r2, #21
 8009d7c:	d408      	bmi.n	8009d90 <_printf_float+0x210>
 8009d7e:	692b      	ldr	r3, [r5, #16]
 8009d80:	003a      	movs	r2, r7
 8009d82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009d88:	47a0      	blx	r4
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d129      	bne.n	8009de2 <_printf_float+0x262>
 8009d8e:	e753      	b.n	8009c38 <_printf_float+0xb8>
 8009d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d92:	2b65      	cmp	r3, #101	@ 0x65
 8009d94:	d800      	bhi.n	8009d98 <_printf_float+0x218>
 8009d96:	e0da      	b.n	8009f4e <_printf_float+0x3ce>
 8009d98:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009d9a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f7f6 fb54 	bl	800044c <__aeabi_dcmpeq>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d033      	beq.n	8009e10 <_printf_float+0x290>
 8009da8:	2301      	movs	r3, #1
 8009daa:	4a37      	ldr	r2, [pc, #220]	@ (8009e88 <_printf_float+0x308>)
 8009dac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009db0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009db2:	47a0      	blx	r4
 8009db4:	3001      	adds	r0, #1
 8009db6:	d100      	bne.n	8009dba <_printf_float+0x23a>
 8009db8:	e73e      	b.n	8009c38 <_printf_float+0xb8>
 8009dba:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009dbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dbe:	42b3      	cmp	r3, r6
 8009dc0:	db02      	blt.n	8009dc8 <_printf_float+0x248>
 8009dc2:	682b      	ldr	r3, [r5, #0]
 8009dc4:	07db      	lsls	r3, r3, #31
 8009dc6:	d50c      	bpl.n	8009de2 <_printf_float+0x262>
 8009dc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009dca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009dce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dd2:	47a0      	blx	r4
 8009dd4:	2400      	movs	r4, #0
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d100      	bne.n	8009ddc <_printf_float+0x25c>
 8009dda:	e72d      	b.n	8009c38 <_printf_float+0xb8>
 8009ddc:	1e73      	subs	r3, r6, #1
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	dc0a      	bgt.n	8009df8 <_printf_float+0x278>
 8009de2:	682b      	ldr	r3, [r5, #0]
 8009de4:	079b      	lsls	r3, r3, #30
 8009de6:	d500      	bpl.n	8009dea <_printf_float+0x26a>
 8009de8:	e105      	b.n	8009ff6 <_printf_float+0x476>
 8009dea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009dec:	68e8      	ldr	r0, [r5, #12]
 8009dee:	4298      	cmp	r0, r3
 8009df0:	db00      	blt.n	8009df4 <_printf_float+0x274>
 8009df2:	e723      	b.n	8009c3c <_printf_float+0xbc>
 8009df4:	0018      	movs	r0, r3
 8009df6:	e721      	b.n	8009c3c <_printf_float+0xbc>
 8009df8:	002a      	movs	r2, r5
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e00:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009e02:	321a      	adds	r2, #26
 8009e04:	47b8      	blx	r7
 8009e06:	3001      	adds	r0, #1
 8009e08:	d100      	bne.n	8009e0c <_printf_float+0x28c>
 8009e0a:	e715      	b.n	8009c38 <_printf_float+0xb8>
 8009e0c:	3401      	adds	r4, #1
 8009e0e:	e7e5      	b.n	8009ddc <_printf_float+0x25c>
 8009e10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dc3a      	bgt.n	8009e8c <_printf_float+0x30c>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4a1b      	ldr	r2, [pc, #108]	@ (8009e88 <_printf_float+0x308>)
 8009e1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009e20:	47a0      	blx	r4
 8009e22:	3001      	adds	r0, #1
 8009e24:	d100      	bne.n	8009e28 <_printf_float+0x2a8>
 8009e26:	e707      	b.n	8009c38 <_printf_float+0xb8>
 8009e28:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009e2a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e2c:	4333      	orrs	r3, r6
 8009e2e:	d102      	bne.n	8009e36 <_printf_float+0x2b6>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	07db      	lsls	r3, r3, #31
 8009e34:	d5d5      	bpl.n	8009de2 <_printf_float+0x262>
 8009e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e3e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009e40:	47a0      	blx	r4
 8009e42:	2300      	movs	r3, #0
 8009e44:	3001      	adds	r0, #1
 8009e46:	d100      	bne.n	8009e4a <_printf_float+0x2ca>
 8009e48:	e6f6      	b.n	8009c38 <_printf_float+0xb8>
 8009e4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e50:	425b      	negs	r3, r3
 8009e52:	4293      	cmp	r3, r2
 8009e54:	dc01      	bgt.n	8009e5a <_printf_float+0x2da>
 8009e56:	0033      	movs	r3, r6
 8009e58:	e792      	b.n	8009d80 <_printf_float+0x200>
 8009e5a:	002a      	movs	r2, r5
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009e64:	321a      	adds	r2, #26
 8009e66:	47a0      	blx	r4
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d100      	bne.n	8009e6e <_printf_float+0x2ee>
 8009e6c:	e6e4      	b.n	8009c38 <_printf_float+0xb8>
 8009e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e70:	3301      	adds	r3, #1
 8009e72:	e7ea      	b.n	8009e4a <_printf_float+0x2ca>
 8009e74:	7fefffff 	.word	0x7fefffff
 8009e78:	0800c6bc 	.word	0x0800c6bc
 8009e7c:	0800c6c0 	.word	0x0800c6c0
 8009e80:	0800c6c4 	.word	0x0800c6c4
 8009e84:	0800c6c8 	.word	0x0800c6c8
 8009e88:	0800c6cc 	.word	0x0800c6cc
 8009e8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e8e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009e90:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e92:	429e      	cmp	r6, r3
 8009e94:	dd00      	ble.n	8009e98 <_printf_float+0x318>
 8009e96:	001e      	movs	r6, r3
 8009e98:	2e00      	cmp	r6, #0
 8009e9a:	dc31      	bgt.n	8009f00 <_printf_float+0x380>
 8009e9c:	43f3      	mvns	r3, r6
 8009e9e:	2400      	movs	r4, #0
 8009ea0:	17db      	asrs	r3, r3, #31
 8009ea2:	4033      	ands	r3, r6
 8009ea4:	930e      	str	r3, [sp, #56]	@ 0x38
 8009ea6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eaa:	1af3      	subs	r3, r6, r3
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	dc30      	bgt.n	8009f12 <_printf_float+0x392>
 8009eb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009eb2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	dc38      	bgt.n	8009f2a <_printf_float+0x3aa>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	07db      	lsls	r3, r3, #31
 8009ebc:	d435      	bmi.n	8009f2a <_printf_float+0x3aa>
 8009ebe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ec2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009ec4:	1b9b      	subs	r3, r3, r6
 8009ec6:	1b14      	subs	r4, r2, r4
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	dd00      	ble.n	8009ece <_printf_float+0x34e>
 8009ecc:	001c      	movs	r4, r3
 8009ece:	2c00      	cmp	r4, #0
 8009ed0:	dc34      	bgt.n	8009f3c <_printf_float+0x3bc>
 8009ed2:	43e3      	mvns	r3, r4
 8009ed4:	2600      	movs	r6, #0
 8009ed6:	17db      	asrs	r3, r3, #31
 8009ed8:	401c      	ands	r4, r3
 8009eda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009edc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	1b1b      	subs	r3, r3, r4
 8009ee2:	42b3      	cmp	r3, r6
 8009ee4:	dc00      	bgt.n	8009ee8 <_printf_float+0x368>
 8009ee6:	e77c      	b.n	8009de2 <_printf_float+0x262>
 8009ee8:	002a      	movs	r2, r5
 8009eea:	2301      	movs	r3, #1
 8009eec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ef0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009ef2:	321a      	adds	r2, #26
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d100      	bne.n	8009efc <_printf_float+0x37c>
 8009efa:	e69d      	b.n	8009c38 <_printf_float+0xb8>
 8009efc:	3601      	adds	r6, #1
 8009efe:	e7ec      	b.n	8009eda <_printf_float+0x35a>
 8009f00:	0033      	movs	r3, r6
 8009f02:	003a      	movs	r2, r7
 8009f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009f0a:	47a0      	blx	r4
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	d1c5      	bne.n	8009e9c <_printf_float+0x31c>
 8009f10:	e692      	b.n	8009c38 <_printf_float+0xb8>
 8009f12:	002a      	movs	r2, r5
 8009f14:	2301      	movs	r3, #1
 8009f16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f1a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f1c:	321a      	adds	r2, #26
 8009f1e:	47b0      	blx	r6
 8009f20:	3001      	adds	r0, #1
 8009f22:	d100      	bne.n	8009f26 <_printf_float+0x3a6>
 8009f24:	e688      	b.n	8009c38 <_printf_float+0xb8>
 8009f26:	3401      	adds	r4, #1
 8009f28:	e7bd      	b.n	8009ea6 <_printf_float+0x326>
 8009f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009f34:	47a0      	blx	r4
 8009f36:	3001      	adds	r0, #1
 8009f38:	d1c1      	bne.n	8009ebe <_printf_float+0x33e>
 8009f3a:	e67d      	b.n	8009c38 <_printf_float+0xb8>
 8009f3c:	19ba      	adds	r2, r7, r6
 8009f3e:	0023      	movs	r3, r4
 8009f40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f46:	47b0      	blx	r6
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d1c2      	bne.n	8009ed2 <_printf_float+0x352>
 8009f4c:	e674      	b.n	8009c38 <_printf_float+0xb8>
 8009f4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f50:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	dc02      	bgt.n	8009f5c <_printf_float+0x3dc>
 8009f56:	2301      	movs	r3, #1
 8009f58:	421a      	tst	r2, r3
 8009f5a:	d039      	beq.n	8009fd0 <_printf_float+0x450>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	003a      	movs	r2, r7
 8009f60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f64:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f66:	47b0      	blx	r6
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d100      	bne.n	8009f6e <_printf_float+0x3ee>
 8009f6c:	e664      	b.n	8009c38 <_printf_float+0xb8>
 8009f6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f76:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f78:	47b0      	blx	r6
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	d100      	bne.n	8009f80 <_printf_float+0x400>
 8009f7e:	e65b      	b.n	8009c38 <_printf_float+0xb8>
 8009f80:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009f82:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f86:	2200      	movs	r2, #0
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f7f6 fa5d 	bl	800044c <__aeabi_dcmpeq>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d11a      	bne.n	8009fcc <_printf_float+0x44c>
 8009f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f98:	1c7a      	adds	r2, r7, #1
 8009f9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f9e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009fa0:	47b0      	blx	r6
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d10e      	bne.n	8009fc4 <_printf_float+0x444>
 8009fa6:	e647      	b.n	8009c38 <_printf_float+0xb8>
 8009fa8:	002a      	movs	r2, r5
 8009faa:	2301      	movs	r3, #1
 8009fac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fb0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009fb2:	321a      	adds	r2, #26
 8009fb4:	47b8      	blx	r7
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d100      	bne.n	8009fbc <_printf_float+0x43c>
 8009fba:	e63d      	b.n	8009c38 <_printf_float+0xb8>
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fc0:	429e      	cmp	r6, r3
 8009fc2:	dbf1      	blt.n	8009fa8 <_printf_float+0x428>
 8009fc4:	002a      	movs	r2, r5
 8009fc6:	0023      	movs	r3, r4
 8009fc8:	3250      	adds	r2, #80	@ 0x50
 8009fca:	e6da      	b.n	8009d82 <_printf_float+0x202>
 8009fcc:	2600      	movs	r6, #0
 8009fce:	e7f6      	b.n	8009fbe <_printf_float+0x43e>
 8009fd0:	003a      	movs	r2, r7
 8009fd2:	e7e2      	b.n	8009f9a <_printf_float+0x41a>
 8009fd4:	002a      	movs	r2, r5
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fdc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009fde:	3219      	adds	r2, #25
 8009fe0:	47b0      	blx	r6
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d100      	bne.n	8009fe8 <_printf_float+0x468>
 8009fe6:	e627      	b.n	8009c38 <_printf_float+0xb8>
 8009fe8:	3401      	adds	r4, #1
 8009fea:	68eb      	ldr	r3, [r5, #12]
 8009fec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	dcef      	bgt.n	8009fd4 <_printf_float+0x454>
 8009ff4:	e6f9      	b.n	8009dea <_printf_float+0x26a>
 8009ff6:	2400      	movs	r4, #0
 8009ff8:	e7f7      	b.n	8009fea <_printf_float+0x46a>
 8009ffa:	46c0      	nop			@ (mov r8, r8)

08009ffc <_printf_common>:
 8009ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffe:	0016      	movs	r6, r2
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	688a      	ldr	r2, [r1, #8]
 800a004:	690b      	ldr	r3, [r1, #16]
 800a006:	000c      	movs	r4, r1
 800a008:	9000      	str	r0, [sp, #0]
 800a00a:	4293      	cmp	r3, r2
 800a00c:	da00      	bge.n	800a010 <_printf_common+0x14>
 800a00e:	0013      	movs	r3, r2
 800a010:	0022      	movs	r2, r4
 800a012:	6033      	str	r3, [r6, #0]
 800a014:	3243      	adds	r2, #67	@ 0x43
 800a016:	7812      	ldrb	r2, [r2, #0]
 800a018:	2a00      	cmp	r2, #0
 800a01a:	d001      	beq.n	800a020 <_printf_common+0x24>
 800a01c:	3301      	adds	r3, #1
 800a01e:	6033      	str	r3, [r6, #0]
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	069b      	lsls	r3, r3, #26
 800a024:	d502      	bpl.n	800a02c <_printf_common+0x30>
 800a026:	6833      	ldr	r3, [r6, #0]
 800a028:	3302      	adds	r3, #2
 800a02a:	6033      	str	r3, [r6, #0]
 800a02c:	6822      	ldr	r2, [r4, #0]
 800a02e:	2306      	movs	r3, #6
 800a030:	0015      	movs	r5, r2
 800a032:	401d      	ands	r5, r3
 800a034:	421a      	tst	r2, r3
 800a036:	d027      	beq.n	800a088 <_printf_common+0x8c>
 800a038:	0023      	movs	r3, r4
 800a03a:	3343      	adds	r3, #67	@ 0x43
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	4193      	sbcs	r3, r2
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	0692      	lsls	r2, r2, #26
 800a046:	d430      	bmi.n	800a0aa <_printf_common+0xae>
 800a048:	0022      	movs	r2, r4
 800a04a:	9901      	ldr	r1, [sp, #4]
 800a04c:	9800      	ldr	r0, [sp, #0]
 800a04e:	9d08      	ldr	r5, [sp, #32]
 800a050:	3243      	adds	r2, #67	@ 0x43
 800a052:	47a8      	blx	r5
 800a054:	3001      	adds	r0, #1
 800a056:	d025      	beq.n	800a0a4 <_printf_common+0xa8>
 800a058:	2206      	movs	r2, #6
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	2500      	movs	r5, #0
 800a05e:	4013      	ands	r3, r2
 800a060:	2b04      	cmp	r3, #4
 800a062:	d105      	bne.n	800a070 <_printf_common+0x74>
 800a064:	6833      	ldr	r3, [r6, #0]
 800a066:	68e5      	ldr	r5, [r4, #12]
 800a068:	1aed      	subs	r5, r5, r3
 800a06a:	43eb      	mvns	r3, r5
 800a06c:	17db      	asrs	r3, r3, #31
 800a06e:	401d      	ands	r5, r3
 800a070:	68a3      	ldr	r3, [r4, #8]
 800a072:	6922      	ldr	r2, [r4, #16]
 800a074:	4293      	cmp	r3, r2
 800a076:	dd01      	ble.n	800a07c <_printf_common+0x80>
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	18ed      	adds	r5, r5, r3
 800a07c:	2600      	movs	r6, #0
 800a07e:	42b5      	cmp	r5, r6
 800a080:	d120      	bne.n	800a0c4 <_printf_common+0xc8>
 800a082:	2000      	movs	r0, #0
 800a084:	e010      	b.n	800a0a8 <_printf_common+0xac>
 800a086:	3501      	adds	r5, #1
 800a088:	68e3      	ldr	r3, [r4, #12]
 800a08a:	6832      	ldr	r2, [r6, #0]
 800a08c:	1a9b      	subs	r3, r3, r2
 800a08e:	42ab      	cmp	r3, r5
 800a090:	ddd2      	ble.n	800a038 <_printf_common+0x3c>
 800a092:	0022      	movs	r2, r4
 800a094:	2301      	movs	r3, #1
 800a096:	9901      	ldr	r1, [sp, #4]
 800a098:	9800      	ldr	r0, [sp, #0]
 800a09a:	9f08      	ldr	r7, [sp, #32]
 800a09c:	3219      	adds	r2, #25
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d1f0      	bne.n	800a086 <_printf_common+0x8a>
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	4240      	negs	r0, r0
 800a0a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0aa:	2030      	movs	r0, #48	@ 0x30
 800a0ac:	18e1      	adds	r1, r4, r3
 800a0ae:	3143      	adds	r1, #67	@ 0x43
 800a0b0:	7008      	strb	r0, [r1, #0]
 800a0b2:	0021      	movs	r1, r4
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	3145      	adds	r1, #69	@ 0x45
 800a0b8:	7809      	ldrb	r1, [r1, #0]
 800a0ba:	18a2      	adds	r2, r4, r2
 800a0bc:	3243      	adds	r2, #67	@ 0x43
 800a0be:	3302      	adds	r3, #2
 800a0c0:	7011      	strb	r1, [r2, #0]
 800a0c2:	e7c1      	b.n	800a048 <_printf_common+0x4c>
 800a0c4:	0022      	movs	r2, r4
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	9901      	ldr	r1, [sp, #4]
 800a0ca:	9800      	ldr	r0, [sp, #0]
 800a0cc:	9f08      	ldr	r7, [sp, #32]
 800a0ce:	321a      	adds	r2, #26
 800a0d0:	47b8      	blx	r7
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d0e6      	beq.n	800a0a4 <_printf_common+0xa8>
 800a0d6:	3601      	adds	r6, #1
 800a0d8:	e7d1      	b.n	800a07e <_printf_common+0x82>
	...

0800a0dc <_printf_i>:
 800a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0de:	b08b      	sub	sp, #44	@ 0x2c
 800a0e0:	9206      	str	r2, [sp, #24]
 800a0e2:	000a      	movs	r2, r1
 800a0e4:	3243      	adds	r2, #67	@ 0x43
 800a0e6:	9307      	str	r3, [sp, #28]
 800a0e8:	9005      	str	r0, [sp, #20]
 800a0ea:	9203      	str	r2, [sp, #12]
 800a0ec:	7e0a      	ldrb	r2, [r1, #24]
 800a0ee:	000c      	movs	r4, r1
 800a0f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0f2:	2a78      	cmp	r2, #120	@ 0x78
 800a0f4:	d809      	bhi.n	800a10a <_printf_i+0x2e>
 800a0f6:	2a62      	cmp	r2, #98	@ 0x62
 800a0f8:	d80b      	bhi.n	800a112 <_printf_i+0x36>
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	d100      	bne.n	800a100 <_printf_i+0x24>
 800a0fe:	e0bc      	b.n	800a27a <_printf_i+0x19e>
 800a100:	497b      	ldr	r1, [pc, #492]	@ (800a2f0 <_printf_i+0x214>)
 800a102:	9104      	str	r1, [sp, #16]
 800a104:	2a58      	cmp	r2, #88	@ 0x58
 800a106:	d100      	bne.n	800a10a <_printf_i+0x2e>
 800a108:	e090      	b.n	800a22c <_printf_i+0x150>
 800a10a:	0025      	movs	r5, r4
 800a10c:	3542      	adds	r5, #66	@ 0x42
 800a10e:	702a      	strb	r2, [r5, #0]
 800a110:	e022      	b.n	800a158 <_printf_i+0x7c>
 800a112:	0010      	movs	r0, r2
 800a114:	3863      	subs	r0, #99	@ 0x63
 800a116:	2815      	cmp	r0, #21
 800a118:	d8f7      	bhi.n	800a10a <_printf_i+0x2e>
 800a11a:	f7f6 f807 	bl	800012c <__gnu_thumb1_case_shi>
 800a11e:	0016      	.short	0x0016
 800a120:	fff6001f 	.word	0xfff6001f
 800a124:	fff6fff6 	.word	0xfff6fff6
 800a128:	001ffff6 	.word	0x001ffff6
 800a12c:	fff6fff6 	.word	0xfff6fff6
 800a130:	fff6fff6 	.word	0xfff6fff6
 800a134:	003600a1 	.word	0x003600a1
 800a138:	fff60080 	.word	0xfff60080
 800a13c:	00b2fff6 	.word	0x00b2fff6
 800a140:	0036fff6 	.word	0x0036fff6
 800a144:	fff6fff6 	.word	0xfff6fff6
 800a148:	0084      	.short	0x0084
 800a14a:	0025      	movs	r5, r4
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	3542      	adds	r5, #66	@ 0x42
 800a150:	1d11      	adds	r1, r2, #4
 800a152:	6019      	str	r1, [r3, #0]
 800a154:	6813      	ldr	r3, [r2, #0]
 800a156:	702b      	strb	r3, [r5, #0]
 800a158:	2301      	movs	r3, #1
 800a15a:	e0a0      	b.n	800a29e <_printf_i+0x1c2>
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	6809      	ldr	r1, [r1, #0]
 800a160:	1d02      	adds	r2, r0, #4
 800a162:	060d      	lsls	r5, r1, #24
 800a164:	d50b      	bpl.n	800a17e <_printf_i+0xa2>
 800a166:	6806      	ldr	r6, [r0, #0]
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	2e00      	cmp	r6, #0
 800a16c:	da03      	bge.n	800a176 <_printf_i+0x9a>
 800a16e:	232d      	movs	r3, #45	@ 0x2d
 800a170:	9a03      	ldr	r2, [sp, #12]
 800a172:	4276      	negs	r6, r6
 800a174:	7013      	strb	r3, [r2, #0]
 800a176:	4b5e      	ldr	r3, [pc, #376]	@ (800a2f0 <_printf_i+0x214>)
 800a178:	270a      	movs	r7, #10
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	e018      	b.n	800a1b0 <_printf_i+0xd4>
 800a17e:	6806      	ldr	r6, [r0, #0]
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	0649      	lsls	r1, r1, #25
 800a184:	d5f1      	bpl.n	800a16a <_printf_i+0x8e>
 800a186:	b236      	sxth	r6, r6
 800a188:	e7ef      	b.n	800a16a <_printf_i+0x8e>
 800a18a:	6808      	ldr	r0, [r1, #0]
 800a18c:	6819      	ldr	r1, [r3, #0]
 800a18e:	c940      	ldmia	r1!, {r6}
 800a190:	0605      	lsls	r5, r0, #24
 800a192:	d402      	bmi.n	800a19a <_printf_i+0xbe>
 800a194:	0640      	lsls	r0, r0, #25
 800a196:	d500      	bpl.n	800a19a <_printf_i+0xbe>
 800a198:	b2b6      	uxth	r6, r6
 800a19a:	6019      	str	r1, [r3, #0]
 800a19c:	4b54      	ldr	r3, [pc, #336]	@ (800a2f0 <_printf_i+0x214>)
 800a19e:	270a      	movs	r7, #10
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	2a6f      	cmp	r2, #111	@ 0x6f
 800a1a4:	d100      	bne.n	800a1a8 <_printf_i+0xcc>
 800a1a6:	3f02      	subs	r7, #2
 800a1a8:	0023      	movs	r3, r4
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	3343      	adds	r3, #67	@ 0x43
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	6863      	ldr	r3, [r4, #4]
 800a1b2:	60a3      	str	r3, [r4, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	db03      	blt.n	800a1c0 <_printf_i+0xe4>
 800a1b8:	2104      	movs	r1, #4
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	438a      	bics	r2, r1
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	2e00      	cmp	r6, #0
 800a1c2:	d102      	bne.n	800a1ca <_printf_i+0xee>
 800a1c4:	9d03      	ldr	r5, [sp, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00c      	beq.n	800a1e4 <_printf_i+0x108>
 800a1ca:	9d03      	ldr	r5, [sp, #12]
 800a1cc:	0030      	movs	r0, r6
 800a1ce:	0039      	movs	r1, r7
 800a1d0:	f7f6 f83c 	bl	800024c <__aeabi_uidivmod>
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	3d01      	subs	r5, #1
 800a1d8:	5c5b      	ldrb	r3, [r3, r1]
 800a1da:	702b      	strb	r3, [r5, #0]
 800a1dc:	0033      	movs	r3, r6
 800a1de:	0006      	movs	r6, r0
 800a1e0:	429f      	cmp	r7, r3
 800a1e2:	d9f3      	bls.n	800a1cc <_printf_i+0xf0>
 800a1e4:	2f08      	cmp	r7, #8
 800a1e6:	d109      	bne.n	800a1fc <_printf_i+0x120>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	07db      	lsls	r3, r3, #31
 800a1ec:	d506      	bpl.n	800a1fc <_printf_i+0x120>
 800a1ee:	6862      	ldr	r2, [r4, #4]
 800a1f0:	6923      	ldr	r3, [r4, #16]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	dc02      	bgt.n	800a1fc <_printf_i+0x120>
 800a1f6:	2330      	movs	r3, #48	@ 0x30
 800a1f8:	3d01      	subs	r5, #1
 800a1fa:	702b      	strb	r3, [r5, #0]
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	1b5b      	subs	r3, r3, r5
 800a200:	6123      	str	r3, [r4, #16]
 800a202:	9b07      	ldr	r3, [sp, #28]
 800a204:	0021      	movs	r1, r4
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	9805      	ldr	r0, [sp, #20]
 800a20a:	9b06      	ldr	r3, [sp, #24]
 800a20c:	aa09      	add	r2, sp, #36	@ 0x24
 800a20e:	f7ff fef5 	bl	8009ffc <_printf_common>
 800a212:	3001      	adds	r0, #1
 800a214:	d148      	bne.n	800a2a8 <_printf_i+0x1cc>
 800a216:	2001      	movs	r0, #1
 800a218:	4240      	negs	r0, r0
 800a21a:	b00b      	add	sp, #44	@ 0x2c
 800a21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a21e:	2220      	movs	r2, #32
 800a220:	6809      	ldr	r1, [r1, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	6022      	str	r2, [r4, #0]
 800a226:	2278      	movs	r2, #120	@ 0x78
 800a228:	4932      	ldr	r1, [pc, #200]	@ (800a2f4 <_printf_i+0x218>)
 800a22a:	9104      	str	r1, [sp, #16]
 800a22c:	0021      	movs	r1, r4
 800a22e:	3145      	adds	r1, #69	@ 0x45
 800a230:	700a      	strb	r2, [r1, #0]
 800a232:	6819      	ldr	r1, [r3, #0]
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	c940      	ldmia	r1!, {r6}
 800a238:	0610      	lsls	r0, r2, #24
 800a23a:	d402      	bmi.n	800a242 <_printf_i+0x166>
 800a23c:	0650      	lsls	r0, r2, #25
 800a23e:	d500      	bpl.n	800a242 <_printf_i+0x166>
 800a240:	b2b6      	uxth	r6, r6
 800a242:	6019      	str	r1, [r3, #0]
 800a244:	07d3      	lsls	r3, r2, #31
 800a246:	d502      	bpl.n	800a24e <_printf_i+0x172>
 800a248:	2320      	movs	r3, #32
 800a24a:	4313      	orrs	r3, r2
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	2e00      	cmp	r6, #0
 800a250:	d001      	beq.n	800a256 <_printf_i+0x17a>
 800a252:	2710      	movs	r7, #16
 800a254:	e7a8      	b.n	800a1a8 <_printf_i+0xcc>
 800a256:	2220      	movs	r2, #32
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	4393      	bics	r3, r2
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	e7f8      	b.n	800a252 <_printf_i+0x176>
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	680d      	ldr	r5, [r1, #0]
 800a264:	1d10      	adds	r0, r2, #4
 800a266:	6949      	ldr	r1, [r1, #20]
 800a268:	6018      	str	r0, [r3, #0]
 800a26a:	6813      	ldr	r3, [r2, #0]
 800a26c:	062e      	lsls	r6, r5, #24
 800a26e:	d501      	bpl.n	800a274 <_printf_i+0x198>
 800a270:	6019      	str	r1, [r3, #0]
 800a272:	e002      	b.n	800a27a <_printf_i+0x19e>
 800a274:	066d      	lsls	r5, r5, #25
 800a276:	d5fb      	bpl.n	800a270 <_printf_i+0x194>
 800a278:	8019      	strh	r1, [r3, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	9d03      	ldr	r5, [sp, #12]
 800a27e:	6123      	str	r3, [r4, #16]
 800a280:	e7bf      	b.n	800a202 <_printf_i+0x126>
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	1d11      	adds	r1, r2, #4
 800a286:	6019      	str	r1, [r3, #0]
 800a288:	6815      	ldr	r5, [r2, #0]
 800a28a:	2100      	movs	r1, #0
 800a28c:	0028      	movs	r0, r5
 800a28e:	6862      	ldr	r2, [r4, #4]
 800a290:	f000 f9c9 	bl	800a626 <memchr>
 800a294:	2800      	cmp	r0, #0
 800a296:	d001      	beq.n	800a29c <_printf_i+0x1c0>
 800a298:	1b40      	subs	r0, r0, r5
 800a29a:	6060      	str	r0, [r4, #4]
 800a29c:	6863      	ldr	r3, [r4, #4]
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9a03      	ldr	r2, [sp, #12]
 800a2a4:	7013      	strb	r3, [r2, #0]
 800a2a6:	e7ac      	b.n	800a202 <_printf_i+0x126>
 800a2a8:	002a      	movs	r2, r5
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	9906      	ldr	r1, [sp, #24]
 800a2ae:	9805      	ldr	r0, [sp, #20]
 800a2b0:	9d07      	ldr	r5, [sp, #28]
 800a2b2:	47a8      	blx	r5
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d0ae      	beq.n	800a216 <_printf_i+0x13a>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	079b      	lsls	r3, r3, #30
 800a2bc:	d415      	bmi.n	800a2ea <_printf_i+0x20e>
 800a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c0:	68e0      	ldr	r0, [r4, #12]
 800a2c2:	4298      	cmp	r0, r3
 800a2c4:	daa9      	bge.n	800a21a <_printf_i+0x13e>
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	e7a7      	b.n	800a21a <_printf_i+0x13e>
 800a2ca:	0022      	movs	r2, r4
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	9906      	ldr	r1, [sp, #24]
 800a2d0:	9805      	ldr	r0, [sp, #20]
 800a2d2:	9e07      	ldr	r6, [sp, #28]
 800a2d4:	3219      	adds	r2, #25
 800a2d6:	47b0      	blx	r6
 800a2d8:	3001      	adds	r0, #1
 800a2da:	d09c      	beq.n	800a216 <_printf_i+0x13a>
 800a2dc:	3501      	adds	r5, #1
 800a2de:	68e3      	ldr	r3, [r4, #12]
 800a2e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e2:	1a9b      	subs	r3, r3, r2
 800a2e4:	42ab      	cmp	r3, r5
 800a2e6:	dcf0      	bgt.n	800a2ca <_printf_i+0x1ee>
 800a2e8:	e7e9      	b.n	800a2be <_printf_i+0x1e2>
 800a2ea:	2500      	movs	r5, #0
 800a2ec:	e7f7      	b.n	800a2de <_printf_i+0x202>
 800a2ee:	46c0      	nop			@ (mov r8, r8)
 800a2f0:	0800c6ce 	.word	0x0800c6ce
 800a2f4:	0800c6df 	.word	0x0800c6df

0800a2f8 <std>:
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	b510      	push	{r4, lr}
 800a2fc:	0004      	movs	r4, r0
 800a2fe:	6003      	str	r3, [r0, #0]
 800a300:	6043      	str	r3, [r0, #4]
 800a302:	6083      	str	r3, [r0, #8]
 800a304:	8181      	strh	r1, [r0, #12]
 800a306:	6643      	str	r3, [r0, #100]	@ 0x64
 800a308:	81c2      	strh	r2, [r0, #14]
 800a30a:	6103      	str	r3, [r0, #16]
 800a30c:	6143      	str	r3, [r0, #20]
 800a30e:	6183      	str	r3, [r0, #24]
 800a310:	0019      	movs	r1, r3
 800a312:	2208      	movs	r2, #8
 800a314:	305c      	adds	r0, #92	@ 0x5c
 800a316:	f000 f8ff 	bl	800a518 <memset>
 800a31a:	4b0b      	ldr	r3, [pc, #44]	@ (800a348 <std+0x50>)
 800a31c:	6224      	str	r4, [r4, #32]
 800a31e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a320:	4b0a      	ldr	r3, [pc, #40]	@ (800a34c <std+0x54>)
 800a322:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a324:	4b0a      	ldr	r3, [pc, #40]	@ (800a350 <std+0x58>)
 800a326:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a328:	4b0a      	ldr	r3, [pc, #40]	@ (800a354 <std+0x5c>)
 800a32a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a32c:	4b0a      	ldr	r3, [pc, #40]	@ (800a358 <std+0x60>)
 800a32e:	429c      	cmp	r4, r3
 800a330:	d005      	beq.n	800a33e <std+0x46>
 800a332:	4b0a      	ldr	r3, [pc, #40]	@ (800a35c <std+0x64>)
 800a334:	429c      	cmp	r4, r3
 800a336:	d002      	beq.n	800a33e <std+0x46>
 800a338:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <std+0x68>)
 800a33a:	429c      	cmp	r4, r3
 800a33c:	d103      	bne.n	800a346 <std+0x4e>
 800a33e:	0020      	movs	r0, r4
 800a340:	3058      	adds	r0, #88	@ 0x58
 800a342:	f000 f96d 	bl	800a620 <__retarget_lock_init_recursive>
 800a346:	bd10      	pop	{r4, pc}
 800a348:	0800a481 	.word	0x0800a481
 800a34c:	0800a4a9 	.word	0x0800a4a9
 800a350:	0800a4e1 	.word	0x0800a4e1
 800a354:	0800a50d 	.word	0x0800a50d
 800a358:	20000448 	.word	0x20000448
 800a35c:	200004b0 	.word	0x200004b0
 800a360:	20000518 	.word	0x20000518

0800a364 <stdio_exit_handler>:
 800a364:	b510      	push	{r4, lr}
 800a366:	4a03      	ldr	r2, [pc, #12]	@ (800a374 <stdio_exit_handler+0x10>)
 800a368:	4903      	ldr	r1, [pc, #12]	@ (800a378 <stdio_exit_handler+0x14>)
 800a36a:	4804      	ldr	r0, [pc, #16]	@ (800a37c <stdio_exit_handler+0x18>)
 800a36c:	f000 f86c 	bl	800a448 <_fwalk_sglue>
 800a370:	bd10      	pop	{r4, pc}
 800a372:	46c0      	nop			@ (mov r8, r8)
 800a374:	2000000c 	.word	0x2000000c
 800a378:	0800c029 	.word	0x0800c029
 800a37c:	2000001c 	.word	0x2000001c

0800a380 <cleanup_stdio>:
 800a380:	6841      	ldr	r1, [r0, #4]
 800a382:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b0 <cleanup_stdio+0x30>)
 800a384:	b510      	push	{r4, lr}
 800a386:	0004      	movs	r4, r0
 800a388:	4299      	cmp	r1, r3
 800a38a:	d001      	beq.n	800a390 <cleanup_stdio+0x10>
 800a38c:	f001 fe4c 	bl	800c028 <_fflush_r>
 800a390:	68a1      	ldr	r1, [r4, #8]
 800a392:	4b08      	ldr	r3, [pc, #32]	@ (800a3b4 <cleanup_stdio+0x34>)
 800a394:	4299      	cmp	r1, r3
 800a396:	d002      	beq.n	800a39e <cleanup_stdio+0x1e>
 800a398:	0020      	movs	r0, r4
 800a39a:	f001 fe45 	bl	800c028 <_fflush_r>
 800a39e:	68e1      	ldr	r1, [r4, #12]
 800a3a0:	4b05      	ldr	r3, [pc, #20]	@ (800a3b8 <cleanup_stdio+0x38>)
 800a3a2:	4299      	cmp	r1, r3
 800a3a4:	d002      	beq.n	800a3ac <cleanup_stdio+0x2c>
 800a3a6:	0020      	movs	r0, r4
 800a3a8:	f001 fe3e 	bl	800c028 <_fflush_r>
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	46c0      	nop			@ (mov r8, r8)
 800a3b0:	20000448 	.word	0x20000448
 800a3b4:	200004b0 	.word	0x200004b0
 800a3b8:	20000518 	.word	0x20000518

0800a3bc <global_stdio_init.part.0>:
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <global_stdio_init.part.0+0x28>)
 800a3c0:	4a09      	ldr	r2, [pc, #36]	@ (800a3e8 <global_stdio_init.part.0+0x2c>)
 800a3c2:	2104      	movs	r1, #4
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	4809      	ldr	r0, [pc, #36]	@ (800a3ec <global_stdio_init.part.0+0x30>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f7ff ff95 	bl	800a2f8 <std>
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	2109      	movs	r1, #9
 800a3d2:	4807      	ldr	r0, [pc, #28]	@ (800a3f0 <global_stdio_init.part.0+0x34>)
 800a3d4:	f7ff ff90 	bl	800a2f8 <std>
 800a3d8:	2202      	movs	r2, #2
 800a3da:	2112      	movs	r1, #18
 800a3dc:	4805      	ldr	r0, [pc, #20]	@ (800a3f4 <global_stdio_init.part.0+0x38>)
 800a3de:	f7ff ff8b 	bl	800a2f8 <std>
 800a3e2:	bd10      	pop	{r4, pc}
 800a3e4:	20000580 	.word	0x20000580
 800a3e8:	0800a365 	.word	0x0800a365
 800a3ec:	20000448 	.word	0x20000448
 800a3f0:	200004b0 	.word	0x200004b0
 800a3f4:	20000518 	.word	0x20000518

0800a3f8 <__sfp_lock_acquire>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	4802      	ldr	r0, [pc, #8]	@ (800a404 <__sfp_lock_acquire+0xc>)
 800a3fc:	f000 f911 	bl	800a622 <__retarget_lock_acquire_recursive>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	46c0      	nop			@ (mov r8, r8)
 800a404:	20000589 	.word	0x20000589

0800a408 <__sfp_lock_release>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	4802      	ldr	r0, [pc, #8]	@ (800a414 <__sfp_lock_release+0xc>)
 800a40c:	f000 f90a 	bl	800a624 <__retarget_lock_release_recursive>
 800a410:	bd10      	pop	{r4, pc}
 800a412:	46c0      	nop			@ (mov r8, r8)
 800a414:	20000589 	.word	0x20000589

0800a418 <__sinit>:
 800a418:	b510      	push	{r4, lr}
 800a41a:	0004      	movs	r4, r0
 800a41c:	f7ff ffec 	bl	800a3f8 <__sfp_lock_acquire>
 800a420:	6a23      	ldr	r3, [r4, #32]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <__sinit+0x14>
 800a426:	f7ff ffef 	bl	800a408 <__sfp_lock_release>
 800a42a:	bd10      	pop	{r4, pc}
 800a42c:	4b04      	ldr	r3, [pc, #16]	@ (800a440 <__sinit+0x28>)
 800a42e:	6223      	str	r3, [r4, #32]
 800a430:	4b04      	ldr	r3, [pc, #16]	@ (800a444 <__sinit+0x2c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f6      	bne.n	800a426 <__sinit+0xe>
 800a438:	f7ff ffc0 	bl	800a3bc <global_stdio_init.part.0>
 800a43c:	e7f3      	b.n	800a426 <__sinit+0xe>
 800a43e:	46c0      	nop			@ (mov r8, r8)
 800a440:	0800a381 	.word	0x0800a381
 800a444:	20000580 	.word	0x20000580

0800a448 <_fwalk_sglue>:
 800a448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a44a:	0014      	movs	r4, r2
 800a44c:	2600      	movs	r6, #0
 800a44e:	9000      	str	r0, [sp, #0]
 800a450:	9101      	str	r1, [sp, #4]
 800a452:	68a5      	ldr	r5, [r4, #8]
 800a454:	6867      	ldr	r7, [r4, #4]
 800a456:	3f01      	subs	r7, #1
 800a458:	d504      	bpl.n	800a464 <_fwalk_sglue+0x1c>
 800a45a:	6824      	ldr	r4, [r4, #0]
 800a45c:	2c00      	cmp	r4, #0
 800a45e:	d1f8      	bne.n	800a452 <_fwalk_sglue+0xa>
 800a460:	0030      	movs	r0, r6
 800a462:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a464:	89ab      	ldrh	r3, [r5, #12]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d908      	bls.n	800a47c <_fwalk_sglue+0x34>
 800a46a:	220e      	movs	r2, #14
 800a46c:	5eab      	ldrsh	r3, [r5, r2]
 800a46e:	3301      	adds	r3, #1
 800a470:	d004      	beq.n	800a47c <_fwalk_sglue+0x34>
 800a472:	0029      	movs	r1, r5
 800a474:	9800      	ldr	r0, [sp, #0]
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	4798      	blx	r3
 800a47a:	4306      	orrs	r6, r0
 800a47c:	3568      	adds	r5, #104	@ 0x68
 800a47e:	e7ea      	b.n	800a456 <_fwalk_sglue+0xe>

0800a480 <__sread>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	000c      	movs	r4, r1
 800a484:	250e      	movs	r5, #14
 800a486:	5f49      	ldrsh	r1, [r1, r5]
 800a488:	f000 f878 	bl	800a57c <_read_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	db03      	blt.n	800a498 <__sread+0x18>
 800a490:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a492:	181b      	adds	r3, r3, r0
 800a494:	6563      	str	r3, [r4, #84]	@ 0x54
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	4a02      	ldr	r2, [pc, #8]	@ (800a4a4 <__sread+0x24>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	e7f9      	b.n	800a496 <__sread+0x16>
 800a4a2:	46c0      	nop			@ (mov r8, r8)
 800a4a4:	ffffefff 	.word	0xffffefff

0800a4a8 <__swrite>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	001f      	movs	r7, r3
 800a4ac:	898b      	ldrh	r3, [r1, #12]
 800a4ae:	0005      	movs	r5, r0
 800a4b0:	000c      	movs	r4, r1
 800a4b2:	0016      	movs	r6, r2
 800a4b4:	05db      	lsls	r3, r3, #23
 800a4b6:	d505      	bpl.n	800a4c4 <__swrite+0x1c>
 800a4b8:	230e      	movs	r3, #14
 800a4ba:	5ec9      	ldrsh	r1, [r1, r3]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2302      	movs	r3, #2
 800a4c0:	f000 f848 	bl	800a554 <_lseek_r>
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	4a05      	ldr	r2, [pc, #20]	@ (800a4dc <__swrite+0x34>)
 800a4c8:	0028      	movs	r0, r5
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	0032      	movs	r2, r6
 800a4d0:	230e      	movs	r3, #14
 800a4d2:	5ee1      	ldrsh	r1, [r4, r3]
 800a4d4:	003b      	movs	r3, r7
 800a4d6:	f000 f865 	bl	800a5a4 <_write_r>
 800a4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4dc:	ffffefff 	.word	0xffffefff

0800a4e0 <__sseek>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	000c      	movs	r4, r1
 800a4e4:	250e      	movs	r5, #14
 800a4e6:	5f49      	ldrsh	r1, [r1, r5]
 800a4e8:	f000 f834 	bl	800a554 <_lseek_r>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	1c42      	adds	r2, r0, #1
 800a4f0:	d103      	bne.n	800a4fa <__sseek+0x1a>
 800a4f2:	4a05      	ldr	r2, [pc, #20]	@ (800a508 <__sseek+0x28>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	2280      	movs	r2, #128	@ 0x80
 800a4fc:	0152      	lsls	r2, r2, #5
 800a4fe:	4313      	orrs	r3, r2
 800a500:	81a3      	strh	r3, [r4, #12]
 800a502:	6560      	str	r0, [r4, #84]	@ 0x54
 800a504:	e7f8      	b.n	800a4f8 <__sseek+0x18>
 800a506:	46c0      	nop			@ (mov r8, r8)
 800a508:	ffffefff 	.word	0xffffefff

0800a50c <__sclose>:
 800a50c:	b510      	push	{r4, lr}
 800a50e:	230e      	movs	r3, #14
 800a510:	5ec9      	ldrsh	r1, [r1, r3]
 800a512:	f000 f80d 	bl	800a530 <_close_r>
 800a516:	bd10      	pop	{r4, pc}

0800a518 <memset>:
 800a518:	0003      	movs	r3, r0
 800a51a:	1882      	adds	r2, r0, r2
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d100      	bne.n	800a522 <memset+0xa>
 800a520:	4770      	bx	lr
 800a522:	7019      	strb	r1, [r3, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	e7f9      	b.n	800a51c <memset+0x4>

0800a528 <_localeconv_r>:
 800a528:	4800      	ldr	r0, [pc, #0]	@ (800a52c <_localeconv_r+0x4>)
 800a52a:	4770      	bx	lr
 800a52c:	20000158 	.word	0x20000158

0800a530 <_close_r>:
 800a530:	2300      	movs	r3, #0
 800a532:	b570      	push	{r4, r5, r6, lr}
 800a534:	4d06      	ldr	r5, [pc, #24]	@ (800a550 <_close_r+0x20>)
 800a536:	0004      	movs	r4, r0
 800a538:	0008      	movs	r0, r1
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	f7fa fd3a 	bl	8004fb4 <_close>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d103      	bne.n	800a54c <_close_r+0x1c>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d000      	beq.n	800a54c <_close_r+0x1c>
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	bd70      	pop	{r4, r5, r6, pc}
 800a54e:	46c0      	nop			@ (mov r8, r8)
 800a550:	20000584 	.word	0x20000584

0800a554 <_lseek_r>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	0004      	movs	r4, r0
 800a558:	0008      	movs	r0, r1
 800a55a:	0011      	movs	r1, r2
 800a55c:	001a      	movs	r2, r3
 800a55e:	2300      	movs	r3, #0
 800a560:	4d05      	ldr	r5, [pc, #20]	@ (800a578 <_lseek_r+0x24>)
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	f7fa fd47 	bl	8004ff6 <_lseek>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d103      	bne.n	800a574 <_lseek_r+0x20>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d000      	beq.n	800a574 <_lseek_r+0x20>
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	46c0      	nop			@ (mov r8, r8)
 800a578:	20000584 	.word	0x20000584

0800a57c <_read_r>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	0004      	movs	r4, r0
 800a580:	0008      	movs	r0, r1
 800a582:	0011      	movs	r1, r2
 800a584:	001a      	movs	r2, r3
 800a586:	2300      	movs	r3, #0
 800a588:	4d05      	ldr	r5, [pc, #20]	@ (800a5a0 <_read_r+0x24>)
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	f7fa fcd9 	bl	8004f42 <_read>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	d103      	bne.n	800a59c <_read_r+0x20>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d000      	beq.n	800a59c <_read_r+0x20>
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	46c0      	nop			@ (mov r8, r8)
 800a5a0:	20000584 	.word	0x20000584

0800a5a4 <_write_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	0004      	movs	r4, r0
 800a5a8:	0008      	movs	r0, r1
 800a5aa:	0011      	movs	r1, r2
 800a5ac:	001a      	movs	r2, r3
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4d05      	ldr	r5, [pc, #20]	@ (800a5c8 <_write_r+0x24>)
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7fa fce2 	bl	8004f7c <_write>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d103      	bne.n	800a5c4 <_write_r+0x20>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d000      	beq.n	800a5c4 <_write_r+0x20>
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	46c0      	nop			@ (mov r8, r8)
 800a5c8:	20000584 	.word	0x20000584

0800a5cc <__errno>:
 800a5cc:	4b01      	ldr	r3, [pc, #4]	@ (800a5d4 <__errno+0x8>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	4770      	bx	lr
 800a5d2:	46c0      	nop			@ (mov r8, r8)
 800a5d4:	20000018 	.word	0x20000018

0800a5d8 <__libc_init_array>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	2600      	movs	r6, #0
 800a5dc:	4c0c      	ldr	r4, [pc, #48]	@ (800a610 <__libc_init_array+0x38>)
 800a5de:	4d0d      	ldr	r5, [pc, #52]	@ (800a614 <__libc_init_array+0x3c>)
 800a5e0:	1b64      	subs	r4, r4, r5
 800a5e2:	10a4      	asrs	r4, r4, #2
 800a5e4:	42a6      	cmp	r6, r4
 800a5e6:	d109      	bne.n	800a5fc <__libc_init_array+0x24>
 800a5e8:	2600      	movs	r6, #0
 800a5ea:	f001 ff5f 	bl	800c4ac <_init>
 800a5ee:	4c0a      	ldr	r4, [pc, #40]	@ (800a618 <__libc_init_array+0x40>)
 800a5f0:	4d0a      	ldr	r5, [pc, #40]	@ (800a61c <__libc_init_array+0x44>)
 800a5f2:	1b64      	subs	r4, r4, r5
 800a5f4:	10a4      	asrs	r4, r4, #2
 800a5f6:	42a6      	cmp	r6, r4
 800a5f8:	d105      	bne.n	800a606 <__libc_init_array+0x2e>
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	00b3      	lsls	r3, r6, #2
 800a5fe:	58eb      	ldr	r3, [r5, r3]
 800a600:	4798      	blx	r3
 800a602:	3601      	adds	r6, #1
 800a604:	e7ee      	b.n	800a5e4 <__libc_init_array+0xc>
 800a606:	00b3      	lsls	r3, r6, #2
 800a608:	58eb      	ldr	r3, [r5, r3]
 800a60a:	4798      	blx	r3
 800a60c:	3601      	adds	r6, #1
 800a60e:	e7f2      	b.n	800a5f6 <__libc_init_array+0x1e>
 800a610:	0800ca38 	.word	0x0800ca38
 800a614:	0800ca38 	.word	0x0800ca38
 800a618:	0800ca3c 	.word	0x0800ca3c
 800a61c:	0800ca38 	.word	0x0800ca38

0800a620 <__retarget_lock_init_recursive>:
 800a620:	4770      	bx	lr

0800a622 <__retarget_lock_acquire_recursive>:
 800a622:	4770      	bx	lr

0800a624 <__retarget_lock_release_recursive>:
 800a624:	4770      	bx	lr

0800a626 <memchr>:
 800a626:	b2c9      	uxtb	r1, r1
 800a628:	1882      	adds	r2, r0, r2
 800a62a:	4290      	cmp	r0, r2
 800a62c:	d101      	bne.n	800a632 <memchr+0xc>
 800a62e:	2000      	movs	r0, #0
 800a630:	4770      	bx	lr
 800a632:	7803      	ldrb	r3, [r0, #0]
 800a634:	428b      	cmp	r3, r1
 800a636:	d0fb      	beq.n	800a630 <memchr+0xa>
 800a638:	3001      	adds	r0, #1
 800a63a:	e7f6      	b.n	800a62a <memchr+0x4>

0800a63c <quorem>:
 800a63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a63e:	6902      	ldr	r2, [r0, #16]
 800a640:	690f      	ldr	r7, [r1, #16]
 800a642:	b087      	sub	sp, #28
 800a644:	0006      	movs	r6, r0
 800a646:	000b      	movs	r3, r1
 800a648:	2000      	movs	r0, #0
 800a64a:	9102      	str	r1, [sp, #8]
 800a64c:	42ba      	cmp	r2, r7
 800a64e:	db6d      	blt.n	800a72c <quorem+0xf0>
 800a650:	3f01      	subs	r7, #1
 800a652:	00bc      	lsls	r4, r7, #2
 800a654:	3314      	adds	r3, #20
 800a656:	9305      	str	r3, [sp, #20]
 800a658:	191b      	adds	r3, r3, r4
 800a65a:	9303      	str	r3, [sp, #12]
 800a65c:	0033      	movs	r3, r6
 800a65e:	3314      	adds	r3, #20
 800a660:	191c      	adds	r4, r3, r4
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	9304      	str	r3, [sp, #16]
 800a668:	9b03      	ldr	r3, [sp, #12]
 800a66a:	9804      	ldr	r0, [sp, #16]
 800a66c:	681d      	ldr	r5, [r3, #0]
 800a66e:	3501      	adds	r5, #1
 800a670:	0029      	movs	r1, r5
 800a672:	f7f5 fd65 	bl	8000140 <__udivsi3>
 800a676:	9b04      	ldr	r3, [sp, #16]
 800a678:	9000      	str	r0, [sp, #0]
 800a67a:	42ab      	cmp	r3, r5
 800a67c:	d32b      	bcc.n	800a6d6 <quorem+0x9a>
 800a67e:	9b05      	ldr	r3, [sp, #20]
 800a680:	9d01      	ldr	r5, [sp, #4]
 800a682:	469c      	mov	ip, r3
 800a684:	2300      	movs	r3, #0
 800a686:	9305      	str	r3, [sp, #20]
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	4662      	mov	r2, ip
 800a68c:	ca08      	ldmia	r2!, {r3}
 800a68e:	6828      	ldr	r0, [r5, #0]
 800a690:	4694      	mov	ip, r2
 800a692:	9a00      	ldr	r2, [sp, #0]
 800a694:	b299      	uxth	r1, r3
 800a696:	4351      	muls	r1, r2
 800a698:	9a05      	ldr	r2, [sp, #20]
 800a69a:	0c1b      	lsrs	r3, r3, #16
 800a69c:	1889      	adds	r1, r1, r2
 800a69e:	9a00      	ldr	r2, [sp, #0]
 800a6a0:	4353      	muls	r3, r2
 800a6a2:	0c0a      	lsrs	r2, r1, #16
 800a6a4:	189b      	adds	r3, r3, r2
 800a6a6:	0c1a      	lsrs	r2, r3, #16
 800a6a8:	b289      	uxth	r1, r1
 800a6aa:	9205      	str	r2, [sp, #20]
 800a6ac:	b282      	uxth	r2, r0
 800a6ae:	1a52      	subs	r2, r2, r1
 800a6b0:	9904      	ldr	r1, [sp, #16]
 800a6b2:	0c00      	lsrs	r0, r0, #16
 800a6b4:	1852      	adds	r2, r2, r1
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	1411      	asrs	r1, r2, #16
 800a6ba:	1ac3      	subs	r3, r0, r3
 800a6bc:	185b      	adds	r3, r3, r1
 800a6be:	1419      	asrs	r1, r3, #16
 800a6c0:	b292      	uxth	r2, r2
 800a6c2:	041b      	lsls	r3, r3, #16
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	9104      	str	r1, [sp, #16]
 800a6ca:	c504      	stmia	r5!, {r2}
 800a6cc:	4563      	cmp	r3, ip
 800a6ce:	d2dc      	bcs.n	800a68a <quorem+0x4e>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d030      	beq.n	800a738 <quorem+0xfc>
 800a6d6:	0030      	movs	r0, r6
 800a6d8:	9902      	ldr	r1, [sp, #8]
 800a6da:	f001 f9c5 	bl	800ba68 <__mcmp>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	db23      	blt.n	800a72a <quorem+0xee>
 800a6e2:	0034      	movs	r4, r6
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	9902      	ldr	r1, [sp, #8]
 800a6e8:	3414      	adds	r4, #20
 800a6ea:	3114      	adds	r1, #20
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	c901      	ldmia	r1!, {r0}
 800a6f0:	9302      	str	r3, [sp, #8]
 800a6f2:	466b      	mov	r3, sp
 800a6f4:	891b      	ldrh	r3, [r3, #8]
 800a6f6:	b282      	uxth	r2, r0
 800a6f8:	1a9a      	subs	r2, r3, r2
 800a6fa:	9b02      	ldr	r3, [sp, #8]
 800a6fc:	1952      	adds	r2, r2, r5
 800a6fe:	0c00      	lsrs	r0, r0, #16
 800a700:	0c1b      	lsrs	r3, r3, #16
 800a702:	1a1b      	subs	r3, r3, r0
 800a704:	1410      	asrs	r0, r2, #16
 800a706:	181b      	adds	r3, r3, r0
 800a708:	141d      	asrs	r5, r3, #16
 800a70a:	b292      	uxth	r2, r2
 800a70c:	041b      	lsls	r3, r3, #16
 800a70e:	431a      	orrs	r2, r3
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	c404      	stmia	r4!, {r2}
 800a714:	428b      	cmp	r3, r1
 800a716:	d2e9      	bcs.n	800a6ec <quorem+0xb0>
 800a718:	9a01      	ldr	r2, [sp, #4]
 800a71a:	00bb      	lsls	r3, r7, #2
 800a71c:	18d3      	adds	r3, r2, r3
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	2a00      	cmp	r2, #0
 800a722:	d013      	beq.n	800a74c <quorem+0x110>
 800a724:	9b00      	ldr	r3, [sp, #0]
 800a726:	3301      	adds	r3, #1
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	9800      	ldr	r0, [sp, #0]
 800a72c:	b007      	add	sp, #28
 800a72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d104      	bne.n	800a740 <quorem+0x104>
 800a736:	3f01      	subs	r7, #1
 800a738:	9b01      	ldr	r3, [sp, #4]
 800a73a:	3c04      	subs	r4, #4
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	d3f7      	bcc.n	800a730 <quorem+0xf4>
 800a740:	6137      	str	r7, [r6, #16]
 800a742:	e7c8      	b.n	800a6d6 <quorem+0x9a>
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	2a00      	cmp	r2, #0
 800a748:	d104      	bne.n	800a754 <quorem+0x118>
 800a74a:	3f01      	subs	r7, #1
 800a74c:	9a01      	ldr	r2, [sp, #4]
 800a74e:	3b04      	subs	r3, #4
 800a750:	429a      	cmp	r2, r3
 800a752:	d3f7      	bcc.n	800a744 <quorem+0x108>
 800a754:	6137      	str	r7, [r6, #16]
 800a756:	e7e5      	b.n	800a724 <quorem+0xe8>

0800a758 <_dtoa_r>:
 800a758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75a:	0014      	movs	r4, r2
 800a75c:	001d      	movs	r5, r3
 800a75e:	69c6      	ldr	r6, [r0, #28]
 800a760:	b09d      	sub	sp, #116	@ 0x74
 800a762:	940a      	str	r4, [sp, #40]	@ 0x28
 800a764:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a766:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a768:	9003      	str	r0, [sp, #12]
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	d10f      	bne.n	800a78e <_dtoa_r+0x36>
 800a76e:	2010      	movs	r0, #16
 800a770:	f000 fe30 	bl	800b3d4 <malloc>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	1e02      	subs	r2, r0, #0
 800a778:	61d8      	str	r0, [r3, #28]
 800a77a:	d104      	bne.n	800a786 <_dtoa_r+0x2e>
 800a77c:	21ef      	movs	r1, #239	@ 0xef
 800a77e:	4bc7      	ldr	r3, [pc, #796]	@ (800aa9c <_dtoa_r+0x344>)
 800a780:	48c7      	ldr	r0, [pc, #796]	@ (800aaa0 <_dtoa_r+0x348>)
 800a782:	f001 fd39 	bl	800c1f8 <__assert_func>
 800a786:	6046      	str	r6, [r0, #4]
 800a788:	6086      	str	r6, [r0, #8]
 800a78a:	6006      	str	r6, [r0, #0]
 800a78c:	60c6      	str	r6, [r0, #12]
 800a78e:	9b03      	ldr	r3, [sp, #12]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	2900      	cmp	r1, #0
 800a796:	d00b      	beq.n	800a7b0 <_dtoa_r+0x58>
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	2301      	movs	r3, #1
 800a79c:	4093      	lsls	r3, r2
 800a79e:	604a      	str	r2, [r1, #4]
 800a7a0:	608b      	str	r3, [r1, #8]
 800a7a2:	9803      	ldr	r0, [sp, #12]
 800a7a4:	f000 ff16 	bl	800b5d4 <_Bfree>
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	da1e      	bge.n	800a7f2 <_dtoa_r+0x9a>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	006b      	lsls	r3, r5, #1
 800a7ba:	085b      	lsrs	r3, r3, #1
 800a7bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7be:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a7c0:	4bb8      	ldr	r3, [pc, #736]	@ (800aaa4 <_dtoa_r+0x34c>)
 800a7c2:	4ab8      	ldr	r2, [pc, #736]	@ (800aaa4 <_dtoa_r+0x34c>)
 800a7c4:	403b      	ands	r3, r7
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d116      	bne.n	800a7f8 <_dtoa_r+0xa0>
 800a7ca:	4bb7      	ldr	r3, [pc, #732]	@ (800aaa8 <_dtoa_r+0x350>)
 800a7cc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	033b      	lsls	r3, r7, #12
 800a7d2:	0b1b      	lsrs	r3, r3, #12
 800a7d4:	4323      	orrs	r3, r4
 800a7d6:	d101      	bne.n	800a7dc <_dtoa_r+0x84>
 800a7d8:	f000 fd83 	bl	800b2e2 <_dtoa_r+0xb8a>
 800a7dc:	4bb3      	ldr	r3, [pc, #716]	@ (800aaac <_dtoa_r+0x354>)
 800a7de:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a7e0:	9308      	str	r3, [sp, #32]
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d002      	beq.n	800a7ec <_dtoa_r+0x94>
 800a7e6:	4bb2      	ldr	r3, [pc, #712]	@ (800aab0 <_dtoa_r+0x358>)
 800a7e8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	9808      	ldr	r0, [sp, #32]
 800a7ee:	b01d      	add	sp, #116	@ 0x74
 800a7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	603b      	str	r3, [r7, #0]
 800a7f6:	e7e2      	b.n	800a7be <_dtoa_r+0x66>
 800a7f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7fc:	9212      	str	r2, [sp, #72]	@ 0x48
 800a7fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a800:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a802:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a804:	2200      	movs	r2, #0
 800a806:	2300      	movs	r3, #0
 800a808:	f7f5 fe20 	bl	800044c <__aeabi_dcmpeq>
 800a80c:	1e06      	subs	r6, r0, #0
 800a80e:	d00b      	beq.n	800a828 <_dtoa_r+0xd0>
 800a810:	2301      	movs	r3, #1
 800a812:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <_dtoa_r+0xca>
 800a81c:	4ba5      	ldr	r3, [pc, #660]	@ (800aab4 <_dtoa_r+0x35c>)
 800a81e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	4ba5      	ldr	r3, [pc, #660]	@ (800aab8 <_dtoa_r+0x360>)
 800a824:	9308      	str	r3, [sp, #32]
 800a826:	e7e1      	b.n	800a7ec <_dtoa_r+0x94>
 800a828:	ab1a      	add	r3, sp, #104	@ 0x68
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	9803      	ldr	r0, [sp, #12]
 800a832:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a834:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a836:	f001 f9cd 	bl	800bbd4 <__d2b>
 800a83a:	007a      	lsls	r2, r7, #1
 800a83c:	9005      	str	r0, [sp, #20]
 800a83e:	0d52      	lsrs	r2, r2, #21
 800a840:	d100      	bne.n	800a844 <_dtoa_r+0xec>
 800a842:	e07b      	b.n	800a93c <_dtoa_r+0x1e4>
 800a844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a846:	9618      	str	r6, [sp, #96]	@ 0x60
 800a848:	0319      	lsls	r1, r3, #12
 800a84a:	4b9c      	ldr	r3, [pc, #624]	@ (800aabc <_dtoa_r+0x364>)
 800a84c:	0b09      	lsrs	r1, r1, #12
 800a84e:	430b      	orrs	r3, r1
 800a850:	499b      	ldr	r1, [pc, #620]	@ (800aac0 <_dtoa_r+0x368>)
 800a852:	1857      	adds	r7, r2, r1
 800a854:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a856:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a858:	0019      	movs	r1, r3
 800a85a:	2200      	movs	r2, #0
 800a85c:	4b99      	ldr	r3, [pc, #612]	@ (800aac4 <_dtoa_r+0x36c>)
 800a85e:	f7f7 f9f9 	bl	8001c54 <__aeabi_dsub>
 800a862:	4a99      	ldr	r2, [pc, #612]	@ (800aac8 <_dtoa_r+0x370>)
 800a864:	4b99      	ldr	r3, [pc, #612]	@ (800aacc <_dtoa_r+0x374>)
 800a866:	f7f6 ff2d 	bl	80016c4 <__aeabi_dmul>
 800a86a:	4a99      	ldr	r2, [pc, #612]	@ (800aad0 <_dtoa_r+0x378>)
 800a86c:	4b99      	ldr	r3, [pc, #612]	@ (800aad4 <_dtoa_r+0x37c>)
 800a86e:	f7f5 ff81 	bl	8000774 <__aeabi_dadd>
 800a872:	0004      	movs	r4, r0
 800a874:	0038      	movs	r0, r7
 800a876:	000d      	movs	r5, r1
 800a878:	f7f7 fde6 	bl	8002448 <__aeabi_i2d>
 800a87c:	4a96      	ldr	r2, [pc, #600]	@ (800aad8 <_dtoa_r+0x380>)
 800a87e:	4b97      	ldr	r3, [pc, #604]	@ (800aadc <_dtoa_r+0x384>)
 800a880:	f7f6 ff20 	bl	80016c4 <__aeabi_dmul>
 800a884:	0002      	movs	r2, r0
 800a886:	000b      	movs	r3, r1
 800a888:	0020      	movs	r0, r4
 800a88a:	0029      	movs	r1, r5
 800a88c:	f7f5 ff72 	bl	8000774 <__aeabi_dadd>
 800a890:	0004      	movs	r4, r0
 800a892:	000d      	movs	r5, r1
 800a894:	f7f7 fd9c 	bl	80023d0 <__aeabi_d2iz>
 800a898:	2200      	movs	r2, #0
 800a89a:	9004      	str	r0, [sp, #16]
 800a89c:	2300      	movs	r3, #0
 800a89e:	0020      	movs	r0, r4
 800a8a0:	0029      	movs	r1, r5
 800a8a2:	f7f5 fdd9 	bl	8000458 <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d00b      	beq.n	800a8c2 <_dtoa_r+0x16a>
 800a8aa:	9804      	ldr	r0, [sp, #16]
 800a8ac:	f7f7 fdcc 	bl	8002448 <__aeabi_i2d>
 800a8b0:	002b      	movs	r3, r5
 800a8b2:	0022      	movs	r2, r4
 800a8b4:	f7f5 fdca 	bl	800044c <__aeabi_dcmpeq>
 800a8b8:	4243      	negs	r3, r0
 800a8ba:	4158      	adcs	r0, r3
 800a8bc:	9b04      	ldr	r3, [sp, #16]
 800a8be:	1a1b      	subs	r3, r3, r0
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	2b16      	cmp	r3, #22
 800a8ca:	d810      	bhi.n	800a8ee <_dtoa_r+0x196>
 800a8cc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a8ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a8d0:	9a04      	ldr	r2, [sp, #16]
 800a8d2:	4b83      	ldr	r3, [pc, #524]	@ (800aae0 <_dtoa_r+0x388>)
 800a8d4:	00d2      	lsls	r2, r2, #3
 800a8d6:	189b      	adds	r3, r3, r2
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f7f5 fdbc 	bl	8000458 <__aeabi_dcmplt>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d047      	beq.n	800a974 <_dtoa_r+0x21c>
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a8f2:	9206      	str	r2, [sp, #24]
 800a8f4:	1bdb      	subs	r3, r3, r7
 800a8f6:	1e5a      	subs	r2, r3, #1
 800a8f8:	d53e      	bpl.n	800a978 <_dtoa_r+0x220>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	9306      	str	r3, [sp, #24]
 800a900:	2300      	movs	r3, #0
 800a902:	930d      	str	r3, [sp, #52]	@ 0x34
 800a904:	9b04      	ldr	r3, [sp, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	db38      	blt.n	800a97c <_dtoa_r+0x224>
 800a90a:	9a04      	ldr	r2, [sp, #16]
 800a90c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a90e:	4694      	mov	ip, r2
 800a910:	4463      	add	r3, ip
 800a912:	930d      	str	r3, [sp, #52]	@ 0x34
 800a914:	2300      	movs	r3, #0
 800a916:	9214      	str	r2, [sp, #80]	@ 0x50
 800a918:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a91a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a91c:	2401      	movs	r4, #1
 800a91e:	2b09      	cmp	r3, #9
 800a920:	d867      	bhi.n	800a9f2 <_dtoa_r+0x29a>
 800a922:	2b05      	cmp	r3, #5
 800a924:	dd02      	ble.n	800a92c <_dtoa_r+0x1d4>
 800a926:	2400      	movs	r4, #0
 800a928:	3b04      	subs	r3, #4
 800a92a:	9322      	str	r3, [sp, #136]	@ 0x88
 800a92c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a92e:	1e98      	subs	r0, r3, #2
 800a930:	2803      	cmp	r0, #3
 800a932:	d867      	bhi.n	800aa04 <_dtoa_r+0x2ac>
 800a934:	f7f5 fbf0 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a938:	5b383a2b 	.word	0x5b383a2b
 800a93c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a93e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a940:	18f6      	adds	r6, r6, r3
 800a942:	4b68      	ldr	r3, [pc, #416]	@ (800aae4 <_dtoa_r+0x38c>)
 800a944:	18f2      	adds	r2, r6, r3
 800a946:	2a20      	cmp	r2, #32
 800a948:	dd0f      	ble.n	800a96a <_dtoa_r+0x212>
 800a94a:	2340      	movs	r3, #64	@ 0x40
 800a94c:	1a9b      	subs	r3, r3, r2
 800a94e:	409f      	lsls	r7, r3
 800a950:	4b65      	ldr	r3, [pc, #404]	@ (800aae8 <_dtoa_r+0x390>)
 800a952:	0038      	movs	r0, r7
 800a954:	18f3      	adds	r3, r6, r3
 800a956:	40dc      	lsrs	r4, r3
 800a958:	4320      	orrs	r0, r4
 800a95a:	f7f7 fda3 	bl	80024a4 <__aeabi_ui2d>
 800a95e:	2201      	movs	r2, #1
 800a960:	4b62      	ldr	r3, [pc, #392]	@ (800aaec <_dtoa_r+0x394>)
 800a962:	1e77      	subs	r7, r6, #1
 800a964:	18cb      	adds	r3, r1, r3
 800a966:	9218      	str	r2, [sp, #96]	@ 0x60
 800a968:	e776      	b.n	800a858 <_dtoa_r+0x100>
 800a96a:	2320      	movs	r3, #32
 800a96c:	0020      	movs	r0, r4
 800a96e:	1a9b      	subs	r3, r3, r2
 800a970:	4098      	lsls	r0, r3
 800a972:	e7f2      	b.n	800a95a <_dtoa_r+0x202>
 800a974:	9015      	str	r0, [sp, #84]	@ 0x54
 800a976:	e7ba      	b.n	800a8ee <_dtoa_r+0x196>
 800a978:	920d      	str	r2, [sp, #52]	@ 0x34
 800a97a:	e7c3      	b.n	800a904 <_dtoa_r+0x1ac>
 800a97c:	9b06      	ldr	r3, [sp, #24]
 800a97e:	9a04      	ldr	r2, [sp, #16]
 800a980:	1a9b      	subs	r3, r3, r2
 800a982:	9306      	str	r3, [sp, #24]
 800a984:	4253      	negs	r3, r2
 800a986:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a988:	2300      	movs	r3, #0
 800a98a:	9314      	str	r3, [sp, #80]	@ 0x50
 800a98c:	e7c5      	b.n	800a91a <_dtoa_r+0x1c2>
 800a98e:	2300      	movs	r3, #0
 800a990:	9310      	str	r3, [sp, #64]	@ 0x40
 800a992:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a994:	930e      	str	r3, [sp, #56]	@ 0x38
 800a996:	9309      	str	r3, [sp, #36]	@ 0x24
 800a998:	2b00      	cmp	r3, #0
 800a99a:	dc13      	bgt.n	800a9c4 <_dtoa_r+0x26c>
 800a99c:	2301      	movs	r3, #1
 800a99e:	001a      	movs	r2, r3
 800a9a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a9a6:	e00d      	b.n	800a9c4 <_dtoa_r+0x26c>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e7f1      	b.n	800a990 <_dtoa_r+0x238>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9b2:	4694      	mov	ip, r2
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	4463      	add	r3, ip
 800a9b8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dc00      	bgt.n	800a9c4 <_dtoa_r+0x26c>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	9a03      	ldr	r2, [sp, #12]
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	69d0      	ldr	r0, [r2, #28]
 800a9ca:	2204      	movs	r2, #4
 800a9cc:	0015      	movs	r5, r2
 800a9ce:	3514      	adds	r5, #20
 800a9d0:	429d      	cmp	r5, r3
 800a9d2:	d91b      	bls.n	800aa0c <_dtoa_r+0x2b4>
 800a9d4:	6041      	str	r1, [r0, #4]
 800a9d6:	9803      	ldr	r0, [sp, #12]
 800a9d8:	f000 fdb8 	bl	800b54c <_Balloc>
 800a9dc:	9008      	str	r0, [sp, #32]
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d117      	bne.n	800aa12 <_dtoa_r+0x2ba>
 800a9e2:	21b0      	movs	r1, #176	@ 0xb0
 800a9e4:	4b42      	ldr	r3, [pc, #264]	@ (800aaf0 <_dtoa_r+0x398>)
 800a9e6:	482e      	ldr	r0, [pc, #184]	@ (800aaa0 <_dtoa_r+0x348>)
 800a9e8:	9a08      	ldr	r2, [sp, #32]
 800a9ea:	31ff      	adds	r1, #255	@ 0xff
 800a9ec:	e6c9      	b.n	800a782 <_dtoa_r+0x2a>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e7dd      	b.n	800a9ae <_dtoa_r+0x256>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9410      	str	r4, [sp, #64]	@ 0x40
 800a9f6:	9322      	str	r3, [sp, #136]	@ 0x88
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9fe:	2200      	movs	r2, #0
 800aa00:	3313      	adds	r3, #19
 800aa02:	e7cf      	b.n	800a9a4 <_dtoa_r+0x24c>
 800aa04:	2301      	movs	r3, #1
 800aa06:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa08:	3b02      	subs	r3, #2
 800aa0a:	e7f6      	b.n	800a9fa <_dtoa_r+0x2a2>
 800aa0c:	3101      	adds	r1, #1
 800aa0e:	0052      	lsls	r2, r2, #1
 800aa10:	e7dc      	b.n	800a9cc <_dtoa_r+0x274>
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	9a08      	ldr	r2, [sp, #32]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1c:	2b0e      	cmp	r3, #14
 800aa1e:	d900      	bls.n	800aa22 <_dtoa_r+0x2ca>
 800aa20:	e0d9      	b.n	800abd6 <_dtoa_r+0x47e>
 800aa22:	2c00      	cmp	r4, #0
 800aa24:	d100      	bne.n	800aa28 <_dtoa_r+0x2d0>
 800aa26:	e0d6      	b.n	800abd6 <_dtoa_r+0x47e>
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dd64      	ble.n	800aaf8 <_dtoa_r+0x3a0>
 800aa2e:	210f      	movs	r1, #15
 800aa30:	9a04      	ldr	r2, [sp, #16]
 800aa32:	4b2b      	ldr	r3, [pc, #172]	@ (800aae0 <_dtoa_r+0x388>)
 800aa34:	400a      	ands	r2, r1
 800aa36:	00d2      	lsls	r2, r2, #3
 800aa38:	189b      	adds	r3, r3, r2
 800aa3a:	681e      	ldr	r6, [r3, #0]
 800aa3c:	685f      	ldr	r7, [r3, #4]
 800aa3e:	9b04      	ldr	r3, [sp, #16]
 800aa40:	2402      	movs	r4, #2
 800aa42:	111d      	asrs	r5, r3, #4
 800aa44:	05db      	lsls	r3, r3, #23
 800aa46:	d50a      	bpl.n	800aa5e <_dtoa_r+0x306>
 800aa48:	4b2a      	ldr	r3, [pc, #168]	@ (800aaf4 <_dtoa_r+0x39c>)
 800aa4a:	400d      	ands	r5, r1
 800aa4c:	6a1a      	ldr	r2, [r3, #32]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa50:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aa52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aa54:	f7f6 f9f2 	bl	8000e3c <__aeabi_ddiv>
 800aa58:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa5a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa5c:	3401      	adds	r4, #1
 800aa5e:	4b25      	ldr	r3, [pc, #148]	@ (800aaf4 <_dtoa_r+0x39c>)
 800aa60:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa62:	2d00      	cmp	r5, #0
 800aa64:	d108      	bne.n	800aa78 <_dtoa_r+0x320>
 800aa66:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa6a:	0032      	movs	r2, r6
 800aa6c:	003b      	movs	r3, r7
 800aa6e:	f7f6 f9e5 	bl	8000e3c <__aeabi_ddiv>
 800aa72:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa74:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa76:	e05a      	b.n	800ab2e <_dtoa_r+0x3d6>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	421d      	tst	r5, r3
 800aa7c:	d009      	beq.n	800aa92 <_dtoa_r+0x33a>
 800aa7e:	18e4      	adds	r4, r4, r3
 800aa80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa82:	0030      	movs	r0, r6
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	0039      	movs	r1, r7
 800aa8a:	f7f6 fe1b 	bl	80016c4 <__aeabi_dmul>
 800aa8e:	0006      	movs	r6, r0
 800aa90:	000f      	movs	r7, r1
 800aa92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa94:	106d      	asrs	r5, r5, #1
 800aa96:	3308      	adds	r3, #8
 800aa98:	e7e2      	b.n	800aa60 <_dtoa_r+0x308>
 800aa9a:	46c0      	nop			@ (mov r8, r8)
 800aa9c:	0800c6fd 	.word	0x0800c6fd
 800aaa0:	0800c714 	.word	0x0800c714
 800aaa4:	7ff00000 	.word	0x7ff00000
 800aaa8:	0000270f 	.word	0x0000270f
 800aaac:	0800c6f9 	.word	0x0800c6f9
 800aab0:	0800c6fc 	.word	0x0800c6fc
 800aab4:	0800c6cd 	.word	0x0800c6cd
 800aab8:	0800c6cc 	.word	0x0800c6cc
 800aabc:	3ff00000 	.word	0x3ff00000
 800aac0:	fffffc01 	.word	0xfffffc01
 800aac4:	3ff80000 	.word	0x3ff80000
 800aac8:	636f4361 	.word	0x636f4361
 800aacc:	3fd287a7 	.word	0x3fd287a7
 800aad0:	8b60c8b3 	.word	0x8b60c8b3
 800aad4:	3fc68a28 	.word	0x3fc68a28
 800aad8:	509f79fb 	.word	0x509f79fb
 800aadc:	3fd34413 	.word	0x3fd34413
 800aae0:	0800c810 	.word	0x0800c810
 800aae4:	00000432 	.word	0x00000432
 800aae8:	00000412 	.word	0x00000412
 800aaec:	fe100000 	.word	0xfe100000
 800aaf0:	0800c76c 	.word	0x0800c76c
 800aaf4:	0800c7e8 	.word	0x0800c7e8
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	2402      	movs	r4, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d016      	beq.n	800ab2e <_dtoa_r+0x3d6>
 800ab00:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ab02:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ab04:	220f      	movs	r2, #15
 800ab06:	425d      	negs	r5, r3
 800ab08:	402a      	ands	r2, r5
 800ab0a:	4bd7      	ldr	r3, [pc, #860]	@ (800ae68 <_dtoa_r+0x710>)
 800ab0c:	00d2      	lsls	r2, r2, #3
 800ab0e:	189b      	adds	r3, r3, r2
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f7f6 fdd6 	bl	80016c4 <__aeabi_dmul>
 800ab18:	2701      	movs	r7, #1
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab20:	4ed2      	ldr	r6, [pc, #840]	@ (800ae6c <_dtoa_r+0x714>)
 800ab22:	112d      	asrs	r5, r5, #4
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	d000      	beq.n	800ab2a <_dtoa_r+0x3d2>
 800ab28:	e0ba      	b.n	800aca0 <_dtoa_r+0x548>
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1a1      	bne.n	800aa72 <_dtoa_r+0x31a>
 800ab2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ab30:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ab32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d100      	bne.n	800ab3a <_dtoa_r+0x3e2>
 800ab38:	e0bd      	b.n	800acb6 <_dtoa_r+0x55e>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	0030      	movs	r0, r6
 800ab3e:	0039      	movs	r1, r7
 800ab40:	4bcb      	ldr	r3, [pc, #812]	@ (800ae70 <_dtoa_r+0x718>)
 800ab42:	f7f5 fc89 	bl	8000458 <__aeabi_dcmplt>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d100      	bne.n	800ab4c <_dtoa_r+0x3f4>
 800ab4a:	e0b4      	b.n	800acb6 <_dtoa_r+0x55e>
 800ab4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d100      	bne.n	800ab54 <_dtoa_r+0x3fc>
 800ab52:	e0b0      	b.n	800acb6 <_dtoa_r+0x55e>
 800ab54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd39      	ble.n	800abce <_dtoa_r+0x476>
 800ab5a:	9b04      	ldr	r3, [sp, #16]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab62:	0030      	movs	r0, r6
 800ab64:	4bc3      	ldr	r3, [pc, #780]	@ (800ae74 <_dtoa_r+0x71c>)
 800ab66:	0039      	movs	r1, r7
 800ab68:	f7f6 fdac 	bl	80016c4 <__aeabi_dmul>
 800ab6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab72:	3401      	adds	r4, #1
 800ab74:	0020      	movs	r0, r4
 800ab76:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab78:	f7f7 fc66 	bl	8002448 <__aeabi_i2d>
 800ab7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab80:	f7f6 fda0 	bl	80016c4 <__aeabi_dmul>
 800ab84:	4bbc      	ldr	r3, [pc, #752]	@ (800ae78 <_dtoa_r+0x720>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	f7f5 fdf4 	bl	8000774 <__aeabi_dadd>
 800ab8c:	4bbb      	ldr	r3, [pc, #748]	@ (800ae7c <_dtoa_r+0x724>)
 800ab8e:	0006      	movs	r6, r0
 800ab90:	18cf      	adds	r7, r1, r3
 800ab92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d000      	beq.n	800ab9a <_dtoa_r+0x442>
 800ab98:	e091      	b.n	800acbe <_dtoa_r+0x566>
 800ab9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4bb7      	ldr	r3, [pc, #732]	@ (800ae80 <_dtoa_r+0x728>)
 800aba2:	f7f7 f857 	bl	8001c54 <__aeabi_dsub>
 800aba6:	0032      	movs	r2, r6
 800aba8:	003b      	movs	r3, r7
 800abaa:	0004      	movs	r4, r0
 800abac:	000d      	movs	r5, r1
 800abae:	f7f5 fc67 	bl	8000480 <__aeabi_dcmpgt>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d000      	beq.n	800abb8 <_dtoa_r+0x460>
 800abb6:	e29d      	b.n	800b0f4 <_dtoa_r+0x99c>
 800abb8:	2180      	movs	r1, #128	@ 0x80
 800abba:	0609      	lsls	r1, r1, #24
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	0032      	movs	r2, r6
 800abc0:	0020      	movs	r0, r4
 800abc2:	0029      	movs	r1, r5
 800abc4:	f7f5 fc48 	bl	8000458 <__aeabi_dcmplt>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d000      	beq.n	800abce <_dtoa_r+0x476>
 800abcc:	e130      	b.n	800ae30 <_dtoa_r+0x6d8>
 800abce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abd0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800abd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800abd4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abd6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da00      	bge.n	800abde <_dtoa_r+0x486>
 800abdc:	e177      	b.n	800aece <_dtoa_r+0x776>
 800abde:	9a04      	ldr	r2, [sp, #16]
 800abe0:	2a0e      	cmp	r2, #14
 800abe2:	dd00      	ble.n	800abe6 <_dtoa_r+0x48e>
 800abe4:	e173      	b.n	800aece <_dtoa_r+0x776>
 800abe6:	4ba0      	ldr	r3, [pc, #640]	@ (800ae68 <_dtoa_r+0x710>)
 800abe8:	00d2      	lsls	r2, r2, #3
 800abea:	189b      	adds	r3, r3, r2
 800abec:	685c      	ldr	r4, [r3, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	9306      	str	r3, [sp, #24]
 800abf2:	9407      	str	r4, [sp, #28]
 800abf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	da03      	bge.n	800ac02 <_dtoa_r+0x4aa>
 800abfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dc00      	bgt.n	800ac02 <_dtoa_r+0x4aa>
 800ac00:	e106      	b.n	800ae10 <_dtoa_r+0x6b8>
 800ac02:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ac04:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ac06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac08:	9d08      	ldr	r5, [sp, #32]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	195b      	adds	r3, r3, r5
 800ac0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac10:	9a06      	ldr	r2, [sp, #24]
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	0030      	movs	r0, r6
 800ac16:	0039      	movs	r1, r7
 800ac18:	f7f6 f910 	bl	8000e3c <__aeabi_ddiv>
 800ac1c:	f7f7 fbd8 	bl	80023d0 <__aeabi_d2iz>
 800ac20:	9009      	str	r0, [sp, #36]	@ 0x24
 800ac22:	f7f7 fc11 	bl	8002448 <__aeabi_i2d>
 800ac26:	9a06      	ldr	r2, [sp, #24]
 800ac28:	9b07      	ldr	r3, [sp, #28]
 800ac2a:	f7f6 fd4b 	bl	80016c4 <__aeabi_dmul>
 800ac2e:	0002      	movs	r2, r0
 800ac30:	000b      	movs	r3, r1
 800ac32:	0030      	movs	r0, r6
 800ac34:	0039      	movs	r1, r7
 800ac36:	f7f7 f80d 	bl	8001c54 <__aeabi_dsub>
 800ac3a:	002b      	movs	r3, r5
 800ac3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac3e:	3501      	adds	r5, #1
 800ac40:	3230      	adds	r2, #48	@ 0x30
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac46:	002c      	movs	r4, r5
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d000      	beq.n	800ac4e <_dtoa_r+0x4f6>
 800ac4c:	e131      	b.n	800aeb2 <_dtoa_r+0x75a>
 800ac4e:	0002      	movs	r2, r0
 800ac50:	000b      	movs	r3, r1
 800ac52:	f7f5 fd8f 	bl	8000774 <__aeabi_dadd>
 800ac56:	9a06      	ldr	r2, [sp, #24]
 800ac58:	9b07      	ldr	r3, [sp, #28]
 800ac5a:	0006      	movs	r6, r0
 800ac5c:	000f      	movs	r7, r1
 800ac5e:	f7f5 fc0f 	bl	8000480 <__aeabi_dcmpgt>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d000      	beq.n	800ac68 <_dtoa_r+0x510>
 800ac66:	e10f      	b.n	800ae88 <_dtoa_r+0x730>
 800ac68:	9a06      	ldr	r2, [sp, #24]
 800ac6a:	9b07      	ldr	r3, [sp, #28]
 800ac6c:	0030      	movs	r0, r6
 800ac6e:	0039      	movs	r1, r7
 800ac70:	f7f5 fbec 	bl	800044c <__aeabi_dcmpeq>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	d003      	beq.n	800ac80 <_dtoa_r+0x528>
 800ac78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac7a:	07dd      	lsls	r5, r3, #31
 800ac7c:	d500      	bpl.n	800ac80 <_dtoa_r+0x528>
 800ac7e:	e103      	b.n	800ae88 <_dtoa_r+0x730>
 800ac80:	9905      	ldr	r1, [sp, #20]
 800ac82:	9803      	ldr	r0, [sp, #12]
 800ac84:	f000 fca6 	bl	800b5d4 <_Bfree>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	7023      	strb	r3, [r4, #0]
 800ac8c:	9b04      	ldr	r3, [sp, #16]
 800ac8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ac90:	3301      	adds	r3, #1
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d100      	bne.n	800ac9c <_dtoa_r+0x544>
 800ac9a:	e5a7      	b.n	800a7ec <_dtoa_r+0x94>
 800ac9c:	601c      	str	r4, [r3, #0]
 800ac9e:	e5a5      	b.n	800a7ec <_dtoa_r+0x94>
 800aca0:	423d      	tst	r5, r7
 800aca2:	d005      	beq.n	800acb0 <_dtoa_r+0x558>
 800aca4:	6832      	ldr	r2, [r6, #0]
 800aca6:	6873      	ldr	r3, [r6, #4]
 800aca8:	f7f6 fd0c 	bl	80016c4 <__aeabi_dmul>
 800acac:	003b      	movs	r3, r7
 800acae:	3401      	adds	r4, #1
 800acb0:	106d      	asrs	r5, r5, #1
 800acb2:	3608      	adds	r6, #8
 800acb4:	e736      	b.n	800ab24 <_dtoa_r+0x3cc>
 800acb6:	9b04      	ldr	r3, [sp, #16]
 800acb8:	930c      	str	r3, [sp, #48]	@ 0x30
 800acba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acbc:	e75a      	b.n	800ab74 <_dtoa_r+0x41c>
 800acbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800acc0:	4b69      	ldr	r3, [pc, #420]	@ (800ae68 <_dtoa_r+0x710>)
 800acc2:	3a01      	subs	r2, #1
 800acc4:	00d2      	lsls	r2, r2, #3
 800acc6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800acc8:	189b      	adds	r3, r3, r2
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	2900      	cmp	r1, #0
 800acd0:	d04c      	beq.n	800ad6c <_dtoa_r+0x614>
 800acd2:	2000      	movs	r0, #0
 800acd4:	496b      	ldr	r1, [pc, #428]	@ (800ae84 <_dtoa_r+0x72c>)
 800acd6:	f7f6 f8b1 	bl	8000e3c <__aeabi_ddiv>
 800acda:	0032      	movs	r2, r6
 800acdc:	003b      	movs	r3, r7
 800acde:	f7f6 ffb9 	bl	8001c54 <__aeabi_dsub>
 800ace2:	9a08      	ldr	r2, [sp, #32]
 800ace4:	0006      	movs	r6, r0
 800ace6:	4694      	mov	ip, r2
 800ace8:	000f      	movs	r7, r1
 800acea:	9b08      	ldr	r3, [sp, #32]
 800acec:	9316      	str	r3, [sp, #88]	@ 0x58
 800acee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acf0:	4463      	add	r3, ip
 800acf2:	9311      	str	r3, [sp, #68]	@ 0x44
 800acf4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800acf6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acf8:	f7f7 fb6a 	bl	80023d0 <__aeabi_d2iz>
 800acfc:	0005      	movs	r5, r0
 800acfe:	f7f7 fba3 	bl	8002448 <__aeabi_i2d>
 800ad02:	0002      	movs	r2, r0
 800ad04:	000b      	movs	r3, r1
 800ad06:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad0a:	f7f6 ffa3 	bl	8001c54 <__aeabi_dsub>
 800ad0e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad10:	3530      	adds	r5, #48	@ 0x30
 800ad12:	1c5c      	adds	r4, r3, #1
 800ad14:	701d      	strb	r5, [r3, #0]
 800ad16:	0032      	movs	r2, r6
 800ad18:	003b      	movs	r3, r7
 800ad1a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad1e:	f7f5 fb9b 	bl	8000458 <__aeabi_dcmplt>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d16a      	bne.n	800adfc <_dtoa_r+0x6a4>
 800ad26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	4950      	ldr	r1, [pc, #320]	@ (800ae70 <_dtoa_r+0x718>)
 800ad2e:	f7f6 ff91 	bl	8001c54 <__aeabi_dsub>
 800ad32:	0032      	movs	r2, r6
 800ad34:	003b      	movs	r3, r7
 800ad36:	f7f5 fb8f 	bl	8000458 <__aeabi_dcmplt>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d000      	beq.n	800ad40 <_dtoa_r+0x5e8>
 800ad3e:	e0a5      	b.n	800ae8c <_dtoa_r+0x734>
 800ad40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad42:	42a3      	cmp	r3, r4
 800ad44:	d100      	bne.n	800ad48 <_dtoa_r+0x5f0>
 800ad46:	e742      	b.n	800abce <_dtoa_r+0x476>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	0030      	movs	r0, r6
 800ad4c:	0039      	movs	r1, r7
 800ad4e:	4b49      	ldr	r3, [pc, #292]	@ (800ae74 <_dtoa_r+0x71c>)
 800ad50:	f7f6 fcb8 	bl	80016c4 <__aeabi_dmul>
 800ad54:	2200      	movs	r2, #0
 800ad56:	0006      	movs	r6, r0
 800ad58:	000f      	movs	r7, r1
 800ad5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad5e:	4b45      	ldr	r3, [pc, #276]	@ (800ae74 <_dtoa_r+0x71c>)
 800ad60:	f7f6 fcb0 	bl	80016c4 <__aeabi_dmul>
 800ad64:	9416      	str	r4, [sp, #88]	@ 0x58
 800ad66:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad68:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad6a:	e7c3      	b.n	800acf4 <_dtoa_r+0x59c>
 800ad6c:	0030      	movs	r0, r6
 800ad6e:	0039      	movs	r1, r7
 800ad70:	f7f6 fca8 	bl	80016c4 <__aeabi_dmul>
 800ad74:	9d08      	ldr	r5, [sp, #32]
 800ad76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad78:	002b      	movs	r3, r5
 800ad7a:	4694      	mov	ip, r2
 800ad7c:	9016      	str	r0, [sp, #88]	@ 0x58
 800ad7e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ad80:	4463      	add	r3, ip
 800ad82:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad88:	f7f7 fb22 	bl	80023d0 <__aeabi_d2iz>
 800ad8c:	0004      	movs	r4, r0
 800ad8e:	f7f7 fb5b 	bl	8002448 <__aeabi_i2d>
 800ad92:	000b      	movs	r3, r1
 800ad94:	0002      	movs	r2, r0
 800ad96:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad9a:	f7f6 ff5b 	bl	8001c54 <__aeabi_dsub>
 800ad9e:	3430      	adds	r4, #48	@ 0x30
 800ada0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ada2:	702c      	strb	r4, [r5, #0]
 800ada4:	3501      	adds	r5, #1
 800ada6:	0006      	movs	r6, r0
 800ada8:	000f      	movs	r7, r1
 800adaa:	42ab      	cmp	r3, r5
 800adac:	d129      	bne.n	800ae02 <_dtoa_r+0x6aa>
 800adae:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800adb0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800adb6:	469c      	mov	ip, r3
 800adb8:	2200      	movs	r2, #0
 800adba:	4b32      	ldr	r3, [pc, #200]	@ (800ae84 <_dtoa_r+0x72c>)
 800adbc:	4464      	add	r4, ip
 800adbe:	f7f5 fcd9 	bl	8000774 <__aeabi_dadd>
 800adc2:	0002      	movs	r2, r0
 800adc4:	000b      	movs	r3, r1
 800adc6:	0030      	movs	r0, r6
 800adc8:	0039      	movs	r1, r7
 800adca:	f7f5 fb59 	bl	8000480 <__aeabi_dcmpgt>
 800adce:	2800      	cmp	r0, #0
 800add0:	d15c      	bne.n	800ae8c <_dtoa_r+0x734>
 800add2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800add4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800add6:	2000      	movs	r0, #0
 800add8:	492a      	ldr	r1, [pc, #168]	@ (800ae84 <_dtoa_r+0x72c>)
 800adda:	f7f6 ff3b 	bl	8001c54 <__aeabi_dsub>
 800adde:	0002      	movs	r2, r0
 800ade0:	000b      	movs	r3, r1
 800ade2:	0030      	movs	r0, r6
 800ade4:	0039      	movs	r1, r7
 800ade6:	f7f5 fb37 	bl	8000458 <__aeabi_dcmplt>
 800adea:	2800      	cmp	r0, #0
 800adec:	d100      	bne.n	800adf0 <_dtoa_r+0x698>
 800adee:	e6ee      	b.n	800abce <_dtoa_r+0x476>
 800adf0:	0023      	movs	r3, r4
 800adf2:	3c01      	subs	r4, #1
 800adf4:	7822      	ldrb	r2, [r4, #0]
 800adf6:	2a30      	cmp	r2, #48	@ 0x30
 800adf8:	d0fa      	beq.n	800adf0 <_dtoa_r+0x698>
 800adfa:	001c      	movs	r4, r3
 800adfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adfe:	9304      	str	r3, [sp, #16]
 800ae00:	e73e      	b.n	800ac80 <_dtoa_r+0x528>
 800ae02:	2200      	movs	r2, #0
 800ae04:	4b1b      	ldr	r3, [pc, #108]	@ (800ae74 <_dtoa_r+0x71c>)
 800ae06:	f7f6 fc5d 	bl	80016c4 <__aeabi_dmul>
 800ae0a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae0e:	e7b9      	b.n	800ad84 <_dtoa_r+0x62c>
 800ae10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10c      	bne.n	800ae30 <_dtoa_r+0x6d8>
 800ae16:	9806      	ldr	r0, [sp, #24]
 800ae18:	9907      	ldr	r1, [sp, #28]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4b18      	ldr	r3, [pc, #96]	@ (800ae80 <_dtoa_r+0x728>)
 800ae1e:	f7f6 fc51 	bl	80016c4 <__aeabi_dmul>
 800ae22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae26:	f7f5 fb35 	bl	8000494 <__aeabi_dcmpge>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d100      	bne.n	800ae30 <_dtoa_r+0x6d8>
 800ae2e:	e164      	b.n	800b0fa <_dtoa_r+0x9a2>
 800ae30:	2600      	movs	r6, #0
 800ae32:	0037      	movs	r7, r6
 800ae34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae36:	9c08      	ldr	r4, [sp, #32]
 800ae38:	43db      	mvns	r3, r3
 800ae3a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	0031      	movs	r1, r6
 800ae42:	9803      	ldr	r0, [sp, #12]
 800ae44:	f000 fbc6 	bl	800b5d4 <_Bfree>
 800ae48:	2f00      	cmp	r7, #0
 800ae4a:	d0d7      	beq.n	800adfc <_dtoa_r+0x6a4>
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d005      	beq.n	800ae5e <_dtoa_r+0x706>
 800ae52:	42bb      	cmp	r3, r7
 800ae54:	d003      	beq.n	800ae5e <_dtoa_r+0x706>
 800ae56:	0019      	movs	r1, r3
 800ae58:	9803      	ldr	r0, [sp, #12]
 800ae5a:	f000 fbbb 	bl	800b5d4 <_Bfree>
 800ae5e:	0039      	movs	r1, r7
 800ae60:	9803      	ldr	r0, [sp, #12]
 800ae62:	f000 fbb7 	bl	800b5d4 <_Bfree>
 800ae66:	e7c9      	b.n	800adfc <_dtoa_r+0x6a4>
 800ae68:	0800c810 	.word	0x0800c810
 800ae6c:	0800c7e8 	.word	0x0800c7e8
 800ae70:	3ff00000 	.word	0x3ff00000
 800ae74:	40240000 	.word	0x40240000
 800ae78:	401c0000 	.word	0x401c0000
 800ae7c:	fcc00000 	.word	0xfcc00000
 800ae80:	40140000 	.word	0x40140000
 800ae84:	3fe00000 	.word	0x3fe00000
 800ae88:	9b04      	ldr	r3, [sp, #16]
 800ae8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae8c:	0023      	movs	r3, r4
 800ae8e:	001c      	movs	r4, r3
 800ae90:	3b01      	subs	r3, #1
 800ae92:	781a      	ldrb	r2, [r3, #0]
 800ae94:	2a39      	cmp	r2, #57	@ 0x39
 800ae96:	d108      	bne.n	800aeaa <_dtoa_r+0x752>
 800ae98:	9a08      	ldr	r2, [sp, #32]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d1f7      	bne.n	800ae8e <_dtoa_r+0x736>
 800ae9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aea0:	9908      	ldr	r1, [sp, #32]
 800aea2:	3201      	adds	r2, #1
 800aea4:	920c      	str	r2, [sp, #48]	@ 0x30
 800aea6:	2230      	movs	r2, #48	@ 0x30
 800aea8:	700a      	strb	r2, [r1, #0]
 800aeaa:	781a      	ldrb	r2, [r3, #0]
 800aeac:	3201      	adds	r2, #1
 800aeae:	701a      	strb	r2, [r3, #0]
 800aeb0:	e7a4      	b.n	800adfc <_dtoa_r+0x6a4>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	4bc6      	ldr	r3, [pc, #792]	@ (800b1d0 <_dtoa_r+0xa78>)
 800aeb6:	f7f6 fc05 	bl	80016c4 <__aeabi_dmul>
 800aeba:	2200      	movs	r2, #0
 800aebc:	2300      	movs	r3, #0
 800aebe:	0006      	movs	r6, r0
 800aec0:	000f      	movs	r7, r1
 800aec2:	f7f5 fac3 	bl	800044c <__aeabi_dcmpeq>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d100      	bne.n	800aecc <_dtoa_r+0x774>
 800aeca:	e6a1      	b.n	800ac10 <_dtoa_r+0x4b8>
 800aecc:	e6d8      	b.n	800ac80 <_dtoa_r+0x528>
 800aece:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800aed0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800aed2:	9c06      	ldr	r4, [sp, #24]
 800aed4:	2f00      	cmp	r7, #0
 800aed6:	d014      	beq.n	800af02 <_dtoa_r+0x7aa>
 800aed8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aeda:	2a01      	cmp	r2, #1
 800aedc:	dd00      	ble.n	800aee0 <_dtoa_r+0x788>
 800aede:	e0c8      	b.n	800b072 <_dtoa_r+0x91a>
 800aee0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800aee2:	2a00      	cmp	r2, #0
 800aee4:	d100      	bne.n	800aee8 <_dtoa_r+0x790>
 800aee6:	e0be      	b.n	800b066 <_dtoa_r+0x90e>
 800aee8:	4aba      	ldr	r2, [pc, #744]	@ (800b1d4 <_dtoa_r+0xa7c>)
 800aeea:	189b      	adds	r3, r3, r2
 800aeec:	9a06      	ldr	r2, [sp, #24]
 800aeee:	2101      	movs	r1, #1
 800aef0:	18d2      	adds	r2, r2, r3
 800aef2:	9206      	str	r2, [sp, #24]
 800aef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aef6:	9803      	ldr	r0, [sp, #12]
 800aef8:	18d3      	adds	r3, r2, r3
 800aefa:	930d      	str	r3, [sp, #52]	@ 0x34
 800aefc:	f000 fc22 	bl	800b744 <__i2b>
 800af00:	0007      	movs	r7, r0
 800af02:	2c00      	cmp	r4, #0
 800af04:	d00e      	beq.n	800af24 <_dtoa_r+0x7cc>
 800af06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af08:	2b00      	cmp	r3, #0
 800af0a:	dd0b      	ble.n	800af24 <_dtoa_r+0x7cc>
 800af0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af0e:	0023      	movs	r3, r4
 800af10:	4294      	cmp	r4, r2
 800af12:	dd00      	ble.n	800af16 <_dtoa_r+0x7be>
 800af14:	0013      	movs	r3, r2
 800af16:	9a06      	ldr	r2, [sp, #24]
 800af18:	1ae4      	subs	r4, r4, r3
 800af1a:	1ad2      	subs	r2, r2, r3
 800af1c:	9206      	str	r2, [sp, #24]
 800af1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	930d      	str	r3, [sp, #52]	@ 0x34
 800af24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af26:	2b00      	cmp	r3, #0
 800af28:	d01f      	beq.n	800af6a <_dtoa_r+0x812>
 800af2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d100      	bne.n	800af32 <_dtoa_r+0x7da>
 800af30:	e0b5      	b.n	800b09e <_dtoa_r+0x946>
 800af32:	2d00      	cmp	r5, #0
 800af34:	d010      	beq.n	800af58 <_dtoa_r+0x800>
 800af36:	0039      	movs	r1, r7
 800af38:	002a      	movs	r2, r5
 800af3a:	9803      	ldr	r0, [sp, #12]
 800af3c:	f000 fccc 	bl	800b8d8 <__pow5mult>
 800af40:	9a05      	ldr	r2, [sp, #20]
 800af42:	0001      	movs	r1, r0
 800af44:	0007      	movs	r7, r0
 800af46:	9803      	ldr	r0, [sp, #12]
 800af48:	f000 fc14 	bl	800b774 <__multiply>
 800af4c:	0006      	movs	r6, r0
 800af4e:	9905      	ldr	r1, [sp, #20]
 800af50:	9803      	ldr	r0, [sp, #12]
 800af52:	f000 fb3f 	bl	800b5d4 <_Bfree>
 800af56:	9605      	str	r6, [sp, #20]
 800af58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5a:	1b5a      	subs	r2, r3, r5
 800af5c:	42ab      	cmp	r3, r5
 800af5e:	d004      	beq.n	800af6a <_dtoa_r+0x812>
 800af60:	9905      	ldr	r1, [sp, #20]
 800af62:	9803      	ldr	r0, [sp, #12]
 800af64:	f000 fcb8 	bl	800b8d8 <__pow5mult>
 800af68:	9005      	str	r0, [sp, #20]
 800af6a:	2101      	movs	r1, #1
 800af6c:	9803      	ldr	r0, [sp, #12]
 800af6e:	f000 fbe9 	bl	800b744 <__i2b>
 800af72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af74:	0006      	movs	r6, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d100      	bne.n	800af7c <_dtoa_r+0x824>
 800af7a:	e1bc      	b.n	800b2f6 <_dtoa_r+0xb9e>
 800af7c:	001a      	movs	r2, r3
 800af7e:	0001      	movs	r1, r0
 800af80:	9803      	ldr	r0, [sp, #12]
 800af82:	f000 fca9 	bl	800b8d8 <__pow5mult>
 800af86:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af88:	0006      	movs	r6, r0
 800af8a:	2500      	movs	r5, #0
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	dc16      	bgt.n	800afbe <_dtoa_r+0x866>
 800af90:	2500      	movs	r5, #0
 800af92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af94:	42ab      	cmp	r3, r5
 800af96:	d10e      	bne.n	800afb6 <_dtoa_r+0x85e>
 800af98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af9a:	031b      	lsls	r3, r3, #12
 800af9c:	42ab      	cmp	r3, r5
 800af9e:	d10a      	bne.n	800afb6 <_dtoa_r+0x85e>
 800afa0:	4b8d      	ldr	r3, [pc, #564]	@ (800b1d8 <_dtoa_r+0xa80>)
 800afa2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800afa4:	4213      	tst	r3, r2
 800afa6:	d006      	beq.n	800afb6 <_dtoa_r+0x85e>
 800afa8:	9b06      	ldr	r3, [sp, #24]
 800afaa:	3501      	adds	r5, #1
 800afac:	3301      	adds	r3, #1
 800afae:	9306      	str	r3, [sp, #24]
 800afb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afb2:	3301      	adds	r3, #1
 800afb4:	930d      	str	r3, [sp, #52]	@ 0x34
 800afb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afb8:	2001      	movs	r0, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d008      	beq.n	800afd0 <_dtoa_r+0x878>
 800afbe:	6933      	ldr	r3, [r6, #16]
 800afc0:	3303      	adds	r3, #3
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	18f3      	adds	r3, r6, r3
 800afc6:	6858      	ldr	r0, [r3, #4]
 800afc8:	f000 fb6c 	bl	800b6a4 <__hi0bits>
 800afcc:	2320      	movs	r3, #32
 800afce:	1a18      	subs	r0, r3, r0
 800afd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afd2:	1818      	adds	r0, r3, r0
 800afd4:	0002      	movs	r2, r0
 800afd6:	231f      	movs	r3, #31
 800afd8:	401a      	ands	r2, r3
 800afda:	4218      	tst	r0, r3
 800afdc:	d065      	beq.n	800b0aa <_dtoa_r+0x952>
 800afde:	3301      	adds	r3, #1
 800afe0:	1a9b      	subs	r3, r3, r2
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	dd5d      	ble.n	800b0a2 <_dtoa_r+0x94a>
 800afe6:	231c      	movs	r3, #28
 800afe8:	1a9b      	subs	r3, r3, r2
 800afea:	9a06      	ldr	r2, [sp, #24]
 800afec:	18e4      	adds	r4, r4, r3
 800afee:	18d2      	adds	r2, r2, r3
 800aff0:	9206      	str	r2, [sp, #24]
 800aff2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aff4:	18d3      	adds	r3, r2, r3
 800aff6:	930d      	str	r3, [sp, #52]	@ 0x34
 800aff8:	9b06      	ldr	r3, [sp, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	dd05      	ble.n	800b00a <_dtoa_r+0x8b2>
 800affe:	001a      	movs	r2, r3
 800b000:	9905      	ldr	r1, [sp, #20]
 800b002:	9803      	ldr	r0, [sp, #12]
 800b004:	f000 fcc4 	bl	800b990 <__lshift>
 800b008:	9005      	str	r0, [sp, #20]
 800b00a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dd05      	ble.n	800b01c <_dtoa_r+0x8c4>
 800b010:	0031      	movs	r1, r6
 800b012:	001a      	movs	r2, r3
 800b014:	9803      	ldr	r0, [sp, #12]
 800b016:	f000 fcbb 	bl	800b990 <__lshift>
 800b01a:	0006      	movs	r6, r0
 800b01c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d045      	beq.n	800b0ae <_dtoa_r+0x956>
 800b022:	0031      	movs	r1, r6
 800b024:	9805      	ldr	r0, [sp, #20]
 800b026:	f000 fd1f 	bl	800ba68 <__mcmp>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	da3f      	bge.n	800b0ae <_dtoa_r+0x956>
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	220a      	movs	r2, #10
 800b032:	3b01      	subs	r3, #1
 800b034:	930c      	str	r3, [sp, #48]	@ 0x30
 800b036:	9905      	ldr	r1, [sp, #20]
 800b038:	2300      	movs	r3, #0
 800b03a:	9803      	ldr	r0, [sp, #12]
 800b03c:	f000 faee 	bl	800b61c <__multadd>
 800b040:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b042:	9005      	str	r0, [sp, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d100      	bne.n	800b04a <_dtoa_r+0x8f2>
 800b048:	e15c      	b.n	800b304 <_dtoa_r+0xbac>
 800b04a:	2300      	movs	r3, #0
 800b04c:	0039      	movs	r1, r7
 800b04e:	220a      	movs	r2, #10
 800b050:	9803      	ldr	r0, [sp, #12]
 800b052:	f000 fae3 	bl	800b61c <__multadd>
 800b056:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b058:	0007      	movs	r7, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dc55      	bgt.n	800b10a <_dtoa_r+0x9b2>
 800b05e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b060:	2b02      	cmp	r3, #2
 800b062:	dc2d      	bgt.n	800b0c0 <_dtoa_r+0x968>
 800b064:	e051      	b.n	800b10a <_dtoa_r+0x9b2>
 800b066:	2336      	movs	r3, #54	@ 0x36
 800b068:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b06a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b06c:	9c06      	ldr	r4, [sp, #24]
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	e73c      	b.n	800aeec <_dtoa_r+0x794>
 800b072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b074:	1e5d      	subs	r5, r3, #1
 800b076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b078:	42ab      	cmp	r3, r5
 800b07a:	db08      	blt.n	800b08e <_dtoa_r+0x936>
 800b07c:	1b5d      	subs	r5, r3, r5
 800b07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b080:	9c06      	ldr	r4, [sp, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	db00      	blt.n	800b088 <_dtoa_r+0x930>
 800b086:	e731      	b.n	800aeec <_dtoa_r+0x794>
 800b088:	1ae4      	subs	r4, r4, r3
 800b08a:	2300      	movs	r3, #0
 800b08c:	e72e      	b.n	800aeec <_dtoa_r+0x794>
 800b08e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b090:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b092:	1aeb      	subs	r3, r5, r3
 800b094:	18d3      	adds	r3, r2, r3
 800b096:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b098:	9314      	str	r3, [sp, #80]	@ 0x50
 800b09a:	2500      	movs	r5, #0
 800b09c:	e7ef      	b.n	800b07e <_dtoa_r+0x926>
 800b09e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0a0:	e75e      	b.n	800af60 <_dtoa_r+0x808>
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d0a8      	beq.n	800aff8 <_dtoa_r+0x8a0>
 800b0a6:	331c      	adds	r3, #28
 800b0a8:	e79f      	b.n	800afea <_dtoa_r+0x892>
 800b0aa:	0013      	movs	r3, r2
 800b0ac:	e7fb      	b.n	800b0a6 <_dtoa_r+0x94e>
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	dc23      	bgt.n	800b102 <_dtoa_r+0x9aa>
 800b0ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	dd20      	ble.n	800b102 <_dtoa_r+0x9aa>
 800b0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d000      	beq.n	800b0c8 <_dtoa_r+0x970>
 800b0c6:	e6b5      	b.n	800ae34 <_dtoa_r+0x6dc>
 800b0c8:	0031      	movs	r1, r6
 800b0ca:	2205      	movs	r2, #5
 800b0cc:	9803      	ldr	r0, [sp, #12]
 800b0ce:	f000 faa5 	bl	800b61c <__multadd>
 800b0d2:	0006      	movs	r6, r0
 800b0d4:	0001      	movs	r1, r0
 800b0d6:	9805      	ldr	r0, [sp, #20]
 800b0d8:	f000 fcc6 	bl	800ba68 <__mcmp>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	dc00      	bgt.n	800b0e2 <_dtoa_r+0x98a>
 800b0e0:	e6a8      	b.n	800ae34 <_dtoa_r+0x6dc>
 800b0e2:	9b08      	ldr	r3, [sp, #32]
 800b0e4:	9a08      	ldr	r2, [sp, #32]
 800b0e6:	1c5c      	adds	r4, r3, #1
 800b0e8:	2331      	movs	r3, #49	@ 0x31
 800b0ea:	7013      	strb	r3, [r2, #0]
 800b0ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0f2:	e6a3      	b.n	800ae3c <_dtoa_r+0x6e4>
 800b0f4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b0f6:	0037      	movs	r7, r6
 800b0f8:	e7f3      	b.n	800b0e2 <_dtoa_r+0x98a>
 800b0fa:	9b04      	ldr	r3, [sp, #16]
 800b0fc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b0fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b100:	e7f9      	b.n	800b0f6 <_dtoa_r+0x99e>
 800b102:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	d100      	bne.n	800b10a <_dtoa_r+0x9b2>
 800b108:	e100      	b.n	800b30c <_dtoa_r+0xbb4>
 800b10a:	2c00      	cmp	r4, #0
 800b10c:	dd05      	ble.n	800b11a <_dtoa_r+0x9c2>
 800b10e:	0039      	movs	r1, r7
 800b110:	0022      	movs	r2, r4
 800b112:	9803      	ldr	r0, [sp, #12]
 800b114:	f000 fc3c 	bl	800b990 <__lshift>
 800b118:	0007      	movs	r7, r0
 800b11a:	0038      	movs	r0, r7
 800b11c:	2d00      	cmp	r5, #0
 800b11e:	d018      	beq.n	800b152 <_dtoa_r+0x9fa>
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	9803      	ldr	r0, [sp, #12]
 800b124:	f000 fa12 	bl	800b54c <_Balloc>
 800b128:	1e04      	subs	r4, r0, #0
 800b12a:	d105      	bne.n	800b138 <_dtoa_r+0x9e0>
 800b12c:	0022      	movs	r2, r4
 800b12e:	4b2b      	ldr	r3, [pc, #172]	@ (800b1dc <_dtoa_r+0xa84>)
 800b130:	482b      	ldr	r0, [pc, #172]	@ (800b1e0 <_dtoa_r+0xa88>)
 800b132:	492c      	ldr	r1, [pc, #176]	@ (800b1e4 <_dtoa_r+0xa8c>)
 800b134:	f7ff fb25 	bl	800a782 <_dtoa_r+0x2a>
 800b138:	0039      	movs	r1, r7
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	310c      	adds	r1, #12
 800b13e:	3202      	adds	r2, #2
 800b140:	0092      	lsls	r2, r2, #2
 800b142:	300c      	adds	r0, #12
 800b144:	f001 f84e 	bl	800c1e4 <memcpy>
 800b148:	2201      	movs	r2, #1
 800b14a:	0021      	movs	r1, r4
 800b14c:	9803      	ldr	r0, [sp, #12]
 800b14e:	f000 fc1f 	bl	800b990 <__lshift>
 800b152:	9b08      	ldr	r3, [sp, #32]
 800b154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b156:	9306      	str	r3, [sp, #24]
 800b158:	3b01      	subs	r3, #1
 800b15a:	189b      	adds	r3, r3, r2
 800b15c:	2201      	movs	r2, #1
 800b15e:	9704      	str	r7, [sp, #16]
 800b160:	0007      	movs	r7, r0
 800b162:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b166:	4013      	ands	r3, r2
 800b168:	930e      	str	r3, [sp, #56]	@ 0x38
 800b16a:	0031      	movs	r1, r6
 800b16c:	9805      	ldr	r0, [sp, #20]
 800b16e:	f7ff fa65 	bl	800a63c <quorem>
 800b172:	9904      	ldr	r1, [sp, #16]
 800b174:	0005      	movs	r5, r0
 800b176:	900a      	str	r0, [sp, #40]	@ 0x28
 800b178:	9805      	ldr	r0, [sp, #20]
 800b17a:	f000 fc75 	bl	800ba68 <__mcmp>
 800b17e:	003a      	movs	r2, r7
 800b180:	900d      	str	r0, [sp, #52]	@ 0x34
 800b182:	0031      	movs	r1, r6
 800b184:	9803      	ldr	r0, [sp, #12]
 800b186:	f000 fc8b 	bl	800baa0 <__mdiff>
 800b18a:	2201      	movs	r2, #1
 800b18c:	68c3      	ldr	r3, [r0, #12]
 800b18e:	0004      	movs	r4, r0
 800b190:	3530      	adds	r5, #48	@ 0x30
 800b192:	9209      	str	r2, [sp, #36]	@ 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	d104      	bne.n	800b1a2 <_dtoa_r+0xa4a>
 800b198:	0001      	movs	r1, r0
 800b19a:	9805      	ldr	r0, [sp, #20]
 800b19c:	f000 fc64 	bl	800ba68 <__mcmp>
 800b1a0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b1a2:	0021      	movs	r1, r4
 800b1a4:	9803      	ldr	r0, [sp, #12]
 800b1a6:	f000 fa15 	bl	800b5d4 <_Bfree>
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ae:	1c5c      	adds	r4, r3, #1
 800b1b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	d116      	bne.n	800b1e8 <_dtoa_r+0xa90>
 800b1ba:	2d39      	cmp	r5, #57	@ 0x39
 800b1bc:	d02f      	beq.n	800b21e <_dtoa_r+0xac6>
 800b1be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dd01      	ble.n	800b1c8 <_dtoa_r+0xa70>
 800b1c4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b1c6:	3531      	adds	r5, #49	@ 0x31
 800b1c8:	9b06      	ldr	r3, [sp, #24]
 800b1ca:	701d      	strb	r5, [r3, #0]
 800b1cc:	e638      	b.n	800ae40 <_dtoa_r+0x6e8>
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	40240000 	.word	0x40240000
 800b1d4:	00000433 	.word	0x00000433
 800b1d8:	7ff00000 	.word	0x7ff00000
 800b1dc:	0800c76c 	.word	0x0800c76c
 800b1e0:	0800c714 	.word	0x0800c714
 800b1e4:	000002ef 	.word	0x000002ef
 800b1e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	db04      	blt.n	800b1f8 <_dtoa_r+0xaa0>
 800b1ee:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	d11e      	bne.n	800b236 <_dtoa_r+0xade>
 800b1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dde4      	ble.n	800b1c8 <_dtoa_r+0xa70>
 800b1fe:	9905      	ldr	r1, [sp, #20]
 800b200:	2201      	movs	r2, #1
 800b202:	9803      	ldr	r0, [sp, #12]
 800b204:	f000 fbc4 	bl	800b990 <__lshift>
 800b208:	0031      	movs	r1, r6
 800b20a:	9005      	str	r0, [sp, #20]
 800b20c:	f000 fc2c 	bl	800ba68 <__mcmp>
 800b210:	2800      	cmp	r0, #0
 800b212:	dc02      	bgt.n	800b21a <_dtoa_r+0xac2>
 800b214:	d1d8      	bne.n	800b1c8 <_dtoa_r+0xa70>
 800b216:	07eb      	lsls	r3, r5, #31
 800b218:	d5d6      	bpl.n	800b1c8 <_dtoa_r+0xa70>
 800b21a:	2d39      	cmp	r5, #57	@ 0x39
 800b21c:	d1d2      	bne.n	800b1c4 <_dtoa_r+0xa6c>
 800b21e:	2339      	movs	r3, #57	@ 0x39
 800b220:	9a06      	ldr	r2, [sp, #24]
 800b222:	7013      	strb	r3, [r2, #0]
 800b224:	0023      	movs	r3, r4
 800b226:	001c      	movs	r4, r3
 800b228:	3b01      	subs	r3, #1
 800b22a:	781a      	ldrb	r2, [r3, #0]
 800b22c:	2a39      	cmp	r2, #57	@ 0x39
 800b22e:	d04f      	beq.n	800b2d0 <_dtoa_r+0xb78>
 800b230:	3201      	adds	r2, #1
 800b232:	701a      	strb	r2, [r3, #0]
 800b234:	e604      	b.n	800ae40 <_dtoa_r+0x6e8>
 800b236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b238:	2b00      	cmp	r3, #0
 800b23a:	dd03      	ble.n	800b244 <_dtoa_r+0xaec>
 800b23c:	2d39      	cmp	r5, #57	@ 0x39
 800b23e:	d0ee      	beq.n	800b21e <_dtoa_r+0xac6>
 800b240:	3501      	adds	r5, #1
 800b242:	e7c1      	b.n	800b1c8 <_dtoa_r+0xa70>
 800b244:	9b06      	ldr	r3, [sp, #24]
 800b246:	9a06      	ldr	r2, [sp, #24]
 800b248:	701d      	strb	r5, [r3, #0]
 800b24a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d02a      	beq.n	800b2a6 <_dtoa_r+0xb4e>
 800b250:	2300      	movs	r3, #0
 800b252:	220a      	movs	r2, #10
 800b254:	9905      	ldr	r1, [sp, #20]
 800b256:	9803      	ldr	r0, [sp, #12]
 800b258:	f000 f9e0 	bl	800b61c <__multadd>
 800b25c:	9b04      	ldr	r3, [sp, #16]
 800b25e:	9005      	str	r0, [sp, #20]
 800b260:	42bb      	cmp	r3, r7
 800b262:	d109      	bne.n	800b278 <_dtoa_r+0xb20>
 800b264:	2300      	movs	r3, #0
 800b266:	220a      	movs	r2, #10
 800b268:	9904      	ldr	r1, [sp, #16]
 800b26a:	9803      	ldr	r0, [sp, #12]
 800b26c:	f000 f9d6 	bl	800b61c <__multadd>
 800b270:	9004      	str	r0, [sp, #16]
 800b272:	0007      	movs	r7, r0
 800b274:	9406      	str	r4, [sp, #24]
 800b276:	e778      	b.n	800b16a <_dtoa_r+0xa12>
 800b278:	9904      	ldr	r1, [sp, #16]
 800b27a:	2300      	movs	r3, #0
 800b27c:	220a      	movs	r2, #10
 800b27e:	9803      	ldr	r0, [sp, #12]
 800b280:	f000 f9cc 	bl	800b61c <__multadd>
 800b284:	2300      	movs	r3, #0
 800b286:	9004      	str	r0, [sp, #16]
 800b288:	220a      	movs	r2, #10
 800b28a:	0039      	movs	r1, r7
 800b28c:	9803      	ldr	r0, [sp, #12]
 800b28e:	f000 f9c5 	bl	800b61c <__multadd>
 800b292:	e7ee      	b.n	800b272 <_dtoa_r+0xb1a>
 800b294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b296:	2401      	movs	r4, #1
 800b298:	2b00      	cmp	r3, #0
 800b29a:	dd00      	ble.n	800b29e <_dtoa_r+0xb46>
 800b29c:	001c      	movs	r4, r3
 800b29e:	9b08      	ldr	r3, [sp, #32]
 800b2a0:	191c      	adds	r4, r3, r4
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	9304      	str	r3, [sp, #16]
 800b2a6:	9905      	ldr	r1, [sp, #20]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	9803      	ldr	r0, [sp, #12]
 800b2ac:	f000 fb70 	bl	800b990 <__lshift>
 800b2b0:	0031      	movs	r1, r6
 800b2b2:	9005      	str	r0, [sp, #20]
 800b2b4:	f000 fbd8 	bl	800ba68 <__mcmp>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	dcb3      	bgt.n	800b224 <_dtoa_r+0xacc>
 800b2bc:	d101      	bne.n	800b2c2 <_dtoa_r+0xb6a>
 800b2be:	07ed      	lsls	r5, r5, #31
 800b2c0:	d4b0      	bmi.n	800b224 <_dtoa_r+0xacc>
 800b2c2:	0023      	movs	r3, r4
 800b2c4:	001c      	movs	r4, r3
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	781a      	ldrb	r2, [r3, #0]
 800b2ca:	2a30      	cmp	r2, #48	@ 0x30
 800b2cc:	d0fa      	beq.n	800b2c4 <_dtoa_r+0xb6c>
 800b2ce:	e5b7      	b.n	800ae40 <_dtoa_r+0x6e8>
 800b2d0:	9a08      	ldr	r2, [sp, #32]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d1a7      	bne.n	800b226 <_dtoa_r+0xace>
 800b2d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2d8:	3301      	adds	r3, #1
 800b2da:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2dc:	2331      	movs	r3, #49	@ 0x31
 800b2de:	7013      	strb	r3, [r2, #0]
 800b2e0:	e5ae      	b.n	800ae40 <_dtoa_r+0x6e8>
 800b2e2:	4b15      	ldr	r3, [pc, #84]	@ (800b338 <_dtoa_r+0xbe0>)
 800b2e4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b2e6:	9308      	str	r3, [sp, #32]
 800b2e8:	4b14      	ldr	r3, [pc, #80]	@ (800b33c <_dtoa_r+0xbe4>)
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	d001      	beq.n	800b2f2 <_dtoa_r+0xb9a>
 800b2ee:	f7ff fa7b 	bl	800a7e8 <_dtoa_r+0x90>
 800b2f2:	f7ff fa7b 	bl	800a7ec <_dtoa_r+0x94>
 800b2f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	dc00      	bgt.n	800b2fe <_dtoa_r+0xba6>
 800b2fc:	e648      	b.n	800af90 <_dtoa_r+0x838>
 800b2fe:	2001      	movs	r0, #1
 800b300:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b302:	e665      	b.n	800afd0 <_dtoa_r+0x878>
 800b304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b306:	2b00      	cmp	r3, #0
 800b308:	dc00      	bgt.n	800b30c <_dtoa_r+0xbb4>
 800b30a:	e6d6      	b.n	800b0ba <_dtoa_r+0x962>
 800b30c:	2400      	movs	r4, #0
 800b30e:	0031      	movs	r1, r6
 800b310:	9805      	ldr	r0, [sp, #20]
 800b312:	f7ff f993 	bl	800a63c <quorem>
 800b316:	9b08      	ldr	r3, [sp, #32]
 800b318:	3030      	adds	r0, #48	@ 0x30
 800b31a:	5518      	strb	r0, [r3, r4]
 800b31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31e:	3401      	adds	r4, #1
 800b320:	0005      	movs	r5, r0
 800b322:	429c      	cmp	r4, r3
 800b324:	dab6      	bge.n	800b294 <_dtoa_r+0xb3c>
 800b326:	2300      	movs	r3, #0
 800b328:	220a      	movs	r2, #10
 800b32a:	9905      	ldr	r1, [sp, #20]
 800b32c:	9803      	ldr	r0, [sp, #12]
 800b32e:	f000 f975 	bl	800b61c <__multadd>
 800b332:	9005      	str	r0, [sp, #20]
 800b334:	e7eb      	b.n	800b30e <_dtoa_r+0xbb6>
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	0800c6f0 	.word	0x0800c6f0
 800b33c:	0800c6f8 	.word	0x0800c6f8

0800b340 <_free_r>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	0005      	movs	r5, r0
 800b344:	1e0c      	subs	r4, r1, #0
 800b346:	d010      	beq.n	800b36a <_free_r+0x2a>
 800b348:	3c04      	subs	r4, #4
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da00      	bge.n	800b352 <_free_r+0x12>
 800b350:	18e4      	adds	r4, r4, r3
 800b352:	0028      	movs	r0, r5
 800b354:	f000 f8ea 	bl	800b52c <__malloc_lock>
 800b358:	4a1d      	ldr	r2, [pc, #116]	@ (800b3d0 <_free_r+0x90>)
 800b35a:	6813      	ldr	r3, [r2, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d105      	bne.n	800b36c <_free_r+0x2c>
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	6014      	str	r4, [r2, #0]
 800b364:	0028      	movs	r0, r5
 800b366:	f000 f8e9 	bl	800b53c <__malloc_unlock>
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	d908      	bls.n	800b382 <_free_r+0x42>
 800b370:	6820      	ldr	r0, [r4, #0]
 800b372:	1821      	adds	r1, r4, r0
 800b374:	428b      	cmp	r3, r1
 800b376:	d1f3      	bne.n	800b360 <_free_r+0x20>
 800b378:	6819      	ldr	r1, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	1809      	adds	r1, r1, r0
 800b37e:	6021      	str	r1, [r4, #0]
 800b380:	e7ee      	b.n	800b360 <_free_r+0x20>
 800b382:	001a      	movs	r2, r3
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <_free_r+0x4e>
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	d9f9      	bls.n	800b382 <_free_r+0x42>
 800b38e:	6811      	ldr	r1, [r2, #0]
 800b390:	1850      	adds	r0, r2, r1
 800b392:	42a0      	cmp	r0, r4
 800b394:	d10b      	bne.n	800b3ae <_free_r+0x6e>
 800b396:	6820      	ldr	r0, [r4, #0]
 800b398:	1809      	adds	r1, r1, r0
 800b39a:	1850      	adds	r0, r2, r1
 800b39c:	6011      	str	r1, [r2, #0]
 800b39e:	4283      	cmp	r3, r0
 800b3a0:	d1e0      	bne.n	800b364 <_free_r+0x24>
 800b3a2:	6818      	ldr	r0, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	1841      	adds	r1, r0, r1
 800b3a8:	6011      	str	r1, [r2, #0]
 800b3aa:	6053      	str	r3, [r2, #4]
 800b3ac:	e7da      	b.n	800b364 <_free_r+0x24>
 800b3ae:	42a0      	cmp	r0, r4
 800b3b0:	d902      	bls.n	800b3b8 <_free_r+0x78>
 800b3b2:	230c      	movs	r3, #12
 800b3b4:	602b      	str	r3, [r5, #0]
 800b3b6:	e7d5      	b.n	800b364 <_free_r+0x24>
 800b3b8:	6820      	ldr	r0, [r4, #0]
 800b3ba:	1821      	adds	r1, r4, r0
 800b3bc:	428b      	cmp	r3, r1
 800b3be:	d103      	bne.n	800b3c8 <_free_r+0x88>
 800b3c0:	6819      	ldr	r1, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	1809      	adds	r1, r1, r0
 800b3c6:	6021      	str	r1, [r4, #0]
 800b3c8:	6063      	str	r3, [r4, #4]
 800b3ca:	6054      	str	r4, [r2, #4]
 800b3cc:	e7ca      	b.n	800b364 <_free_r+0x24>
 800b3ce:	46c0      	nop			@ (mov r8, r8)
 800b3d0:	20000590 	.word	0x20000590

0800b3d4 <malloc>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	4b03      	ldr	r3, [pc, #12]	@ (800b3e4 <malloc+0x10>)
 800b3d8:	0001      	movs	r1, r0
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	f000 f826 	bl	800b42c <_malloc_r>
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	46c0      	nop			@ (mov r8, r8)
 800b3e4:	20000018 	.word	0x20000018

0800b3e8 <sbrk_aligned>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	4e0f      	ldr	r6, [pc, #60]	@ (800b428 <sbrk_aligned+0x40>)
 800b3ec:	000d      	movs	r5, r1
 800b3ee:	6831      	ldr	r1, [r6, #0]
 800b3f0:	0004      	movs	r4, r0
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	d102      	bne.n	800b3fc <sbrk_aligned+0x14>
 800b3f6:	f000 fee3 	bl	800c1c0 <_sbrk_r>
 800b3fa:	6030      	str	r0, [r6, #0]
 800b3fc:	0029      	movs	r1, r5
 800b3fe:	0020      	movs	r0, r4
 800b400:	f000 fede 	bl	800c1c0 <_sbrk_r>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d103      	bne.n	800b410 <sbrk_aligned+0x28>
 800b408:	2501      	movs	r5, #1
 800b40a:	426d      	negs	r5, r5
 800b40c:	0028      	movs	r0, r5
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	2303      	movs	r3, #3
 800b412:	1cc5      	adds	r5, r0, #3
 800b414:	439d      	bics	r5, r3
 800b416:	42a8      	cmp	r0, r5
 800b418:	d0f8      	beq.n	800b40c <sbrk_aligned+0x24>
 800b41a:	1a29      	subs	r1, r5, r0
 800b41c:	0020      	movs	r0, r4
 800b41e:	f000 fecf 	bl	800c1c0 <_sbrk_r>
 800b422:	3001      	adds	r0, #1
 800b424:	d1f2      	bne.n	800b40c <sbrk_aligned+0x24>
 800b426:	e7ef      	b.n	800b408 <sbrk_aligned+0x20>
 800b428:	2000058c 	.word	0x2000058c

0800b42c <_malloc_r>:
 800b42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b42e:	2203      	movs	r2, #3
 800b430:	1ccb      	adds	r3, r1, #3
 800b432:	4393      	bics	r3, r2
 800b434:	3308      	adds	r3, #8
 800b436:	0005      	movs	r5, r0
 800b438:	001f      	movs	r7, r3
 800b43a:	2b0c      	cmp	r3, #12
 800b43c:	d234      	bcs.n	800b4a8 <_malloc_r+0x7c>
 800b43e:	270c      	movs	r7, #12
 800b440:	42b9      	cmp	r1, r7
 800b442:	d833      	bhi.n	800b4ac <_malloc_r+0x80>
 800b444:	0028      	movs	r0, r5
 800b446:	f000 f871 	bl	800b52c <__malloc_lock>
 800b44a:	4e37      	ldr	r6, [pc, #220]	@ (800b528 <_malloc_r+0xfc>)
 800b44c:	6833      	ldr	r3, [r6, #0]
 800b44e:	001c      	movs	r4, r3
 800b450:	2c00      	cmp	r4, #0
 800b452:	d12f      	bne.n	800b4b4 <_malloc_r+0x88>
 800b454:	0039      	movs	r1, r7
 800b456:	0028      	movs	r0, r5
 800b458:	f7ff ffc6 	bl	800b3e8 <sbrk_aligned>
 800b45c:	0004      	movs	r4, r0
 800b45e:	1c43      	adds	r3, r0, #1
 800b460:	d15f      	bne.n	800b522 <_malloc_r+0xf6>
 800b462:	6834      	ldr	r4, [r6, #0]
 800b464:	9400      	str	r4, [sp, #0]
 800b466:	9b00      	ldr	r3, [sp, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d14a      	bne.n	800b502 <_malloc_r+0xd6>
 800b46c:	2c00      	cmp	r4, #0
 800b46e:	d052      	beq.n	800b516 <_malloc_r+0xea>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	0028      	movs	r0, r5
 800b474:	18e3      	adds	r3, r4, r3
 800b476:	9900      	ldr	r1, [sp, #0]
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	f000 fea1 	bl	800c1c0 <_sbrk_r>
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	4283      	cmp	r3, r0
 800b482:	d148      	bne.n	800b516 <_malloc_r+0xea>
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	0028      	movs	r0, r5
 800b488:	1aff      	subs	r7, r7, r3
 800b48a:	0039      	movs	r1, r7
 800b48c:	f7ff ffac 	bl	800b3e8 <sbrk_aligned>
 800b490:	3001      	adds	r0, #1
 800b492:	d040      	beq.n	800b516 <_malloc_r+0xea>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	19db      	adds	r3, r3, r7
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	6833      	ldr	r3, [r6, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	d133      	bne.n	800b50a <_malloc_r+0xde>
 800b4a2:	9b00      	ldr	r3, [sp, #0]
 800b4a4:	6033      	str	r3, [r6, #0]
 800b4a6:	e019      	b.n	800b4dc <_malloc_r+0xb0>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	dac9      	bge.n	800b440 <_malloc_r+0x14>
 800b4ac:	230c      	movs	r3, #12
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4b4:	6821      	ldr	r1, [r4, #0]
 800b4b6:	1bc9      	subs	r1, r1, r7
 800b4b8:	d420      	bmi.n	800b4fc <_malloc_r+0xd0>
 800b4ba:	290b      	cmp	r1, #11
 800b4bc:	d90a      	bls.n	800b4d4 <_malloc_r+0xa8>
 800b4be:	19e2      	adds	r2, r4, r7
 800b4c0:	6027      	str	r7, [r4, #0]
 800b4c2:	42a3      	cmp	r3, r4
 800b4c4:	d104      	bne.n	800b4d0 <_malloc_r+0xa4>
 800b4c6:	6032      	str	r2, [r6, #0]
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	6011      	str	r1, [r2, #0]
 800b4cc:	6053      	str	r3, [r2, #4]
 800b4ce:	e005      	b.n	800b4dc <_malloc_r+0xb0>
 800b4d0:	605a      	str	r2, [r3, #4]
 800b4d2:	e7f9      	b.n	800b4c8 <_malloc_r+0x9c>
 800b4d4:	6862      	ldr	r2, [r4, #4]
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	d10e      	bne.n	800b4f8 <_malloc_r+0xcc>
 800b4da:	6032      	str	r2, [r6, #0]
 800b4dc:	0028      	movs	r0, r5
 800b4de:	f000 f82d 	bl	800b53c <__malloc_unlock>
 800b4e2:	0020      	movs	r0, r4
 800b4e4:	2207      	movs	r2, #7
 800b4e6:	300b      	adds	r0, #11
 800b4e8:	1d23      	adds	r3, r4, #4
 800b4ea:	4390      	bics	r0, r2
 800b4ec:	1ac2      	subs	r2, r0, r3
 800b4ee:	4298      	cmp	r0, r3
 800b4f0:	d0df      	beq.n	800b4b2 <_malloc_r+0x86>
 800b4f2:	1a1b      	subs	r3, r3, r0
 800b4f4:	50a3      	str	r3, [r4, r2]
 800b4f6:	e7dc      	b.n	800b4b2 <_malloc_r+0x86>
 800b4f8:	605a      	str	r2, [r3, #4]
 800b4fa:	e7ef      	b.n	800b4dc <_malloc_r+0xb0>
 800b4fc:	0023      	movs	r3, r4
 800b4fe:	6864      	ldr	r4, [r4, #4]
 800b500:	e7a6      	b.n	800b450 <_malloc_r+0x24>
 800b502:	9c00      	ldr	r4, [sp, #0]
 800b504:	6863      	ldr	r3, [r4, #4]
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	e7ad      	b.n	800b466 <_malloc_r+0x3a>
 800b50a:	001a      	movs	r2, r3
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	42a3      	cmp	r3, r4
 800b510:	d1fb      	bne.n	800b50a <_malloc_r+0xde>
 800b512:	2300      	movs	r3, #0
 800b514:	e7da      	b.n	800b4cc <_malloc_r+0xa0>
 800b516:	230c      	movs	r3, #12
 800b518:	0028      	movs	r0, r5
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	f000 f80e 	bl	800b53c <__malloc_unlock>
 800b520:	e7c6      	b.n	800b4b0 <_malloc_r+0x84>
 800b522:	6007      	str	r7, [r0, #0]
 800b524:	e7da      	b.n	800b4dc <_malloc_r+0xb0>
 800b526:	46c0      	nop			@ (mov r8, r8)
 800b528:	20000590 	.word	0x20000590

0800b52c <__malloc_lock>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	4802      	ldr	r0, [pc, #8]	@ (800b538 <__malloc_lock+0xc>)
 800b530:	f7ff f877 	bl	800a622 <__retarget_lock_acquire_recursive>
 800b534:	bd10      	pop	{r4, pc}
 800b536:	46c0      	nop			@ (mov r8, r8)
 800b538:	20000588 	.word	0x20000588

0800b53c <__malloc_unlock>:
 800b53c:	b510      	push	{r4, lr}
 800b53e:	4802      	ldr	r0, [pc, #8]	@ (800b548 <__malloc_unlock+0xc>)
 800b540:	f7ff f870 	bl	800a624 <__retarget_lock_release_recursive>
 800b544:	bd10      	pop	{r4, pc}
 800b546:	46c0      	nop			@ (mov r8, r8)
 800b548:	20000588 	.word	0x20000588

0800b54c <_Balloc>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	69c5      	ldr	r5, [r0, #28]
 800b550:	0006      	movs	r6, r0
 800b552:	000c      	movs	r4, r1
 800b554:	2d00      	cmp	r5, #0
 800b556:	d10e      	bne.n	800b576 <_Balloc+0x2a>
 800b558:	2010      	movs	r0, #16
 800b55a:	f7ff ff3b 	bl	800b3d4 <malloc>
 800b55e:	1e02      	subs	r2, r0, #0
 800b560:	61f0      	str	r0, [r6, #28]
 800b562:	d104      	bne.n	800b56e <_Balloc+0x22>
 800b564:	216b      	movs	r1, #107	@ 0x6b
 800b566:	4b19      	ldr	r3, [pc, #100]	@ (800b5cc <_Balloc+0x80>)
 800b568:	4819      	ldr	r0, [pc, #100]	@ (800b5d0 <_Balloc+0x84>)
 800b56a:	f000 fe45 	bl	800c1f8 <__assert_func>
 800b56e:	6045      	str	r5, [r0, #4]
 800b570:	6085      	str	r5, [r0, #8]
 800b572:	6005      	str	r5, [r0, #0]
 800b574:	60c5      	str	r5, [r0, #12]
 800b576:	69f5      	ldr	r5, [r6, #28]
 800b578:	68eb      	ldr	r3, [r5, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d013      	beq.n	800b5a6 <_Balloc+0x5a>
 800b57e:	69f3      	ldr	r3, [r6, #28]
 800b580:	00a2      	lsls	r2, r4, #2
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	189b      	adds	r3, r3, r2
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	2800      	cmp	r0, #0
 800b58a:	d118      	bne.n	800b5be <_Balloc+0x72>
 800b58c:	2101      	movs	r1, #1
 800b58e:	000d      	movs	r5, r1
 800b590:	40a5      	lsls	r5, r4
 800b592:	1d6a      	adds	r2, r5, #5
 800b594:	0030      	movs	r0, r6
 800b596:	0092      	lsls	r2, r2, #2
 800b598:	f000 fe4c 	bl	800c234 <_calloc_r>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d00c      	beq.n	800b5ba <_Balloc+0x6e>
 800b5a0:	6044      	str	r4, [r0, #4]
 800b5a2:	6085      	str	r5, [r0, #8]
 800b5a4:	e00d      	b.n	800b5c2 <_Balloc+0x76>
 800b5a6:	2221      	movs	r2, #33	@ 0x21
 800b5a8:	2104      	movs	r1, #4
 800b5aa:	0030      	movs	r0, r6
 800b5ac:	f000 fe42 	bl	800c234 <_calloc_r>
 800b5b0:	69f3      	ldr	r3, [r6, #28]
 800b5b2:	60e8      	str	r0, [r5, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e1      	bne.n	800b57e <_Balloc+0x32>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
 800b5be:	6802      	ldr	r2, [r0, #0]
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6103      	str	r3, [r0, #16]
 800b5c6:	60c3      	str	r3, [r0, #12]
 800b5c8:	e7f8      	b.n	800b5bc <_Balloc+0x70>
 800b5ca:	46c0      	nop			@ (mov r8, r8)
 800b5cc:	0800c6fd 	.word	0x0800c6fd
 800b5d0:	0800c77d 	.word	0x0800c77d

0800b5d4 <_Bfree>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	69c6      	ldr	r6, [r0, #28]
 800b5d8:	0005      	movs	r5, r0
 800b5da:	000c      	movs	r4, r1
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	d10e      	bne.n	800b5fe <_Bfree+0x2a>
 800b5e0:	2010      	movs	r0, #16
 800b5e2:	f7ff fef7 	bl	800b3d4 <malloc>
 800b5e6:	1e02      	subs	r2, r0, #0
 800b5e8:	61e8      	str	r0, [r5, #28]
 800b5ea:	d104      	bne.n	800b5f6 <_Bfree+0x22>
 800b5ec:	218f      	movs	r1, #143	@ 0x8f
 800b5ee:	4b09      	ldr	r3, [pc, #36]	@ (800b614 <_Bfree+0x40>)
 800b5f0:	4809      	ldr	r0, [pc, #36]	@ (800b618 <_Bfree+0x44>)
 800b5f2:	f000 fe01 	bl	800c1f8 <__assert_func>
 800b5f6:	6046      	str	r6, [r0, #4]
 800b5f8:	6086      	str	r6, [r0, #8]
 800b5fa:	6006      	str	r6, [r0, #0]
 800b5fc:	60c6      	str	r6, [r0, #12]
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	d007      	beq.n	800b612 <_Bfree+0x3e>
 800b602:	69eb      	ldr	r3, [r5, #28]
 800b604:	6862      	ldr	r2, [r4, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	0092      	lsls	r2, r2, #2
 800b60a:	189b      	adds	r3, r3, r2
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	6022      	str	r2, [r4, #0]
 800b610:	601c      	str	r4, [r3, #0]
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	0800c6fd 	.word	0x0800c6fd
 800b618:	0800c77d 	.word	0x0800c77d

0800b61c <__multadd>:
 800b61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b61e:	000f      	movs	r7, r1
 800b620:	9001      	str	r0, [sp, #4]
 800b622:	000c      	movs	r4, r1
 800b624:	001e      	movs	r6, r3
 800b626:	2000      	movs	r0, #0
 800b628:	690d      	ldr	r5, [r1, #16]
 800b62a:	3714      	adds	r7, #20
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	3001      	adds	r0, #1
 800b630:	b299      	uxth	r1, r3
 800b632:	4351      	muls	r1, r2
 800b634:	0c1b      	lsrs	r3, r3, #16
 800b636:	4353      	muls	r3, r2
 800b638:	1989      	adds	r1, r1, r6
 800b63a:	0c0e      	lsrs	r6, r1, #16
 800b63c:	199b      	adds	r3, r3, r6
 800b63e:	0c1e      	lsrs	r6, r3, #16
 800b640:	b289      	uxth	r1, r1
 800b642:	041b      	lsls	r3, r3, #16
 800b644:	185b      	adds	r3, r3, r1
 800b646:	c708      	stmia	r7!, {r3}
 800b648:	4285      	cmp	r5, r0
 800b64a:	dcef      	bgt.n	800b62c <__multadd+0x10>
 800b64c:	2e00      	cmp	r6, #0
 800b64e:	d022      	beq.n	800b696 <__multadd+0x7a>
 800b650:	68a3      	ldr	r3, [r4, #8]
 800b652:	42ab      	cmp	r3, r5
 800b654:	dc19      	bgt.n	800b68a <__multadd+0x6e>
 800b656:	6861      	ldr	r1, [r4, #4]
 800b658:	9801      	ldr	r0, [sp, #4]
 800b65a:	3101      	adds	r1, #1
 800b65c:	f7ff ff76 	bl	800b54c <_Balloc>
 800b660:	1e07      	subs	r7, r0, #0
 800b662:	d105      	bne.n	800b670 <__multadd+0x54>
 800b664:	003a      	movs	r2, r7
 800b666:	21ba      	movs	r1, #186	@ 0xba
 800b668:	4b0c      	ldr	r3, [pc, #48]	@ (800b69c <__multadd+0x80>)
 800b66a:	480d      	ldr	r0, [pc, #52]	@ (800b6a0 <__multadd+0x84>)
 800b66c:	f000 fdc4 	bl	800c1f8 <__assert_func>
 800b670:	0021      	movs	r1, r4
 800b672:	6922      	ldr	r2, [r4, #16]
 800b674:	310c      	adds	r1, #12
 800b676:	3202      	adds	r2, #2
 800b678:	0092      	lsls	r2, r2, #2
 800b67a:	300c      	adds	r0, #12
 800b67c:	f000 fdb2 	bl	800c1e4 <memcpy>
 800b680:	0021      	movs	r1, r4
 800b682:	9801      	ldr	r0, [sp, #4]
 800b684:	f7ff ffa6 	bl	800b5d4 <_Bfree>
 800b688:	003c      	movs	r4, r7
 800b68a:	1d2b      	adds	r3, r5, #4
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	18e3      	adds	r3, r4, r3
 800b690:	3501      	adds	r5, #1
 800b692:	605e      	str	r6, [r3, #4]
 800b694:	6125      	str	r5, [r4, #16]
 800b696:	0020      	movs	r0, r4
 800b698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b69a:	46c0      	nop			@ (mov r8, r8)
 800b69c:	0800c76c 	.word	0x0800c76c
 800b6a0:	0800c77d 	.word	0x0800c77d

0800b6a4 <__hi0bits>:
 800b6a4:	2280      	movs	r2, #128	@ 0x80
 800b6a6:	0003      	movs	r3, r0
 800b6a8:	0252      	lsls	r2, r2, #9
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d201      	bcs.n	800b6b4 <__hi0bits+0x10>
 800b6b0:	041b      	lsls	r3, r3, #16
 800b6b2:	3010      	adds	r0, #16
 800b6b4:	2280      	movs	r2, #128	@ 0x80
 800b6b6:	0452      	lsls	r2, r2, #17
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d201      	bcs.n	800b6c0 <__hi0bits+0x1c>
 800b6bc:	3008      	adds	r0, #8
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	2280      	movs	r2, #128	@ 0x80
 800b6c2:	0552      	lsls	r2, r2, #21
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d201      	bcs.n	800b6cc <__hi0bits+0x28>
 800b6c8:	3004      	adds	r0, #4
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	2280      	movs	r2, #128	@ 0x80
 800b6ce:	05d2      	lsls	r2, r2, #23
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d201      	bcs.n	800b6d8 <__hi0bits+0x34>
 800b6d4:	3002      	adds	r0, #2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	db03      	blt.n	800b6e4 <__hi0bits+0x40>
 800b6dc:	3001      	adds	r0, #1
 800b6de:	4213      	tst	r3, r2
 800b6e0:	d100      	bne.n	800b6e4 <__hi0bits+0x40>
 800b6e2:	2020      	movs	r0, #32
 800b6e4:	4770      	bx	lr

0800b6e6 <__lo0bits>:
 800b6e6:	6803      	ldr	r3, [r0, #0]
 800b6e8:	0001      	movs	r1, r0
 800b6ea:	2207      	movs	r2, #7
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	4010      	ands	r0, r2
 800b6f0:	4213      	tst	r3, r2
 800b6f2:	d00d      	beq.n	800b710 <__lo0bits+0x2a>
 800b6f4:	3a06      	subs	r2, #6
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	4213      	tst	r3, r2
 800b6fa:	d105      	bne.n	800b708 <__lo0bits+0x22>
 800b6fc:	3002      	adds	r0, #2
 800b6fe:	4203      	tst	r3, r0
 800b700:	d003      	beq.n	800b70a <__lo0bits+0x24>
 800b702:	40d3      	lsrs	r3, r2
 800b704:	0010      	movs	r0, r2
 800b706:	600b      	str	r3, [r1, #0]
 800b708:	4770      	bx	lr
 800b70a:	089b      	lsrs	r3, r3, #2
 800b70c:	600b      	str	r3, [r1, #0]
 800b70e:	e7fb      	b.n	800b708 <__lo0bits+0x22>
 800b710:	b29a      	uxth	r2, r3
 800b712:	2a00      	cmp	r2, #0
 800b714:	d101      	bne.n	800b71a <__lo0bits+0x34>
 800b716:	2010      	movs	r0, #16
 800b718:	0c1b      	lsrs	r3, r3, #16
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	2a00      	cmp	r2, #0
 800b71e:	d101      	bne.n	800b724 <__lo0bits+0x3e>
 800b720:	3008      	adds	r0, #8
 800b722:	0a1b      	lsrs	r3, r3, #8
 800b724:	071a      	lsls	r2, r3, #28
 800b726:	d101      	bne.n	800b72c <__lo0bits+0x46>
 800b728:	3004      	adds	r0, #4
 800b72a:	091b      	lsrs	r3, r3, #4
 800b72c:	079a      	lsls	r2, r3, #30
 800b72e:	d101      	bne.n	800b734 <__lo0bits+0x4e>
 800b730:	3002      	adds	r0, #2
 800b732:	089b      	lsrs	r3, r3, #2
 800b734:	07da      	lsls	r2, r3, #31
 800b736:	d4e9      	bmi.n	800b70c <__lo0bits+0x26>
 800b738:	3001      	adds	r0, #1
 800b73a:	085b      	lsrs	r3, r3, #1
 800b73c:	d1e6      	bne.n	800b70c <__lo0bits+0x26>
 800b73e:	2020      	movs	r0, #32
 800b740:	e7e2      	b.n	800b708 <__lo0bits+0x22>
	...

0800b744 <__i2b>:
 800b744:	b510      	push	{r4, lr}
 800b746:	000c      	movs	r4, r1
 800b748:	2101      	movs	r1, #1
 800b74a:	f7ff feff 	bl	800b54c <_Balloc>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d107      	bne.n	800b762 <__i2b+0x1e>
 800b752:	2146      	movs	r1, #70	@ 0x46
 800b754:	4c05      	ldr	r4, [pc, #20]	@ (800b76c <__i2b+0x28>)
 800b756:	0002      	movs	r2, r0
 800b758:	4b05      	ldr	r3, [pc, #20]	@ (800b770 <__i2b+0x2c>)
 800b75a:	0020      	movs	r0, r4
 800b75c:	31ff      	adds	r1, #255	@ 0xff
 800b75e:	f000 fd4b 	bl	800c1f8 <__assert_func>
 800b762:	2301      	movs	r3, #1
 800b764:	6144      	str	r4, [r0, #20]
 800b766:	6103      	str	r3, [r0, #16]
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	46c0      	nop			@ (mov r8, r8)
 800b76c:	0800c77d 	.word	0x0800c77d
 800b770:	0800c76c 	.word	0x0800c76c

0800b774 <__multiply>:
 800b774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b776:	0014      	movs	r4, r2
 800b778:	690a      	ldr	r2, [r1, #16]
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	000d      	movs	r5, r1
 800b77e:	b08b      	sub	sp, #44	@ 0x2c
 800b780:	429a      	cmp	r2, r3
 800b782:	db02      	blt.n	800b78a <__multiply+0x16>
 800b784:	0023      	movs	r3, r4
 800b786:	000c      	movs	r4, r1
 800b788:	001d      	movs	r5, r3
 800b78a:	6927      	ldr	r7, [r4, #16]
 800b78c:	692e      	ldr	r6, [r5, #16]
 800b78e:	6861      	ldr	r1, [r4, #4]
 800b790:	19bb      	adds	r3, r7, r6
 800b792:	9303      	str	r3, [sp, #12]
 800b794:	68a3      	ldr	r3, [r4, #8]
 800b796:	19ba      	adds	r2, r7, r6
 800b798:	4293      	cmp	r3, r2
 800b79a:	da00      	bge.n	800b79e <__multiply+0x2a>
 800b79c:	3101      	adds	r1, #1
 800b79e:	f7ff fed5 	bl	800b54c <_Balloc>
 800b7a2:	9002      	str	r0, [sp, #8]
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d106      	bne.n	800b7b6 <__multiply+0x42>
 800b7a8:	21b1      	movs	r1, #177	@ 0xb1
 800b7aa:	4b49      	ldr	r3, [pc, #292]	@ (800b8d0 <__multiply+0x15c>)
 800b7ac:	4849      	ldr	r0, [pc, #292]	@ (800b8d4 <__multiply+0x160>)
 800b7ae:	9a02      	ldr	r2, [sp, #8]
 800b7b0:	0049      	lsls	r1, r1, #1
 800b7b2:	f000 fd21 	bl	800c1f8 <__assert_func>
 800b7b6:	9b02      	ldr	r3, [sp, #8]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	3314      	adds	r3, #20
 800b7bc:	469c      	mov	ip, r3
 800b7be:	19bb      	adds	r3, r7, r6
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4463      	add	r3, ip
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	4663      	mov	r3, ip
 800b7c8:	9904      	ldr	r1, [sp, #16]
 800b7ca:	428b      	cmp	r3, r1
 800b7cc:	d32a      	bcc.n	800b824 <__multiply+0xb0>
 800b7ce:	0023      	movs	r3, r4
 800b7d0:	00bf      	lsls	r7, r7, #2
 800b7d2:	3314      	adds	r3, #20
 800b7d4:	3514      	adds	r5, #20
 800b7d6:	9308      	str	r3, [sp, #32]
 800b7d8:	00b6      	lsls	r6, r6, #2
 800b7da:	19db      	adds	r3, r3, r7
 800b7dc:	9305      	str	r3, [sp, #20]
 800b7de:	19ab      	adds	r3, r5, r6
 800b7e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e2:	2304      	movs	r3, #4
 800b7e4:	9306      	str	r3, [sp, #24]
 800b7e6:	0023      	movs	r3, r4
 800b7e8:	9a05      	ldr	r2, [sp, #20]
 800b7ea:	3315      	adds	r3, #21
 800b7ec:	9501      	str	r5, [sp, #4]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d305      	bcc.n	800b7fe <__multiply+0x8a>
 800b7f2:	1b13      	subs	r3, r2, r4
 800b7f4:	3b15      	subs	r3, #21
 800b7f6:	089b      	lsrs	r3, r3, #2
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	9306      	str	r3, [sp, #24]
 800b7fe:	9b01      	ldr	r3, [sp, #4]
 800b800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b802:	4293      	cmp	r3, r2
 800b804:	d310      	bcc.n	800b828 <__multiply+0xb4>
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dd05      	ble.n	800b818 <__multiply+0xa4>
 800b80c:	9b04      	ldr	r3, [sp, #16]
 800b80e:	3b04      	subs	r3, #4
 800b810:	9304      	str	r3, [sp, #16]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d056      	beq.n	800b8c6 <__multiply+0x152>
 800b818:	9b02      	ldr	r3, [sp, #8]
 800b81a:	9a03      	ldr	r2, [sp, #12]
 800b81c:	0018      	movs	r0, r3
 800b81e:	611a      	str	r2, [r3, #16]
 800b820:	b00b      	add	sp, #44	@ 0x2c
 800b822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b824:	c304      	stmia	r3!, {r2}
 800b826:	e7cf      	b.n	800b7c8 <__multiply+0x54>
 800b828:	9b01      	ldr	r3, [sp, #4]
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	b280      	uxth	r0, r0
 800b82e:	2800      	cmp	r0, #0
 800b830:	d01e      	beq.n	800b870 <__multiply+0xfc>
 800b832:	4667      	mov	r7, ip
 800b834:	2500      	movs	r5, #0
 800b836:	9e08      	ldr	r6, [sp, #32]
 800b838:	ce02      	ldmia	r6!, {r1}
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	b28b      	uxth	r3, r1
 800b840:	4343      	muls	r3, r0
 800b842:	001a      	movs	r2, r3
 800b844:	466b      	mov	r3, sp
 800b846:	0c09      	lsrs	r1, r1, #16
 800b848:	8b9b      	ldrh	r3, [r3, #28]
 800b84a:	4341      	muls	r1, r0
 800b84c:	18d3      	adds	r3, r2, r3
 800b84e:	9a07      	ldr	r2, [sp, #28]
 800b850:	195b      	adds	r3, r3, r5
 800b852:	0c12      	lsrs	r2, r2, #16
 800b854:	1889      	adds	r1, r1, r2
 800b856:	0c1a      	lsrs	r2, r3, #16
 800b858:	188a      	adds	r2, r1, r2
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	0c15      	lsrs	r5, r2, #16
 800b85e:	0412      	lsls	r2, r2, #16
 800b860:	431a      	orrs	r2, r3
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	c704      	stmia	r7!, {r2}
 800b866:	42b3      	cmp	r3, r6
 800b868:	d8e6      	bhi.n	800b838 <__multiply+0xc4>
 800b86a:	4663      	mov	r3, ip
 800b86c:	9a06      	ldr	r2, [sp, #24]
 800b86e:	509d      	str	r5, [r3, r2]
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	6818      	ldr	r0, [r3, #0]
 800b874:	0c00      	lsrs	r0, r0, #16
 800b876:	d020      	beq.n	800b8ba <__multiply+0x146>
 800b878:	4663      	mov	r3, ip
 800b87a:	0025      	movs	r5, r4
 800b87c:	4661      	mov	r1, ip
 800b87e:	2700      	movs	r7, #0
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3514      	adds	r5, #20
 800b884:	682a      	ldr	r2, [r5, #0]
 800b886:	680e      	ldr	r6, [r1, #0]
 800b888:	b292      	uxth	r2, r2
 800b88a:	4342      	muls	r2, r0
 800b88c:	0c36      	lsrs	r6, r6, #16
 800b88e:	1992      	adds	r2, r2, r6
 800b890:	19d2      	adds	r2, r2, r7
 800b892:	0416      	lsls	r6, r2, #16
 800b894:	b29b      	uxth	r3, r3
 800b896:	431e      	orrs	r6, r3
 800b898:	600e      	str	r6, [r1, #0]
 800b89a:	cd40      	ldmia	r5!, {r6}
 800b89c:	684b      	ldr	r3, [r1, #4]
 800b89e:	0c36      	lsrs	r6, r6, #16
 800b8a0:	4346      	muls	r6, r0
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	0c12      	lsrs	r2, r2, #16
 800b8a6:	18f3      	adds	r3, r6, r3
 800b8a8:	189b      	adds	r3, r3, r2
 800b8aa:	9a05      	ldr	r2, [sp, #20]
 800b8ac:	0c1f      	lsrs	r7, r3, #16
 800b8ae:	3104      	adds	r1, #4
 800b8b0:	42aa      	cmp	r2, r5
 800b8b2:	d8e7      	bhi.n	800b884 <__multiply+0x110>
 800b8b4:	4662      	mov	r2, ip
 800b8b6:	9906      	ldr	r1, [sp, #24]
 800b8b8:	5053      	str	r3, [r2, r1]
 800b8ba:	9b01      	ldr	r3, [sp, #4]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	2304      	movs	r3, #4
 800b8c2:	449c      	add	ip, r3
 800b8c4:	e79b      	b.n	800b7fe <__multiply+0x8a>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	e79b      	b.n	800b806 <__multiply+0x92>
 800b8ce:	46c0      	nop			@ (mov r8, r8)
 800b8d0:	0800c76c 	.word	0x0800c76c
 800b8d4:	0800c77d 	.word	0x0800c77d

0800b8d8 <__pow5mult>:
 800b8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8da:	2303      	movs	r3, #3
 800b8dc:	0015      	movs	r5, r2
 800b8de:	0007      	movs	r7, r0
 800b8e0:	000e      	movs	r6, r1
 800b8e2:	401a      	ands	r2, r3
 800b8e4:	421d      	tst	r5, r3
 800b8e6:	d008      	beq.n	800b8fa <__pow5mult+0x22>
 800b8e8:	4925      	ldr	r1, [pc, #148]	@ (800b980 <__pow5mult+0xa8>)
 800b8ea:	3a01      	subs	r2, #1
 800b8ec:	0092      	lsls	r2, r2, #2
 800b8ee:	5852      	ldr	r2, [r2, r1]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	0031      	movs	r1, r6
 800b8f4:	f7ff fe92 	bl	800b61c <__multadd>
 800b8f8:	0006      	movs	r6, r0
 800b8fa:	10ad      	asrs	r5, r5, #2
 800b8fc:	d03d      	beq.n	800b97a <__pow5mult+0xa2>
 800b8fe:	69fc      	ldr	r4, [r7, #28]
 800b900:	2c00      	cmp	r4, #0
 800b902:	d10f      	bne.n	800b924 <__pow5mult+0x4c>
 800b904:	2010      	movs	r0, #16
 800b906:	f7ff fd65 	bl	800b3d4 <malloc>
 800b90a:	1e02      	subs	r2, r0, #0
 800b90c:	61f8      	str	r0, [r7, #28]
 800b90e:	d105      	bne.n	800b91c <__pow5mult+0x44>
 800b910:	21b4      	movs	r1, #180	@ 0xb4
 800b912:	4b1c      	ldr	r3, [pc, #112]	@ (800b984 <__pow5mult+0xac>)
 800b914:	481c      	ldr	r0, [pc, #112]	@ (800b988 <__pow5mult+0xb0>)
 800b916:	31ff      	adds	r1, #255	@ 0xff
 800b918:	f000 fc6e 	bl	800c1f8 <__assert_func>
 800b91c:	6044      	str	r4, [r0, #4]
 800b91e:	6084      	str	r4, [r0, #8]
 800b920:	6004      	str	r4, [r0, #0]
 800b922:	60c4      	str	r4, [r0, #12]
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	689c      	ldr	r4, [r3, #8]
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	2c00      	cmp	r4, #0
 800b92c:	d108      	bne.n	800b940 <__pow5mult+0x68>
 800b92e:	0038      	movs	r0, r7
 800b930:	4916      	ldr	r1, [pc, #88]	@ (800b98c <__pow5mult+0xb4>)
 800b932:	f7ff ff07 	bl	800b744 <__i2b>
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	0004      	movs	r4, r0
 800b93a:	6098      	str	r0, [r3, #8]
 800b93c:	2300      	movs	r3, #0
 800b93e:	6003      	str	r3, [r0, #0]
 800b940:	2301      	movs	r3, #1
 800b942:	421d      	tst	r5, r3
 800b944:	d00a      	beq.n	800b95c <__pow5mult+0x84>
 800b946:	0031      	movs	r1, r6
 800b948:	0022      	movs	r2, r4
 800b94a:	0038      	movs	r0, r7
 800b94c:	f7ff ff12 	bl	800b774 <__multiply>
 800b950:	0031      	movs	r1, r6
 800b952:	9001      	str	r0, [sp, #4]
 800b954:	0038      	movs	r0, r7
 800b956:	f7ff fe3d 	bl	800b5d4 <_Bfree>
 800b95a:	9e01      	ldr	r6, [sp, #4]
 800b95c:	106d      	asrs	r5, r5, #1
 800b95e:	d00c      	beq.n	800b97a <__pow5mult+0xa2>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	2800      	cmp	r0, #0
 800b964:	d107      	bne.n	800b976 <__pow5mult+0x9e>
 800b966:	0022      	movs	r2, r4
 800b968:	0021      	movs	r1, r4
 800b96a:	0038      	movs	r0, r7
 800b96c:	f7ff ff02 	bl	800b774 <__multiply>
 800b970:	2300      	movs	r3, #0
 800b972:	6020      	str	r0, [r4, #0]
 800b974:	6003      	str	r3, [r0, #0]
 800b976:	0004      	movs	r4, r0
 800b978:	e7e2      	b.n	800b940 <__pow5mult+0x68>
 800b97a:	0030      	movs	r0, r6
 800b97c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b97e:	46c0      	nop			@ (mov r8, r8)
 800b980:	0800c7d8 	.word	0x0800c7d8
 800b984:	0800c6fd 	.word	0x0800c6fd
 800b988:	0800c77d 	.word	0x0800c77d
 800b98c:	00000271 	.word	0x00000271

0800b990 <__lshift>:
 800b990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b992:	000c      	movs	r4, r1
 800b994:	0016      	movs	r6, r2
 800b996:	6923      	ldr	r3, [r4, #16]
 800b998:	1157      	asrs	r7, r2, #5
 800b99a:	b085      	sub	sp, #20
 800b99c:	18fb      	adds	r3, r7, r3
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	6849      	ldr	r1, [r1, #4]
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	9002      	str	r0, [sp, #8]
 800b9aa:	9a00      	ldr	r2, [sp, #0]
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	db10      	blt.n	800b9d2 <__lshift+0x42>
 800b9b0:	9802      	ldr	r0, [sp, #8]
 800b9b2:	f7ff fdcb 	bl	800b54c <_Balloc>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	0001      	movs	r1, r0
 800b9ba:	0005      	movs	r5, r0
 800b9bc:	001a      	movs	r2, r3
 800b9be:	3114      	adds	r1, #20
 800b9c0:	4298      	cmp	r0, r3
 800b9c2:	d10c      	bne.n	800b9de <__lshift+0x4e>
 800b9c4:	21ef      	movs	r1, #239	@ 0xef
 800b9c6:	002a      	movs	r2, r5
 800b9c8:	4b25      	ldr	r3, [pc, #148]	@ (800ba60 <__lshift+0xd0>)
 800b9ca:	4826      	ldr	r0, [pc, #152]	@ (800ba64 <__lshift+0xd4>)
 800b9cc:	0049      	lsls	r1, r1, #1
 800b9ce:	f000 fc13 	bl	800c1f8 <__assert_func>
 800b9d2:	3101      	adds	r1, #1
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	e7e8      	b.n	800b9aa <__lshift+0x1a>
 800b9d8:	0098      	lsls	r0, r3, #2
 800b9da:	500a      	str	r2, [r1, r0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	42bb      	cmp	r3, r7
 800b9e0:	dbfa      	blt.n	800b9d8 <__lshift+0x48>
 800b9e2:	43fb      	mvns	r3, r7
 800b9e4:	17db      	asrs	r3, r3, #31
 800b9e6:	401f      	ands	r7, r3
 800b9e8:	00bf      	lsls	r7, r7, #2
 800b9ea:	0023      	movs	r3, r4
 800b9ec:	201f      	movs	r0, #31
 800b9ee:	19c9      	adds	r1, r1, r7
 800b9f0:	0037      	movs	r7, r6
 800b9f2:	6922      	ldr	r2, [r4, #16]
 800b9f4:	3314      	adds	r3, #20
 800b9f6:	0092      	lsls	r2, r2, #2
 800b9f8:	189a      	adds	r2, r3, r2
 800b9fa:	4007      	ands	r7, r0
 800b9fc:	4206      	tst	r6, r0
 800b9fe:	d029      	beq.n	800ba54 <__lshift+0xc4>
 800ba00:	3001      	adds	r0, #1
 800ba02:	1bc0      	subs	r0, r0, r7
 800ba04:	9003      	str	r0, [sp, #12]
 800ba06:	468c      	mov	ip, r1
 800ba08:	2000      	movs	r0, #0
 800ba0a:	681e      	ldr	r6, [r3, #0]
 800ba0c:	40be      	lsls	r6, r7
 800ba0e:	4306      	orrs	r6, r0
 800ba10:	4660      	mov	r0, ip
 800ba12:	c040      	stmia	r0!, {r6}
 800ba14:	4684      	mov	ip, r0
 800ba16:	9e03      	ldr	r6, [sp, #12]
 800ba18:	cb01      	ldmia	r3!, {r0}
 800ba1a:	40f0      	lsrs	r0, r6
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d8f4      	bhi.n	800ba0a <__lshift+0x7a>
 800ba20:	0026      	movs	r6, r4
 800ba22:	3615      	adds	r6, #21
 800ba24:	2304      	movs	r3, #4
 800ba26:	42b2      	cmp	r2, r6
 800ba28:	d304      	bcc.n	800ba34 <__lshift+0xa4>
 800ba2a:	1b13      	subs	r3, r2, r4
 800ba2c:	3b15      	subs	r3, #21
 800ba2e:	089b      	lsrs	r3, r3, #2
 800ba30:	3301      	adds	r3, #1
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	50c8      	str	r0, [r1, r3]
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d002      	beq.n	800ba40 <__lshift+0xb0>
 800ba3a:	9b01      	ldr	r3, [sp, #4]
 800ba3c:	3302      	adds	r3, #2
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	9b00      	ldr	r3, [sp, #0]
 800ba42:	9802      	ldr	r0, [sp, #8]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	0021      	movs	r1, r4
 800ba48:	612b      	str	r3, [r5, #16]
 800ba4a:	f7ff fdc3 	bl	800b5d4 <_Bfree>
 800ba4e:	0028      	movs	r0, r5
 800ba50:	b005      	add	sp, #20
 800ba52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba54:	cb01      	ldmia	r3!, {r0}
 800ba56:	c101      	stmia	r1!, {r0}
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d8fb      	bhi.n	800ba54 <__lshift+0xc4>
 800ba5c:	e7f0      	b.n	800ba40 <__lshift+0xb0>
 800ba5e:	46c0      	nop			@ (mov r8, r8)
 800ba60:	0800c76c 	.word	0x0800c76c
 800ba64:	0800c77d 	.word	0x0800c77d

0800ba68 <__mcmp>:
 800ba68:	b530      	push	{r4, r5, lr}
 800ba6a:	690b      	ldr	r3, [r1, #16]
 800ba6c:	6904      	ldr	r4, [r0, #16]
 800ba6e:	0002      	movs	r2, r0
 800ba70:	1ae0      	subs	r0, r4, r3
 800ba72:	429c      	cmp	r4, r3
 800ba74:	d10f      	bne.n	800ba96 <__mcmp+0x2e>
 800ba76:	3214      	adds	r2, #20
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	3114      	adds	r1, #20
 800ba7c:	0014      	movs	r4, r2
 800ba7e:	18c9      	adds	r1, r1, r3
 800ba80:	18d2      	adds	r2, r2, r3
 800ba82:	3a04      	subs	r2, #4
 800ba84:	3904      	subs	r1, #4
 800ba86:	6815      	ldr	r5, [r2, #0]
 800ba88:	680b      	ldr	r3, [r1, #0]
 800ba8a:	429d      	cmp	r5, r3
 800ba8c:	d004      	beq.n	800ba98 <__mcmp+0x30>
 800ba8e:	2001      	movs	r0, #1
 800ba90:	429d      	cmp	r5, r3
 800ba92:	d200      	bcs.n	800ba96 <__mcmp+0x2e>
 800ba94:	3802      	subs	r0, #2
 800ba96:	bd30      	pop	{r4, r5, pc}
 800ba98:	4294      	cmp	r4, r2
 800ba9a:	d3f2      	bcc.n	800ba82 <__mcmp+0x1a>
 800ba9c:	e7fb      	b.n	800ba96 <__mcmp+0x2e>
	...

0800baa0 <__mdiff>:
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	000c      	movs	r4, r1
 800baa4:	b087      	sub	sp, #28
 800baa6:	9000      	str	r0, [sp, #0]
 800baa8:	0011      	movs	r1, r2
 800baaa:	0020      	movs	r0, r4
 800baac:	0017      	movs	r7, r2
 800baae:	f7ff ffdb 	bl	800ba68 <__mcmp>
 800bab2:	1e05      	subs	r5, r0, #0
 800bab4:	d110      	bne.n	800bad8 <__mdiff+0x38>
 800bab6:	0001      	movs	r1, r0
 800bab8:	9800      	ldr	r0, [sp, #0]
 800baba:	f7ff fd47 	bl	800b54c <_Balloc>
 800babe:	1e02      	subs	r2, r0, #0
 800bac0:	d104      	bne.n	800bacc <__mdiff+0x2c>
 800bac2:	4b40      	ldr	r3, [pc, #256]	@ (800bbc4 <__mdiff+0x124>)
 800bac4:	4840      	ldr	r0, [pc, #256]	@ (800bbc8 <__mdiff+0x128>)
 800bac6:	4941      	ldr	r1, [pc, #260]	@ (800bbcc <__mdiff+0x12c>)
 800bac8:	f000 fb96 	bl	800c1f8 <__assert_func>
 800bacc:	2301      	movs	r3, #1
 800bace:	6145      	str	r5, [r0, #20]
 800bad0:	6103      	str	r3, [r0, #16]
 800bad2:	0010      	movs	r0, r2
 800bad4:	b007      	add	sp, #28
 800bad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bad8:	2600      	movs	r6, #0
 800bada:	42b0      	cmp	r0, r6
 800badc:	da03      	bge.n	800bae6 <__mdiff+0x46>
 800bade:	0023      	movs	r3, r4
 800bae0:	003c      	movs	r4, r7
 800bae2:	001f      	movs	r7, r3
 800bae4:	3601      	adds	r6, #1
 800bae6:	6861      	ldr	r1, [r4, #4]
 800bae8:	9800      	ldr	r0, [sp, #0]
 800baea:	f7ff fd2f 	bl	800b54c <_Balloc>
 800baee:	1e02      	subs	r2, r0, #0
 800baf0:	d103      	bne.n	800bafa <__mdiff+0x5a>
 800baf2:	4b34      	ldr	r3, [pc, #208]	@ (800bbc4 <__mdiff+0x124>)
 800baf4:	4834      	ldr	r0, [pc, #208]	@ (800bbc8 <__mdiff+0x128>)
 800baf6:	4936      	ldr	r1, [pc, #216]	@ (800bbd0 <__mdiff+0x130>)
 800baf8:	e7e6      	b.n	800bac8 <__mdiff+0x28>
 800bafa:	6923      	ldr	r3, [r4, #16]
 800bafc:	3414      	adds	r4, #20
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	18e3      	adds	r3, r4, r3
 800bb04:	0021      	movs	r1, r4
 800bb06:	9401      	str	r4, [sp, #4]
 800bb08:	003c      	movs	r4, r7
 800bb0a:	9302      	str	r3, [sp, #8]
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	3414      	adds	r4, #20
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	18e3      	adds	r3, r4, r3
 800bb14:	9303      	str	r3, [sp, #12]
 800bb16:	0003      	movs	r3, r0
 800bb18:	60c6      	str	r6, [r0, #12]
 800bb1a:	468c      	mov	ip, r1
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	3314      	adds	r3, #20
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	9305      	str	r3, [sp, #20]
 800bb24:	4663      	mov	r3, ip
 800bb26:	cb20      	ldmia	r3!, {r5}
 800bb28:	b2a9      	uxth	r1, r5
 800bb2a:	000e      	movs	r6, r1
 800bb2c:	469c      	mov	ip, r3
 800bb2e:	cc08      	ldmia	r4!, {r3}
 800bb30:	0c2d      	lsrs	r5, r5, #16
 800bb32:	b299      	uxth	r1, r3
 800bb34:	1a71      	subs	r1, r6, r1
 800bb36:	1809      	adds	r1, r1, r0
 800bb38:	0c1b      	lsrs	r3, r3, #16
 800bb3a:	1408      	asrs	r0, r1, #16
 800bb3c:	1aeb      	subs	r3, r5, r3
 800bb3e:	181b      	adds	r3, r3, r0
 800bb40:	1418      	asrs	r0, r3, #16
 800bb42:	b289      	uxth	r1, r1
 800bb44:	041b      	lsls	r3, r3, #16
 800bb46:	4319      	orrs	r1, r3
 800bb48:	9b05      	ldr	r3, [sp, #20]
 800bb4a:	c302      	stmia	r3!, {r1}
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	d8e7      	bhi.n	800bb24 <__mdiff+0x84>
 800bb54:	0039      	movs	r1, r7
 800bb56:	9c03      	ldr	r4, [sp, #12]
 800bb58:	3115      	adds	r1, #21
 800bb5a:	2304      	movs	r3, #4
 800bb5c:	428c      	cmp	r4, r1
 800bb5e:	d304      	bcc.n	800bb6a <__mdiff+0xca>
 800bb60:	1be3      	subs	r3, r4, r7
 800bb62:	3b15      	subs	r3, #21
 800bb64:	089b      	lsrs	r3, r3, #2
 800bb66:	3301      	adds	r3, #1
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	9901      	ldr	r1, [sp, #4]
 800bb6c:	18cd      	adds	r5, r1, r3
 800bb6e:	9904      	ldr	r1, [sp, #16]
 800bb70:	002e      	movs	r6, r5
 800bb72:	18cb      	adds	r3, r1, r3
 800bb74:	001f      	movs	r7, r3
 800bb76:	9902      	ldr	r1, [sp, #8]
 800bb78:	428e      	cmp	r6, r1
 800bb7a:	d311      	bcc.n	800bba0 <__mdiff+0x100>
 800bb7c:	9c02      	ldr	r4, [sp, #8]
 800bb7e:	1ee9      	subs	r1, r5, #3
 800bb80:	2000      	movs	r0, #0
 800bb82:	428c      	cmp	r4, r1
 800bb84:	d304      	bcc.n	800bb90 <__mdiff+0xf0>
 800bb86:	0021      	movs	r1, r4
 800bb88:	3103      	adds	r1, #3
 800bb8a:	1b49      	subs	r1, r1, r5
 800bb8c:	0889      	lsrs	r1, r1, #2
 800bb8e:	0088      	lsls	r0, r1, #2
 800bb90:	181b      	adds	r3, r3, r0
 800bb92:	3b04      	subs	r3, #4
 800bb94:	6819      	ldr	r1, [r3, #0]
 800bb96:	2900      	cmp	r1, #0
 800bb98:	d010      	beq.n	800bbbc <__mdiff+0x11c>
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	6113      	str	r3, [r2, #16]
 800bb9e:	e798      	b.n	800bad2 <__mdiff+0x32>
 800bba0:	4684      	mov	ip, r0
 800bba2:	ce02      	ldmia	r6!, {r1}
 800bba4:	b288      	uxth	r0, r1
 800bba6:	4460      	add	r0, ip
 800bba8:	1400      	asrs	r0, r0, #16
 800bbaa:	0c0c      	lsrs	r4, r1, #16
 800bbac:	1904      	adds	r4, r0, r4
 800bbae:	4461      	add	r1, ip
 800bbb0:	1420      	asrs	r0, r4, #16
 800bbb2:	b289      	uxth	r1, r1
 800bbb4:	0424      	lsls	r4, r4, #16
 800bbb6:	4321      	orrs	r1, r4
 800bbb8:	c702      	stmia	r7!, {r1}
 800bbba:	e7dc      	b.n	800bb76 <__mdiff+0xd6>
 800bbbc:	9900      	ldr	r1, [sp, #0]
 800bbbe:	3901      	subs	r1, #1
 800bbc0:	9100      	str	r1, [sp, #0]
 800bbc2:	e7e6      	b.n	800bb92 <__mdiff+0xf2>
 800bbc4:	0800c76c 	.word	0x0800c76c
 800bbc8:	0800c77d 	.word	0x0800c77d
 800bbcc:	00000237 	.word	0x00000237
 800bbd0:	00000245 	.word	0x00000245

0800bbd4 <__d2b>:
 800bbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	0016      	movs	r6, r2
 800bbda:	001f      	movs	r7, r3
 800bbdc:	f7ff fcb6 	bl	800b54c <_Balloc>
 800bbe0:	1e04      	subs	r4, r0, #0
 800bbe2:	d105      	bne.n	800bbf0 <__d2b+0x1c>
 800bbe4:	0022      	movs	r2, r4
 800bbe6:	4b25      	ldr	r3, [pc, #148]	@ (800bc7c <__d2b+0xa8>)
 800bbe8:	4825      	ldr	r0, [pc, #148]	@ (800bc80 <__d2b+0xac>)
 800bbea:	4926      	ldr	r1, [pc, #152]	@ (800bc84 <__d2b+0xb0>)
 800bbec:	f000 fb04 	bl	800c1f8 <__assert_func>
 800bbf0:	033b      	lsls	r3, r7, #12
 800bbf2:	007d      	lsls	r5, r7, #1
 800bbf4:	0b1b      	lsrs	r3, r3, #12
 800bbf6:	0d6d      	lsrs	r5, r5, #21
 800bbf8:	d002      	beq.n	800bc00 <__d2b+0x2c>
 800bbfa:	2280      	movs	r2, #128	@ 0x80
 800bbfc:	0352      	lsls	r2, r2, #13
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	2e00      	cmp	r6, #0
 800bc04:	d025      	beq.n	800bc52 <__d2b+0x7e>
 800bc06:	4668      	mov	r0, sp
 800bc08:	9600      	str	r6, [sp, #0]
 800bc0a:	f7ff fd6c 	bl	800b6e6 <__lo0bits>
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	9900      	ldr	r1, [sp, #0]
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d01b      	beq.n	800bc4e <__d2b+0x7a>
 800bc16:	2220      	movs	r2, #32
 800bc18:	001e      	movs	r6, r3
 800bc1a:	1a12      	subs	r2, r2, r0
 800bc1c:	4096      	lsls	r6, r2
 800bc1e:	0032      	movs	r2, r6
 800bc20:	40c3      	lsrs	r3, r0
 800bc22:	430a      	orrs	r2, r1
 800bc24:	6162      	str	r2, [r4, #20]
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	9e01      	ldr	r6, [sp, #4]
 800bc2a:	61a6      	str	r6, [r4, #24]
 800bc2c:	1e73      	subs	r3, r6, #1
 800bc2e:	419e      	sbcs	r6, r3
 800bc30:	3601      	adds	r6, #1
 800bc32:	6126      	str	r6, [r4, #16]
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	d014      	beq.n	800bc62 <__d2b+0x8e>
 800bc38:	2635      	movs	r6, #53	@ 0x35
 800bc3a:	4b13      	ldr	r3, [pc, #76]	@ (800bc88 <__d2b+0xb4>)
 800bc3c:	18ed      	adds	r5, r5, r3
 800bc3e:	9b08      	ldr	r3, [sp, #32]
 800bc40:	182d      	adds	r5, r5, r0
 800bc42:	601d      	str	r5, [r3, #0]
 800bc44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc46:	1a36      	subs	r6, r6, r0
 800bc48:	601e      	str	r6, [r3, #0]
 800bc4a:	0020      	movs	r0, r4
 800bc4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc4e:	6161      	str	r1, [r4, #20]
 800bc50:	e7ea      	b.n	800bc28 <__d2b+0x54>
 800bc52:	a801      	add	r0, sp, #4
 800bc54:	f7ff fd47 	bl	800b6e6 <__lo0bits>
 800bc58:	9b01      	ldr	r3, [sp, #4]
 800bc5a:	2601      	movs	r6, #1
 800bc5c:	6163      	str	r3, [r4, #20]
 800bc5e:	3020      	adds	r0, #32
 800bc60:	e7e7      	b.n	800bc32 <__d2b+0x5e>
 800bc62:	4b0a      	ldr	r3, [pc, #40]	@ (800bc8c <__d2b+0xb8>)
 800bc64:	18c0      	adds	r0, r0, r3
 800bc66:	9b08      	ldr	r3, [sp, #32]
 800bc68:	6018      	str	r0, [r3, #0]
 800bc6a:	4b09      	ldr	r3, [pc, #36]	@ (800bc90 <__d2b+0xbc>)
 800bc6c:	18f3      	adds	r3, r6, r3
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	18e3      	adds	r3, r4, r3
 800bc72:	6958      	ldr	r0, [r3, #20]
 800bc74:	f7ff fd16 	bl	800b6a4 <__hi0bits>
 800bc78:	0176      	lsls	r6, r6, #5
 800bc7a:	e7e3      	b.n	800bc44 <__d2b+0x70>
 800bc7c:	0800c76c 	.word	0x0800c76c
 800bc80:	0800c77d 	.word	0x0800c77d
 800bc84:	0000030f 	.word	0x0000030f
 800bc88:	fffffbcd 	.word	0xfffffbcd
 800bc8c:	fffffbce 	.word	0xfffffbce
 800bc90:	3fffffff 	.word	0x3fffffff

0800bc94 <__sfputc_r>:
 800bc94:	6893      	ldr	r3, [r2, #8]
 800bc96:	b510      	push	{r4, lr}
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	6093      	str	r3, [r2, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	da04      	bge.n	800bcaa <__sfputc_r+0x16>
 800bca0:	6994      	ldr	r4, [r2, #24]
 800bca2:	42a3      	cmp	r3, r4
 800bca4:	db07      	blt.n	800bcb6 <__sfputc_r+0x22>
 800bca6:	290a      	cmp	r1, #10
 800bca8:	d005      	beq.n	800bcb6 <__sfputc_r+0x22>
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	1c58      	adds	r0, r3, #1
 800bcae:	6010      	str	r0, [r2, #0]
 800bcb0:	7019      	strb	r1, [r3, #0]
 800bcb2:	0008      	movs	r0, r1
 800bcb4:	bd10      	pop	{r4, pc}
 800bcb6:	f000 f9e2 	bl	800c07e <__swbuf_r>
 800bcba:	0001      	movs	r1, r0
 800bcbc:	e7f9      	b.n	800bcb2 <__sfputc_r+0x1e>

0800bcbe <__sfputs_r>:
 800bcbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc0:	0006      	movs	r6, r0
 800bcc2:	000f      	movs	r7, r1
 800bcc4:	0014      	movs	r4, r2
 800bcc6:	18d5      	adds	r5, r2, r3
 800bcc8:	42ac      	cmp	r4, r5
 800bcca:	d101      	bne.n	800bcd0 <__sfputs_r+0x12>
 800bccc:	2000      	movs	r0, #0
 800bcce:	e007      	b.n	800bce0 <__sfputs_r+0x22>
 800bcd0:	7821      	ldrb	r1, [r4, #0]
 800bcd2:	003a      	movs	r2, r7
 800bcd4:	0030      	movs	r0, r6
 800bcd6:	f7ff ffdd 	bl	800bc94 <__sfputc_r>
 800bcda:	3401      	adds	r4, #1
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d1f3      	bne.n	800bcc8 <__sfputs_r+0xa>
 800bce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bce4 <_vfiprintf_r>:
 800bce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bce6:	b0a1      	sub	sp, #132	@ 0x84
 800bce8:	000f      	movs	r7, r1
 800bcea:	0015      	movs	r5, r2
 800bcec:	001e      	movs	r6, r3
 800bcee:	9003      	str	r0, [sp, #12]
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d004      	beq.n	800bcfe <_vfiprintf_r+0x1a>
 800bcf4:	6a03      	ldr	r3, [r0, #32]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <_vfiprintf_r+0x1a>
 800bcfa:	f7fe fb8d 	bl	800a418 <__sinit>
 800bcfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd00:	07db      	lsls	r3, r3, #31
 800bd02:	d405      	bmi.n	800bd10 <_vfiprintf_r+0x2c>
 800bd04:	89bb      	ldrh	r3, [r7, #12]
 800bd06:	059b      	lsls	r3, r3, #22
 800bd08:	d402      	bmi.n	800bd10 <_vfiprintf_r+0x2c>
 800bd0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bd0c:	f7fe fc89 	bl	800a622 <__retarget_lock_acquire_recursive>
 800bd10:	89bb      	ldrh	r3, [r7, #12]
 800bd12:	071b      	lsls	r3, r3, #28
 800bd14:	d502      	bpl.n	800bd1c <_vfiprintf_r+0x38>
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d113      	bne.n	800bd44 <_vfiprintf_r+0x60>
 800bd1c:	0039      	movs	r1, r7
 800bd1e:	9803      	ldr	r0, [sp, #12]
 800bd20:	f000 f9f0 	bl	800c104 <__swsetup_r>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d00d      	beq.n	800bd44 <_vfiprintf_r+0x60>
 800bd28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd2a:	07db      	lsls	r3, r3, #31
 800bd2c:	d503      	bpl.n	800bd36 <_vfiprintf_r+0x52>
 800bd2e:	2001      	movs	r0, #1
 800bd30:	4240      	negs	r0, r0
 800bd32:	b021      	add	sp, #132	@ 0x84
 800bd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd36:	89bb      	ldrh	r3, [r7, #12]
 800bd38:	059b      	lsls	r3, r3, #22
 800bd3a:	d4f8      	bmi.n	800bd2e <_vfiprintf_r+0x4a>
 800bd3c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bd3e:	f7fe fc71 	bl	800a624 <__retarget_lock_release_recursive>
 800bd42:	e7f4      	b.n	800bd2e <_vfiprintf_r+0x4a>
 800bd44:	2300      	movs	r3, #0
 800bd46:	ac08      	add	r4, sp, #32
 800bd48:	6163      	str	r3, [r4, #20]
 800bd4a:	3320      	adds	r3, #32
 800bd4c:	7663      	strb	r3, [r4, #25]
 800bd4e:	3310      	adds	r3, #16
 800bd50:	76a3      	strb	r3, [r4, #26]
 800bd52:	9607      	str	r6, [sp, #28]
 800bd54:	002e      	movs	r6, r5
 800bd56:	7833      	ldrb	r3, [r6, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <_vfiprintf_r+0x7c>
 800bd5c:	2b25      	cmp	r3, #37	@ 0x25
 800bd5e:	d148      	bne.n	800bdf2 <_vfiprintf_r+0x10e>
 800bd60:	1b73      	subs	r3, r6, r5
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	42ae      	cmp	r6, r5
 800bd66:	d00b      	beq.n	800bd80 <_vfiprintf_r+0x9c>
 800bd68:	002a      	movs	r2, r5
 800bd6a:	0039      	movs	r1, r7
 800bd6c:	9803      	ldr	r0, [sp, #12]
 800bd6e:	f7ff ffa6 	bl	800bcbe <__sfputs_r>
 800bd72:	3001      	adds	r0, #1
 800bd74:	d100      	bne.n	800bd78 <_vfiprintf_r+0x94>
 800bd76:	e0ae      	b.n	800bed6 <_vfiprintf_r+0x1f2>
 800bd78:	6963      	ldr	r3, [r4, #20]
 800bd7a:	9a05      	ldr	r2, [sp, #20]
 800bd7c:	189b      	adds	r3, r3, r2
 800bd7e:	6163      	str	r3, [r4, #20]
 800bd80:	7833      	ldrb	r3, [r6, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d100      	bne.n	800bd88 <_vfiprintf_r+0xa4>
 800bd86:	e0a6      	b.n	800bed6 <_vfiprintf_r+0x1f2>
 800bd88:	2201      	movs	r2, #1
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	4252      	negs	r2, r2
 800bd8e:	6062      	str	r2, [r4, #4]
 800bd90:	a904      	add	r1, sp, #16
 800bd92:	3254      	adds	r2, #84	@ 0x54
 800bd94:	1852      	adds	r2, r2, r1
 800bd96:	1c75      	adds	r5, r6, #1
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	60e3      	str	r3, [r4, #12]
 800bd9c:	60a3      	str	r3, [r4, #8]
 800bd9e:	7013      	strb	r3, [r2, #0]
 800bda0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bda2:	4b59      	ldr	r3, [pc, #356]	@ (800bf08 <_vfiprintf_r+0x224>)
 800bda4:	2205      	movs	r2, #5
 800bda6:	0018      	movs	r0, r3
 800bda8:	7829      	ldrb	r1, [r5, #0]
 800bdaa:	9305      	str	r3, [sp, #20]
 800bdac:	f7fe fc3b 	bl	800a626 <memchr>
 800bdb0:	1c6e      	adds	r6, r5, #1
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d11f      	bne.n	800bdf6 <_vfiprintf_r+0x112>
 800bdb6:	6822      	ldr	r2, [r4, #0]
 800bdb8:	06d3      	lsls	r3, r2, #27
 800bdba:	d504      	bpl.n	800bdc6 <_vfiprintf_r+0xe2>
 800bdbc:	2353      	movs	r3, #83	@ 0x53
 800bdbe:	a904      	add	r1, sp, #16
 800bdc0:	185b      	adds	r3, r3, r1
 800bdc2:	2120      	movs	r1, #32
 800bdc4:	7019      	strb	r1, [r3, #0]
 800bdc6:	0713      	lsls	r3, r2, #28
 800bdc8:	d504      	bpl.n	800bdd4 <_vfiprintf_r+0xf0>
 800bdca:	2353      	movs	r3, #83	@ 0x53
 800bdcc:	a904      	add	r1, sp, #16
 800bdce:	185b      	adds	r3, r3, r1
 800bdd0:	212b      	movs	r1, #43	@ 0x2b
 800bdd2:	7019      	strb	r1, [r3, #0]
 800bdd4:	782b      	ldrb	r3, [r5, #0]
 800bdd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdd8:	d016      	beq.n	800be08 <_vfiprintf_r+0x124>
 800bdda:	002e      	movs	r6, r5
 800bddc:	2100      	movs	r1, #0
 800bdde:	200a      	movs	r0, #10
 800bde0:	68e3      	ldr	r3, [r4, #12]
 800bde2:	7832      	ldrb	r2, [r6, #0]
 800bde4:	1c75      	adds	r5, r6, #1
 800bde6:	3a30      	subs	r2, #48	@ 0x30
 800bde8:	2a09      	cmp	r2, #9
 800bdea:	d950      	bls.n	800be8e <_vfiprintf_r+0x1aa>
 800bdec:	2900      	cmp	r1, #0
 800bdee:	d111      	bne.n	800be14 <_vfiprintf_r+0x130>
 800bdf0:	e017      	b.n	800be22 <_vfiprintf_r+0x13e>
 800bdf2:	3601      	adds	r6, #1
 800bdf4:	e7af      	b.n	800bd56 <_vfiprintf_r+0x72>
 800bdf6:	9b05      	ldr	r3, [sp, #20]
 800bdf8:	6822      	ldr	r2, [r4, #0]
 800bdfa:	1ac0      	subs	r0, r0, r3
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4083      	lsls	r3, r0
 800be00:	4313      	orrs	r3, r2
 800be02:	0035      	movs	r5, r6
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	e7cc      	b.n	800bda2 <_vfiprintf_r+0xbe>
 800be08:	9b07      	ldr	r3, [sp, #28]
 800be0a:	1d19      	adds	r1, r3, #4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	9107      	str	r1, [sp, #28]
 800be10:	2b00      	cmp	r3, #0
 800be12:	db01      	blt.n	800be18 <_vfiprintf_r+0x134>
 800be14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be16:	e004      	b.n	800be22 <_vfiprintf_r+0x13e>
 800be18:	425b      	negs	r3, r3
 800be1a:	60e3      	str	r3, [r4, #12]
 800be1c:	2302      	movs	r3, #2
 800be1e:	4313      	orrs	r3, r2
 800be20:	6023      	str	r3, [r4, #0]
 800be22:	7833      	ldrb	r3, [r6, #0]
 800be24:	2b2e      	cmp	r3, #46	@ 0x2e
 800be26:	d10c      	bne.n	800be42 <_vfiprintf_r+0x15e>
 800be28:	7873      	ldrb	r3, [r6, #1]
 800be2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be2c:	d134      	bne.n	800be98 <_vfiprintf_r+0x1b4>
 800be2e:	9b07      	ldr	r3, [sp, #28]
 800be30:	3602      	adds	r6, #2
 800be32:	1d1a      	adds	r2, r3, #4
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	9207      	str	r2, [sp, #28]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da01      	bge.n	800be40 <_vfiprintf_r+0x15c>
 800be3c:	2301      	movs	r3, #1
 800be3e:	425b      	negs	r3, r3
 800be40:	9309      	str	r3, [sp, #36]	@ 0x24
 800be42:	4d32      	ldr	r5, [pc, #200]	@ (800bf0c <_vfiprintf_r+0x228>)
 800be44:	2203      	movs	r2, #3
 800be46:	0028      	movs	r0, r5
 800be48:	7831      	ldrb	r1, [r6, #0]
 800be4a:	f7fe fbec 	bl	800a626 <memchr>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d006      	beq.n	800be60 <_vfiprintf_r+0x17c>
 800be52:	2340      	movs	r3, #64	@ 0x40
 800be54:	1b40      	subs	r0, r0, r5
 800be56:	4083      	lsls	r3, r0
 800be58:	6822      	ldr	r2, [r4, #0]
 800be5a:	3601      	adds	r6, #1
 800be5c:	4313      	orrs	r3, r2
 800be5e:	6023      	str	r3, [r4, #0]
 800be60:	7831      	ldrb	r1, [r6, #0]
 800be62:	2206      	movs	r2, #6
 800be64:	482a      	ldr	r0, [pc, #168]	@ (800bf10 <_vfiprintf_r+0x22c>)
 800be66:	1c75      	adds	r5, r6, #1
 800be68:	7621      	strb	r1, [r4, #24]
 800be6a:	f7fe fbdc 	bl	800a626 <memchr>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d040      	beq.n	800bef4 <_vfiprintf_r+0x210>
 800be72:	4b28      	ldr	r3, [pc, #160]	@ (800bf14 <_vfiprintf_r+0x230>)
 800be74:	2b00      	cmp	r3, #0
 800be76:	d122      	bne.n	800bebe <_vfiprintf_r+0x1da>
 800be78:	2207      	movs	r2, #7
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	3307      	adds	r3, #7
 800be7e:	4393      	bics	r3, r2
 800be80:	3308      	adds	r3, #8
 800be82:	9307      	str	r3, [sp, #28]
 800be84:	6963      	ldr	r3, [r4, #20]
 800be86:	9a04      	ldr	r2, [sp, #16]
 800be88:	189b      	adds	r3, r3, r2
 800be8a:	6163      	str	r3, [r4, #20]
 800be8c:	e762      	b.n	800bd54 <_vfiprintf_r+0x70>
 800be8e:	4343      	muls	r3, r0
 800be90:	002e      	movs	r6, r5
 800be92:	2101      	movs	r1, #1
 800be94:	189b      	adds	r3, r3, r2
 800be96:	e7a4      	b.n	800bde2 <_vfiprintf_r+0xfe>
 800be98:	2300      	movs	r3, #0
 800be9a:	200a      	movs	r0, #10
 800be9c:	0019      	movs	r1, r3
 800be9e:	3601      	adds	r6, #1
 800bea0:	6063      	str	r3, [r4, #4]
 800bea2:	7832      	ldrb	r2, [r6, #0]
 800bea4:	1c75      	adds	r5, r6, #1
 800bea6:	3a30      	subs	r2, #48	@ 0x30
 800bea8:	2a09      	cmp	r2, #9
 800beaa:	d903      	bls.n	800beb4 <_vfiprintf_r+0x1d0>
 800beac:	2b00      	cmp	r3, #0
 800beae:	d0c8      	beq.n	800be42 <_vfiprintf_r+0x15e>
 800beb0:	9109      	str	r1, [sp, #36]	@ 0x24
 800beb2:	e7c6      	b.n	800be42 <_vfiprintf_r+0x15e>
 800beb4:	4341      	muls	r1, r0
 800beb6:	002e      	movs	r6, r5
 800beb8:	2301      	movs	r3, #1
 800beba:	1889      	adds	r1, r1, r2
 800bebc:	e7f1      	b.n	800bea2 <_vfiprintf_r+0x1be>
 800bebe:	aa07      	add	r2, sp, #28
 800bec0:	9200      	str	r2, [sp, #0]
 800bec2:	0021      	movs	r1, r4
 800bec4:	003a      	movs	r2, r7
 800bec6:	4b14      	ldr	r3, [pc, #80]	@ (800bf18 <_vfiprintf_r+0x234>)
 800bec8:	9803      	ldr	r0, [sp, #12]
 800beca:	f7fd fe59 	bl	8009b80 <_printf_float>
 800bece:	9004      	str	r0, [sp, #16]
 800bed0:	9b04      	ldr	r3, [sp, #16]
 800bed2:	3301      	adds	r3, #1
 800bed4:	d1d6      	bne.n	800be84 <_vfiprintf_r+0x1a0>
 800bed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bed8:	07db      	lsls	r3, r3, #31
 800beda:	d405      	bmi.n	800bee8 <_vfiprintf_r+0x204>
 800bedc:	89bb      	ldrh	r3, [r7, #12]
 800bede:	059b      	lsls	r3, r3, #22
 800bee0:	d402      	bmi.n	800bee8 <_vfiprintf_r+0x204>
 800bee2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bee4:	f7fe fb9e 	bl	800a624 <__retarget_lock_release_recursive>
 800bee8:	89bb      	ldrh	r3, [r7, #12]
 800beea:	065b      	lsls	r3, r3, #25
 800beec:	d500      	bpl.n	800bef0 <_vfiprintf_r+0x20c>
 800beee:	e71e      	b.n	800bd2e <_vfiprintf_r+0x4a>
 800bef0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bef2:	e71e      	b.n	800bd32 <_vfiprintf_r+0x4e>
 800bef4:	aa07      	add	r2, sp, #28
 800bef6:	9200      	str	r2, [sp, #0]
 800bef8:	0021      	movs	r1, r4
 800befa:	003a      	movs	r2, r7
 800befc:	4b06      	ldr	r3, [pc, #24]	@ (800bf18 <_vfiprintf_r+0x234>)
 800befe:	9803      	ldr	r0, [sp, #12]
 800bf00:	f7fe f8ec 	bl	800a0dc <_printf_i>
 800bf04:	e7e3      	b.n	800bece <_vfiprintf_r+0x1ea>
 800bf06:	46c0      	nop			@ (mov r8, r8)
 800bf08:	0800c8d8 	.word	0x0800c8d8
 800bf0c:	0800c8de 	.word	0x0800c8de
 800bf10:	0800c8e2 	.word	0x0800c8e2
 800bf14:	08009b81 	.word	0x08009b81
 800bf18:	0800bcbf 	.word	0x0800bcbf

0800bf1c <__sflush_r>:
 800bf1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf1e:	220c      	movs	r2, #12
 800bf20:	5e8b      	ldrsh	r3, [r1, r2]
 800bf22:	0005      	movs	r5, r0
 800bf24:	000c      	movs	r4, r1
 800bf26:	071a      	lsls	r2, r3, #28
 800bf28:	d456      	bmi.n	800bfd8 <__sflush_r+0xbc>
 800bf2a:	684a      	ldr	r2, [r1, #4]
 800bf2c:	2a00      	cmp	r2, #0
 800bf2e:	dc02      	bgt.n	800bf36 <__sflush_r+0x1a>
 800bf30:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	dd4e      	ble.n	800bfd4 <__sflush_r+0xb8>
 800bf36:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800bf38:	2f00      	cmp	r7, #0
 800bf3a:	d04b      	beq.n	800bfd4 <__sflush_r+0xb8>
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2080      	movs	r0, #128	@ 0x80
 800bf40:	682e      	ldr	r6, [r5, #0]
 800bf42:	602a      	str	r2, [r5, #0]
 800bf44:	001a      	movs	r2, r3
 800bf46:	0140      	lsls	r0, r0, #5
 800bf48:	6a21      	ldr	r1, [r4, #32]
 800bf4a:	4002      	ands	r2, r0
 800bf4c:	4203      	tst	r3, r0
 800bf4e:	d033      	beq.n	800bfb8 <__sflush_r+0x9c>
 800bf50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	075b      	lsls	r3, r3, #29
 800bf56:	d506      	bpl.n	800bf66 <__sflush_r+0x4a>
 800bf58:	6863      	ldr	r3, [r4, #4]
 800bf5a:	1ad2      	subs	r2, r2, r3
 800bf5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <__sflush_r+0x4a>
 800bf62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf64:	1ad2      	subs	r2, r2, r3
 800bf66:	2300      	movs	r3, #0
 800bf68:	0028      	movs	r0, r5
 800bf6a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800bf6c:	6a21      	ldr	r1, [r4, #32]
 800bf6e:	47b8      	blx	r7
 800bf70:	89a2      	ldrh	r2, [r4, #12]
 800bf72:	1c43      	adds	r3, r0, #1
 800bf74:	d106      	bne.n	800bf84 <__sflush_r+0x68>
 800bf76:	6829      	ldr	r1, [r5, #0]
 800bf78:	291d      	cmp	r1, #29
 800bf7a:	d846      	bhi.n	800c00a <__sflush_r+0xee>
 800bf7c:	4b29      	ldr	r3, [pc, #164]	@ (800c024 <__sflush_r+0x108>)
 800bf7e:	410b      	asrs	r3, r1
 800bf80:	07db      	lsls	r3, r3, #31
 800bf82:	d442      	bmi.n	800c00a <__sflush_r+0xee>
 800bf84:	2300      	movs	r3, #0
 800bf86:	6063      	str	r3, [r4, #4]
 800bf88:	6923      	ldr	r3, [r4, #16]
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	04d2      	lsls	r2, r2, #19
 800bf8e:	d505      	bpl.n	800bf9c <__sflush_r+0x80>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <__sflush_r+0x7e>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d100      	bne.n	800bf9c <__sflush_r+0x80>
 800bf9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf9e:	602e      	str	r6, [r5, #0]
 800bfa0:	2900      	cmp	r1, #0
 800bfa2:	d017      	beq.n	800bfd4 <__sflush_r+0xb8>
 800bfa4:	0023      	movs	r3, r4
 800bfa6:	3344      	adds	r3, #68	@ 0x44
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	d002      	beq.n	800bfb2 <__sflush_r+0x96>
 800bfac:	0028      	movs	r0, r5
 800bfae:	f7ff f9c7 	bl	800b340 <_free_r>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfb6:	e00d      	b.n	800bfd4 <__sflush_r+0xb8>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	0028      	movs	r0, r5
 800bfbc:	47b8      	blx	r7
 800bfbe:	0002      	movs	r2, r0
 800bfc0:	1c43      	adds	r3, r0, #1
 800bfc2:	d1c6      	bne.n	800bf52 <__sflush_r+0x36>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0c3      	beq.n	800bf52 <__sflush_r+0x36>
 800bfca:	2b1d      	cmp	r3, #29
 800bfcc:	d001      	beq.n	800bfd2 <__sflush_r+0xb6>
 800bfce:	2b16      	cmp	r3, #22
 800bfd0:	d11a      	bne.n	800c008 <__sflush_r+0xec>
 800bfd2:	602e      	str	r6, [r5, #0]
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	e01e      	b.n	800c016 <__sflush_r+0xfa>
 800bfd8:	690e      	ldr	r6, [r1, #16]
 800bfda:	2e00      	cmp	r6, #0
 800bfdc:	d0fa      	beq.n	800bfd4 <__sflush_r+0xb8>
 800bfde:	680f      	ldr	r7, [r1, #0]
 800bfe0:	600e      	str	r6, [r1, #0]
 800bfe2:	1bba      	subs	r2, r7, r6
 800bfe4:	9201      	str	r2, [sp, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	079b      	lsls	r3, r3, #30
 800bfea:	d100      	bne.n	800bfee <__sflush_r+0xd2>
 800bfec:	694a      	ldr	r2, [r1, #20]
 800bfee:	60a2      	str	r2, [r4, #8]
 800bff0:	9b01      	ldr	r3, [sp, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	ddee      	ble.n	800bfd4 <__sflush_r+0xb8>
 800bff6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bff8:	0032      	movs	r2, r6
 800bffa:	001f      	movs	r7, r3
 800bffc:	0028      	movs	r0, r5
 800bffe:	9b01      	ldr	r3, [sp, #4]
 800c000:	6a21      	ldr	r1, [r4, #32]
 800c002:	47b8      	blx	r7
 800c004:	2800      	cmp	r0, #0
 800c006:	dc07      	bgt.n	800c018 <__sflush_r+0xfc>
 800c008:	89a2      	ldrh	r2, [r4, #12]
 800c00a:	2340      	movs	r3, #64	@ 0x40
 800c00c:	2001      	movs	r0, #1
 800c00e:	4313      	orrs	r3, r2
 800c010:	b21b      	sxth	r3, r3
 800c012:	81a3      	strh	r3, [r4, #12]
 800c014:	4240      	negs	r0, r0
 800c016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c018:	9b01      	ldr	r3, [sp, #4]
 800c01a:	1836      	adds	r6, r6, r0
 800c01c:	1a1b      	subs	r3, r3, r0
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	e7e6      	b.n	800bff0 <__sflush_r+0xd4>
 800c022:	46c0      	nop			@ (mov r8, r8)
 800c024:	dfbffffe 	.word	0xdfbffffe

0800c028 <_fflush_r>:
 800c028:	690b      	ldr	r3, [r1, #16]
 800c02a:	b570      	push	{r4, r5, r6, lr}
 800c02c:	0005      	movs	r5, r0
 800c02e:	000c      	movs	r4, r1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d102      	bne.n	800c03a <_fflush_r+0x12>
 800c034:	2500      	movs	r5, #0
 800c036:	0028      	movs	r0, r5
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d004      	beq.n	800c048 <_fflush_r+0x20>
 800c03e:	6a03      	ldr	r3, [r0, #32]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <_fflush_r+0x20>
 800c044:	f7fe f9e8 	bl	800a418 <__sinit>
 800c048:	220c      	movs	r2, #12
 800c04a:	5ea3      	ldrsh	r3, [r4, r2]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d0f1      	beq.n	800c034 <_fflush_r+0xc>
 800c050:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c052:	07d2      	lsls	r2, r2, #31
 800c054:	d404      	bmi.n	800c060 <_fflush_r+0x38>
 800c056:	059b      	lsls	r3, r3, #22
 800c058:	d402      	bmi.n	800c060 <_fflush_r+0x38>
 800c05a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c05c:	f7fe fae1 	bl	800a622 <__retarget_lock_acquire_recursive>
 800c060:	0028      	movs	r0, r5
 800c062:	0021      	movs	r1, r4
 800c064:	f7ff ff5a 	bl	800bf1c <__sflush_r>
 800c068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c06a:	0005      	movs	r5, r0
 800c06c:	07db      	lsls	r3, r3, #31
 800c06e:	d4e2      	bmi.n	800c036 <_fflush_r+0xe>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	059b      	lsls	r3, r3, #22
 800c074:	d4df      	bmi.n	800c036 <_fflush_r+0xe>
 800c076:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c078:	f7fe fad4 	bl	800a624 <__retarget_lock_release_recursive>
 800c07c:	e7db      	b.n	800c036 <_fflush_r+0xe>

0800c07e <__swbuf_r>:
 800c07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c080:	0006      	movs	r6, r0
 800c082:	000d      	movs	r5, r1
 800c084:	0014      	movs	r4, r2
 800c086:	2800      	cmp	r0, #0
 800c088:	d004      	beq.n	800c094 <__swbuf_r+0x16>
 800c08a:	6a03      	ldr	r3, [r0, #32]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <__swbuf_r+0x16>
 800c090:	f7fe f9c2 	bl	800a418 <__sinit>
 800c094:	69a3      	ldr	r3, [r4, #24]
 800c096:	60a3      	str	r3, [r4, #8]
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	071b      	lsls	r3, r3, #28
 800c09c:	d502      	bpl.n	800c0a4 <__swbuf_r+0x26>
 800c09e:	6923      	ldr	r3, [r4, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d109      	bne.n	800c0b8 <__swbuf_r+0x3a>
 800c0a4:	0021      	movs	r1, r4
 800c0a6:	0030      	movs	r0, r6
 800c0a8:	f000 f82c 	bl	800c104 <__swsetup_r>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d003      	beq.n	800c0b8 <__swbuf_r+0x3a>
 800c0b0:	2501      	movs	r5, #1
 800c0b2:	426d      	negs	r5, r5
 800c0b4:	0028      	movs	r0, r5
 800c0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	6820      	ldr	r0, [r4, #0]
 800c0bc:	b2ef      	uxtb	r7, r5
 800c0be:	1ac0      	subs	r0, r0, r3
 800c0c0:	6963      	ldr	r3, [r4, #20]
 800c0c2:	b2ed      	uxtb	r5, r5
 800c0c4:	4283      	cmp	r3, r0
 800c0c6:	dc05      	bgt.n	800c0d4 <__swbuf_r+0x56>
 800c0c8:	0021      	movs	r1, r4
 800c0ca:	0030      	movs	r0, r6
 800c0cc:	f7ff ffac 	bl	800c028 <_fflush_r>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d1ed      	bne.n	800c0b0 <__swbuf_r+0x32>
 800c0d4:	68a3      	ldr	r3, [r4, #8]
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	60a3      	str	r3, [r4, #8]
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	6022      	str	r2, [r4, #0]
 800c0e2:	701f      	strb	r7, [r3, #0]
 800c0e4:	6963      	ldr	r3, [r4, #20]
 800c0e6:	4283      	cmp	r3, r0
 800c0e8:	d004      	beq.n	800c0f4 <__swbuf_r+0x76>
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	07db      	lsls	r3, r3, #31
 800c0ee:	d5e1      	bpl.n	800c0b4 <__swbuf_r+0x36>
 800c0f0:	2d0a      	cmp	r5, #10
 800c0f2:	d1df      	bne.n	800c0b4 <__swbuf_r+0x36>
 800c0f4:	0021      	movs	r1, r4
 800c0f6:	0030      	movs	r0, r6
 800c0f8:	f7ff ff96 	bl	800c028 <_fflush_r>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d0d9      	beq.n	800c0b4 <__swbuf_r+0x36>
 800c100:	e7d6      	b.n	800c0b0 <__swbuf_r+0x32>
	...

0800c104 <__swsetup_r>:
 800c104:	4b2d      	ldr	r3, [pc, #180]	@ (800c1bc <__swsetup_r+0xb8>)
 800c106:	b570      	push	{r4, r5, r6, lr}
 800c108:	0005      	movs	r5, r0
 800c10a:	6818      	ldr	r0, [r3, #0]
 800c10c:	000c      	movs	r4, r1
 800c10e:	2800      	cmp	r0, #0
 800c110:	d004      	beq.n	800c11c <__swsetup_r+0x18>
 800c112:	6a03      	ldr	r3, [r0, #32]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <__swsetup_r+0x18>
 800c118:	f7fe f97e 	bl	800a418 <__sinit>
 800c11c:	230c      	movs	r3, #12
 800c11e:	5ee2      	ldrsh	r2, [r4, r3]
 800c120:	0713      	lsls	r3, r2, #28
 800c122:	d423      	bmi.n	800c16c <__swsetup_r+0x68>
 800c124:	06d3      	lsls	r3, r2, #27
 800c126:	d407      	bmi.n	800c138 <__swsetup_r+0x34>
 800c128:	2309      	movs	r3, #9
 800c12a:	602b      	str	r3, [r5, #0]
 800c12c:	2340      	movs	r3, #64	@ 0x40
 800c12e:	2001      	movs	r0, #1
 800c130:	4313      	orrs	r3, r2
 800c132:	81a3      	strh	r3, [r4, #12]
 800c134:	4240      	negs	r0, r0
 800c136:	e03a      	b.n	800c1ae <__swsetup_r+0xaa>
 800c138:	0752      	lsls	r2, r2, #29
 800c13a:	d513      	bpl.n	800c164 <__swsetup_r+0x60>
 800c13c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c13e:	2900      	cmp	r1, #0
 800c140:	d008      	beq.n	800c154 <__swsetup_r+0x50>
 800c142:	0023      	movs	r3, r4
 800c144:	3344      	adds	r3, #68	@ 0x44
 800c146:	4299      	cmp	r1, r3
 800c148:	d002      	beq.n	800c150 <__swsetup_r+0x4c>
 800c14a:	0028      	movs	r0, r5
 800c14c:	f7ff f8f8 	bl	800b340 <_free_r>
 800c150:	2300      	movs	r3, #0
 800c152:	6363      	str	r3, [r4, #52]	@ 0x34
 800c154:	2224      	movs	r2, #36	@ 0x24
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	4393      	bics	r3, r2
 800c15a:	81a3      	strh	r3, [r4, #12]
 800c15c:	2300      	movs	r3, #0
 800c15e:	6063      	str	r3, [r4, #4]
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	2308      	movs	r3, #8
 800c166:	89a2      	ldrh	r2, [r4, #12]
 800c168:	4313      	orrs	r3, r2
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	6923      	ldr	r3, [r4, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10b      	bne.n	800c18a <__swsetup_r+0x86>
 800c172:	21a0      	movs	r1, #160	@ 0xa0
 800c174:	2280      	movs	r2, #128	@ 0x80
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	0089      	lsls	r1, r1, #2
 800c17a:	0092      	lsls	r2, r2, #2
 800c17c:	400b      	ands	r3, r1
 800c17e:	4293      	cmp	r3, r2
 800c180:	d003      	beq.n	800c18a <__swsetup_r+0x86>
 800c182:	0021      	movs	r1, r4
 800c184:	0028      	movs	r0, r5
 800c186:	f000 f8db 	bl	800c340 <__smakebuf_r>
 800c18a:	230c      	movs	r3, #12
 800c18c:	5ee2      	ldrsh	r2, [r4, r3]
 800c18e:	2101      	movs	r1, #1
 800c190:	0013      	movs	r3, r2
 800c192:	400b      	ands	r3, r1
 800c194:	420a      	tst	r2, r1
 800c196:	d00b      	beq.n	800c1b0 <__swsetup_r+0xac>
 800c198:	2300      	movs	r3, #0
 800c19a:	60a3      	str	r3, [r4, #8]
 800c19c:	6963      	ldr	r3, [r4, #20]
 800c19e:	425b      	negs	r3, r3
 800c1a0:	61a3      	str	r3, [r4, #24]
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	4283      	cmp	r3, r0
 800c1a8:	d101      	bne.n	800c1ae <__swsetup_r+0xaa>
 800c1aa:	0613      	lsls	r3, r2, #24
 800c1ac:	d4be      	bmi.n	800c12c <__swsetup_r+0x28>
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	0791      	lsls	r1, r2, #30
 800c1b2:	d400      	bmi.n	800c1b6 <__swsetup_r+0xb2>
 800c1b4:	6963      	ldr	r3, [r4, #20]
 800c1b6:	60a3      	str	r3, [r4, #8]
 800c1b8:	e7f3      	b.n	800c1a2 <__swsetup_r+0x9e>
 800c1ba:	46c0      	nop			@ (mov r8, r8)
 800c1bc:	20000018 	.word	0x20000018

0800c1c0 <_sbrk_r>:
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	b570      	push	{r4, r5, r6, lr}
 800c1c4:	4d06      	ldr	r5, [pc, #24]	@ (800c1e0 <_sbrk_r+0x20>)
 800c1c6:	0004      	movs	r4, r0
 800c1c8:	0008      	movs	r0, r1
 800c1ca:	602b      	str	r3, [r5, #0]
 800c1cc:	f7f8 ff1e 	bl	800500c <_sbrk>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	d103      	bne.n	800c1dc <_sbrk_r+0x1c>
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d000      	beq.n	800c1dc <_sbrk_r+0x1c>
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
 800c1de:	46c0      	nop			@ (mov r8, r8)
 800c1e0:	20000584 	.word	0x20000584

0800c1e4 <memcpy>:
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d100      	bne.n	800c1ee <memcpy+0xa>
 800c1ec:	bd10      	pop	{r4, pc}
 800c1ee:	5ccc      	ldrb	r4, [r1, r3]
 800c1f0:	54c4      	strb	r4, [r0, r3]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	e7f8      	b.n	800c1e8 <memcpy+0x4>
	...

0800c1f8 <__assert_func>:
 800c1f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c1fa:	0014      	movs	r4, r2
 800c1fc:	001a      	movs	r2, r3
 800c1fe:	4b09      	ldr	r3, [pc, #36]	@ (800c224 <__assert_func+0x2c>)
 800c200:	0005      	movs	r5, r0
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	000e      	movs	r6, r1
 800c206:	68d8      	ldr	r0, [r3, #12]
 800c208:	4b07      	ldr	r3, [pc, #28]	@ (800c228 <__assert_func+0x30>)
 800c20a:	2c00      	cmp	r4, #0
 800c20c:	d101      	bne.n	800c212 <__assert_func+0x1a>
 800c20e:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <__assert_func+0x34>)
 800c210:	001c      	movs	r4, r3
 800c212:	4907      	ldr	r1, [pc, #28]	@ (800c230 <__assert_func+0x38>)
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	9402      	str	r4, [sp, #8]
 800c218:	002b      	movs	r3, r5
 800c21a:	9600      	str	r6, [sp, #0]
 800c21c:	f000 f856 	bl	800c2cc <fiprintf>
 800c220:	f000 f8f4 	bl	800c40c <abort>
 800c224:	20000018 	.word	0x20000018
 800c228:	0800c8f3 	.word	0x0800c8f3
 800c22c:	0800c92e 	.word	0x0800c92e
 800c230:	0800c900 	.word	0x0800c900

0800c234 <_calloc_r>:
 800c234:	b570      	push	{r4, r5, r6, lr}
 800c236:	0c0b      	lsrs	r3, r1, #16
 800c238:	0c15      	lsrs	r5, r2, #16
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d11e      	bne.n	800c27c <_calloc_r+0x48>
 800c23e:	2d00      	cmp	r5, #0
 800c240:	d10c      	bne.n	800c25c <_calloc_r+0x28>
 800c242:	b289      	uxth	r1, r1
 800c244:	b294      	uxth	r4, r2
 800c246:	434c      	muls	r4, r1
 800c248:	0021      	movs	r1, r4
 800c24a:	f7ff f8ef 	bl	800b42c <_malloc_r>
 800c24e:	1e05      	subs	r5, r0, #0
 800c250:	d01a      	beq.n	800c288 <_calloc_r+0x54>
 800c252:	0022      	movs	r2, r4
 800c254:	2100      	movs	r1, #0
 800c256:	f7fe f95f 	bl	800a518 <memset>
 800c25a:	e016      	b.n	800c28a <_calloc_r+0x56>
 800c25c:	1c2b      	adds	r3, r5, #0
 800c25e:	1c0c      	adds	r4, r1, #0
 800c260:	b289      	uxth	r1, r1
 800c262:	b292      	uxth	r2, r2
 800c264:	434a      	muls	r2, r1
 800c266:	b29b      	uxth	r3, r3
 800c268:	b2a1      	uxth	r1, r4
 800c26a:	4359      	muls	r1, r3
 800c26c:	0c14      	lsrs	r4, r2, #16
 800c26e:	190c      	adds	r4, r1, r4
 800c270:	0c23      	lsrs	r3, r4, #16
 800c272:	d107      	bne.n	800c284 <_calloc_r+0x50>
 800c274:	0424      	lsls	r4, r4, #16
 800c276:	b292      	uxth	r2, r2
 800c278:	4314      	orrs	r4, r2
 800c27a:	e7e5      	b.n	800c248 <_calloc_r+0x14>
 800c27c:	2d00      	cmp	r5, #0
 800c27e:	d101      	bne.n	800c284 <_calloc_r+0x50>
 800c280:	1c14      	adds	r4, r2, #0
 800c282:	e7ed      	b.n	800c260 <_calloc_r+0x2c>
 800c284:	230c      	movs	r3, #12
 800c286:	6003      	str	r3, [r0, #0]
 800c288:	2500      	movs	r5, #0
 800c28a:	0028      	movs	r0, r5
 800c28c:	bd70      	pop	{r4, r5, r6, pc}

0800c28e <__ascii_mbtowc>:
 800c28e:	b082      	sub	sp, #8
 800c290:	2900      	cmp	r1, #0
 800c292:	d100      	bne.n	800c296 <__ascii_mbtowc+0x8>
 800c294:	a901      	add	r1, sp, #4
 800c296:	1e10      	subs	r0, r2, #0
 800c298:	d006      	beq.n	800c2a8 <__ascii_mbtowc+0x1a>
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d006      	beq.n	800c2ac <__ascii_mbtowc+0x1e>
 800c29e:	7813      	ldrb	r3, [r2, #0]
 800c2a0:	600b      	str	r3, [r1, #0]
 800c2a2:	7810      	ldrb	r0, [r2, #0]
 800c2a4:	1e43      	subs	r3, r0, #1
 800c2a6:	4198      	sbcs	r0, r3
 800c2a8:	b002      	add	sp, #8
 800c2aa:	4770      	bx	lr
 800c2ac:	2002      	movs	r0, #2
 800c2ae:	4240      	negs	r0, r0
 800c2b0:	e7fa      	b.n	800c2a8 <__ascii_mbtowc+0x1a>

0800c2b2 <__ascii_wctomb>:
 800c2b2:	0003      	movs	r3, r0
 800c2b4:	1e08      	subs	r0, r1, #0
 800c2b6:	d005      	beq.n	800c2c4 <__ascii_wctomb+0x12>
 800c2b8:	2aff      	cmp	r2, #255	@ 0xff
 800c2ba:	d904      	bls.n	800c2c6 <__ascii_wctomb+0x14>
 800c2bc:	228a      	movs	r2, #138	@ 0x8a
 800c2be:	2001      	movs	r0, #1
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	4240      	negs	r0, r0
 800c2c4:	4770      	bx	lr
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	700a      	strb	r2, [r1, #0]
 800c2ca:	e7fb      	b.n	800c2c4 <__ascii_wctomb+0x12>

0800c2cc <fiprintf>:
 800c2cc:	b40e      	push	{r1, r2, r3}
 800c2ce:	b517      	push	{r0, r1, r2, r4, lr}
 800c2d0:	4c05      	ldr	r4, [pc, #20]	@ (800c2e8 <fiprintf+0x1c>)
 800c2d2:	ab05      	add	r3, sp, #20
 800c2d4:	cb04      	ldmia	r3!, {r2}
 800c2d6:	0001      	movs	r1, r0
 800c2d8:	6820      	ldr	r0, [r4, #0]
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	f7ff fd02 	bl	800bce4 <_vfiprintf_r>
 800c2e0:	bc1e      	pop	{r1, r2, r3, r4}
 800c2e2:	bc08      	pop	{r3}
 800c2e4:	b003      	add	sp, #12
 800c2e6:	4718      	bx	r3
 800c2e8:	20000018 	.word	0x20000018

0800c2ec <__swhatbuf_r>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	000e      	movs	r6, r1
 800c2f0:	001d      	movs	r5, r3
 800c2f2:	230e      	movs	r3, #14
 800c2f4:	5ec9      	ldrsh	r1, [r1, r3]
 800c2f6:	0014      	movs	r4, r2
 800c2f8:	b096      	sub	sp, #88	@ 0x58
 800c2fa:	2900      	cmp	r1, #0
 800c2fc:	da0c      	bge.n	800c318 <__swhatbuf_r+0x2c>
 800c2fe:	89b2      	ldrh	r2, [r6, #12]
 800c300:	2380      	movs	r3, #128	@ 0x80
 800c302:	0011      	movs	r1, r2
 800c304:	4019      	ands	r1, r3
 800c306:	421a      	tst	r2, r3
 800c308:	d114      	bne.n	800c334 <__swhatbuf_r+0x48>
 800c30a:	2380      	movs	r3, #128	@ 0x80
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	2000      	movs	r0, #0
 800c310:	6029      	str	r1, [r5, #0]
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	b016      	add	sp, #88	@ 0x58
 800c316:	bd70      	pop	{r4, r5, r6, pc}
 800c318:	466a      	mov	r2, sp
 800c31a:	f000 f853 	bl	800c3c4 <_fstat_r>
 800c31e:	2800      	cmp	r0, #0
 800c320:	dbed      	blt.n	800c2fe <__swhatbuf_r+0x12>
 800c322:	23f0      	movs	r3, #240	@ 0xf0
 800c324:	9901      	ldr	r1, [sp, #4]
 800c326:	021b      	lsls	r3, r3, #8
 800c328:	4019      	ands	r1, r3
 800c32a:	4b04      	ldr	r3, [pc, #16]	@ (800c33c <__swhatbuf_r+0x50>)
 800c32c:	18c9      	adds	r1, r1, r3
 800c32e:	424b      	negs	r3, r1
 800c330:	4159      	adcs	r1, r3
 800c332:	e7ea      	b.n	800c30a <__swhatbuf_r+0x1e>
 800c334:	2100      	movs	r1, #0
 800c336:	2340      	movs	r3, #64	@ 0x40
 800c338:	e7e9      	b.n	800c30e <__swhatbuf_r+0x22>
 800c33a:	46c0      	nop			@ (mov r8, r8)
 800c33c:	ffffe000 	.word	0xffffe000

0800c340 <__smakebuf_r>:
 800c340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c342:	2602      	movs	r6, #2
 800c344:	898b      	ldrh	r3, [r1, #12]
 800c346:	0005      	movs	r5, r0
 800c348:	000c      	movs	r4, r1
 800c34a:	b085      	sub	sp, #20
 800c34c:	4233      	tst	r3, r6
 800c34e:	d007      	beq.n	800c360 <__smakebuf_r+0x20>
 800c350:	0023      	movs	r3, r4
 800c352:	3347      	adds	r3, #71	@ 0x47
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	2301      	movs	r3, #1
 800c35a:	6163      	str	r3, [r4, #20]
 800c35c:	b005      	add	sp, #20
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c360:	ab03      	add	r3, sp, #12
 800c362:	aa02      	add	r2, sp, #8
 800c364:	f7ff ffc2 	bl	800c2ec <__swhatbuf_r>
 800c368:	9f02      	ldr	r7, [sp, #8]
 800c36a:	9001      	str	r0, [sp, #4]
 800c36c:	0039      	movs	r1, r7
 800c36e:	0028      	movs	r0, r5
 800c370:	f7ff f85c 	bl	800b42c <_malloc_r>
 800c374:	2800      	cmp	r0, #0
 800c376:	d108      	bne.n	800c38a <__smakebuf_r+0x4a>
 800c378:	220c      	movs	r2, #12
 800c37a:	5ea3      	ldrsh	r3, [r4, r2]
 800c37c:	059a      	lsls	r2, r3, #22
 800c37e:	d4ed      	bmi.n	800c35c <__smakebuf_r+0x1c>
 800c380:	2203      	movs	r2, #3
 800c382:	4393      	bics	r3, r2
 800c384:	431e      	orrs	r6, r3
 800c386:	81a6      	strh	r6, [r4, #12]
 800c388:	e7e2      	b.n	800c350 <__smakebuf_r+0x10>
 800c38a:	2380      	movs	r3, #128	@ 0x80
 800c38c:	89a2      	ldrh	r2, [r4, #12]
 800c38e:	6020      	str	r0, [r4, #0]
 800c390:	4313      	orrs	r3, r2
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	6120      	str	r0, [r4, #16]
 800c398:	6167      	str	r7, [r4, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00c      	beq.n	800c3b8 <__smakebuf_r+0x78>
 800c39e:	0028      	movs	r0, r5
 800c3a0:	230e      	movs	r3, #14
 800c3a2:	5ee1      	ldrsh	r1, [r4, r3]
 800c3a4:	f000 f820 	bl	800c3e8 <_isatty_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d005      	beq.n	800c3b8 <__smakebuf_r+0x78>
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	89a2      	ldrh	r2, [r4, #12]
 800c3b0:	439a      	bics	r2, r3
 800c3b2:	3b02      	subs	r3, #2
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	9a01      	ldr	r2, [sp, #4]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	e7cc      	b.n	800c35c <__smakebuf_r+0x1c>
	...

0800c3c4 <_fstat_r>:
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	b570      	push	{r4, r5, r6, lr}
 800c3c8:	4d06      	ldr	r5, [pc, #24]	@ (800c3e4 <_fstat_r+0x20>)
 800c3ca:	0004      	movs	r4, r0
 800c3cc:	0008      	movs	r0, r1
 800c3ce:	0011      	movs	r1, r2
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	f7f8 fdf9 	bl	8004fc8 <_fstat>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d103      	bne.n	800c3e2 <_fstat_r+0x1e>
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d000      	beq.n	800c3e2 <_fstat_r+0x1e>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	20000584 	.word	0x20000584

0800c3e8 <_isatty_r>:
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	b570      	push	{r4, r5, r6, lr}
 800c3ec:	4d06      	ldr	r5, [pc, #24]	@ (800c408 <_isatty_r+0x20>)
 800c3ee:	0004      	movs	r4, r0
 800c3f0:	0008      	movs	r0, r1
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	f7f8 fdf6 	bl	8004fe4 <_isatty>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d103      	bne.n	800c404 <_isatty_r+0x1c>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d000      	beq.n	800c404 <_isatty_r+0x1c>
 800c402:	6023      	str	r3, [r4, #0]
 800c404:	bd70      	pop	{r4, r5, r6, pc}
 800c406:	46c0      	nop			@ (mov r8, r8)
 800c408:	20000584 	.word	0x20000584

0800c40c <abort>:
 800c40c:	2006      	movs	r0, #6
 800c40e:	b510      	push	{r4, lr}
 800c410:	f000 f82c 	bl	800c46c <raise>
 800c414:	2001      	movs	r0, #1
 800c416:	f7f8 fd87 	bl	8004f28 <_exit>

0800c41a <_raise_r>:
 800c41a:	b570      	push	{r4, r5, r6, lr}
 800c41c:	0004      	movs	r4, r0
 800c41e:	000d      	movs	r5, r1
 800c420:	291f      	cmp	r1, #31
 800c422:	d904      	bls.n	800c42e <_raise_r+0x14>
 800c424:	2316      	movs	r3, #22
 800c426:	6003      	str	r3, [r0, #0]
 800c428:	2001      	movs	r0, #1
 800c42a:	4240      	negs	r0, r0
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
 800c42e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c430:	2b00      	cmp	r3, #0
 800c432:	d004      	beq.n	800c43e <_raise_r+0x24>
 800c434:	008a      	lsls	r2, r1, #2
 800c436:	189b      	adds	r3, r3, r2
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	d108      	bne.n	800c450 <_raise_r+0x36>
 800c43e:	0020      	movs	r0, r4
 800c440:	f000 f830 	bl	800c4a4 <_getpid_r>
 800c444:	002a      	movs	r2, r5
 800c446:	0001      	movs	r1, r0
 800c448:	0020      	movs	r0, r4
 800c44a:	f000 f819 	bl	800c480 <_kill_r>
 800c44e:	e7ed      	b.n	800c42c <_raise_r+0x12>
 800c450:	2a01      	cmp	r2, #1
 800c452:	d009      	beq.n	800c468 <_raise_r+0x4e>
 800c454:	1c51      	adds	r1, r2, #1
 800c456:	d103      	bne.n	800c460 <_raise_r+0x46>
 800c458:	2316      	movs	r3, #22
 800c45a:	6003      	str	r3, [r0, #0]
 800c45c:	2001      	movs	r0, #1
 800c45e:	e7e5      	b.n	800c42c <_raise_r+0x12>
 800c460:	2100      	movs	r1, #0
 800c462:	0028      	movs	r0, r5
 800c464:	6019      	str	r1, [r3, #0]
 800c466:	4790      	blx	r2
 800c468:	2000      	movs	r0, #0
 800c46a:	e7df      	b.n	800c42c <_raise_r+0x12>

0800c46c <raise>:
 800c46c:	b510      	push	{r4, lr}
 800c46e:	4b03      	ldr	r3, [pc, #12]	@ (800c47c <raise+0x10>)
 800c470:	0001      	movs	r1, r0
 800c472:	6818      	ldr	r0, [r3, #0]
 800c474:	f7ff ffd1 	bl	800c41a <_raise_r>
 800c478:	bd10      	pop	{r4, pc}
 800c47a:	46c0      	nop			@ (mov r8, r8)
 800c47c:	20000018 	.word	0x20000018

0800c480 <_kill_r>:
 800c480:	2300      	movs	r3, #0
 800c482:	b570      	push	{r4, r5, r6, lr}
 800c484:	4d06      	ldr	r5, [pc, #24]	@ (800c4a0 <_kill_r+0x20>)
 800c486:	0004      	movs	r4, r0
 800c488:	0008      	movs	r0, r1
 800c48a:	0011      	movs	r1, r2
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	f7f8 fd3b 	bl	8004f08 <_kill>
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	d103      	bne.n	800c49e <_kill_r+0x1e>
 800c496:	682b      	ldr	r3, [r5, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d000      	beq.n	800c49e <_kill_r+0x1e>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd70      	pop	{r4, r5, r6, pc}
 800c4a0:	20000584 	.word	0x20000584

0800c4a4 <_getpid_r>:
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	f7f8 fd29 	bl	8004efc <_getpid>
 800c4aa:	bd10      	pop	{r4, pc}

0800c4ac <_init>:
 800c4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ae:	46c0      	nop			@ (mov r8, r8)
 800c4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b2:	bc08      	pop	{r3}
 800c4b4:	469e      	mov	lr, r3
 800c4b6:	4770      	bx	lr

0800c4b8 <_fini>:
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	46c0      	nop			@ (mov r8, r8)
 800c4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4be:	bc08      	pop	{r3}
 800c4c0:	469e      	mov	lr, r3
 800c4c2:	4770      	bx	lr
